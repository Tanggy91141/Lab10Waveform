
Lab10Waveform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  0800af00  0800af00  0001af00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba18  0800ba18  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba18  0800ba18  0001ba18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba20  0800ba20  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba20  0800ba20  0001ba20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba24  0800ba24  0001ba24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ba28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001f8  0800bc1c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800bc1c  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb0e  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f25  00000000  00000000  0002ed32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00031b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017541  00000000  00000000  00032990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a94d  00000000  00000000  00049ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094254  00000000  00000000  0005481e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  000e8af0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aee4 	.word	0x0800aee4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800aee4 	.word	0x0800aee4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f001 fdd3 	bl	8002b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 ff7b 	bl	8001e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f001 f925 	bl	80021f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000faa:	f001 f903 	bl	80021b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fae:	f001 f8d7 	bl	8002160 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fb2:	f000 ffdb 	bl	8001f6c <MX_ADC1_Init>
  MX_SPI3_Init();
 8000fb6:	f001 f82b 	bl	8002010 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000fba:	f001 f861 	bl	8002080 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000fbe:	f001 f8ab 	bl	8002118 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000fc2:	48af      	ldr	r0, [pc, #700]	; (8001280 <main+0x2e8>)
 8000fc4:	f004 f853 	bl	800506e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000fc8:	48ae      	ldr	r0, [pc, #696]	; (8001284 <main+0x2ec>)
 8000fca:	f004 f874 	bl	80050b6 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	49ad      	ldr	r1, [pc, #692]	; (8001288 <main+0x2f0>)
 8000fd2:	48ae      	ldr	r0, [pc, #696]	; (800128c <main+0x2f4>)
 8000fd4:	f001 fe6e 	bl	8002cb4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fde:	48ac      	ldr	r0, [pc, #688]	; (8001290 <main+0x2f8>)
 8000fe0:	f003 f846 	bl	8004070 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	49ab      	ldr	r1, [pc, #684]	; (8001294 <main+0x2fc>)
 8000fe8:	48ab      	ldr	r0, [pc, #684]	; (8001298 <main+0x300>)
 8000fea:	f004 fbad 	bl	8005748 <HAL_UART_Receive_IT>

		inputchar = UARTRecieveIT();		//Focus on this character
 8000fee:	f001 f9f7 	bl	80023e0 <UARTRecieveIT>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4ba9      	ldr	r3, [pc, #676]	; (800129c <main+0x304>)
 8000ff8:	801a      	strh	r2, [r3, #0]
		if(inputchar!=-1)
 8000ffa:	4ba8      	ldr	r3, [pc, #672]	; (800129c <main+0x304>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d012      	beq.n	800102c <main+0x94>
		{
			sprintf(TxDataBuffer, "\r\nYou press:[%c]\r\n\r\n", inputchar);
 8001006:	4ba5      	ldr	r3, [pc, #660]	; (800129c <main+0x304>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	461a      	mov	r2, r3
 800100e:	49a4      	ldr	r1, [pc, #656]	; (80012a0 <main+0x308>)
 8001010:	48a4      	ldr	r0, [pc, #656]	; (80012a4 <main+0x30c>)
 8001012:	f006 f86d 	bl	80070f0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001016:	48a3      	ldr	r0, [pc, #652]	; (80012a4 <main+0x30c>)
 8001018:	f7ff f8e2 	bl	80001e0 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	b29a      	uxth	r2, r3
 8001020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001024:	499f      	ldr	r1, [pc, #636]	; (80012a4 <main+0x30c>)
 8001026:	489c      	ldr	r0, [pc, #624]	; (8001298 <main+0x300>)
 8001028:	f004 faf5 	bl	8005616 <HAL_UART_Transmit>
		}

		static uint64_t timestamp = 0;
		if (micros() - timestamp >= 1000)
 800102c:	f001 f9be 	bl	80023ac <micros>
 8001030:	460a      	mov	r2, r1
 8001032:	4601      	mov	r1, r0
 8001034:	4b9c      	ldr	r3, [pc, #624]	; (80012a8 <main+0x310>)
 8001036:	e9d3 8900 	ldrd	r8, r9, [r3]
 800103a:	460b      	mov	r3, r1
 800103c:	4614      	mov	r4, r2
 800103e:	ebb3 0308 	subs.w	r3, r3, r8
 8001042:	eb64 0409 	sbc.w	r4, r4, r9
 8001046:	f240 31e7 	movw	r1, #999	; 0x3e7
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	42a2      	cmp	r2, r4
 8001050:	bf08      	it	eq
 8001052:	4299      	cmpeq	r1, r3
 8001054:	f080 82ae 	bcs.w	80015b4 <main+0x61c>
		{
			timestamp = micros();
 8001058:	f001 f9a8 	bl	80023ac <micros>
 800105c:	4603      	mov	r3, r0
 800105e:	460c      	mov	r4, r1
 8001060:	4a91      	ldr	r2, [pc, #580]	; (80012a8 <main+0x310>)
 8001062:	e9c2 3400 	strd	r3, r4, [r2]
			Time = Time + 0.01;
 8001066:	4b91      	ldr	r3, [pc, #580]	; (80012ac <main+0x314>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_f2d>
 8001070:	a37f      	add	r3, pc, #508	; (adr r3, 8001270 <main+0x2d8>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff f911 	bl	800029c <__adddf3>
 800107a:	4603      	mov	r3, r0
 800107c:	460c      	mov	r4, r1
 800107e:	4618      	mov	r0, r3
 8001080:	4621      	mov	r1, r4
 8001082:	f7ff fdb9 	bl	8000bf8 <__aeabi_d2f>
 8001086:	4602      	mov	r2, r0
 8001088:	4b88      	ldr	r3, [pc, #544]	; (80012ac <main+0x314>)
 800108a:	601a      	str	r2, [r3, #0]

			if (Mode == 1)
 800108c:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <main+0x318>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	f040 8119 	bne.w	80012c8 <main+0x330>
			{
				if ((Slope == 1) && (Time <= (1/Freq)))
 8001096:	4b87      	ldr	r3, [pc, #540]	; (80012b4 <main+0x31c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d16f      	bne.n	800117e <main+0x1e6>
 800109e:	4b86      	ldr	r3, [pc, #536]	; (80012b8 <main+0x320>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010ac:	4b7f      	ldr	r3, [pc, #508]	; (80012ac <main+0x314>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	db60      	blt.n	800117e <main+0x1e6>
				{
					dataOut = (((H_Volt*(4096.0/3.3))-( L_Volt*(4096.0/3.3)))/(1/Freq))*Time + (L_Volt *(4096.0/3.3));
 80010bc:	4b7f      	ldr	r3, [pc, #508]	; (80012bc <main+0x324>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa49 	bl	8000558 <__aeabi_f2d>
 80010c6:	a36c      	add	r3, pc, #432	; (adr r3, 8001278 <main+0x2e0>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fa9c 	bl	8000608 <__aeabi_dmul>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4625      	mov	r5, r4
 80010d6:	461c      	mov	r4, r3
 80010d8:	4b79      	ldr	r3, [pc, #484]	; (80012c0 <main+0x328>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa3b 	bl	8000558 <__aeabi_f2d>
 80010e2:	a365      	add	r3, pc, #404	; (adr r3, 8001278 <main+0x2e0>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fa8e 	bl	8000608 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4620      	mov	r0, r4
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff f8d0 	bl	8000298 <__aeabi_dsub>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	4625      	mov	r5, r4
 80010fe:	461c      	mov	r4, r3
 8001100:	4b6d      	ldr	r3, [pc, #436]	; (80012b8 <main+0x320>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800110a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800110e:	ee16 0a90 	vmov	r0, s13
 8001112:	f7ff fa21 	bl	8000558 <__aeabi_f2d>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4620      	mov	r0, r4
 800111c:	4629      	mov	r1, r5
 800111e:	f7ff fb9d 	bl	800085c <__aeabi_ddiv>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	4625      	mov	r5, r4
 8001128:	461c      	mov	r4, r3
 800112a:	4b60      	ldr	r3, [pc, #384]	; (80012ac <main+0x314>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa12 	bl	8000558 <__aeabi_f2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4620      	mov	r0, r4
 800113a:	4629      	mov	r1, r5
 800113c:	f7ff fa64 	bl	8000608 <__aeabi_dmul>
 8001140:	4603      	mov	r3, r0
 8001142:	460c      	mov	r4, r1
 8001144:	4625      	mov	r5, r4
 8001146:	461c      	mov	r4, r3
 8001148:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <main+0x328>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa03 	bl	8000558 <__aeabi_f2d>
 8001152:	a349      	add	r3, pc, #292	; (adr r3, 8001278 <main+0x2e0>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fa56 	bl	8000608 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff f89a 	bl	800029c <__adddf3>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	4618      	mov	r0, r3
 800116e:	4621      	mov	r1, r4
 8001170:	f7ff fd22 	bl	8000bb8 <__aeabi_d2uiz>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b52      	ldr	r3, [pc, #328]	; (80012c4 <main+0x32c>)
 800117a:	801a      	strh	r2, [r3, #0]
 800117c:	e204      	b.n	8001588 <main+0x5f0>
				}

				else if ((Slope == 0) && (Time <= (1/Freq)))
 800117e:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <main+0x31c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d16f      	bne.n	8001266 <main+0x2ce>
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <main+0x320>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001194:	4b45      	ldr	r3, [pc, #276]	; (80012ac <main+0x314>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	db60      	blt.n	8001266 <main+0x2ce>
				{
					dataOut = (((L_Volt*(4096.0/3.3))-( H_Volt*(4096.0/3.3)))/(1/Freq))*Time + (H_Volt *(4096.0/3.3));
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <main+0x328>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9d5 	bl	8000558 <__aeabi_f2d>
 80011ae:	a332      	add	r3, pc, #200	; (adr r3, 8001278 <main+0x2e0>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa28 	bl	8000608 <__aeabi_dmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	4625      	mov	r5, r4
 80011be:	461c      	mov	r4, r3
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <main+0x324>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9c7 	bl	8000558 <__aeabi_f2d>
 80011ca:	a32b      	add	r3, pc, #172	; (adr r3, 8001278 <main+0x2e0>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fa1a 	bl	8000608 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff f85c 	bl	8000298 <__aeabi_dsub>
 80011e0:	4603      	mov	r3, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4625      	mov	r5, r4
 80011e6:	461c      	mov	r4, r3
 80011e8:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <main+0x320>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011f6:	ee16 0a90 	vmov	r0, s13
 80011fa:	f7ff f9ad 	bl	8000558 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4620      	mov	r0, r4
 8001204:	4629      	mov	r1, r5
 8001206:	f7ff fb29 	bl	800085c <__aeabi_ddiv>
 800120a:	4603      	mov	r3, r0
 800120c:	460c      	mov	r4, r1
 800120e:	4625      	mov	r5, r4
 8001210:	461c      	mov	r4, r3
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <main+0x314>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f99e 	bl	8000558 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f7ff f9f0 	bl	8000608 <__aeabi_dmul>
 8001228:	4603      	mov	r3, r0
 800122a:	460c      	mov	r4, r1
 800122c:	4625      	mov	r5, r4
 800122e:	461c      	mov	r4, r3
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <main+0x324>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f98f 	bl	8000558 <__aeabi_f2d>
 800123a:	a30f      	add	r3, pc, #60	; (adr r3, 8001278 <main+0x2e0>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f9e2 	bl	8000608 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff f826 	bl	800029c <__adddf3>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4618      	mov	r0, r3
 8001256:	4621      	mov	r1, r4
 8001258:	f7ff fcae 	bl	8000bb8 <__aeabi_d2uiz>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <main+0x32c>)
 8001262:	801a      	strh	r2, [r3, #0]
 8001264:	e190      	b.n	8001588 <main+0x5f0>
				}

				else
				{
					Time = 0.0;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <main+0x314>)
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e18b      	b.n	8001588 <main+0x5f0>
 8001270:	47ae147b 	.word	0x47ae147b
 8001274:	3f847ae1 	.word	0x3f847ae1
 8001278:	364d9365 	.word	0x364d9365
 800127c:	409364d9 	.word	0x409364d9
 8001280:	20000338 	.word	0x20000338
 8001284:	20000418 	.word	0x20000418
 8001288:	20000214 	.word	0x20000214
 800128c:	200003d0 	.word	0x200003d0
 8001290:	40020000 	.word	0x40020000
 8001294:	20000260 	.word	0x20000260
 8001298:	200004b8 	.word	0x200004b8
 800129c:	2000023c 	.word	0x2000023c
 80012a0:	0800af00 	.word	0x0800af00
 80012a4:	20000240 	.word	0x20000240
 80012a8:	20000320 	.word	0x20000320
 80012ac:	20000224 	.word	0x20000224
 80012b0:	20000014 	.word	0x20000014
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20000008 	.word	0x20000008
 80012c0:	2000022c 	.word	0x2000022c
 80012c4:	20000220 	.word	0x20000220
				}
			}

			else if (Mode == 2)
 80012c8:	4ba1      	ldr	r3, [pc, #644]	; (8001550 <main+0x5b8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	f040 80bf 	bne.w	8001450 <main+0x4b8>
			{
				rad = rad + 0.01;
 80012d2:	4ba0      	ldr	r3, [pc, #640]	; (8001554 <main+0x5bc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f93e 	bl	8000558 <__aeabi_f2d>
 80012dc:	a396      	add	r3, pc, #600	; (adr r3, 8001538 <main+0x5a0>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7fe ffdb 	bl	800029c <__adddf3>
 80012e6:	4603      	mov	r3, r0
 80012e8:	460c      	mov	r4, r1
 80012ea:	4618      	mov	r0, r3
 80012ec:	4621      	mov	r1, r4
 80012ee:	f7ff fc83 	bl	8000bf8 <__aeabi_d2f>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b97      	ldr	r3, [pc, #604]	; (8001554 <main+0x5bc>)
 80012f6:	601a      	str	r2, [r3, #0]
				amp =((H_Volt*(4096.0/3.3))-(L_Volt*(4096.0/3.3)))/2;
 80012f8:	4b97      	ldr	r3, [pc, #604]	; (8001558 <main+0x5c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f92b 	bl	8000558 <__aeabi_f2d>
 8001302:	a38f      	add	r3, pc, #572	; (adr r3, 8001540 <main+0x5a8>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f97e 	bl	8000608 <__aeabi_dmul>
 800130c:	4603      	mov	r3, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4625      	mov	r5, r4
 8001312:	461c      	mov	r4, r3
 8001314:	4b91      	ldr	r3, [pc, #580]	; (800155c <main+0x5c4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f91d 	bl	8000558 <__aeabi_f2d>
 800131e:	a388      	add	r3, pc, #544	; (adr r3, 8001540 <main+0x5a8>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f970 	bl	8000608 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7fe ffb2 	bl	8000298 <__aeabi_dsub>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001344:	f7ff fa8a 	bl	800085c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc52 	bl	8000bf8 <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	4b82      	ldr	r3, [pc, #520]	; (8001560 <main+0x5c8>)
 8001358:	601a      	str	r2, [r3, #0]
				offset =((H_Volt*(4096.0/3.3))+(L_Volt*(4096.0/3.3)))/2;
 800135a:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <main+0x5c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8fa 	bl	8000558 <__aeabi_f2d>
 8001364:	a376      	add	r3, pc, #472	; (adr r3, 8001540 <main+0x5a8>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff f94d 	bl	8000608 <__aeabi_dmul>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	4625      	mov	r5, r4
 8001374:	461c      	mov	r4, r3
 8001376:	4b79      	ldr	r3, [pc, #484]	; (800155c <main+0x5c4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8ec 	bl	8000558 <__aeabi_f2d>
 8001380:	a36f      	add	r3, pc, #444	; (adr r3, 8001540 <main+0x5a8>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f93f 	bl	8000608 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4620      	mov	r0, r4
 8001390:	4629      	mov	r1, r5
 8001392:	f7fe ff83 	bl	800029c <__adddf3>
 8001396:	4603      	mov	r3, r0
 8001398:	460c      	mov	r4, r1
 800139a:	4618      	mov	r0, r3
 800139c:	4621      	mov	r1, r4
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a6:	f7ff fa59 	bl	800085c <__aeabi_ddiv>
 80013aa:	4603      	mov	r3, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	4618      	mov	r0, r3
 80013b0:	4621      	mov	r1, r4
 80013b2:	f7ff fc21 	bl	8000bf8 <__aeabi_d2f>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <main+0x5cc>)
 80013ba:	601a      	str	r2, [r3, #0]
				dataOut = (amp)*sin(2*M_PI*Freq*rad)+( offset);
 80013bc:	4b68      	ldr	r3, [pc, #416]	; (8001560 <main+0x5c8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8c9 	bl	8000558 <__aeabi_f2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	4b67      	ldr	r3, [pc, #412]	; (8001568 <main+0x5d0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8c2 	bl	8000558 <__aeabi_f2d>
 80013d4:	a35c      	add	r3, pc, #368	; (adr r3, 8001548 <main+0x5b0>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f915 	bl	8000608 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4690      	mov	r8, r2
 80013e4:	4699      	mov	r9, r3
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <main+0x5bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8b4 	bl	8000558 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4640      	mov	r0, r8
 80013f6:	4649      	mov	r1, r9
 80013f8:	f7ff f906 	bl	8000608 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	ec43 2b17 	vmov	d7, r2, r3
 8001404:	eeb0 0a47 	vmov.f32	s0, s14
 8001408:	eef0 0a67 	vmov.f32	s1, s15
 800140c:	f008 fd58 	bl	8009ec0 <sin>
 8001410:	ec53 2b10 	vmov	r2, r3, d0
 8001414:	4620      	mov	r0, r4
 8001416:	4629      	mov	r1, r5
 8001418:	f7ff f8f6 	bl	8000608 <__aeabi_dmul>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	4625      	mov	r5, r4
 8001422:	461c      	mov	r4, r3
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <main+0x5cc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f895 	bl	8000558 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7fe ff31 	bl	800029c <__adddf3>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	f7ff fbb9 	bl	8000bb8 <__aeabi_d2uiz>
 8001446:	4603      	mov	r3, r0
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b48      	ldr	r3, [pc, #288]	; (800156c <main+0x5d4>)
 800144c:	801a      	strh	r2, [r3, #0]
 800144e:	e09b      	b.n	8001588 <main+0x5f0>
			}

			else if (Mode == 3)
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <main+0x5b8>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b03      	cmp	r3, #3
 8001456:	f040 8097 	bne.w	8001588 <main+0x5f0>
			{
				Period_H = duty/(Freq*100.0);
 800145a:	4b45      	ldr	r3, [pc, #276]	; (8001570 <main+0x5d8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f868 	bl	8000534 <__aeabi_i2d>
 8001464:	4604      	mov	r4, r0
 8001466:	460d      	mov	r5, r1
 8001468:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <main+0x5d0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f873 	bl	8000558 <__aeabi_f2d>
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <main+0x5dc>)
 8001478:	f7ff f8c6 	bl	8000608 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4620      	mov	r0, r4
 8001482:	4629      	mov	r1, r5
 8001484:	f7ff f9ea 	bl	800085c <__aeabi_ddiv>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	f7ff fbb2 	bl	8000bf8 <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <main+0x5e0>)
 8001498:	601a      	str	r2, [r3, #0]
				if(Time <= Period_H)
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <main+0x5e4>)
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <main+0x5e0>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	d814      	bhi.n	80014da <main+0x542>
				{
					dataOut = H_Volt*(4096.0/3.3);
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <main+0x5c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f84f 	bl	8000558 <__aeabi_f2d>
 80014ba:	a321      	add	r3, pc, #132	; (adr r3, 8001540 <main+0x5a8>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8a2 	bl	8000608 <__aeabi_dmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4618      	mov	r0, r3
 80014ca:	4621      	mov	r1, r4
 80014cc:	f7ff fb74 	bl	8000bb8 <__aeabi_d2uiz>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <main+0x5d4>)
 80014d6:	801a      	strh	r2, [r3, #0]
 80014d8:	e056      	b.n	8001588 <main+0x5f0>
				}
				else if ((Time > Period_H) && (Time <= (1/Freq)))
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <main+0x5e4>)
 80014dc:	ed93 7a00 	vldr	s14, [r3]
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <main+0x5e0>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	dd47      	ble.n	8001580 <main+0x5e8>
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <main+0x5d0>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <main+0x5e4>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	db38      	blt.n	8001580 <main+0x5e8>
				{
					dataOut = L_Volt*(4096.0/3.3);
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <main+0x5c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f820 	bl	8000558 <__aeabi_f2d>
 8001518:	a309      	add	r3, pc, #36	; (adr r3, 8001540 <main+0x5a8>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f873 	bl	8000608 <__aeabi_dmul>
 8001522:	4603      	mov	r3, r0
 8001524:	460c      	mov	r4, r1
 8001526:	4618      	mov	r0, r3
 8001528:	4621      	mov	r1, r4
 800152a:	f7ff fb45 	bl	8000bb8 <__aeabi_d2uiz>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <main+0x5d4>)
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	e027      	b.n	8001588 <main+0x5f0>
 8001538:	47ae147b 	.word	0x47ae147b
 800153c:	3f847ae1 	.word	0x3f847ae1
 8001540:	364d9365 	.word	0x364d9365
 8001544:	409364d9 	.word	0x409364d9
 8001548:	54442d18 	.word	0x54442d18
 800154c:	401921fb 	.word	0x401921fb
 8001550:	20000014 	.word	0x20000014
 8001554:	20000234 	.word	0x20000234
 8001558:	20000008 	.word	0x20000008
 800155c:	2000022c 	.word	0x2000022c
 8001560:	20000230 	.word	0x20000230
 8001564:	20000238 	.word	0x20000238
 8001568:	20000004 	.word	0x20000004
 800156c:	20000220 	.word	0x20000220
 8001570:	20000010 	.word	0x20000010
 8001574:	40590000 	.word	0x40590000
 8001578:	20000228 	.word	0x20000228
 800157c:	20000224 	.word	0x20000224
				}
				else
				{
					Time = 0.0;
 8001580:	4bbb      	ldr	r3, [pc, #748]	; (8001870 <main+0x8d8>)
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
				}
			}


			if (hspi3.State == HAL_SPI_STATE_READY
 8001588:	4bba      	ldr	r3, [pc, #744]	; (8001874 <main+0x8dc>)
 800158a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10f      	bne.n	80015b4 <main+0x61c>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001598:	48b7      	ldr	r0, [pc, #732]	; (8001878 <main+0x8e0>)
 800159a:	f002 fd51 	bl	8004040 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d107      	bne.n	80015b4 <main+0x61c>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 80015a4:	4bb5      	ldr	r3, [pc, #724]	; (800187c <main+0x8e4>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4bb5      	ldr	r3, [pc, #724]	; (8001880 <main+0x8e8>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f000 fec0 	bl	8002334 <MCP4922SetOutput>




		///////////////////////////State
		switch (state)
 80015b4:	4bb3      	ldr	r3, [pc, #716]	; (8001884 <main+0x8ec>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3b0a      	subs	r3, #10
 80015ba:	2b32      	cmp	r3, #50	; 0x32
 80015bc:	f63f ad12 	bhi.w	8000fe4 <main+0x4c>
 80015c0:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <main+0x630>)
 80015c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c6:	bf00      	nop
 80015c8:	08001695 	.word	0x08001695
 80015cc:	08000fe5 	.word	0x08000fe5
 80015d0:	08000fe5 	.word	0x08000fe5
 80015d4:	08000fe5 	.word	0x08000fe5
 80015d8:	08000fe5 	.word	0x08000fe5
 80015dc:	08000fe5 	.word	0x08000fe5
 80015e0:	08000fe5 	.word	0x08000fe5
 80015e4:	08000fe5 	.word	0x08000fe5
 80015e8:	08000fe5 	.word	0x08000fe5
 80015ec:	08000fe5 	.word	0x08000fe5
 80015f0:	080016b3 	.word	0x080016b3
 80015f4:	08000fe5 	.word	0x08000fe5
 80015f8:	08000fe5 	.word	0x08000fe5
 80015fc:	08000fe5 	.word	0x08000fe5
 8001600:	08000fe5 	.word	0x08000fe5
 8001604:	08000fe5 	.word	0x08000fe5
 8001608:	08000fe5 	.word	0x08000fe5
 800160c:	08000fe5 	.word	0x08000fe5
 8001610:	08000fe5 	.word	0x08000fe5
 8001614:	08000fe5 	.word	0x08000fe5
 8001618:	08001949 	.word	0x08001949
 800161c:	08000fe5 	.word	0x08000fe5
 8001620:	08000fe5 	.word	0x08000fe5
 8001624:	08000fe5 	.word	0x08000fe5
 8001628:	08000fe5 	.word	0x08000fe5
 800162c:	08000fe5 	.word	0x08000fe5
 8001630:	08000fe5 	.word	0x08000fe5
 8001634:	08000fe5 	.word	0x08000fe5
 8001638:	08000fe5 	.word	0x08000fe5
 800163c:	08000fe5 	.word	0x08000fe5
 8001640:	08001963 	.word	0x08001963
 8001644:	08000fe5 	.word	0x08000fe5
 8001648:	08000fe5 	.word	0x08000fe5
 800164c:	08000fe5 	.word	0x08000fe5
 8001650:	08000fe5 	.word	0x08000fe5
 8001654:	08000fe5 	.word	0x08000fe5
 8001658:	08000fe5 	.word	0x08000fe5
 800165c:	08000fe5 	.word	0x08000fe5
 8001660:	08000fe5 	.word	0x08000fe5
 8001664:	08000fe5 	.word	0x08000fe5
 8001668:	08001bc3 	.word	0x08001bc3
 800166c:	08000fe5 	.word	0x08000fe5
 8001670:	08000fe5 	.word	0x08000fe5
 8001674:	08000fe5 	.word	0x08000fe5
 8001678:	08000fe5 	.word	0x08000fe5
 800167c:	08000fe5 	.word	0x08000fe5
 8001680:	08000fe5 	.word	0x08000fe5
 8001684:	08000fe5 	.word	0x08000fe5
 8001688:	08000fe5 	.word	0x08000fe5
 800168c:	08000fe5 	.word	0x08000fe5
 8001690:	08001be1 	.word	0x08001be1
		{
		case printMenu_Saw:
			Mode = 1;
 8001694:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <main+0x8f0>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
			Print_fq();
 800169a:	f000 ff4d 	bl	8002538 <Print_fq>
			Print_Volt();
 800169e:	f000 ffe7 	bl	8002670 <Print_Volt>
			Print_Slope();
 80016a2:	f000 ff8d 	bl	80025c0 <Print_Slope>
			Print_Menu_Saw();
 80016a6:	f000 fee5 	bl	8002474 <Print_Menu_Saw>
			state = Saw_WaitInput;
 80016aa:	4b76      	ldr	r3, [pc, #472]	; (8001884 <main+0x8ec>)
 80016ac:	2214      	movs	r2, #20
 80016ae:	701a      	strb	r2, [r3, #0]
			break;
 80016b0:	e3ed      	b.n	8001e8e <main+0xef6>
		case Saw_WaitInput:
			switch (inputchar)
 80016b2:	4b76      	ldr	r3, [pc, #472]	; (800188c <main+0x8f4>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	2b72      	cmp	r3, #114	; 0x72
 80016ba:	f000 810a 	beq.w	80018d2 <main+0x93a>
 80016be:	2b72      	cmp	r3, #114	; 0x72
 80016c0:	dc0d      	bgt.n	80016de <main+0x746>
 80016c2:	2b66      	cmp	r3, #102	; 0x66
 80016c4:	d049      	beq.n	800175a <main+0x7c2>
 80016c6:	2b66      	cmp	r3, #102	; 0x66
 80016c8:	dc04      	bgt.n	80016d4 <main+0x73c>
 80016ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ce:	f000 8139 	beq.w	8001944 <main+0x9ac>
 80016d2:	e131      	b.n	8001938 <main+0x9a0>
 80016d4:	2b69      	cmp	r3, #105	; 0x69
 80016d6:	d013      	beq.n	8001700 <main+0x768>
 80016d8:	2b71      	cmp	r3, #113	; 0x71
 80016da:	d015      	beq.n	8001708 <main+0x770>
 80016dc:	e12c      	b.n	8001938 <main+0x9a0>
 80016de:	2b76      	cmp	r3, #118	; 0x76
 80016e0:	f000 8087 	beq.w	80017f2 <main+0x85a>
 80016e4:	2b76      	cmp	r3, #118	; 0x76
 80016e6:	dc05      	bgt.n	80016f4 <main+0x75c>
 80016e8:	2b73      	cmp	r3, #115	; 0x73
 80016ea:	d011      	beq.n	8001710 <main+0x778>
 80016ec:	2b75      	cmp	r3, #117	; 0x75
 80016ee:	f000 8114 	beq.w	800191a <main+0x982>
 80016f2:	e121      	b.n	8001938 <main+0x9a0>
 80016f4:	2b77      	cmp	r3, #119	; 0x77
 80016f6:	f000 80a0 	beq.w	800183a <main+0x8a2>
 80016fa:	2b78      	cmp	r3, #120	; 0x78
 80016fc:	d051      	beq.n	80017a2 <main+0x80a>
 80016fe:	e11b      	b.n	8001938 <main+0x9a0>
				case -1 :
					break;

				//Mode
				case 'i':
					state = printMenu_Sin;
 8001700:	4b60      	ldr	r3, [pc, #384]	; (8001884 <main+0x8ec>)
 8001702:	221e      	movs	r2, #30
 8001704:	701a      	strb	r2, [r3, #0]
					break;
 8001706:	e11e      	b.n	8001946 <main+0x9ae>
				case 'q':
					state = printMenu_Squ;
 8001708:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <main+0x8ec>)
 800170a:	2232      	movs	r2, #50	; 0x32
 800170c:	701a      	strb	r2, [r3, #0]
					break;
 800170e:	e11a      	b.n	8001946 <main+0x9ae>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 8001710:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <main+0x8f8>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800171a:	eef4 7a47 	vcmp.f32	s15, s14
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d103      	bne.n	800172c <main+0x794>
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <main+0x8f8>)
 8001726:	4a5b      	ldr	r2, [pc, #364]	; (8001894 <main+0x8fc>)
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e012      	b.n	8001752 <main+0x7ba>
					else {Freq = Freq + 0.1 ;}
 800172c:	4b58      	ldr	r3, [pc, #352]	; (8001890 <main+0x8f8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff11 	bl	8000558 <__aeabi_f2d>
 8001736:	a34a      	add	r3, pc, #296	; (adr r3, 8001860 <main+0x8c8>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe fdae 	bl	800029c <__adddf3>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	4618      	mov	r0, r3
 8001746:	4621      	mov	r1, r4
 8001748:	f7ff fa56 	bl	8000bf8 <__aeabi_d2f>
 800174c:	4602      	mov	r2, r0
 800174e:	4b50      	ldr	r3, [pc, #320]	; (8001890 <main+0x8f8>)
 8001750:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 8001752:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <main+0x8ec>)
 8001754:	220a      	movs	r2, #10
 8001756:	701a      	strb	r2, [r3, #0]
					break;
 8001758:	e0f5      	b.n	8001946 <main+0x9ae>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 800175a:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <main+0x8f8>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	d104      	bne.n	8001774 <main+0x7dc>
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <main+0x8f8>)
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e012      	b.n	800179a <main+0x802>
					else {Freq = Freq - 0.1 ;}
 8001774:	4b46      	ldr	r3, [pc, #280]	; (8001890 <main+0x8f8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe feed 	bl	8000558 <__aeabi_f2d>
 800177e:	a338      	add	r3, pc, #224	; (adr r3, 8001860 <main+0x8c8>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fd88 	bl	8000298 <__aeabi_dsub>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	4618      	mov	r0, r3
 800178e:	4621      	mov	r1, r4
 8001790:	f7ff fa32 	bl	8000bf8 <__aeabi_d2f>
 8001794:	4602      	mov	r2, r0
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <main+0x8f8>)
 8001798:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 800179a:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <main+0x8ec>)
 800179c:	220a      	movs	r2, #10
 800179e:	701a      	strb	r2, [r3, #0]
					break;
 80017a0:	e0d1      	b.n	8001946 <main+0x9ae>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <main+0x900>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fed6 	bl	8000558 <__aeabi_f2d>
 80017ac:	a32e      	add	r3, pc, #184	; (adr r3, 8001868 <main+0x8d0>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7ff f991 	bl	8000ad8 <__aeabi_dcmpeq>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <main+0x82c>
 80017bc:	4b36      	ldr	r3, [pc, #216]	; (8001898 <main+0x900>)
 80017be:	4a37      	ldr	r2, [pc, #220]	; (800189c <main+0x904>)
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e012      	b.n	80017ea <main+0x852>
					else {L_Volt = L_Volt + 0.1 ;}
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <main+0x900>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fec5 	bl	8000558 <__aeabi_f2d>
 80017ce:	a324      	add	r3, pc, #144	; (adr r3, 8001860 <main+0x8c8>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe fd62 	bl	800029c <__adddf3>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	4618      	mov	r0, r3
 80017de:	4621      	mov	r1, r4
 80017e0:	f7ff fa0a 	bl	8000bf8 <__aeabi_d2f>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <main+0x900>)
 80017e8:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <main+0x8ec>)
 80017ec:	220a      	movs	r2, #10
 80017ee:	701a      	strb	r2, [r3, #0]
					break;
 80017f0:	e0a9      	b.n	8001946 <main+0x9ae>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <main+0x900>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	d104      	bne.n	800180c <main+0x874>
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <main+0x900>)
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	e012      	b.n	8001832 <main+0x89a>
					else {L_Volt = L_Volt - 0.1 ;}
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <main+0x900>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fea1 	bl	8000558 <__aeabi_f2d>
 8001816:	a312      	add	r3, pc, #72	; (adr r3, 8001860 <main+0x8c8>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fd3c 	bl	8000298 <__aeabi_dsub>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	4618      	mov	r0, r3
 8001826:	4621      	mov	r1, r4
 8001828:	f7ff f9e6 	bl	8000bf8 <__aeabi_d2f>
 800182c:	4602      	mov	r2, r0
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <main+0x900>)
 8001830:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <main+0x8ec>)
 8001834:	220a      	movs	r2, #10
 8001836:	701a      	strb	r2, [r3, #0]
					break;
 8001838:	e085      	b.n	8001946 <main+0x9ae>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <main+0x908>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe8a 	bl	8000558 <__aeabi_f2d>
 8001844:	a308      	add	r3, pc, #32	; (adr r3, 8001868 <main+0x8d0>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7ff f945 	bl	8000ad8 <__aeabi_dcmpeq>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d027      	beq.n	80018a4 <main+0x90c>
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <main+0x908>)
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <main+0x904>)
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e036      	b.n	80018ca <main+0x932>
 800185c:	f3af 8000 	nop.w
 8001860:	9999999a 	.word	0x9999999a
 8001864:	3fb99999 	.word	0x3fb99999
 8001868:	66666666 	.word	0x66666666
 800186c:	400a6666 	.word	0x400a6666
 8001870:	20000224 	.word	0x20000224
 8001874:	20000378 	.word	0x20000378
 8001878:	40020400 	.word	0x40020400
 800187c:	20000000 	.word	0x20000000
 8001880:	20000220 	.word	0x20000220
 8001884:	20000015 	.word	0x20000015
 8001888:	20000014 	.word	0x20000014
 800188c:	2000023c 	.word	0x2000023c
 8001890:	20000004 	.word	0x20000004
 8001894:	41200000 	.word	0x41200000
 8001898:	2000022c 	.word	0x2000022c
 800189c:	40533333 	.word	0x40533333
 80018a0:	20000008 	.word	0x20000008
					else {H_Volt = H_Volt + 0.1 ;}
 80018a4:	4bae      	ldr	r3, [pc, #696]	; (8001b60 <main+0xbc8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe55 	bl	8000558 <__aeabi_f2d>
 80018ae:	a3a8      	add	r3, pc, #672	; (adr r3, 8001b50 <main+0xbb8>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fcf2 	bl	800029c <__adddf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	4618      	mov	r0, r3
 80018be:	4621      	mov	r1, r4
 80018c0:	f7ff f99a 	bl	8000bf8 <__aeabi_d2f>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4ba6      	ldr	r3, [pc, #664]	; (8001b60 <main+0xbc8>)
 80018c8:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 80018ca:	4ba6      	ldr	r3, [pc, #664]	; (8001b64 <main+0xbcc>)
 80018cc:	220a      	movs	r2, #10
 80018ce:	701a      	strb	r2, [r3, #0]
					break;
 80018d0:	e039      	b.n	8001946 <main+0x9ae>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 80018d2:	4ba3      	ldr	r3, [pc, #652]	; (8001b60 <main+0xbc8>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d104      	bne.n	80018ec <main+0x954>
 80018e2:	4b9f      	ldr	r3, [pc, #636]	; (8001b60 <main+0xbc8>)
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e012      	b.n	8001912 <main+0x97a>
					else {H_Volt = H_Volt - 0.1 ;}
 80018ec:	4b9c      	ldr	r3, [pc, #624]	; (8001b60 <main+0xbc8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe31 	bl	8000558 <__aeabi_f2d>
 80018f6:	a396      	add	r3, pc, #600	; (adr r3, 8001b50 <main+0xbb8>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe fccc 	bl	8000298 <__aeabi_dsub>
 8001900:	4603      	mov	r3, r0
 8001902:	460c      	mov	r4, r1
 8001904:	4618      	mov	r0, r3
 8001906:	4621      	mov	r1, r4
 8001908:	f7ff f976 	bl	8000bf8 <__aeabi_d2f>
 800190c:	4602      	mov	r2, r0
 800190e:	4b94      	ldr	r3, [pc, #592]	; (8001b60 <main+0xbc8>)
 8001910:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 8001912:	4b94      	ldr	r3, [pc, #592]	; (8001b64 <main+0xbcc>)
 8001914:	220a      	movs	r2, #10
 8001916:	701a      	strb	r2, [r3, #0]
					break;
 8001918:	e015      	b.n	8001946 <main+0x9ae>

				//Specific
				case 'u':
					if (Slope == 1) {Slope = 0;}
 800191a:	4b93      	ldr	r3, [pc, #588]	; (8001b68 <main+0xbd0>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d103      	bne.n	800192a <main+0x992>
 8001922:	4b91      	ldr	r3, [pc, #580]	; (8001b68 <main+0xbd0>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e002      	b.n	8001930 <main+0x998>
					else {Slope = 1;}
 800192a:	4b8f      	ldr	r3, [pc, #572]	; (8001b68 <main+0xbd0>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
					state = printMenu_Saw;
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <main+0xbcc>)
 8001932:	220a      	movs	r2, #10
 8001934:	701a      	strb	r2, [r3, #0]
					break;
 8001936:	e006      	b.n	8001946 <main+0x9ae>

				//Error
				default:
					Print_Error();
 8001938:	f000 fe22 	bl	8002580 <Print_Error>
					state = printMenu_Saw;
 800193c:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <main+0xbcc>)
 800193e:	220a      	movs	r2, #10
 8001940:	701a      	strb	r2, [r3, #0]
					break;
 8001942:	e000      	b.n	8001946 <main+0x9ae>
					break;
 8001944:	bf00      	nop
			}
			break;
 8001946:	e2a2      	b.n	8001e8e <main+0xef6>

		case printMenu_Sin:
			Mode = 2;
 8001948:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <main+0xbd4>)
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
			Print_fq();
 800194e:	f000 fdf3 	bl	8002538 <Print_fq>
			Print_Volt();
 8001952:	f000 fe8d 	bl	8002670 <Print_Volt>
			Print_Menu_Sin();
 8001956:	f000 fdad 	bl	80024b4 <Print_Menu_Sin>
			state = Sin_WaitInput;
 800195a:	4b82      	ldr	r3, [pc, #520]	; (8001b64 <main+0xbcc>)
 800195c:	2228      	movs	r2, #40	; 0x28
 800195e:	701a      	strb	r2, [r3, #0]
			break;
 8001960:	e295      	b.n	8001e8e <main+0xef6>
		case Sin_WaitInput:
			switch (inputchar)
 8001962:	4b83      	ldr	r3, [pc, #524]	; (8001b70 <main+0xbd8>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	2b72      	cmp	r3, #114	; 0x72
 800196a:	f000 80e3 	beq.w	8001b34 <main+0xb9c>
 800196e:	2b72      	cmp	r3, #114	; 0x72
 8001970:	dc0d      	bgt.n	800198e <main+0x9f6>
 8001972:	2b61      	cmp	r3, #97	; 0x61
 8001974:	d019      	beq.n	80019aa <main+0xa12>
 8001976:	2b61      	cmp	r3, #97	; 0x61
 8001978:	dc04      	bgt.n	8001984 <main+0x9ec>
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	f000 811e 	beq.w	8001bbe <main+0xc26>
 8001982:	e116      	b.n	8001bb2 <main+0xc1a>
 8001984:	2b66      	cmp	r3, #102	; 0x66
 8001986:	d03d      	beq.n	8001a04 <main+0xa6c>
 8001988:	2b71      	cmp	r3, #113	; 0x71
 800198a:	d012      	beq.n	80019b2 <main+0xa1a>
 800198c:	e111      	b.n	8001bb2 <main+0xc1a>
 800198e:	2b76      	cmp	r3, #118	; 0x76
 8001990:	f000 8084 	beq.w	8001a9c <main+0xb04>
 8001994:	2b76      	cmp	r3, #118	; 0x76
 8001996:	dc02      	bgt.n	800199e <main+0xa06>
 8001998:	2b73      	cmp	r3, #115	; 0x73
 800199a:	d00e      	beq.n	80019ba <main+0xa22>
 800199c:	e109      	b.n	8001bb2 <main+0xc1a>
 800199e:	2b77      	cmp	r3, #119	; 0x77
 80019a0:	f000 80a0 	beq.w	8001ae4 <main+0xb4c>
 80019a4:	2b78      	cmp	r3, #120	; 0x78
 80019a6:	d051      	beq.n	8001a4c <main+0xab4>
 80019a8:	e103      	b.n	8001bb2 <main+0xc1a>
				case -1 :
					break;

				//Mode
				case 'a':
					state = printMenu_Saw;
 80019aa:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <main+0xbcc>)
 80019ac:	220a      	movs	r2, #10
 80019ae:	701a      	strb	r2, [r3, #0]
					break;
 80019b0:	e106      	b.n	8001bc0 <main+0xc28>
				case 'q':
					state = printMenu_Squ;
 80019b2:	4b6c      	ldr	r3, [pc, #432]	; (8001b64 <main+0xbcc>)
 80019b4:	2232      	movs	r2, #50	; 0x32
 80019b6:	701a      	strb	r2, [r3, #0]
					break;
 80019b8:	e102      	b.n	8001bc0 <main+0xc28>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 80019ba:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <main+0xbdc>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019c4:	eef4 7a47 	vcmp.f32	s15, s14
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	d103      	bne.n	80019d6 <main+0xa3e>
 80019ce:	4b69      	ldr	r3, [pc, #420]	; (8001b74 <main+0xbdc>)
 80019d0:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <main+0xbe0>)
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e012      	b.n	80019fc <main+0xa64>
					else {Freq = Freq + 0.1 ;}
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <main+0xbdc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdbc 	bl	8000558 <__aeabi_f2d>
 80019e0:	a35b      	add	r3, pc, #364	; (adr r3, 8001b50 <main+0xbb8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fc59 	bl	800029c <__adddf3>
 80019ea:	4603      	mov	r3, r0
 80019ec:	460c      	mov	r4, r1
 80019ee:	4618      	mov	r0, r3
 80019f0:	4621      	mov	r1, r4
 80019f2:	f7ff f901 	bl	8000bf8 <__aeabi_d2f>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b5e      	ldr	r3, [pc, #376]	; (8001b74 <main+0xbdc>)
 80019fa:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <main+0xbcc>)
 80019fe:	221e      	movs	r2, #30
 8001a00:	701a      	strb	r2, [r3, #0]
					break;
 8001a02:	e0dd      	b.n	8001bc0 <main+0xc28>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 8001a04:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <main+0xbdc>)
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	d104      	bne.n	8001a1e <main+0xa86>
 8001a14:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <main+0xbdc>)
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e012      	b.n	8001a44 <main+0xaac>
					else {Freq = Freq - 0.1 ;}
 8001a1e:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <main+0xbdc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd98 	bl	8000558 <__aeabi_f2d>
 8001a28:	a349      	add	r3, pc, #292	; (adr r3, 8001b50 <main+0xbb8>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fc33 	bl	8000298 <__aeabi_dsub>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	4618      	mov	r0, r3
 8001a38:	4621      	mov	r1, r4
 8001a3a:	f7ff f8dd 	bl	8000bf8 <__aeabi_d2f>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <main+0xbdc>)
 8001a42:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001a44:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <main+0xbcc>)
 8001a46:	221e      	movs	r2, #30
 8001a48:	701a      	strb	r2, [r3, #0]
					break;
 8001a4a:	e0b9      	b.n	8001bc0 <main+0xc28>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <main+0xbe4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd81 	bl	8000558 <__aeabi_f2d>
 8001a56:	a340      	add	r3, pc, #256	; (adr r3, 8001b58 <main+0xbc0>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7ff f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <main+0xad6>
 8001a66:	4b45      	ldr	r3, [pc, #276]	; (8001b7c <main+0xbe4>)
 8001a68:	4a45      	ldr	r2, [pc, #276]	; (8001b80 <main+0xbe8>)
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e012      	b.n	8001a94 <main+0xafc>
					else {L_Volt = L_Volt + 0.1 ;}
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <main+0xbe4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd70 	bl	8000558 <__aeabi_f2d>
 8001a78:	a335      	add	r3, pc, #212	; (adr r3, 8001b50 <main+0xbb8>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fc0d 	bl	800029c <__adddf3>
 8001a82:	4603      	mov	r3, r0
 8001a84:	460c      	mov	r4, r1
 8001a86:	4618      	mov	r0, r3
 8001a88:	4621      	mov	r1, r4
 8001a8a:	f7ff f8b5 	bl	8000bf8 <__aeabi_d2f>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <main+0xbe4>)
 8001a92:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <main+0xbcc>)
 8001a96:	221e      	movs	r2, #30
 8001a98:	701a      	strb	r2, [r3, #0]
					break;
 8001a9a:	e091      	b.n	8001bc0 <main+0xc28>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <main+0xbe4>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d104      	bne.n	8001ab6 <main+0xb1e>
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <main+0xbe4>)
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e012      	b.n	8001adc <main+0xb44>
					else {L_Volt = L_Volt - 0.1 ;}
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <main+0xbe4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd4c 	bl	8000558 <__aeabi_f2d>
 8001ac0:	a323      	add	r3, pc, #140	; (adr r3, 8001b50 <main+0xbb8>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fbe7 	bl	8000298 <__aeabi_dsub>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	f7ff f891 	bl	8000bf8 <__aeabi_d2f>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <main+0xbe4>)
 8001ada:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <main+0xbcc>)
 8001ade:	221e      	movs	r2, #30
 8001ae0:	701a      	strb	r2, [r3, #0]
					break;
 8001ae2:	e06d      	b.n	8001bc0 <main+0xc28>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <main+0xbc8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd35 	bl	8000558 <__aeabi_f2d>
 8001aee:	a31a      	add	r3, pc, #104	; (adr r3, 8001b58 <main+0xbc0>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <main+0xb6e>
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <main+0xbc8>)
 8001b00:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <main+0xbe8>)
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e012      	b.n	8001b2c <main+0xb94>
					else {H_Volt = H_Volt + 0.1 ;}
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <main+0xbc8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd24 	bl	8000558 <__aeabi_f2d>
 8001b10:	a30f      	add	r3, pc, #60	; (adr r3, 8001b50 <main+0xbb8>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fbc1 	bl	800029c <__adddf3>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4621      	mov	r1, r4
 8001b22:	f7ff f869 	bl	8000bf8 <__aeabi_d2f>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <main+0xbc8>)
 8001b2a:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <main+0xbcc>)
 8001b2e:	221e      	movs	r2, #30
 8001b30:	701a      	strb	r2, [r3, #0]
					break;
 8001b32:	e045      	b.n	8001bc0 <main+0xc28>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <main+0xbc8>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	d11f      	bne.n	8001b84 <main+0xbec>
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <main+0xbc8>)
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e02d      	b.n	8001baa <main+0xc12>
 8001b4e:	bf00      	nop
 8001b50:	9999999a 	.word	0x9999999a
 8001b54:	3fb99999 	.word	0x3fb99999
 8001b58:	66666666 	.word	0x66666666
 8001b5c:	400a6666 	.word	0x400a6666
 8001b60:	20000008 	.word	0x20000008
 8001b64:	20000015 	.word	0x20000015
 8001b68:	2000000c 	.word	0x2000000c
 8001b6c:	20000014 	.word	0x20000014
 8001b70:	2000023c 	.word	0x2000023c
 8001b74:	20000004 	.word	0x20000004
 8001b78:	41200000 	.word	0x41200000
 8001b7c:	2000022c 	.word	0x2000022c
 8001b80:	40533333 	.word	0x40533333
					else {H_Volt = H_Volt - 0.1 ;}
 8001b84:	4bb0      	ldr	r3, [pc, #704]	; (8001e48 <main+0xeb0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fce5 	bl	8000558 <__aeabi_f2d>
 8001b8e:	a3aa      	add	r3, pc, #680	; (adr r3, 8001e38 <main+0xea0>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fb80 	bl	8000298 <__aeabi_dsub>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	f7ff f82a 	bl	8000bf8 <__aeabi_d2f>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4ba8      	ldr	r3, [pc, #672]	; (8001e48 <main+0xeb0>)
 8001ba8:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001baa:	4ba8      	ldr	r3, [pc, #672]	; (8001e4c <main+0xeb4>)
 8001bac:	221e      	movs	r2, #30
 8001bae:	701a      	strb	r2, [r3, #0]
					break;
 8001bb0:	e006      	b.n	8001bc0 <main+0xc28>
				//case '':
					//break;

				//Error
				default:
					Print_Error();
 8001bb2:	f000 fce5 	bl	8002580 <Print_Error>
					state = printMenu_Sin;
 8001bb6:	4ba5      	ldr	r3, [pc, #660]	; (8001e4c <main+0xeb4>)
 8001bb8:	221e      	movs	r2, #30
 8001bba:	701a      	strb	r2, [r3, #0]
					break;
 8001bbc:	e000      	b.n	8001bc0 <main+0xc28>
					break;
 8001bbe:	bf00      	nop
			}
			break;
 8001bc0:	e165      	b.n	8001e8e <main+0xef6>

		case printMenu_Squ:
			Mode = 3;
 8001bc2:	4ba3      	ldr	r3, [pc, #652]	; (8001e50 <main+0xeb8>)
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	701a      	strb	r2, [r3, #0]
			Print_fq();
 8001bc8:	f000 fcb6 	bl	8002538 <Print_fq>
			Print_Volt();
 8001bcc:	f000 fd50 	bl	8002670 <Print_Volt>
			Print_Duty();
 8001bd0:	f000 fd30 	bl	8002634 <Print_Duty>
			Print_Menu_Squ();
 8001bd4:	f000 fc8e 	bl	80024f4 <Print_Menu_Squ>
			state = Squ_WaitInput;
 8001bd8:	4b9c      	ldr	r3, [pc, #624]	; (8001e4c <main+0xeb4>)
 8001bda:	223c      	movs	r2, #60	; 0x3c
 8001bdc:	701a      	strb	r2, [r3, #0]
			break;
 8001bde:	e156      	b.n	8001e8e <main+0xef6>
		case Squ_WaitInput:
			switch (inputchar)
 8001be0:	4b9c      	ldr	r3, [pc, #624]	; (8001e54 <main+0xebc>)
 8001be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be6:	2b6c      	cmp	r3, #108	; 0x6c
 8001be8:	f000 811e 	beq.w	8001e28 <main+0xe90>
 8001bec:	2b6c      	cmp	r3, #108	; 0x6c
 8001bee:	dc10      	bgt.n	8001c12 <main+0xc7a>
 8001bf0:	2b66      	cmp	r3, #102	; 0x66
 8001bf2:	d04c      	beq.n	8001c8e <main+0xcf6>
 8001bf4:	2b66      	cmp	r3, #102	; 0x66
 8001bf6:	dc06      	bgt.n	8001c06 <main+0xc6e>
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	f000 8145 	beq.w	8001e8a <main+0xef2>
 8001c00:	2b61      	cmp	r3, #97	; 0x61
 8001c02:	d017      	beq.n	8001c34 <main+0xc9c>
 8001c04:	e13b      	b.n	8001e7e <main+0xee6>
 8001c06:	2b69      	cmp	r3, #105	; 0x69
 8001c08:	d018      	beq.n	8001c3c <main+0xca4>
 8001c0a:	2b6a      	cmp	r3, #106	; 0x6a
 8001c0c:	f000 80fb 	beq.w	8001e06 <main+0xe6e>
 8001c10:	e135      	b.n	8001e7e <main+0xee6>
 8001c12:	2b76      	cmp	r3, #118	; 0x76
 8001c14:	f000 8087 	beq.w	8001d26 <main+0xd8e>
 8001c18:	2b76      	cmp	r3, #118	; 0x76
 8001c1a:	dc05      	bgt.n	8001c28 <main+0xc90>
 8001c1c:	2b72      	cmp	r3, #114	; 0x72
 8001c1e:	f000 80ce 	beq.w	8001dbe <main+0xe26>
 8001c22:	2b73      	cmp	r3, #115	; 0x73
 8001c24:	d00e      	beq.n	8001c44 <main+0xcac>
 8001c26:	e12a      	b.n	8001e7e <main+0xee6>
 8001c28:	2b77      	cmp	r3, #119	; 0x77
 8001c2a:	f000 80a0 	beq.w	8001d6e <main+0xdd6>
 8001c2e:	2b78      	cmp	r3, #120	; 0x78
 8001c30:	d051      	beq.n	8001cd6 <main+0xd3e>
 8001c32:	e124      	b.n	8001e7e <main+0xee6>
				case -1 :
					break;

				//Mode
				case 'a':
					state = printMenu_Saw;
 8001c34:	4b85      	ldr	r3, [pc, #532]	; (8001e4c <main+0xeb4>)
 8001c36:	220a      	movs	r2, #10
 8001c38:	701a      	strb	r2, [r3, #0]
					break;
 8001c3a:	e127      	b.n	8001e8c <main+0xef4>
				case 'i':
					state = printMenu_Sin;
 8001c3c:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <main+0xeb4>)
 8001c3e:	221e      	movs	r2, #30
 8001c40:	701a      	strb	r2, [r3, #0]
					break;
 8001c42:	e123      	b.n	8001e8c <main+0xef4>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 8001c44:	4b84      	ldr	r3, [pc, #528]	; (8001e58 <main+0xec0>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c4e:	eef4 7a47 	vcmp.f32	s15, s14
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	d103      	bne.n	8001c60 <main+0xcc8>
 8001c58:	4b7f      	ldr	r3, [pc, #508]	; (8001e58 <main+0xec0>)
 8001c5a:	4a80      	ldr	r2, [pc, #512]	; (8001e5c <main+0xec4>)
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e012      	b.n	8001c86 <main+0xcee>
					else {Freq = Freq + 0.1 ;}
 8001c60:	4b7d      	ldr	r3, [pc, #500]	; (8001e58 <main+0xec0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc77 	bl	8000558 <__aeabi_f2d>
 8001c6a:	a373      	add	r3, pc, #460	; (adr r3, 8001e38 <main+0xea0>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fb14 	bl	800029c <__adddf3>
 8001c74:	4603      	mov	r3, r0
 8001c76:	460c      	mov	r4, r1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	f7fe ffbc 	bl	8000bf8 <__aeabi_d2f>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b75      	ldr	r3, [pc, #468]	; (8001e58 <main+0xec0>)
 8001c84:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001c86:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <main+0xeb4>)
 8001c88:	2232      	movs	r2, #50	; 0x32
 8001c8a:	701a      	strb	r2, [r3, #0]
					break;
 8001c8c:	e0fe      	b.n	8001e8c <main+0xef4>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 8001c8e:	4b72      	ldr	r3, [pc, #456]	; (8001e58 <main+0xec0>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	d104      	bne.n	8001ca8 <main+0xd10>
 8001c9e:	4b6e      	ldr	r3, [pc, #440]	; (8001e58 <main+0xec0>)
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e012      	b.n	8001cce <main+0xd36>
					else {Freq = Freq - 0.1 ;}
 8001ca8:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <main+0xec0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc53 	bl	8000558 <__aeabi_f2d>
 8001cb2:	a361      	add	r3, pc, #388	; (adr r3, 8001e38 <main+0xea0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe faee 	bl	8000298 <__aeabi_dsub>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	f7fe ff98 	bl	8000bf8 <__aeabi_d2f>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <main+0xec0>)
 8001ccc:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <main+0xeb4>)
 8001cd0:	2232      	movs	r2, #50	; 0x32
 8001cd2:	701a      	strb	r2, [r3, #0]
					break;
 8001cd4:	e0da      	b.n	8001e8c <main+0xef4>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001cd6:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <main+0xec8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc3c 	bl	8000558 <__aeabi_f2d>
 8001ce0:	a357      	add	r3, pc, #348	; (adr r3, 8001e40 <main+0xea8>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fef7 	bl	8000ad8 <__aeabi_dcmpeq>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <main+0xd60>
 8001cf0:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <main+0xec8>)
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	; (8001e64 <main+0xecc>)
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e012      	b.n	8001d1e <main+0xd86>
					else {L_Volt = L_Volt + 0.1 ;}
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <main+0xec8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc2b 	bl	8000558 <__aeabi_f2d>
 8001d02:	a34d      	add	r3, pc, #308	; (adr r3, 8001e38 <main+0xea0>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fac8 	bl	800029c <__adddf3>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	460c      	mov	r4, r1
 8001d10:	4618      	mov	r0, r3
 8001d12:	4621      	mov	r1, r4
 8001d14:	f7fe ff70 	bl	8000bf8 <__aeabi_d2f>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <main+0xec8>)
 8001d1c:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001d1e:	4b4b      	ldr	r3, [pc, #300]	; (8001e4c <main+0xeb4>)
 8001d20:	2232      	movs	r2, #50	; 0x32
 8001d22:	701a      	strb	r2, [r3, #0]
					break;
 8001d24:	e0b2      	b.n	8001e8c <main+0xef4>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 8001d26:	4b4e      	ldr	r3, [pc, #312]	; (8001e60 <main+0xec8>)
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	d104      	bne.n	8001d40 <main+0xda8>
 8001d36:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <main+0xec8>)
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e012      	b.n	8001d66 <main+0xdce>
					else {L_Volt = L_Volt - 0.1 ;}
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <main+0xec8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fc07 	bl	8000558 <__aeabi_f2d>
 8001d4a:	a33b      	add	r3, pc, #236	; (adr r3, 8001e38 <main+0xea0>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe faa2 	bl	8000298 <__aeabi_dsub>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	f7fe ff4c 	bl	8000bf8 <__aeabi_d2f>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <main+0xec8>)
 8001d64:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <main+0xeb4>)
 8001d68:	2232      	movs	r2, #50	; 0x32
 8001d6a:	701a      	strb	r2, [r3, #0]
					break;
 8001d6c:	e08e      	b.n	8001e8c <main+0xef4>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 8001d6e:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <main+0xeb0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbf0 	bl	8000558 <__aeabi_f2d>
 8001d78:	a331      	add	r3, pc, #196	; (adr r3, 8001e40 <main+0xea8>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe feab 	bl	8000ad8 <__aeabi_dcmpeq>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <main+0xdf8>
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <main+0xeb0>)
 8001d8a:	4a36      	ldr	r2, [pc, #216]	; (8001e64 <main+0xecc>)
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e012      	b.n	8001db6 <main+0xe1e>
					else {H_Volt = H_Volt + 0.1 ;}
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <main+0xeb0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbdf 	bl	8000558 <__aeabi_f2d>
 8001d9a:	a327      	add	r3, pc, #156	; (adr r3, 8001e38 <main+0xea0>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fa7c 	bl	800029c <__adddf3>
 8001da4:	4603      	mov	r3, r0
 8001da6:	460c      	mov	r4, r1
 8001da8:	4618      	mov	r0, r3
 8001daa:	4621      	mov	r1, r4
 8001dac:	f7fe ff24 	bl	8000bf8 <__aeabi_d2f>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <main+0xeb0>)
 8001db4:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <main+0xeb4>)
 8001db8:	2232      	movs	r2, #50	; 0x32
 8001dba:	701a      	strb	r2, [r3, #0]
					break;
 8001dbc:	e066      	b.n	8001e8c <main+0xef4>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <main+0xeb0>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	d104      	bne.n	8001dd8 <main+0xe40>
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <main+0xeb0>)
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e012      	b.n	8001dfe <main+0xe66>
					else {H_Volt = H_Volt - 0.1 ;}
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <main+0xeb0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fbbb 	bl	8000558 <__aeabi_f2d>
 8001de2:	a315      	add	r3, pc, #84	; (adr r3, 8001e38 <main+0xea0>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f7fe fa56 	bl	8000298 <__aeabi_dsub>
 8001dec:	4603      	mov	r3, r0
 8001dee:	460c      	mov	r4, r1
 8001df0:	4618      	mov	r0, r3
 8001df2:	4621      	mov	r1, r4
 8001df4:	f7fe ff00 	bl	8000bf8 <__aeabi_d2f>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <main+0xeb0>)
 8001dfc:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <main+0xeb4>)
 8001e00:	2232      	movs	r2, #50	; 0x32
 8001e02:	701a      	strb	r2, [r3, #0]
					break;
 8001e04:	e042      	b.n	8001e8c <main+0xef4>

				//Specific
				case 'j':
					if (duty == 100) {duty = 100;}
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <main+0xed0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d103      	bne.n	8001e16 <main+0xe7e>
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <main+0xed0>)
 8001e10:	2264      	movs	r2, #100	; 0x64
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e004      	b.n	8001e20 <main+0xe88>
					else {duty = duty + 10 ;}
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <main+0xed0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	330a      	adds	r3, #10
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <main+0xed0>)
 8001e1e:	6013      	str	r3, [r2, #0]
					state = printMenu_Squ;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <main+0xeb4>)
 8001e22:	2232      	movs	r2, #50	; 0x32
 8001e24:	701a      	strb	r2, [r3, #0]
					break;
 8001e26:	e031      	b.n	8001e8c <main+0xef4>
				case 'l':
					if (duty == 0) {duty = 0;}
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <main+0xed0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11d      	bne.n	8001e6c <main+0xed4>
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <main+0xed0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e01e      	b.n	8001e76 <main+0xede>
 8001e38:	9999999a 	.word	0x9999999a
 8001e3c:	3fb99999 	.word	0x3fb99999
 8001e40:	66666666 	.word	0x66666666
 8001e44:	400a6666 	.word	0x400a6666
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000015 	.word	0x20000015
 8001e50:	20000014 	.word	0x20000014
 8001e54:	2000023c 	.word	0x2000023c
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	41200000 	.word	0x41200000
 8001e60:	2000022c 	.word	0x2000022c
 8001e64:	40533333 	.word	0x40533333
 8001e68:	20000010 	.word	0x20000010
					else {duty = duty - 10 ;}
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <main+0xefc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3b0a      	subs	r3, #10
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <main+0xefc>)
 8001e74:	6013      	str	r3, [r2, #0]
					state = printMenu_Squ;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <main+0xf00>)
 8001e78:	2232      	movs	r2, #50	; 0x32
 8001e7a:	701a      	strb	r2, [r3, #0]
					break;
 8001e7c:	e006      	b.n	8001e8c <main+0xef4>

				//Error
				default:
					Print_Error();
 8001e7e:	f000 fb7f 	bl	8002580 <Print_Error>
					state = printMenu_Squ;
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <main+0xf00>)
 8001e84:	2232      	movs	r2, #50	; 0x32
 8001e86:	701a      	strb	r2, [r3, #0]
					break;
 8001e88:	e000      	b.n	8001e8c <main+0xef4>
					break;
 8001e8a:	bf00      	nop
			}
			break;
 8001e8c:	bf00      	nop
	{
 8001e8e:	f7ff b8a9 	b.w	8000fe4 <main+0x4c>
 8001e92:	bf00      	nop
 8001e94:	20000010 	.word	0x20000010
 8001e98:	20000015 	.word	0x20000015

08001e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b094      	sub	sp, #80	; 0x50
 8001ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	2230      	movs	r2, #48	; 0x30
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 fad3 	bl	8006456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <SystemClock_Config+0xc8>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <SystemClock_Config+0xc8>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <SystemClock_Config+0xc8>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <SystemClock_Config+0xcc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <SystemClock_Config+0xcc>)
 8001ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <SystemClock_Config+0xcc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efc:	2301      	movs	r3, #1
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f00:	2310      	movs	r3, #16
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f04:	2302      	movs	r3, #2
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f10:	2364      	movs	r3, #100	; 0x64
 8001f12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f14:	2302      	movs	r3, #2
 8001f16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 f8bf 	bl	80040a4 <HAL_RCC_OscConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f2c:	f000 fbd2 	bl	80026d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f30:	230f      	movs	r3, #15
 8001f32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f34:	2302      	movs	r3, #2
 8001f36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fb19 	bl	8004584 <HAL_RCC_ClockConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f58:	f000 fbbc 	bl	80026d4 <Error_Handler>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3750      	adds	r7, #80	; 0x50
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000

08001f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f72:	463b      	mov	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001f80:	4a22      	ldr	r2, [pc, #136]	; (800200c <MX_ADC1_Init+0xa0>)
 8001f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001fb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001fd2:	f000 fe2b 	bl	8002c2c <HAL_ADC_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001fdc:	f000 fb7a 	bl	80026d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001ff2:	f000 ff51 	bl	8002e98 <HAL_ADC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001ffc:	f000 fb6a 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200003d0 	.word	0x200003d0
 800200c:	40012000 	.word	0x40012000

08002010 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_SPI3_Init+0x68>)
 8002016:	4a19      	ldr	r2, [pc, #100]	; (800207c <MX_SPI3_Init+0x6c>)
 8002018:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <MX_SPI3_Init+0x68>)
 800201c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002020:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_SPI3_Init+0x68>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_SPI3_Init+0x68>)
 800202a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800202e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_SPI3_Init+0x68>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <MX_SPI3_Init+0x68>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_SPI3_Init+0x68>)
 800203e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002042:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_SPI3_Init+0x68>)
 8002046:	2208      	movs	r2, #8
 8002048:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_SPI3_Init+0x68>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_SPI3_Init+0x68>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_SPI3_Init+0x68>)
 8002058:	2200      	movs	r2, #0
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_SPI3_Init+0x68>)
 800205e:	220a      	movs	r2, #10
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_SPI3_Init+0x68>)
 8002064:	f002 fc80 	bl	8004968 <HAL_SPI_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800206e:	f000 fb31 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000378 	.word	0x20000378
 800207c:	40003c00 	.word	0x40003c00

08002080 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002086:	f107 0308 	add.w	r3, r7, #8
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	463b      	mov	r3, r7
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800209c:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <MX_TIM3_Init+0x90>)
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <MX_TIM3_Init+0x94>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_TIM3_Init+0x90>)
 80020a4:	2263      	movs	r2, #99	; 0x63
 80020a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <MX_TIM3_Init+0x90>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <MX_TIM3_Init+0x90>)
 80020b0:	2264      	movs	r2, #100	; 0x64
 80020b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_TIM3_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <MX_TIM3_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020c0:	4813      	ldr	r0, [pc, #76]	; (8002110 <MX_TIM3_Init+0x90>)
 80020c2:	f002 ffa9 	bl	8005018 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80020cc:	f000 fb02 	bl	80026d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <MX_TIM3_Init+0x90>)
 80020de:	f003 f80e 	bl	80050fe <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80020e8:	f000 faf4 	bl	80026d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020ec:	2320      	movs	r3, #32
 80020ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_TIM3_Init+0x90>)
 80020fa:	f003 f9d1 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002104:	f000 fae6 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000338 	.word	0x20000338
 8002114:	40000400 	.word	0x40000400

08002118 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_TIM11_Init+0x40>)
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <MX_TIM11_Init+0x44>)
 8002120:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <MX_TIM11_Init+0x40>)
 8002124:	2263      	movs	r2, #99	; 0x63
 8002126:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_TIM11_Init+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <MX_TIM11_Init+0x40>)
 8002130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002134:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_TIM11_Init+0x40>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_TIM11_Init+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_TIM11_Init+0x40>)
 8002144:	f002 ff68 	bl	8005018 <HAL_TIM_Base_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800214e:	f000 fac1 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000418 	.word	0x20000418
 800215c:	40014800 	.word	0x40014800

08002160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <MX_USART2_UART_Init+0x50>)
 8002168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 800216c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_USART2_UART_Init+0x4c>)
 8002198:	f003 f9f0 	bl	800557c <HAL_UART_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021a2:	f000 fa97 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200004b8 	.word	0x200004b8
 80021b0:	40004400 	.word	0x40004400

080021b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_DMA_Init+0x3c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <MX_DMA_Init+0x3c>)
 80021c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_DMA_Init+0x3c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2038      	movs	r0, #56	; 0x38
 80021dc:	f001 f9e7 	bl	80035ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021e0:	2038      	movs	r0, #56	; 0x38
 80021e2:	f001 fa00 	bl	80035e6 <HAL_NVIC_EnableIRQ>

}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	4b44      	ldr	r3, [pc, #272]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a43      	ldr	r2, [pc, #268]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <MX_GPIO_Init+0x12c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <MX_GPIO_Init+0x12c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a35      	ldr	r2, [pc, #212]	; (8002320 <MX_GPIO_Init+0x12c>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b33      	ldr	r3, [pc, #204]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <MX_GPIO_Init+0x12c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	2120      	movs	r1, #32
 800227e:	4829      	ldr	r0, [pc, #164]	; (8002324 <MX_GPIO_Init+0x130>)
 8002280:	f001 fef6 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228a:	4827      	ldr	r0, [pc, #156]	; (8002328 <MX_GPIO_Init+0x134>)
 800228c:	f001 fef0 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002290:	2201      	movs	r2, #1
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	4825      	ldr	r0, [pc, #148]	; (800232c <MX_GPIO_Init+0x138>)
 8002296:	f001 feeb 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022a0:	4820      	ldr	r0, [pc, #128]	; (8002324 <MX_GPIO_Init+0x130>)
 80022a2:	f001 fee5 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <MX_GPIO_Init+0x13c>)
 80022ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	481c      	ldr	r0, [pc, #112]	; (800232c <MX_GPIO_Init+0x138>)
 80022bc:	f001 fd3e 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 80022c0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80022c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	4812      	ldr	r0, [pc, #72]	; (8002324 <MX_GPIO_Init+0x130>)
 80022da:	f001 fd2f 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80022de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	480c      	ldr	r0, [pc, #48]	; (8002328 <MX_GPIO_Init+0x134>)
 80022f8:	f001 fd20 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002300:	2301      	movs	r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	4806      	ldr	r0, [pc, #24]	; (800232c <MX_GPIO_Init+0x138>)
 8002314:	f001 fd12 	bl	8003d3c <HAL_GPIO_Init>

}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400
 800232c:	40020800 	.word	0x40020800
 8002330:	10210000 	.word	0x10210000

08002334 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	460a      	mov	r2, r1
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	4613      	mov	r3, r2
 8002342:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002344:	88bb      	ldrh	r3, [r7, #4]
 8002346:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	031b      	lsls	r3, r3, #12
 800234e:	b29b      	uxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800235a:	4807      	ldr	r0, [pc, #28]	; (8002378 <MCP4922SetOutput+0x44>)
 800235c:	f001 fe88 	bl	8004070 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2201      	movs	r2, #1
 8002366:	4619      	mov	r1, r3
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <MCP4922SetOutput+0x48>)
 800236a:	f002 fb61 	bl	8004a30 <HAL_SPI_Transmit_IT>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40020400 	.word	0x40020400
 800237c:	20000378 	.word	0x20000378

08002380 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_SPI_TxCpltCallback+0x24>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d105      	bne.n	800239c <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002396:	4804      	ldr	r0, [pc, #16]	; (80023a8 <HAL_SPI_TxCpltCallback+0x28>)
 8002398:	f001 fe6a 	bl	8004070 <HAL_GPIO_WritePin>
	}
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000378 	.word	0x20000378
 80023a8:	40020400 	.word	0x40020400

080023ac <micros>:
		_micro += 65535;
	}
}

inline uint64_t micros()
{
 80023ac:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80023b0:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <micros+0x2c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	4619      	mov	r1, r3
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <micros+0x30>)
 80023c0:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80023c4:	eb1b 0301 	adds.w	r3, fp, r1
 80023c8:	eb4c 0402 	adc.w	r4, ip, r2
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	4621      	mov	r1, r4
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80023d6:	4770      	bx	lr
 80023d8:	20000418 	.word	0x20000418
 80023dc:	20000218 	.word	0x20000218

080023e0 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data = -1 ;
 80023e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ea:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <UARTRecieveIT+0x58>)
 80023ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <UARTRecieveIT+0x58>)
 80023f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <UARTRecieveIT+0x5c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d010      	beq.n	8002426 <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 8002404:	4b0d      	ldr	r3, [pc, #52]	; (800243c <UARTRecieveIT+0x5c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <UARTRecieveIT+0x60>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <UARTRecieveIT+0x5c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	4a08      	ldr	r2, [pc, #32]	; (8002438 <UARTRecieveIT+0x58>)
 8002416:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002418:	fbb3 f1f2 	udiv	r1, r3, r2
 800241c:	fb02 f201 	mul.w	r2, r2, r1
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	4a06      	ldr	r2, [pc, #24]	; (800243c <UARTRecieveIT+0x5c>)
 8002424:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200004b8 	.word	0x200004b8
 800243c:	20000328 	.word	0x20000328
 8002440:	20000260 	.word	0x20000260

08002444 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800244c:	4807      	ldr	r0, [pc, #28]	; (800246c <HAL_UART_RxCpltCallback+0x28>)
 800244e:	f7fd fec7 	bl	80001e0 <strlen>
 8002452:	4603      	mov	r3, r0
 8002454:	b29a      	uxth	r2, r3
 8002456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245a:	4904      	ldr	r1, [pc, #16]	; (800246c <HAL_UART_RxCpltCallback+0x28>)
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <HAL_UART_RxCpltCallback+0x2c>)
 800245e:	f003 f8da 	bl	8005616 <HAL_UART_Transmit>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000240 	.word	0x20000240
 8002470:	200004b8 	.word	0x200004b8

08002474 <Print_Menu_Saw>:

//////////////////////////////////////////Print

void Print_Menu_Saw()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b0fc      	sub	sp, #496	; 0x1f0
 8002478:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Sawtooth Wave Menu---  \r\n\r\n"
 800247a:	463b      	mov	r3, r7
 800247c:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <Print_Menu_Saw+0x38>)
 800247e:	4618      	mov	r0, r3
 8002480:	4611      	mov	r1, r2
 8002482:	f240 13ed 	movw	r3, #493	; 0x1ed
 8002486:	461a      	mov	r2, r3
 8002488:	f003 ffda 	bl	8006440 <memcpy>

			  "Parameter_specific\r\n"
			  "__press [u] for slopeUp/slopeDown\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 800248c:	463b      	mov	r3, r7
 800248e:	4618      	mov	r0, r3
 8002490:	f7fd fea6 	bl	80001e0 <strlen>
 8002494:	4603      	mov	r3, r0
 8002496:	b29a      	uxth	r2, r3
 8002498:	4639      	mov	r1, r7
 800249a:	2364      	movs	r3, #100	; 0x64
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <Print_Menu_Saw+0x3c>)
 800249e:	f003 f8ba 	bl	8005616 <HAL_UART_Transmit>
}
 80024a2:	bf00      	nop
 80024a4:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	0800af18 	.word	0x0800af18
 80024b0:	200004b8 	.word	0x200004b8

080024b4 <Print_Menu_Sin>:

void Print_Menu_Sin()
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0ee      	sub	sp, #440	; 0x1b8
 80024b8:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Sine Wave Menu---  \r\n\r\n"
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <Print_Menu_Sin+0x38>)
 80024be:	4618      	mov	r0, r3
 80024c0:	4611      	mov	r1, r2
 80024c2:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 80024c6:	461a      	mov	r2, r3
 80024c8:	f003 ffba 	bl	8006440 <memcpy>
			  "Parameter_High Volt (0-3.3V)\r\n"
			  "__press [w] for High Volt + 0.1V\r\n"
			  "__press [r] for High Volt - 0.1V\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fd fe86 	bl	80001e0 <strlen>
 80024d4:	4603      	mov	r3, r0
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	1d39      	adds	r1, r7, #4
 80024da:	2364      	movs	r3, #100	; 0x64
 80024dc:	4804      	ldr	r0, [pc, #16]	; (80024f0 <Print_Menu_Sin+0x3c>)
 80024de:	f003 f89a 	bl	8005616 <HAL_UART_Transmit>
}
 80024e2:	bf00      	nop
 80024e4:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	0800b108 	.word	0x0800b108
 80024f0:	200004b8 	.word	0x200004b8

080024f4 <Print_Menu_Squ>:

void Print_Menu_Squ()
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80024fa:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Square Wave Menu---  \r\n\r\n"
 80024fc:	463b      	mov	r3, r7
 80024fe:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <Print_Menu_Squ+0x3c>)
 8002500:	4618      	mov	r0, r3
 8002502:	4611      	mov	r1, r2
 8002504:	f240 2317 	movw	r3, #535	; 0x217
 8002508:	461a      	mov	r2, r3
 800250a:	f003 ff99 	bl	8006440 <memcpy>
			  "Parameter_specific (0-100%)\r\n"
			  "__press [j] for duty cycle + 10%\r\n"
			  "__press [l] for duty cycle - 10%\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 800250e:	463b      	mov	r3, r7
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd fe65 	bl	80001e0 <strlen>
 8002516:	4603      	mov	r3, r0
 8002518:	b29a      	uxth	r2, r3
 800251a:	4639      	mov	r1, r7
 800251c:	2364      	movs	r3, #100	; 0x64
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <Print_Menu_Squ+0x40>)
 8002520:	f003 f879 	bl	8005616 <HAL_UART_Transmit>
}
 8002524:	bf00      	nop
 8002526:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	0800b2bc 	.word	0x0800b2bc
 8002534:	200004b8 	.word	0x200004b8

08002538 <Print_fq>:

void Print_fq()
{
 8002538:	b598      	push	{r3, r4, r7, lr}
 800253a:	af00      	add	r7, sp, #0
//	  Period = (1.0/Freq)*1000.0 ;		//millisecond
//	  Half_Period = Period/2.0 ;

      //char fq[]= ("frequency of LED is: %d \r\n", Freq);
	  sprintf(fq, "frequency of LED is: %.1f \r\n", Freq);
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <Print_fq+0x38>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f809 	bl	8000558 <__aeabi_f2d>
 8002546:	4603      	mov	r3, r0
 8002548:	460c      	mov	r4, r1
 800254a:	461a      	mov	r2, r3
 800254c:	4623      	mov	r3, r4
 800254e:	4909      	ldr	r1, [pc, #36]	; (8002574 <Print_fq+0x3c>)
 8002550:	4809      	ldr	r0, [pc, #36]	; (8002578 <Print_fq+0x40>)
 8002552:	f004 fdcd 	bl	80070f0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)fq, strlen(fq),100);
 8002556:	4808      	ldr	r0, [pc, #32]	; (8002578 <Print_fq+0x40>)
 8002558:	f7fd fe42 	bl	80001e0 <strlen>
 800255c:	4603      	mov	r3, r0
 800255e:	b29a      	uxth	r2, r3
 8002560:	2364      	movs	r3, #100	; 0x64
 8002562:	4905      	ldr	r1, [pc, #20]	; (8002578 <Print_fq+0x40>)
 8002564:	4805      	ldr	r0, [pc, #20]	; (800257c <Print_fq+0x44>)
 8002566:	f003 f856 	bl	8005616 <HAL_UART_Transmit>

}
 800256a:	bf00      	nop
 800256c:	bd98      	pop	{r3, r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	20000004 	.word	0x20000004
 8002574:	0800b4d4 	.word	0x0800b4d4
 8002578:	20000280 	.word	0x20000280
 800257c:	200004b8 	.word	0x200004b8

08002580 <Print_Error>:

void Print_Error()
{
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
	  char Eror[]="Error : Out of choice\r\n";
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <Print_Error+0x38>)
 8002588:	463c      	mov	r4, r7
 800258a:	461d      	mov	r5, r3
 800258c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002590:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002594:	e884 0003 	stmia.w	r4, {r0, r1}
	  HAL_UART_Transmit(&huart2, (uint8_t*)Eror, strlen(Eror),100);
 8002598:	463b      	mov	r3, r7
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd fe20 	bl	80001e0 <strlen>
 80025a0:	4603      	mov	r3, r0
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	4639      	mov	r1, r7
 80025a6:	2364      	movs	r3, #100	; 0x64
 80025a8:	4804      	ldr	r0, [pc, #16]	; (80025bc <Print_Error+0x3c>)
 80025aa:	f003 f834 	bl	8005616 <HAL_UART_Transmit>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bdb0      	pop	{r4, r5, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	0800b4f4 	.word	0x0800b4f4
 80025bc:	200004b8 	.word	0x200004b8

080025c0 <Print_Slope>:

void Print_Slope()
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
	if (Slope == 1)
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <Print_Slope+0x64>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d116      	bne.n	80025fc <Print_Slope+0x3c>
	{
		char D[]="Slope Up\r\n";
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <Print_Slope+0x68>)
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80025d6:	c303      	stmia	r3!, {r0, r1}
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	3302      	adds	r3, #2
 80025dc:	0c12      	lsrs	r2, r2, #16
 80025de:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd fdfb 	bl	80001e0 <strlen>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	f107 0114 	add.w	r1, r7, #20
 80025f2:	2364      	movs	r3, #100	; 0x64
 80025f4:	480d      	ldr	r0, [pc, #52]	; (800262c <Print_Slope+0x6c>)
 80025f6:	f003 f80e 	bl	8005616 <HAL_UART_Transmit>
	{
		char D[]="Slope Down\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
	}

}
 80025fa:	e00f      	b.n	800261c <Print_Slope+0x5c>
		char D[]="Slope Down\r\n";
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <Print_Slope+0x70>)
 80025fe:	1d3c      	adds	r4, r7, #4
 8002600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002602:	c407      	stmia	r4!, {r0, r1, r2}
 8002604:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd fde9 	bl	80001e0 <strlen>
 800260e:	4603      	mov	r3, r0
 8002610:	b29a      	uxth	r2, r3
 8002612:	1d39      	adds	r1, r7, #4
 8002614:	2364      	movs	r3, #100	; 0x64
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <Print_Slope+0x6c>)
 8002618:	f002 fffd 	bl	8005616 <HAL_UART_Transmit>
}
 800261c:	bf00      	nop
 800261e:	3724      	adds	r7, #36	; 0x24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	2000000c 	.word	0x2000000c
 8002628:	0800b50c 	.word	0x0800b50c
 800262c:	200004b8 	.word	0x200004b8
 8002630:	0800b518 	.word	0x0800b518

08002634 <Print_Duty>:

void Print_Duty()
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	  sprintf(Duty, "Duty cycle is: %d% \r\n",duty);
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <Print_Duty+0x2c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4909      	ldr	r1, [pc, #36]	; (8002664 <Print_Duty+0x30>)
 8002640:	4809      	ldr	r0, [pc, #36]	; (8002668 <Print_Duty+0x34>)
 8002642:	f004 fd55 	bl	80070f0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)Duty, strlen(Duty),100);
 8002646:	4808      	ldr	r0, [pc, #32]	; (8002668 <Print_Duty+0x34>)
 8002648:	f7fd fdca 	bl	80001e0 <strlen>
 800264c:	4603      	mov	r3, r0
 800264e:	b29a      	uxth	r2, r3
 8002650:	2364      	movs	r3, #100	; 0x64
 8002652:	4905      	ldr	r1, [pc, #20]	; (8002668 <Print_Duty+0x34>)
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <Print_Duty+0x38>)
 8002656:	f002 ffde 	bl	8005616 <HAL_UART_Transmit>
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000010 	.word	0x20000010
 8002664:	0800b528 	.word	0x0800b528
 8002668:	200002e0 	.word	0x200002e0
 800266c:	200004b8 	.word	0x200004b8

08002670 <Print_Volt>:

void Print_Volt()
{
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002672:	b083      	sub	sp, #12
 8002674:	af02      	add	r7, sp, #8
	  sprintf(Volt, "Low Volt is: %.1f \r\n"
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <Print_Volt+0x50>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fd ff6c 	bl	8000558 <__aeabi_f2d>
 8002680:	4605      	mov	r5, r0
 8002682:	460e      	mov	r6, r1
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <Print_Volt+0x54>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff65 	bl	8000558 <__aeabi_f2d>
 800268e:	4603      	mov	r3, r0
 8002690:	460c      	mov	r4, r1
 8002692:	e9cd 3400 	strd	r3, r4, [sp]
 8002696:	462a      	mov	r2, r5
 8002698:	4633      	mov	r3, r6
 800269a:	490b      	ldr	r1, [pc, #44]	; (80026c8 <Print_Volt+0x58>)
 800269c:	480b      	ldr	r0, [pc, #44]	; (80026cc <Print_Volt+0x5c>)
 800269e:	f004 fd27 	bl	80070f0 <siprintf>
			  	  	"High Volt is: %.1f \r\n", L_Volt,H_Volt);
	  HAL_UART_Transmit(&huart2, (uint8_t*)Volt, strlen(Volt),100);
 80026a2:	480a      	ldr	r0, [pc, #40]	; (80026cc <Print_Volt+0x5c>)
 80026a4:	f7fd fd9c 	bl	80001e0 <strlen>
 80026a8:	4603      	mov	r3, r0
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	2364      	movs	r3, #100	; 0x64
 80026ae:	4907      	ldr	r1, [pc, #28]	; (80026cc <Print_Volt+0x5c>)
 80026b0:	4807      	ldr	r0, [pc, #28]	; (80026d0 <Print_Volt+0x60>)
 80026b2:	f002 ffb0 	bl	8005616 <HAL_UART_Transmit>
}
 80026b6:	bf00      	nop
 80026b8:	3704      	adds	r7, #4
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000022c 	.word	0x2000022c
 80026c4:	20000008 	.word	0x20000008
 80026c8:	0800b540 	.word	0x0800b540
 80026cc:	200002a0 	.word	0x200002a0
 80026d0:	200004b8 	.word	0x200004b8

080026d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80026da:	e7fe      	b.n	80026da <Error_Handler+0x6>

080026dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <HAL_MspInit+0x4c>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	; 0x44
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_MspInit+0x4c>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800271a:	2007      	movs	r0, #7
 800271c:	f000 ff3c 	bl	8003598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800

0800272c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2f      	ldr	r2, [pc, #188]	; (8002808 <HAL_ADC_MspInit+0xdc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d157      	bne.n	80027fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_ADC_MspInit+0xe0>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a2d      	ldr	r2, [pc, #180]	; (800280c <HAL_ADC_MspInit+0xe0>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_ADC_MspInit+0xe0>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_ADC_MspInit+0xe0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a26      	ldr	r2, [pc, #152]	; (800280c <HAL_ADC_MspInit+0xe0>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_ADC_MspInit+0xe0>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002786:	2301      	movs	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278a:	2303      	movs	r3, #3
 800278c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	481d      	ldr	r0, [pc, #116]	; (8002810 <HAL_ADC_MspInit+0xe4>)
 800279a:	f001 facf 	bl	8003d3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_ADC_MspInit+0xec>)
 80027a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027e2:	480c      	ldr	r0, [pc, #48]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027e4:	f000 ff1a 	bl	800361c <HAL_DMA_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027ee:	f7ff ff71 	bl	80026d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
 80027f8:	4a06      	ldr	r2, [pc, #24]	; (8002814 <HAL_ADC_MspInit+0xe8>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40012000 	.word	0x40012000
 800280c:	40023800 	.word	0x40023800
 8002810:	40020000 	.word	0x40020000
 8002814:	20000458 	.word	0x20000458
 8002818:	40026410 	.word	0x40026410

0800281c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_SPI_MspInit+0x94>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d133      	bne.n	80028a6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <HAL_SPI_MspInit+0x98>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_SPI_MspInit+0x98>)
 8002848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_SPI_MspInit+0x98>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_SPI_MspInit+0x98>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_SPI_MspInit+0x98>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_SPI_MspInit+0x98>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002876:	2338      	movs	r3, #56	; 0x38
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002886:	2306      	movs	r3, #6
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	4809      	ldr	r0, [pc, #36]	; (80028b8 <HAL_SPI_MspInit+0x9c>)
 8002892:	f001 fa53 	bl	8003d3c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2033      	movs	r0, #51	; 0x33
 800289c:	f000 fe87 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80028a0:	2033      	movs	r0, #51	; 0x33
 80028a2:	f000 fea0 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80028a6:	bf00      	nop
 80028a8:	3728      	adds	r7, #40	; 0x28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40003c00 	.word	0x40003c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020400 	.word	0x40020400

080028bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <HAL_TIM_Base_MspInit+0x64>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_TIM_Base_MspInit+0x68>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a13      	ldr	r2, [pc, #76]	; (8002924 <HAL_TIM_Base_MspInit+0x68>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_TIM_Base_MspInit+0x68>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80028ea:	e012      	b.n	8002912 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_TIM_Base_MspInit+0x6c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10d      	bne.n	8002912 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_TIM_Base_MspInit+0x68>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <HAL_TIM_Base_MspInit+0x68>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_TIM_Base_MspInit+0x68>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40000400 	.word	0x40000400
 8002924:	40023800 	.word	0x40023800
 8002928:	40014800 	.word	0x40014800

0800292c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <HAL_UART_MspInit+0x94>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d133      	bne.n	80029b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_UART_MspInit+0x98>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_UART_MspInit+0x98>)
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_UART_MspInit+0x98>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_UART_MspInit+0x98>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_UART_MspInit+0x98>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_UART_MspInit+0x98>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002986:	230c      	movs	r3, #12
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002996:	2307      	movs	r3, #7
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4809      	ldr	r0, [pc, #36]	; (80029c8 <HAL_UART_MspInit+0x9c>)
 80029a2:	f001 f9cb 	bl	8003d3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2026      	movs	r0, #38	; 0x26
 80029ac:	f000 fdff 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029b0:	2026      	movs	r0, #38	; 0x26
 80029b2:	f000 fe18 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40004400 	.word	0x40004400
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000

080029cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <NMI_Handler+0x4>

080029d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <MemManage_Handler+0x4>

080029de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <BusFault_Handler+0x4>

080029e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <UsageFault_Handler+0x4>

080029ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a18:	f000 f8e8 	bl	8002bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <USART2_IRQHandler+0x10>)
 8002a26:	f002 fee5 	bl	80057f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200004b8 	.word	0x200004b8

08002a34 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <SPI3_IRQHandler+0x10>)
 8002a3a:	f002 f87b 	bl	8004b34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000378 	.word	0x20000378

08002a48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <DMA2_Stream0_IRQHandler+0x10>)
 8002a4e:	f000 ff0d 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000458 	.word	0x20000458

08002a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <_sbrk+0x5c>)
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <_sbrk+0x60>)
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <_sbrk+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <_sbrk+0x64>)
 8002a7a:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <_sbrk+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d207      	bcs.n	8002a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a8c:	f003 fcae 	bl	80063ec <__errno>
 8002a90:	4602      	mov	r2, r0
 8002a92:	230c      	movs	r3, #12
 8002a94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	e009      	b.n	8002ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <_sbrk+0x64>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <_sbrk+0x64>)
 8002aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20020000 	.word	0x20020000
 8002abc:	00000400 	.word	0x00000400
 8002ac0:	2000032c 	.word	0x2000032c
 8002ac4:	20000500 	.word	0x20000500

08002ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <SystemInit+0x28>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <SystemInit+0x28>)
 8002ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SystemInit+0x28>)
 8002ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002afa:	e003      	b.n	8002b04 <LoopCopyDataInit>

08002afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b02:	3104      	adds	r1, #4

08002b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b04:	480b      	ldr	r0, [pc, #44]	; (8002b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b0c:	d3f6      	bcc.n	8002afc <CopyDataInit>
  ldr  r2, =_sbss
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b10:	e002      	b.n	8002b18 <LoopFillZerobss>

08002b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b14:	f842 3b04 	str.w	r3, [r2], #4

08002b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b1c:	d3f9      	bcc.n	8002b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b1e:	f7ff ffd3 	bl	8002ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b22:	f003 fc69 	bl	80063f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b26:	f7fe fa37 	bl	8000f98 <main>
  bx  lr    
 8002b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b30:	0800ba28 	.word	0x0800ba28
  ldr  r0, =_sdata
 8002b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b38:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002b3c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8002b40:	20000500 	.word	0x20000500

08002b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b44:	e7fe      	b.n	8002b44 <ADC_IRQHandler>
	...

08002b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_Init+0x40>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0d      	ldr	r2, [pc, #52]	; (8002b88 <HAL_Init+0x40>)
 8002b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_Init+0x40>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_Init+0x40>)
 8002b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_Init+0x40>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <HAL_Init+0x40>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b70:	2003      	movs	r0, #3
 8002b72:	f000 fd11 	bl	8003598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f000 f808 	bl	8002b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b7c:	f7ff fdae 	bl	80026dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00

08002b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_InitTick+0x54>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_InitTick+0x58>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fd29 	bl	8003602 <HAL_SYSTICK_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00e      	b.n	8002bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b0f      	cmp	r3, #15
 8002bbe:	d80a      	bhi.n	8002bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f000 fcf1 	bl	80035ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bcc:	4a06      	ldr	r2, [pc, #24]	; (8002be8 <HAL_InitTick+0x5c>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000018 	.word	0x20000018
 8002be4:	20000020 	.word	0x20000020
 8002be8:	2000001c 	.word	0x2000001c

08002bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_IncTick+0x20>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_IncTick+0x24>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_IncTick+0x24>)
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000020 	.word	0x20000020
 8002c10:	200004f8 	.word	0x200004f8

08002c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return uwTick;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_GetTick+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	200004f8 	.word	0x200004f8

08002c2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e033      	b.n	8002caa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fd6e 	bl	800272c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d118      	bne.n	8002c9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c72:	f023 0302 	bic.w	r3, r3, #2
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa3c 	bl	80030fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
 8002c9a:	e001      	b.n	8002ca0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Start_DMA+0x1e>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e0b1      	b.n	8002e36 <HAL_ADC_Start_DMA+0x182>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d018      	beq.n	8002d1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cf8:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_ADC_Start_DMA+0x18c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_ADC_Start_DMA+0x190>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0c9a      	lsrs	r2, r3, #18
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d0c:	e002      	b.n	8002d14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f9      	bne.n	8002d0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 8085 	bne.w	8002e34 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d68:	d106      	bne.n	8002d78 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f023 0206 	bic.w	r2, r3, #6
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
 8002d76:	e002      	b.n	8002d7e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <HAL_ADC_Start_DMA+0x194>)
 8002d88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <HAL_ADC_Start_DMA+0x198>)
 8002d90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	4a2e      	ldr	r2, [pc, #184]	; (8002e50 <HAL_ADC_Start_DMA+0x19c>)
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <HAL_ADC_Start_DMA+0x1a0>)
 8002da0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002daa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002dba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	334c      	adds	r3, #76	; 0x4c
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f000 fccc 	bl	8003778 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10f      	bne.n	8002e0c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11c      	bne.n	8002e34 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e013      	b.n	8002e34 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_ADC_Start_DMA+0x1a4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10e      	bne.n	8002e34 <HAL_ADC_Start_DMA+0x180>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e32:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000018 	.word	0x20000018
 8002e44:	431bde83 	.word	0x431bde83
 8002e48:	40012300 	.word	0x40012300
 8002e4c:	080032f5 	.word	0x080032f5
 8002e50:	080033af 	.word	0x080033af
 8002e54:	080033cb 	.word	0x080033cb
 8002e58:	40012000 	.word	0x40012000

08002e5c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1c>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e113      	b.n	80030dc <HAL_ADC_ConfigChannel+0x244>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d925      	bls.n	8002f10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68d9      	ldr	r1, [r3, #12]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b1e      	subs	r3, #30
 8002eda:	2207      	movs	r2, #7
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68d9      	ldr	r1, [r3, #12]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4618      	mov	r0, r3
 8002efc:	4603      	mov	r3, r0
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4403      	add	r3, r0
 8002f02:	3b1e      	subs	r3, #30
 8002f04:	409a      	lsls	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	e022      	b.n	8002f56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	2207      	movs	r2, #7
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6919      	ldr	r1, [r3, #16]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	4618      	mov	r0, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4403      	add	r3, r0
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d824      	bhi.n	8002fa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3b05      	subs	r3, #5
 8002f70:	221f      	movs	r2, #31
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	3b05      	subs	r3, #5
 8002f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa6:	e04c      	b.n	8003042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d824      	bhi.n	8002ffa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3b23      	subs	r3, #35	; 0x23
 8002fc2:	221f      	movs	r2, #31
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	400a      	ands	r2, r1
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b23      	subs	r3, #35	; 0x23
 8002fec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff8:	e023      	b.n	8003042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	3b41      	subs	r3, #65	; 0x41
 800300c:	221f      	movs	r2, #31
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	400a      	ands	r2, r1
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b41      	subs	r3, #65	; 0x41
 8003036:	fa00 f203 	lsl.w	r2, r0, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_ADC_ConfigChannel+0x250>)
 8003044:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a28      	ldr	r2, [pc, #160]	; (80030ec <HAL_ADC_ConfigChannel+0x254>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10f      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x1d8>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b12      	cmp	r3, #18
 8003056:	d10b      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <HAL_ADC_ConfigChannel+0x254>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d12b      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x23a>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_ADC_ConfigChannel+0x258>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <HAL_ADC_ConfigChannel+0x1f4>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b11      	cmp	r3, #17
 800308a:	d122      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <HAL_ADC_ConfigChannel+0x258>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d111      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_ADC_ConfigChannel+0x25c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_ADC_ConfigChannel+0x260>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	0c9a      	lsrs	r2, r3, #18
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030c4:	e002      	b.n	80030cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f9      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40012300 	.word	0x40012300
 80030ec:	40012000 	.word	0x40012000
 80030f0:	10000012 	.word	0x10000012
 80030f4:	20000018 	.word	0x20000018
 80030f8:	431bde83 	.word	0x431bde83

080030fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003104:	4b79      	ldr	r3, [pc, #484]	; (80032ec <ADC_Init+0x1f0>)
 8003106:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003130:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	021a      	lsls	r2, r3, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <ADC_Init+0x1f4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d022      	beq.n	80031da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	e00f      	b.n	80031fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0202 	bic.w	r2, r2, #2
 8003208:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6899      	ldr	r1, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7e1b      	ldrb	r3, [r3, #24]
 8003214:	005a      	lsls	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003236:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003246:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	3b01      	subs	r3, #1
 8003254:	035a      	lsls	r2, r3, #13
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	e007      	b.n	8003270 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	3b01      	subs	r3, #1
 800328c:	051a      	lsls	r2, r3, #20
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6899      	ldr	r1, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032b2:	025a      	lsls	r2, r3, #9
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6899      	ldr	r1, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	029a      	lsls	r2, r3, #10
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40012300 	.word	0x40012300
 80032f0:	0f000001 	.word	0x0f000001

080032f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800330a:	2b00      	cmp	r3, #0
 800330c:	d13c      	bne.n	8003388 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d12b      	bne.n	8003380 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800332c:	2b00      	cmp	r3, #0
 800332e:	d127      	bne.n	8003380 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003348:	2b00      	cmp	r3, #0
 800334a:	d119      	bne.n	8003380 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0220 	bic.w	r2, r2, #32
 800335a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fd6b 	bl	8002e5c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003386:	e00e      	b.n	80033a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f7ff fd75 	bl	8002e84 <HAL_ADC_ErrorCallback>
}
 800339a:	e004      	b.n	80033a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff fd57 	bl	8002e70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2240      	movs	r2, #64	; 0x40
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f043 0204 	orr.w	r2, r3, #4
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7ff fd4a 	bl	8002e84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342a:	4a04      	ldr	r2, [pc, #16]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60d3      	str	r3, [r2, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_GetPriorityGrouping+0x18>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	f003 0307 	and.w	r3, r3, #7
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db0b      	blt.n	8003486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4907      	ldr	r1, [pc, #28]	; (8003494 <__NVIC_EnableIRQ+0x38>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000e100 	.word	0xe000e100

08003498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db0a      	blt.n	80034c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	490c      	ldr	r1, [pc, #48]	; (80034e4 <__NVIC_SetPriority+0x4c>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	440b      	add	r3, r1
 80034bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c0:	e00a      	b.n	80034d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4908      	ldr	r1, [pc, #32]	; (80034e8 <__NVIC_SetPriority+0x50>)
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3b04      	subs	r3, #4
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	440b      	add	r3, r1
 80034d6:	761a      	strb	r2, [r3, #24]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f1c3 0307 	rsb	r3, r3, #7
 8003506:	2b04      	cmp	r3, #4
 8003508:	bf28      	it	cs
 800350a:	2304      	movcs	r3, #4
 800350c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3304      	adds	r3, #4
 8003512:	2b06      	cmp	r3, #6
 8003514:	d902      	bls.n	800351c <NVIC_EncodePriority+0x30>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3b03      	subs	r3, #3
 800351a:	e000      	b.n	800351e <NVIC_EncodePriority+0x32>
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	401a      	ands	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003534:	f04f 31ff 	mov.w	r1, #4294967295
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	43d9      	mvns	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	4313      	orrs	r3, r2
         );
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003564:	d301      	bcc.n	800356a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003566:	2301      	movs	r3, #1
 8003568:	e00f      	b.n	800358a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <SysTick_Config+0x40>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003572:	210f      	movs	r1, #15
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	f7ff ff8e 	bl	8003498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SysTick_Config+0x40>)
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <SysTick_Config+0x40>)
 8003584:	2207      	movs	r2, #7
 8003586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	e000e010 	.word	0xe000e010

08003598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff29 	bl	80033f8 <__NVIC_SetPriorityGrouping>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c0:	f7ff ff3e 	bl	8003440 <__NVIC_GetPriorityGrouping>
 80035c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff8e 	bl	80034ec <NVIC_EncodePriority>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff5d 	bl	8003498 <__NVIC_SetPriority>
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff31 	bl	800345c <__NVIC_EnableIRQ>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffa2 	bl	8003554 <SysTick_Config>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff faf4 	bl	8002c14 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e099      	b.n	800376c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003658:	e00f      	b.n	800367a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365a:	f7ff fadb 	bl	8002c14 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b05      	cmp	r3, #5
 8003666:	d908      	bls.n	800367a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2203      	movs	r2, #3
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e078      	b.n	800376c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e8      	bne.n	800365a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_DMA_Init+0x158>)
 8003694:	4013      	ands	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d107      	bne.n	80036e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4313      	orrs	r3, r2
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0307 	bic.w	r3, r3, #7
 80036fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b04      	cmp	r3, #4
 800370c:	d117      	bne.n	800373e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fa91 	bl	8003c48 <DMA_CheckFifoParam>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800373a:	2301      	movs	r3, #1
 800373c:	e016      	b.n	800376c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa48 	bl	8003bdc <DMA_CalcBaseAndBitshift>
 800374c:	4603      	mov	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	223f      	movs	r2, #63	; 0x3f
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	f010803f 	.word	0xf010803f

08003778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_DMA_Start_IT+0x26>
 800379a:	2302      	movs	r3, #2
 800379c:	e040      	b.n	8003820 <HAL_DMA_Start_IT+0xa8>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d12f      	bne.n	8003812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f9da 	bl	8003b80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	223f      	movs	r2, #63	; 0x3f
 80037d2:	409a      	lsls	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0216 	orr.w	r2, r2, #22
 80037e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e005      	b.n	800381e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800381a:	2302      	movs	r3, #2
 800381c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e00c      	b.n	8003860 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2205      	movs	r2, #5
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003878:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_DMA_IRQHandler+0x258>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a92      	ldr	r2, [pc, #584]	; (8003ac8 <HAL_DMA_IRQHandler+0x25c>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2208      	movs	r2, #8
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01a      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	2208      	movs	r2, #8
 80038c6:	409a      	lsls	r2, r3
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	2201      	movs	r2, #1
 80038fc:	409a      	lsls	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2204      	movs	r2, #4
 8003914:	409a      	lsls	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2204      	movs	r2, #4
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2210      	movs	r2, #16
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d043      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2210      	movs	r2, #16
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d018      	beq.n	80039ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d024      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e01f      	b.n	80039dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e016      	b.n	80039dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0208 	bic.w	r2, r2, #8
 80039ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2220      	movs	r2, #32
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 808e 	beq.w	8003b0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8086 	beq.w	8003b0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2220      	movs	r2, #32
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d136      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0216 	bic.w	r2, r2, #22
 8003a24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x1da>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0208 	bic.w	r2, r2, #8
 8003a54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	223f      	movs	r2, #63	; 0x3f
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d07d      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
        }
        return;
 8003a82:	e078      	b.n	8003b76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01c      	beq.n	8003acc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d030      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e02b      	b.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d027      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e022      	b.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
 8003ac4:	20000018 	.word	0x20000018
 8003ac8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0210 	bic.w	r2, r2, #16
 8003ae8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d032      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d022      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2205      	movs	r2, #5
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d307      	bcc.n	8003b52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f2      	bne.n	8003b36 <HAL_DMA_IRQHandler+0x2ca>
 8003b50:	e000      	b.n	8003b54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
 8003b74:	e000      	b.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b76:	bf00      	nop
    }
  }
}
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop

08003b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d108      	bne.n	8003bc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bbe:	e007      	b.n	8003bd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3b10      	subs	r3, #16
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <DMA_CalcBaseAndBitshift+0x64>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <DMA_CalcBaseAndBitshift+0x68>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d909      	bls.n	8003c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c1c:	e007      	b.n	8003c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	aaaaaaab 	.word	0xaaaaaaab
 8003c44:	0800b584 	.word	0x0800b584

08003c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11f      	bne.n	8003ca2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d855      	bhi.n	8003d14 <DMA_CheckFifoParam+0xcc>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <DMA_CheckFifoParam+0x28>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c93 	.word	0x08003c93
 8003c78:	08003c81 	.word	0x08003c81
 8003c7c:	08003d15 	.word	0x08003d15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d045      	beq.n	8003d18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c90:	e042      	b.n	8003d18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c9a:	d13f      	bne.n	8003d1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e03c      	b.n	8003d1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	d121      	bne.n	8003cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d836      	bhi.n	8003d20 <DMA_CheckFifoParam+0xd8>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <DMA_CheckFifoParam+0x70>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003ccf 	.word	0x08003ccf
 8003cc0:	08003cc9 	.word	0x08003cc9
 8003cc4:	08003ce1 	.word	0x08003ce1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e02f      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d024      	beq.n	8003d24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cde:	e021      	b.n	8003d24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ce8:	d11e      	bne.n	8003d28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cee:	e01b      	b.n	8003d28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d902      	bls.n	8003cfc <DMA_CheckFifoParam+0xb4>
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d003      	beq.n	8003d02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cfa:	e018      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003d00:	e015      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00e      	beq.n	8003d2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      break;
 8003d12:	e00b      	b.n	8003d2c <DMA_CheckFifoParam+0xe4>
      break;
 8003d14:	bf00      	nop
 8003d16:	e00a      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d18:	bf00      	nop
 8003d1a:	e008      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d1c:	bf00      	nop
 8003d1e:	e006      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d20:	bf00      	nop
 8003d22:	e004      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;   
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d2c:	bf00      	nop
    }
  } 
  
  return status; 
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e159      	b.n	800400c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	f040 8148 	bne.w	8004006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d00b      	beq.n	8003d96 <HAL_GPIO_Init+0x5a>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d007      	beq.n	8003d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d8a:	2b11      	cmp	r3, #17
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b12      	cmp	r3, #18
 8003d94:	d130      	bne.n	8003df8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	2203      	movs	r2, #3
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 0201 	and.w	r2, r3, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0xfc>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b12      	cmp	r3, #18
 8003e36:	d123      	bne.n	8003e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	08da      	lsrs	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3208      	adds	r2, #8
 8003e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	08da      	lsrs	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3208      	adds	r2, #8
 8003e7a:	69b9      	ldr	r1, [r7, #24]
 8003e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a2 	beq.w	8004006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	4b56      	ldr	r3, [pc, #344]	; (8004020 <HAL_GPIO_Init+0x2e4>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	4a55      	ldr	r2, [pc, #340]	; (8004020 <HAL_GPIO_Init+0x2e4>)
 8003ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed2:	4b53      	ldr	r3, [pc, #332]	; (8004020 <HAL_GPIO_Init+0x2e4>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ede:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_GPIO_Init+0x2e8>)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a48      	ldr	r2, [pc, #288]	; (8004028 <HAL_GPIO_Init+0x2ec>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d019      	beq.n	8003f3e <HAL_GPIO_Init+0x202>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a47      	ldr	r2, [pc, #284]	; (800402c <HAL_GPIO_Init+0x2f0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_GPIO_Init+0x1fe>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a46      	ldr	r2, [pc, #280]	; (8004030 <HAL_GPIO_Init+0x2f4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00d      	beq.n	8003f36 <HAL_GPIO_Init+0x1fa>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a45      	ldr	r2, [pc, #276]	; (8004034 <HAL_GPIO_Init+0x2f8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <HAL_GPIO_Init+0x1f6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a44      	ldr	r2, [pc, #272]	; (8004038 <HAL_GPIO_Init+0x2fc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_GPIO_Init+0x1f2>
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	e008      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f2e:	2307      	movs	r3, #7
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f32:	2303      	movs	r3, #3
 8003f34:	e004      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e002      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f002 0203 	and.w	r2, r2, #3
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	4093      	lsls	r3, r2
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f50:	4934      	ldr	r1, [pc, #208]	; (8004024 <HAL_GPIO_Init+0x2e8>)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5e:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_GPIO_Init+0x300>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f82:	4a2e      	ldr	r2, [pc, #184]	; (800403c <HAL_GPIO_Init+0x300>)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f88:	4b2c      	ldr	r3, [pc, #176]	; (800403c <HAL_GPIO_Init+0x300>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fac:	4a23      	ldr	r2, [pc, #140]	; (800403c <HAL_GPIO_Init+0x300>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fb2:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_GPIO_Init+0x300>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fd6:	4a19      	ldr	r2, [pc, #100]	; (800403c <HAL_GPIO_Init+0x300>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <HAL_GPIO_Init+0x300>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004000:	4a0e      	ldr	r2, [pc, #56]	; (800403c <HAL_GPIO_Init+0x300>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3301      	adds	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	f67f aea2 	bls.w	8003d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004014:	bf00      	nop
 8004016:	3724      	adds	r7, #36	; 0x24
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40023800 	.word	0x40023800
 8004024:	40013800 	.word	0x40013800
 8004028:	40020000 	.word	0x40020000
 800402c:	40020400 	.word	0x40020400
 8004030:	40020800 	.word	0x40020800
 8004034:	40020c00 	.word	0x40020c00
 8004038:	40021000 	.word	0x40021000
 800403c:	40013c00 	.word	0x40013c00

08004040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e001      	b.n	8004062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
 800407c:	4613      	mov	r3, r2
 800407e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004080:	787b      	ldrb	r3, [r7, #1]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800408c:	e003      	b.n	8004096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800408e:	887b      	ldrh	r3, [r7, #2]
 8004090:	041a      	lsls	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	619a      	str	r2, [r3, #24]
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e25b      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d075      	beq.n	80041ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040c2:	4ba3      	ldr	r3, [pc, #652]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d00c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4ba0      	ldr	r3, [pc, #640]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d112      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b9d      	ldr	r3, [pc, #628]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b99      	ldr	r3, [pc, #612]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05b      	beq.n	80041ac <HAL_RCC_OscConfig+0x108>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d157      	bne.n	80041ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e236      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x74>
 800410a:	4b91      	ldr	r3, [pc, #580]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a90      	ldr	r2, [pc, #576]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x98>
 8004122:	4b8b      	ldr	r3, [pc, #556]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a8a      	ldr	r2, [pc, #552]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b88      	ldr	r3, [pc, #544]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a87      	ldr	r2, [pc, #540]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 800413c:	4b84      	ldr	r3, [pc, #528]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a83      	ldr	r2, [pc, #524]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b81      	ldr	r3, [pc, #516]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a80      	ldr	r2, [pc, #512]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe fd5a 	bl	8002c14 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fd56 	bl	8002c14 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1fb      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b76      	ldr	r3, [pc, #472]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xc0>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe fd46 	bl	8002c14 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418c:	f7fe fd42 	bl	8002c14 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1e7      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	4b6c      	ldr	r3, [pc, #432]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0xe8>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d063      	beq.n	8004282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ba:	4b65      	ldr	r3, [pc, #404]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b62      	ldr	r3, [pc, #392]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d11c      	bne.n	800420c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b5f      	ldr	r3, [pc, #380]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d116      	bne.n	800420c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_RCC_OscConfig+0x152>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e1bb      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b56      	ldr	r3, [pc, #344]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4952      	ldr	r1, [pc, #328]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	e03a      	b.n	8004282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b4f      	ldr	r3, [pc, #316]	; (8004354 <HAL_RCC_OscConfig+0x2b0>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fe fcfb 	bl	8002c14 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004222:	f7fe fcf7 	bl	8002c14 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e19c      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	4b46      	ldr	r3, [pc, #280]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b43      	ldr	r3, [pc, #268]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4940      	ldr	r1, [pc, #256]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	e015      	b.n	8004282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004256:	4b3f      	ldr	r3, [pc, #252]	; (8004354 <HAL_RCC_OscConfig+0x2b0>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fe fcda 	bl	8002c14 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004264:	f7fe fcd6 	bl	8002c14 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e17b      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	4b36      	ldr	r3, [pc, #216]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d030      	beq.n	80042f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b30      	ldr	r3, [pc, #192]	; (8004358 <HAL_RCC_OscConfig+0x2b4>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe fcba 	bl	8002c14 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fe fcb6 	bl	8002c14 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e15b      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x200>
 80042c2:	e015      	b.n	80042f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c4:	4b24      	ldr	r3, [pc, #144]	; (8004358 <HAL_RCC_OscConfig+0x2b4>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fe fca3 	bl	8002c14 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fe fc9f 	bl	8002c14 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e144      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 80042e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a0 	beq.w	800443e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
 800431e:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_RCC_OscConfig+0x2b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d121      	bne.n	800437e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_RCC_OscConfig+0x2b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a07      	ldr	r2, [pc, #28]	; (800435c <HAL_RCC_OscConfig+0x2b8>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004346:	f7fe fc65 	bl	8002c14 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	e011      	b.n	8004372 <HAL_RCC_OscConfig+0x2ce>
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	42470000 	.word	0x42470000
 8004358:	42470e80 	.word	0x42470e80
 800435c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004360:	f7fe fc58 	bl	8002c14 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0fd      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b81      	ldr	r3, [pc, #516]	; (8004578 <HAL_RCC_OscConfig+0x4d4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d106      	bne.n	8004394 <HAL_RCC_OscConfig+0x2f0>
 8004386:	4b7d      	ldr	r3, [pc, #500]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a7c      	ldr	r2, [pc, #496]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
 8004392:	e01c      	b.n	80043ce <HAL_RCC_OscConfig+0x32a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b05      	cmp	r3, #5
 800439a:	d10c      	bne.n	80043b6 <HAL_RCC_OscConfig+0x312>
 800439c:	4b77      	ldr	r3, [pc, #476]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a76      	ldr	r2, [pc, #472]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80043a2:	f043 0304 	orr.w	r3, r3, #4
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
 80043a8:	4b74      	ldr	r3, [pc, #464]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	4a73      	ldr	r2, [pc, #460]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	; 0x70
 80043b4:	e00b      	b.n	80043ce <HAL_RCC_OscConfig+0x32a>
 80043b6:	4b71      	ldr	r3, [pc, #452]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a70      	ldr	r2, [pc, #448]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70
 80043c2:	4b6e      	ldr	r3, [pc, #440]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a6d      	ldr	r2, [pc, #436]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80043c8:	f023 0304 	bic.w	r3, r3, #4
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d015      	beq.n	8004402 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fe fc1d 	bl	8002c14 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043de:	f7fe fc19 	bl	8002c14 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0bc      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f4:	4b61      	ldr	r3, [pc, #388]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ee      	beq.n	80043de <HAL_RCC_OscConfig+0x33a>
 8004400:	e014      	b.n	800442c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004402:	f7fe fc07 	bl	8002c14 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fe fc03 	bl	8002c14 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0a6      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004420:	4b56      	ldr	r3, [pc, #344]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ee      	bne.n	800440a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4b52      	ldr	r3, [pc, #328]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a51      	ldr	r2, [pc, #324]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8092 	beq.w	800456c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004448:	4b4c      	ldr	r3, [pc, #304]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b08      	cmp	r3, #8
 8004452:	d05c      	beq.n	800450e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d141      	bne.n	80044e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445c:	4b48      	ldr	r3, [pc, #288]	; (8004580 <HAL_RCC_OscConfig+0x4dc>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004462:	f7fe fbd7 	bl	8002c14 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446a:	f7fe fbd3 	bl	8002c14 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e078      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	019b      	lsls	r3, r3, #6
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	3b01      	subs	r3, #1
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	4933      	ldr	r1, [pc, #204]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <HAL_RCC_OscConfig+0x4dc>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fe fbac 	bl	8002c14 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fe fba8 	bl	8002c14 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e04d      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d2:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x41c>
 80044de:	e045      	b.n	800456c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e0:	4b27      	ldr	r3, [pc, #156]	; (8004580 <HAL_RCC_OscConfig+0x4dc>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fe fb95 	bl	8002c14 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ee:	f7fe fb91 	bl	8002c14 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e036      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x44a>
 800450c:	e02e      	b.n	800456c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e029      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_RCC_OscConfig+0x4d8>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	429a      	cmp	r2, r3
 800452c:	d11c      	bne.n	8004568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d115      	bne.n	8004568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004542:	4013      	ands	r3, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004548:	4293      	cmp	r3, r2
 800454a:	d10d      	bne.n	8004568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004556:	429a      	cmp	r2, r3
 8004558:	d106      	bne.n	8004568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40007000 	.word	0x40007000
 800457c:	40023800 	.word	0x40023800
 8004580:	42470060 	.word	0x42470060

08004584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0cc      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004598:	4b68      	ldr	r3, [pc, #416]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d90c      	bls.n	80045c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a6:	4b65      	ldr	r3, [pc, #404]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	4b63      	ldr	r3, [pc, #396]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0b8      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d8:	4b59      	ldr	r3, [pc, #356]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a58      	ldr	r2, [pc, #352]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f0:	4b53      	ldr	r3, [pc, #332]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4a52      	ldr	r2, [pc, #328]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045fc:	4b50      	ldr	r3, [pc, #320]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	494d      	ldr	r1, [pc, #308]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d044      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d107      	bne.n	8004632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	4b47      	ldr	r3, [pc, #284]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d119      	bne.n	8004662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e07f      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d003      	beq.n	8004642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	2b03      	cmp	r3, #3
 8004640:	d107      	bne.n	8004652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004642:	4b3f      	ldr	r3, [pc, #252]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e06f      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004652:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e067      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004662:	4b37      	ldr	r3, [pc, #220]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 0203 	bic.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4934      	ldr	r1, [pc, #208]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004674:	f7fe face 	bl	8002c14 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	e00a      	b.n	8004692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467c:	f7fe faca 	bl	8002c14 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e04f      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 020c 	and.w	r2, r3, #12
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d1eb      	bne.n	800467c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a4:	4b25      	ldr	r3, [pc, #148]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d20c      	bcs.n	80046cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b20      	ldr	r3, [pc, #128]	; (800473c <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e032      	b.n	8004732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d8:	4b19      	ldr	r3, [pc, #100]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4916      	ldr	r1, [pc, #88]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	490e      	ldr	r1, [pc, #56]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	4313      	orrs	r3, r2
 8004708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800470a:	f000 f821 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 800470e:	4601      	mov	r1, r0
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	5cd3      	ldrb	r3, [r2, r3]
 800471e:	fa21 f303 	lsr.w	r3, r1, r3
 8004722:	4a09      	ldr	r2, [pc, #36]	; (8004748 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_ClockConfig+0x1c8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fa2e 	bl	8002b8c <HAL_InitTick>

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40023c00 	.word	0x40023c00
 8004740:	40023800 	.word	0x40023800
 8004744:	0800b56c 	.word	0x0800b56c
 8004748:	20000018 	.word	0x20000018
 800474c:	2000001c 	.word	0x2000001c

08004750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	2300      	movs	r3, #0
 8004760:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004766:	4b63      	ldr	r3, [pc, #396]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b04      	cmp	r3, #4
 8004770:	d007      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x32>
 8004772:	2b08      	cmp	r3, #8
 8004774:	d008      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x38>
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 80b4 	bne.w	80048e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b5e      	ldr	r3, [pc, #376]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800477e:	60bb      	str	r3, [r7, #8]
       break;
 8004780:	e0b3      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004782:	4b5e      	ldr	r3, [pc, #376]	; (80048fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004784:	60bb      	str	r3, [r7, #8]
      break;
 8004786:	e0b0      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004788:	4b5a      	ldr	r3, [pc, #360]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004790:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004792:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04a      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479e:	4b55      	ldr	r3, [pc, #340]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	f04f 0400 	mov.w	r4, #0
 80047a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	ea03 0501 	and.w	r5, r3, r1
 80047b4:	ea04 0602 	and.w	r6, r4, r2
 80047b8:	4629      	mov	r1, r5
 80047ba:	4632      	mov	r2, r6
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	f04f 0400 	mov.w	r4, #0
 80047c4:	0154      	lsls	r4, r2, #5
 80047c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047ca:	014b      	lsls	r3, r1, #5
 80047cc:	4619      	mov	r1, r3
 80047ce:	4622      	mov	r2, r4
 80047d0:	1b49      	subs	r1, r1, r5
 80047d2:	eb62 0206 	sbc.w	r2, r2, r6
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	f04f 0400 	mov.w	r4, #0
 80047de:	0194      	lsls	r4, r2, #6
 80047e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047e4:	018b      	lsls	r3, r1, #6
 80047e6:	1a5b      	subs	r3, r3, r1
 80047e8:	eb64 0402 	sbc.w	r4, r4, r2
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	00e2      	lsls	r2, r4, #3
 80047f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047fa:	00d9      	lsls	r1, r3, #3
 80047fc:	460b      	mov	r3, r1
 80047fe:	4614      	mov	r4, r2
 8004800:	195b      	adds	r3, r3, r5
 8004802:	eb44 0406 	adc.w	r4, r4, r6
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	0262      	lsls	r2, r4, #9
 8004810:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004814:	0259      	lsls	r1, r3, #9
 8004816:	460b      	mov	r3, r1
 8004818:	4614      	mov	r4, r2
 800481a:	4618      	mov	r0, r3
 800481c:	4621      	mov	r1, r4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f04f 0400 	mov.w	r4, #0
 8004824:	461a      	mov	r2, r3
 8004826:	4623      	mov	r3, r4
 8004828:	f7fc fa36 	bl	8000c98 <__aeabi_uldivmod>
 800482c:	4603      	mov	r3, r0
 800482e:	460c      	mov	r4, r1
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e049      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004834:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	099b      	lsrs	r3, r3, #6
 800483a:	f04f 0400 	mov.w	r4, #0
 800483e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	ea03 0501 	and.w	r5, r3, r1
 800484a:	ea04 0602 	and.w	r6, r4, r2
 800484e:	4629      	mov	r1, r5
 8004850:	4632      	mov	r2, r6
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	f04f 0400 	mov.w	r4, #0
 800485a:	0154      	lsls	r4, r2, #5
 800485c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004860:	014b      	lsls	r3, r1, #5
 8004862:	4619      	mov	r1, r3
 8004864:	4622      	mov	r2, r4
 8004866:	1b49      	subs	r1, r1, r5
 8004868:	eb62 0206 	sbc.w	r2, r2, r6
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	f04f 0400 	mov.w	r4, #0
 8004874:	0194      	lsls	r4, r2, #6
 8004876:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800487a:	018b      	lsls	r3, r1, #6
 800487c:	1a5b      	subs	r3, r3, r1
 800487e:	eb64 0402 	sbc.w	r4, r4, r2
 8004882:	f04f 0100 	mov.w	r1, #0
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	00e2      	lsls	r2, r4, #3
 800488c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004890:	00d9      	lsls	r1, r3, #3
 8004892:	460b      	mov	r3, r1
 8004894:	4614      	mov	r4, r2
 8004896:	195b      	adds	r3, r3, r5
 8004898:	eb44 0406 	adc.w	r4, r4, r6
 800489c:	f04f 0100 	mov.w	r1, #0
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	02a2      	lsls	r2, r4, #10
 80048a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048aa:	0299      	lsls	r1, r3, #10
 80048ac:	460b      	mov	r3, r1
 80048ae:	4614      	mov	r4, r2
 80048b0:	4618      	mov	r0, r3
 80048b2:	4621      	mov	r1, r4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f04f 0400 	mov.w	r4, #0
 80048ba:	461a      	mov	r2, r3
 80048bc:	4623      	mov	r3, r4
 80048be:	f7fc f9eb 	bl	8000c98 <__aeabi_uldivmod>
 80048c2:	4603      	mov	r3, r0
 80048c4:	460c      	mov	r4, r1
 80048c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	3301      	adds	r3, #1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	60bb      	str	r3, [r7, #8]
      break;
 80048e2:	e002      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048e6:	60bb      	str	r3, [r7, #8]
      break;
 80048e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ea:	68bb      	ldr	r3, [r7, #8]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f4:	40023800 	.word	0x40023800
 80048f8:	00f42400 	.word	0x00f42400
 80048fc:	007a1200 	.word	0x007a1200

08004900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <HAL_RCC_GetHCLKFreq+0x14>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000018 	.word	0x20000018

08004918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800491c:	f7ff fff0 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004920:	4601      	mov	r1, r0
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0a9b      	lsrs	r3, r3, #10
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4a03      	ldr	r2, [pc, #12]	; (800493c <HAL_RCC_GetPCLK1Freq+0x24>)
 800492e:	5cd3      	ldrb	r3, [r2, r3]
 8004930:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40023800 	.word	0x40023800
 800493c:	0800b57c 	.word	0x0800b57c

08004940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004944:	f7ff ffdc 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004948:	4601      	mov	r1, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0b5b      	lsrs	r3, r3, #13
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4a03      	ldr	r2, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004956:	5cd3      	ldrb	r3, [r2, r3]
 8004958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	0800b57c 	.word	0x0800b57c

08004968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e056      	b.n	8004a28 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fd ff41 	bl	800281c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	ea42 0103 	orr.w	r1, r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	f003 0104 	and.w	r1, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_SPI_Transmit_IT+0x20>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e067      	b.n	8004b20 <HAL_SPI_Transmit_IT+0xf0>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_Transmit_IT+0x34>
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a68:	e055      	b.n	8004b16 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004a76:	2302      	movs	r3, #2
 8004a78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a7a:	e04c      	b.n	8004b16 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2203      	movs	r2, #3
 8004a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_SPI_Transmit_IT+0xfc>)
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ac2:	e002      	b.n	8004aca <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <HAL_SPI_Transmit_IT+0x100>)
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad2:	d107      	bne.n	8004ae4 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004af2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d008      	beq.n	8004b14 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e000      	b.n	8004b16 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004b14:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	08004db7 	.word	0x08004db7
 8004b30:	08004d71 	.word	0x08004d71

08004b34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10f      	bne.n	8004b78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
    return;
 8004b76:	e0d8      	b.n	8004d2a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_SPI_IRQHandler+0x66>
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	09db      	lsrs	r3, r3, #7
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
    return;
 8004b98:	e0c7      	b.n	8004d2a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_SPI_IRQHandler+0x8c>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80b5 	beq.w	8004d2a <HAL_SPI_IRQHandler+0x1f6>
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80ae 	beq.w	8004d2a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d023      	beq.n	8004c22 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d011      	beq.n	8004c0a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	f043 0204 	orr.w	r2, r3, #4
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	e00b      	b.n	8004c22 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	693b      	ldr	r3, [r7, #16]
        return;
 8004c20:	e083      	b.n	8004d2a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d014      	beq.n	8004c58 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f043 0208 	orr.w	r2, r3, #8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c70:	2300      	movs	r3, #0
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d050      	beq.n	8004d28 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c94:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_SPI_IRQHandler+0x17e>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d034      	beq.n	8004d1c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0203 	bic.w	r2, r2, #3
 8004cc0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d011      	beq.n	8004cee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <HAL_SPI_IRQHandler+0x1fc>)
 8004cd0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fda6 	bl	8003828 <HAL_DMA_Abort_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <HAL_SPI_IRQHandler+0x1fc>)
 8004cfc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fd90 	bl	8003828 <HAL_DMA_Abort_IT>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004d1a:	e003      	b.n	8004d24 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f809 	bl	8004d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d22:	e000      	b.n	8004d26 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004d24:	bf00      	nop
    return;
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
  }
}
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08004d49 	.word	0x08004d49

08004d34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff ffe6 	bl	8004d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8d3 	bl	8004f54 <SPI_CloseTx_ISR>
  }
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8b1 	bl	8004f54 <SPI_CloseTx_ISR>
  }
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e0a:	e04c      	b.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d048      	beq.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e14:	f7fd fefe 	bl	8002c14 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d902      	bls.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d13d      	bne.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e42:	d111      	bne.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4c:	d004      	beq.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e56:	d107      	bne.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e70:	d10f      	bne.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e00f      	b.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1a3      	bne.n	8004e0c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <SPI_EndRxTxTransaction+0x7c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <SPI_EndRxTxTransaction+0x80>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	0d5b      	lsrs	r3, r3, #21
 8004ee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efa:	d112      	bne.n	8004f22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ff77 	bl	8004dfa <SPI_WaitFlagStateUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e00f      	b.n	8004f42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d0f2      	beq.n	8004f22 <SPI_EndRxTxTransaction+0x52>
 8004f3c:	e000      	b.n	8004f40 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f3e:	bf00      	nop
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000018 	.word	0x20000018
 8004f50:	165e9f81 	.word	0x165e9f81

08004f54 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004f5c:	4b2c      	ldr	r3, [pc, #176]	; (8005010 <SPI_CloseTx_ISR+0xbc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <SPI_CloseTx_ISR+0xc0>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	0a5b      	lsrs	r3, r3, #9
 8004f68:	2264      	movs	r2, #100	; 0x64
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f70:	f7fd fe50 	bl	8002c14 <HAL_GetTick>
 8004f74:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f88:	e009      	b.n	8004f9e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0eb      	beq.n	8004f76 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fac:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	2164      	movs	r1, #100	; 0x64
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ff8c 	bl	8004ed0 <SPI_EndRxTxTransaction>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fe9b 	bl	8004d34 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004ffe:	e002      	b.n	8005006 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fd f9bd 	bl	8002380 <HAL_SPI_TxCpltCallback>
}
 8005006:	bf00      	nop
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000018 	.word	0x20000018
 8005014:	057619f1 	.word	0x057619f1

08005018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e01d      	b.n	8005066 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fd fc3c 	bl	80028bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f000 f908 	bl	800526c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b06      	cmp	r3, #6
 800508e:	d007      	beq.n	80050a0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b06      	cmp	r3, #6
 80050de:	d007      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_TIM_ConfigClockSource+0x18>
 8005112:	2302      	movs	r3, #2
 8005114:	e0a6      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x166>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005134:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800513c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d067      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x120>
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d80b      	bhi.n	800516a <HAL_TIM_ConfigClockSource+0x6c>
 8005152:	2b10      	cmp	r3, #16
 8005154:	d073      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x140>
 8005156:	2b10      	cmp	r3, #16
 8005158:	d802      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x62>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d06f      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800515e:	e078      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005160:	2b20      	cmp	r3, #32
 8005162:	d06c      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x140>
 8005164:	2b30      	cmp	r3, #48	; 0x30
 8005166:	d06a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005168:	e073      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800516a:	2b70      	cmp	r3, #112	; 0x70
 800516c:	d00d      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x8c>
 800516e:	2b70      	cmp	r3, #112	; 0x70
 8005170:	d804      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x7e>
 8005172:	2b50      	cmp	r3, #80	; 0x50
 8005174:	d033      	beq.n	80051de <HAL_TIM_ConfigClockSource+0xe0>
 8005176:	2b60      	cmp	r3, #96	; 0x60
 8005178:	d041      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x100>
      break;
 800517a:	e06a      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d066      	beq.n	8005250 <HAL_TIM_ConfigClockSource+0x152>
 8005182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005186:	d017      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005188:	e063      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6899      	ldr	r1, [r3, #8]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f000 f961 	bl	8005460 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	609a      	str	r2, [r3, #8]
      break;
 80051b6:	e04c      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6899      	ldr	r1, [r3, #8]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f000 f94a 	bl	8005460 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051da:	609a      	str	r2, [r3, #8]
      break;
 80051dc:	e039      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6859      	ldr	r1, [r3, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f000 f8be 	bl	800536c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2150      	movs	r1, #80	; 0x50
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f917 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 80051fc:	e029      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	f000 f8dd 	bl	80053ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2160      	movs	r1, #96	; 0x60
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f907 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 800521c:	e019      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	461a      	mov	r2, r3
 800522c:	f000 f89e 	bl	800536c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2140      	movs	r1, #64	; 0x40
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f8f7 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 800523c:	e009      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f000 f8ee 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 800524e:	e000      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a34      	ldr	r2, [pc, #208]	; (8005350 <TIM_Base_SetConfig+0xe4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d00b      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a31      	ldr	r2, [pc, #196]	; (8005354 <TIM_Base_SetConfig+0xe8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a30      	ldr	r2, [pc, #192]	; (8005358 <TIM_Base_SetConfig+0xec>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a2f      	ldr	r2, [pc, #188]	; (800535c <TIM_Base_SetConfig+0xf0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d108      	bne.n	80052b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a25      	ldr	r2, [pc, #148]	; (8005350 <TIM_Base_SetConfig+0xe4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01b      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c4:	d017      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a22      	ldr	r2, [pc, #136]	; (8005354 <TIM_Base_SetConfig+0xe8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a21      	ldr	r2, [pc, #132]	; (8005358 <TIM_Base_SetConfig+0xec>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a20      	ldr	r2, [pc, #128]	; (800535c <TIM_Base_SetConfig+0xf0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <TIM_Base_SetConfig+0xf4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <TIM_Base_SetConfig+0xf8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <TIM_Base_SetConfig+0xfc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d108      	bne.n	8005308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a08      	ldr	r2, [pc, #32]	; (8005350 <TIM_Base_SetConfig+0xe4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d103      	bne.n	800533c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	615a      	str	r2, [r3, #20]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0201 	bic.w	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 030a 	bic.w	r3, r3, #10
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0210 	bic.w	r2, r3, #16
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	f043 0307 	orr.w	r3, r3, #7
 800544c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	431a      	orrs	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e050      	b.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d013      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a16      	ldr	r2, [pc, #88]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a13      	ldr	r2, [pc, #76]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d10c      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4313      	orrs	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40010000 	.word	0x40010000
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40000c00 	.word	0x40000c00
 8005578:	40014000 	.word	0x40014000

0800557c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e03f      	b.n	800560e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fd f9c2 	bl	800292c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fb97 	bl	8005cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b088      	sub	sp, #32
 800561a:	af02      	add	r7, sp, #8
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b20      	cmp	r3, #32
 8005634:	f040 8083 	bne.w	800573e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Transmit+0x2e>
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e07b      	b.n	8005740 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_UART_Transmit+0x40>
 8005652:	2302      	movs	r3, #2
 8005654:	e074      	b.n	8005740 <HAL_UART_Transmit+0x12a>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2221      	movs	r2, #33	; 0x21
 8005668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800566c:	f7fd fad2 	bl	8002c14 <HAL_GetTick>
 8005670:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005686:	e042      	b.n	800570e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d122      	bne.n	80056e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f9b6 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e042      	b.n	8005740 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	3302      	adds	r3, #2
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	e017      	b.n	800570e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	e013      	b.n	800570e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2180      	movs	r1, #128	; 0x80
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f993 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e01f      	b.n	8005740 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	60ba      	str	r2, [r7, #8]
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1b7      	bne.n	8005688 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2200      	movs	r2, #0
 8005720:	2140      	movs	r1, #64	; 0x40
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f97a 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e006      	b.n	8005740 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e000      	b.n	8005740 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b20      	cmp	r3, #32
 8005760:	d140      	bne.n	80057e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_UART_Receive_IT+0x26>
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e039      	b.n	80057e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_UART_Receive_IT+0x38>
 800577c:	2302      	movs	r3, #2
 800577e:	e032      	b.n	80057e6 <HAL_UART_Receive_IT+0x9e>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2222      	movs	r2, #34	; 0x22
 80057a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0220 	orr.w	r2, r2, #32
 80057de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10d      	bne.n	8005846 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_UART_IRQHandler+0x52>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f9d6 	bl	8005bf0 <UART_Receive_IT>
      return;
 8005844:	e0d1      	b.n	80059ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80b0 	beq.w	80059ae <HAL_UART_IRQHandler+0x1ba>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <HAL_UART_IRQHandler+0x70>
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80a5 	beq.w	80059ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_UART_IRQHandler+0x90>
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	f043 0201 	orr.w	r2, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_UART_IRQHandler+0xb0>
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	f043 0202 	orr.w	r2, r3, #2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_UART_IRQHandler+0xd0>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	f043 0204 	orr.w	r2, r3, #4
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00f      	beq.n	80058ee <HAL_UART_IRQHandler+0xfa>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <HAL_UART_IRQHandler+0xee>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	f043 0208 	orr.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d078      	beq.n	80059e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <HAL_UART_IRQHandler+0x11c>
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f970 	bl	8005bf0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b40      	cmp	r3, #64	; 0x40
 800591c:	bf0c      	ite	eq
 800591e:	2301      	moveq	r3, #1
 8005920:	2300      	movne	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <HAL_UART_IRQHandler+0x144>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d031      	beq.n	800599c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f8b9 	bl	8005ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	d123      	bne.n	8005994 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	2b00      	cmp	r3, #0
 8005962:	d013      	beq.n	800598c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	4a21      	ldr	r2, [pc, #132]	; (80059f0 <HAL_UART_IRQHandler+0x1fc>)
 800596a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	4618      	mov	r0, r3
 8005972:	f7fd ff59 	bl	8003828 <HAL_DMA_Abort_IT>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d016      	beq.n	80059aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005986:	4610      	mov	r0, r2
 8005988:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598a:	e00e      	b.n	80059aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f83b 	bl	8005a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005992:	e00a      	b.n	80059aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f837 	bl	8005a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599a:	e006      	b.n	80059aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f833 	bl	8005a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80059a8:	e01e      	b.n	80059e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059aa:	bf00      	nop
    return;
 80059ac:	e01c      	b.n	80059e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_UART_IRQHandler+0x1d6>
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f8a6 	bl	8005b14 <UART_Transmit_IT>
    return;
 80059c8:	e00f      	b.n	80059ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_UART_IRQHandler+0x1f6>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8ee 	bl	8005bc0 <UART_EndTransmit_IT>
    return;
 80059e4:	bf00      	nop
 80059e6:	e000      	b.n	80059ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80059e8:	bf00      	nop
  }
}
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	08005aed 	.word	0x08005aed

080059f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	e02c      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d028      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3c:	f7fd f8ea 	bl	8002c14 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d21d      	bcs.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e00f      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d0c3      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ac6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff ff7e 	bl	8005a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b21      	cmp	r3, #33	; 0x21
 8005b26:	d144      	bne.n	8005bb2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b30:	d11a      	bne.n	8005b68 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b46:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d105      	bne.n	8005b5c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	1c9a      	adds	r2, r3, #2
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	621a      	str	r2, [r3, #32]
 8005b5a:	e00e      	b.n	8005b7a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	621a      	str	r2, [r3, #32]
 8005b66:	e008      	b.n	8005b7a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6211      	str	r1, [r2, #32]
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4619      	mov	r1, r3
 8005b88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e000      	b.n	8005bb4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005bb2:	2302      	movs	r3, #2
  }
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff ff07 	bl	80059f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b22      	cmp	r3, #34	; 0x22
 8005c02:	d171      	bne.n	8005ce8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0c:	d123      	bne.n	8005c56 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10e      	bne.n	8005c3a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28
 8005c38:	e029      	b.n	8005c8e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28
 8005c54:	e01b      	b.n	8005c8e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6858      	ldr	r0, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	1c59      	adds	r1, r3, #1
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6291      	str	r1, [r2, #40]	; 0x28
 8005c6e:	b2c2      	uxtb	r2, r0
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	e00c      	b.n	8005c8e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	1c58      	adds	r0, r3, #1
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	6288      	str	r0, [r1, #40]	; 0x28
 8005c86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d120      	bne.n	8005ce4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0220 	bic.w	r2, r2, #32
 8005cb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fbb2 	bl	8002444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e002      	b.n	8005cea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d36:	f023 030c 	bic.w	r3, r3, #12
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	430b      	orrs	r3, r1
 8005d42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	f040 818b 	bne.w	800607c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4ac1      	ldr	r2, [pc, #772]	; (8006070 <UART_SetConfig+0x37c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d005      	beq.n	8005d7c <UART_SetConfig+0x88>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4abf      	ldr	r2, [pc, #764]	; (8006074 <UART_SetConfig+0x380>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	f040 80bd 	bne.w	8005ef6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d7c:	f7fe fde0 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8005d80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	461d      	mov	r5, r3
 8005d86:	f04f 0600 	mov.w	r6, #0
 8005d8a:	46a8      	mov	r8, r5
 8005d8c:	46b1      	mov	r9, r6
 8005d8e:	eb18 0308 	adds.w	r3, r8, r8
 8005d92:	eb49 0409 	adc.w	r4, r9, r9
 8005d96:	4698      	mov	r8, r3
 8005d98:	46a1      	mov	r9, r4
 8005d9a:	eb18 0805 	adds.w	r8, r8, r5
 8005d9e:	eb49 0906 	adc.w	r9, r9, r6
 8005da2:	f04f 0100 	mov.w	r1, #0
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005db2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005db6:	4688      	mov	r8, r1
 8005db8:	4691      	mov	r9, r2
 8005dba:	eb18 0005 	adds.w	r0, r8, r5
 8005dbe:	eb49 0106 	adc.w	r1, r9, r6
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	461d      	mov	r5, r3
 8005dc8:	f04f 0600 	mov.w	r6, #0
 8005dcc:	196b      	adds	r3, r5, r5
 8005dce:	eb46 0406 	adc.w	r4, r6, r6
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4623      	mov	r3, r4
 8005dd6:	f7fa ff5f 	bl	8000c98 <__aeabi_uldivmod>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	461a      	mov	r2, r3
 8005de0:	4ba5      	ldr	r3, [pc, #660]	; (8006078 <UART_SetConfig+0x384>)
 8005de2:	fba3 2302 	umull	r2, r3, r3, r2
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	461d      	mov	r5, r3
 8005df0:	f04f 0600 	mov.w	r6, #0
 8005df4:	46a9      	mov	r9, r5
 8005df6:	46b2      	mov	sl, r6
 8005df8:	eb19 0309 	adds.w	r3, r9, r9
 8005dfc:	eb4a 040a 	adc.w	r4, sl, sl
 8005e00:	4699      	mov	r9, r3
 8005e02:	46a2      	mov	sl, r4
 8005e04:	eb19 0905 	adds.w	r9, r9, r5
 8005e08:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e0c:	f04f 0100 	mov.w	r1, #0
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e20:	4689      	mov	r9, r1
 8005e22:	4692      	mov	sl, r2
 8005e24:	eb19 0005 	adds.w	r0, r9, r5
 8005e28:	eb4a 0106 	adc.w	r1, sl, r6
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	461d      	mov	r5, r3
 8005e32:	f04f 0600 	mov.w	r6, #0
 8005e36:	196b      	adds	r3, r5, r5
 8005e38:	eb46 0406 	adc.w	r4, r6, r6
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4623      	mov	r3, r4
 8005e40:	f7fa ff2a 	bl	8000c98 <__aeabi_uldivmod>
 8005e44:	4603      	mov	r3, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4b8b      	ldr	r3, [pc, #556]	; (8006078 <UART_SetConfig+0x384>)
 8005e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	2164      	movs	r1, #100	; 0x64
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	3332      	adds	r3, #50	; 0x32
 8005e5e:	4a86      	ldr	r2, [pc, #536]	; (8006078 <UART_SetConfig+0x384>)
 8005e60:	fba2 2303 	umull	r2, r3, r2, r3
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e6c:	4498      	add	r8, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	461d      	mov	r5, r3
 8005e72:	f04f 0600 	mov.w	r6, #0
 8005e76:	46a9      	mov	r9, r5
 8005e78:	46b2      	mov	sl, r6
 8005e7a:	eb19 0309 	adds.w	r3, r9, r9
 8005e7e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e82:	4699      	mov	r9, r3
 8005e84:	46a2      	mov	sl, r4
 8005e86:	eb19 0905 	adds.w	r9, r9, r5
 8005e8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e8e:	f04f 0100 	mov.w	r1, #0
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ea2:	4689      	mov	r9, r1
 8005ea4:	4692      	mov	sl, r2
 8005ea6:	eb19 0005 	adds.w	r0, r9, r5
 8005eaa:	eb4a 0106 	adc.w	r1, sl, r6
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	f04f 0600 	mov.w	r6, #0
 8005eb8:	196b      	adds	r3, r5, r5
 8005eba:	eb46 0406 	adc.w	r4, r6, r6
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	4623      	mov	r3, r4
 8005ec2:	f7fa fee9 	bl	8000c98 <__aeabi_uldivmod>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4b6a      	ldr	r3, [pc, #424]	; (8006078 <UART_SetConfig+0x384>)
 8005ece:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2164      	movs	r1, #100	; 0x64
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	3332      	adds	r3, #50	; 0x32
 8005ee0:	4a65      	ldr	r2, [pc, #404]	; (8006078 <UART_SetConfig+0x384>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	f003 0207 	and.w	r2, r3, #7
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4442      	add	r2, r8
 8005ef2:	609a      	str	r2, [r3, #8]
 8005ef4:	e26f      	b.n	80063d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ef6:	f7fe fd0f 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8005efa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	461d      	mov	r5, r3
 8005f00:	f04f 0600 	mov.w	r6, #0
 8005f04:	46a8      	mov	r8, r5
 8005f06:	46b1      	mov	r9, r6
 8005f08:	eb18 0308 	adds.w	r3, r8, r8
 8005f0c:	eb49 0409 	adc.w	r4, r9, r9
 8005f10:	4698      	mov	r8, r3
 8005f12:	46a1      	mov	r9, r4
 8005f14:	eb18 0805 	adds.w	r8, r8, r5
 8005f18:	eb49 0906 	adc.w	r9, r9, r6
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f30:	4688      	mov	r8, r1
 8005f32:	4691      	mov	r9, r2
 8005f34:	eb18 0005 	adds.w	r0, r8, r5
 8005f38:	eb49 0106 	adc.w	r1, r9, r6
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	461d      	mov	r5, r3
 8005f42:	f04f 0600 	mov.w	r6, #0
 8005f46:	196b      	adds	r3, r5, r5
 8005f48:	eb46 0406 	adc.w	r4, r6, r6
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	f7fa fea2 	bl	8000c98 <__aeabi_uldivmod>
 8005f54:	4603      	mov	r3, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4b47      	ldr	r3, [pc, #284]	; (8006078 <UART_SetConfig+0x384>)
 8005f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	461d      	mov	r5, r3
 8005f6a:	f04f 0600 	mov.w	r6, #0
 8005f6e:	46a9      	mov	r9, r5
 8005f70:	46b2      	mov	sl, r6
 8005f72:	eb19 0309 	adds.w	r3, r9, r9
 8005f76:	eb4a 040a 	adc.w	r4, sl, sl
 8005f7a:	4699      	mov	r9, r3
 8005f7c:	46a2      	mov	sl, r4
 8005f7e:	eb19 0905 	adds.w	r9, r9, r5
 8005f82:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f9a:	4689      	mov	r9, r1
 8005f9c:	4692      	mov	sl, r2
 8005f9e:	eb19 0005 	adds.w	r0, r9, r5
 8005fa2:	eb4a 0106 	adc.w	r1, sl, r6
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	461d      	mov	r5, r3
 8005fac:	f04f 0600 	mov.w	r6, #0
 8005fb0:	196b      	adds	r3, r5, r5
 8005fb2:	eb46 0406 	adc.w	r4, r6, r6
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4623      	mov	r3, r4
 8005fba:	f7fa fe6d 	bl	8000c98 <__aeabi_uldivmod>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <UART_SetConfig+0x384>)
 8005fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2164      	movs	r1, #100	; 0x64
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	3332      	adds	r3, #50	; 0x32
 8005fd8:	4a27      	ldr	r2, [pc, #156]	; (8006078 <UART_SetConfig+0x384>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fe6:	4498      	add	r8, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	461d      	mov	r5, r3
 8005fec:	f04f 0600 	mov.w	r6, #0
 8005ff0:	46a9      	mov	r9, r5
 8005ff2:	46b2      	mov	sl, r6
 8005ff4:	eb19 0309 	adds.w	r3, r9, r9
 8005ff8:	eb4a 040a 	adc.w	r4, sl, sl
 8005ffc:	4699      	mov	r9, r3
 8005ffe:	46a2      	mov	sl, r4
 8006000:	eb19 0905 	adds.w	r9, r9, r5
 8006004:	eb4a 0a06 	adc.w	sl, sl, r6
 8006008:	f04f 0100 	mov.w	r1, #0
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006014:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006018:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800601c:	4689      	mov	r9, r1
 800601e:	4692      	mov	sl, r2
 8006020:	eb19 0005 	adds.w	r0, r9, r5
 8006024:	eb4a 0106 	adc.w	r1, sl, r6
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	461d      	mov	r5, r3
 800602e:	f04f 0600 	mov.w	r6, #0
 8006032:	196b      	adds	r3, r5, r5
 8006034:	eb46 0406 	adc.w	r4, r6, r6
 8006038:	461a      	mov	r2, r3
 800603a:	4623      	mov	r3, r4
 800603c:	f7fa fe2c 	bl	8000c98 <__aeabi_uldivmod>
 8006040:	4603      	mov	r3, r0
 8006042:	460c      	mov	r4, r1
 8006044:	461a      	mov	r2, r3
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <UART_SetConfig+0x384>)
 8006048:	fba3 1302 	umull	r1, r3, r3, r2
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	2164      	movs	r1, #100	; 0x64
 8006050:	fb01 f303 	mul.w	r3, r1, r3
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	3332      	adds	r3, #50	; 0x32
 800605a:	4a07      	ldr	r2, [pc, #28]	; (8006078 <UART_SetConfig+0x384>)
 800605c:	fba2 2303 	umull	r2, r3, r2, r3
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	f003 0207 	and.w	r2, r3, #7
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4442      	add	r2, r8
 800606c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800606e:	e1b2      	b.n	80063d6 <UART_SetConfig+0x6e2>
 8006070:	40011000 	.word	0x40011000
 8006074:	40011400 	.word	0x40011400
 8006078:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4ad7      	ldr	r2, [pc, #860]	; (80063e0 <UART_SetConfig+0x6ec>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d005      	beq.n	8006092 <UART_SetConfig+0x39e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4ad6      	ldr	r2, [pc, #856]	; (80063e4 <UART_SetConfig+0x6f0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	f040 80d1 	bne.w	8006234 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006092:	f7fe fc55 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8006096:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	469a      	mov	sl, r3
 800609c:	f04f 0b00 	mov.w	fp, #0
 80060a0:	46d0      	mov	r8, sl
 80060a2:	46d9      	mov	r9, fp
 80060a4:	eb18 0308 	adds.w	r3, r8, r8
 80060a8:	eb49 0409 	adc.w	r4, r9, r9
 80060ac:	4698      	mov	r8, r3
 80060ae:	46a1      	mov	r9, r4
 80060b0:	eb18 080a 	adds.w	r8, r8, sl
 80060b4:	eb49 090b 	adc.w	r9, r9, fp
 80060b8:	f04f 0100 	mov.w	r1, #0
 80060bc:	f04f 0200 	mov.w	r2, #0
 80060c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060cc:	4688      	mov	r8, r1
 80060ce:	4691      	mov	r9, r2
 80060d0:	eb1a 0508 	adds.w	r5, sl, r8
 80060d4:	eb4b 0609 	adc.w	r6, fp, r9
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4619      	mov	r1, r3
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	f04f 0400 	mov.w	r4, #0
 80060ea:	0094      	lsls	r4, r2, #2
 80060ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060f0:	008b      	lsls	r3, r1, #2
 80060f2:	461a      	mov	r2, r3
 80060f4:	4623      	mov	r3, r4
 80060f6:	4628      	mov	r0, r5
 80060f8:	4631      	mov	r1, r6
 80060fa:	f7fa fdcd 	bl	8000c98 <__aeabi_uldivmod>
 80060fe:	4603      	mov	r3, r0
 8006100:	460c      	mov	r4, r1
 8006102:	461a      	mov	r2, r3
 8006104:	4bb8      	ldr	r3, [pc, #736]	; (80063e8 <UART_SetConfig+0x6f4>)
 8006106:	fba3 2302 	umull	r2, r3, r3, r2
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	469b      	mov	fp, r3
 8006114:	f04f 0c00 	mov.w	ip, #0
 8006118:	46d9      	mov	r9, fp
 800611a:	46e2      	mov	sl, ip
 800611c:	eb19 0309 	adds.w	r3, r9, r9
 8006120:	eb4a 040a 	adc.w	r4, sl, sl
 8006124:	4699      	mov	r9, r3
 8006126:	46a2      	mov	sl, r4
 8006128:	eb19 090b 	adds.w	r9, r9, fp
 800612c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800613c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006144:	4689      	mov	r9, r1
 8006146:	4692      	mov	sl, r2
 8006148:	eb1b 0509 	adds.w	r5, fp, r9
 800614c:	eb4c 060a 	adc.w	r6, ip, sl
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4619      	mov	r1, r3
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	f04f 0400 	mov.w	r4, #0
 8006162:	0094      	lsls	r4, r2, #2
 8006164:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006168:	008b      	lsls	r3, r1, #2
 800616a:	461a      	mov	r2, r3
 800616c:	4623      	mov	r3, r4
 800616e:	4628      	mov	r0, r5
 8006170:	4631      	mov	r1, r6
 8006172:	f7fa fd91 	bl	8000c98 <__aeabi_uldivmod>
 8006176:	4603      	mov	r3, r0
 8006178:	460c      	mov	r4, r1
 800617a:	461a      	mov	r2, r3
 800617c:	4b9a      	ldr	r3, [pc, #616]	; (80063e8 <UART_SetConfig+0x6f4>)
 800617e:	fba3 1302 	umull	r1, r3, r3, r2
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	2164      	movs	r1, #100	; 0x64
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	3332      	adds	r3, #50	; 0x32
 8006190:	4a95      	ldr	r2, [pc, #596]	; (80063e8 <UART_SetConfig+0x6f4>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800619c:	4498      	add	r8, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	469b      	mov	fp, r3
 80061a2:	f04f 0c00 	mov.w	ip, #0
 80061a6:	46d9      	mov	r9, fp
 80061a8:	46e2      	mov	sl, ip
 80061aa:	eb19 0309 	adds.w	r3, r9, r9
 80061ae:	eb4a 040a 	adc.w	r4, sl, sl
 80061b2:	4699      	mov	r9, r3
 80061b4:	46a2      	mov	sl, r4
 80061b6:	eb19 090b 	adds.w	r9, r9, fp
 80061ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061be:	f04f 0100 	mov.w	r1, #0
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061d2:	4689      	mov	r9, r1
 80061d4:	4692      	mov	sl, r2
 80061d6:	eb1b 0509 	adds.w	r5, fp, r9
 80061da:	eb4c 060a 	adc.w	r6, ip, sl
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	4619      	mov	r1, r3
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	f04f 0400 	mov.w	r4, #0
 80061f0:	0094      	lsls	r4, r2, #2
 80061f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061f6:	008b      	lsls	r3, r1, #2
 80061f8:	461a      	mov	r2, r3
 80061fa:	4623      	mov	r3, r4
 80061fc:	4628      	mov	r0, r5
 80061fe:	4631      	mov	r1, r6
 8006200:	f7fa fd4a 	bl	8000c98 <__aeabi_uldivmod>
 8006204:	4603      	mov	r3, r0
 8006206:	460c      	mov	r4, r1
 8006208:	461a      	mov	r2, r3
 800620a:	4b77      	ldr	r3, [pc, #476]	; (80063e8 <UART_SetConfig+0x6f4>)
 800620c:	fba3 1302 	umull	r1, r3, r3, r2
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	2164      	movs	r1, #100	; 0x64
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	3332      	adds	r3, #50	; 0x32
 800621e:	4a72      	ldr	r2, [pc, #456]	; (80063e8 <UART_SetConfig+0x6f4>)
 8006220:	fba2 2303 	umull	r2, r3, r2, r3
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	f003 020f 	and.w	r2, r3, #15
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4442      	add	r2, r8
 8006230:	609a      	str	r2, [r3, #8]
 8006232:	e0d0      	b.n	80063d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fe fb70 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8006238:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	469a      	mov	sl, r3
 800623e:	f04f 0b00 	mov.w	fp, #0
 8006242:	46d0      	mov	r8, sl
 8006244:	46d9      	mov	r9, fp
 8006246:	eb18 0308 	adds.w	r3, r8, r8
 800624a:	eb49 0409 	adc.w	r4, r9, r9
 800624e:	4698      	mov	r8, r3
 8006250:	46a1      	mov	r9, r4
 8006252:	eb18 080a 	adds.w	r8, r8, sl
 8006256:	eb49 090b 	adc.w	r9, r9, fp
 800625a:	f04f 0100 	mov.w	r1, #0
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006266:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800626a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800626e:	4688      	mov	r8, r1
 8006270:	4691      	mov	r9, r2
 8006272:	eb1a 0508 	adds.w	r5, sl, r8
 8006276:	eb4b 0609 	adc.w	r6, fp, r9
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4619      	mov	r1, r3
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	f04f 0400 	mov.w	r4, #0
 800628c:	0094      	lsls	r4, r2, #2
 800628e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006292:	008b      	lsls	r3, r1, #2
 8006294:	461a      	mov	r2, r3
 8006296:	4623      	mov	r3, r4
 8006298:	4628      	mov	r0, r5
 800629a:	4631      	mov	r1, r6
 800629c:	f7fa fcfc 	bl	8000c98 <__aeabi_uldivmod>
 80062a0:	4603      	mov	r3, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	461a      	mov	r2, r3
 80062a6:	4b50      	ldr	r3, [pc, #320]	; (80063e8 <UART_SetConfig+0x6f4>)
 80062a8:	fba3 2302 	umull	r2, r3, r3, r2
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	469b      	mov	fp, r3
 80062b6:	f04f 0c00 	mov.w	ip, #0
 80062ba:	46d9      	mov	r9, fp
 80062bc:	46e2      	mov	sl, ip
 80062be:	eb19 0309 	adds.w	r3, r9, r9
 80062c2:	eb4a 040a 	adc.w	r4, sl, sl
 80062c6:	4699      	mov	r9, r3
 80062c8:	46a2      	mov	sl, r4
 80062ca:	eb19 090b 	adds.w	r9, r9, fp
 80062ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062d2:	f04f 0100 	mov.w	r1, #0
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062e6:	4689      	mov	r9, r1
 80062e8:	4692      	mov	sl, r2
 80062ea:	eb1b 0509 	adds.w	r5, fp, r9
 80062ee:	eb4c 060a 	adc.w	r6, ip, sl
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4619      	mov	r1, r3
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	f04f 0400 	mov.w	r4, #0
 8006304:	0094      	lsls	r4, r2, #2
 8006306:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800630a:	008b      	lsls	r3, r1, #2
 800630c:	461a      	mov	r2, r3
 800630e:	4623      	mov	r3, r4
 8006310:	4628      	mov	r0, r5
 8006312:	4631      	mov	r1, r6
 8006314:	f7fa fcc0 	bl	8000c98 <__aeabi_uldivmod>
 8006318:	4603      	mov	r3, r0
 800631a:	460c      	mov	r4, r1
 800631c:	461a      	mov	r2, r3
 800631e:	4b32      	ldr	r3, [pc, #200]	; (80063e8 <UART_SetConfig+0x6f4>)
 8006320:	fba3 1302 	umull	r1, r3, r3, r2
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	2164      	movs	r1, #100	; 0x64
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	3332      	adds	r3, #50	; 0x32
 8006332:	4a2d      	ldr	r2, [pc, #180]	; (80063e8 <UART_SetConfig+0x6f4>)
 8006334:	fba2 2303 	umull	r2, r3, r2, r3
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800633e:	4498      	add	r8, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	469b      	mov	fp, r3
 8006344:	f04f 0c00 	mov.w	ip, #0
 8006348:	46d9      	mov	r9, fp
 800634a:	46e2      	mov	sl, ip
 800634c:	eb19 0309 	adds.w	r3, r9, r9
 8006350:	eb4a 040a 	adc.w	r4, sl, sl
 8006354:	4699      	mov	r9, r3
 8006356:	46a2      	mov	sl, r4
 8006358:	eb19 090b 	adds.w	r9, r9, fp
 800635c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006360:	f04f 0100 	mov.w	r1, #0
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800636c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006370:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006374:	4689      	mov	r9, r1
 8006376:	4692      	mov	sl, r2
 8006378:	eb1b 0509 	adds.w	r5, fp, r9
 800637c:	eb4c 060a 	adc.w	r6, ip, sl
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	4619      	mov	r1, r3
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	f04f 0400 	mov.w	r4, #0
 8006392:	0094      	lsls	r4, r2, #2
 8006394:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006398:	008b      	lsls	r3, r1, #2
 800639a:	461a      	mov	r2, r3
 800639c:	4623      	mov	r3, r4
 800639e:	4628      	mov	r0, r5
 80063a0:	4631      	mov	r1, r6
 80063a2:	f7fa fc79 	bl	8000c98 <__aeabi_uldivmod>
 80063a6:	4603      	mov	r3, r0
 80063a8:	460c      	mov	r4, r1
 80063aa:	461a      	mov	r2, r3
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <UART_SetConfig+0x6f4>)
 80063ae:	fba3 1302 	umull	r1, r3, r3, r2
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	2164      	movs	r1, #100	; 0x64
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	3332      	adds	r3, #50	; 0x32
 80063c0:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <UART_SetConfig+0x6f4>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	f003 020f 	and.w	r2, r3, #15
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4442      	add	r2, r8
 80063d2:	609a      	str	r2, [r3, #8]
}
 80063d4:	e7ff      	b.n	80063d6 <UART_SetConfig+0x6e2>
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	40011000 	.word	0x40011000
 80063e4:	40011400 	.word	0x40011400
 80063e8:	51eb851f 	.word	0x51eb851f

080063ec <__errno>:
 80063ec:	4b01      	ldr	r3, [pc, #4]	; (80063f4 <__errno+0x8>)
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000024 	.word	0x20000024

080063f8 <__libc_init_array>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4e0d      	ldr	r6, [pc, #52]	; (8006430 <__libc_init_array+0x38>)
 80063fc:	4c0d      	ldr	r4, [pc, #52]	; (8006434 <__libc_init_array+0x3c>)
 80063fe:	1ba4      	subs	r4, r4, r6
 8006400:	10a4      	asrs	r4, r4, #2
 8006402:	2500      	movs	r5, #0
 8006404:	42a5      	cmp	r5, r4
 8006406:	d109      	bne.n	800641c <__libc_init_array+0x24>
 8006408:	4e0b      	ldr	r6, [pc, #44]	; (8006438 <__libc_init_array+0x40>)
 800640a:	4c0c      	ldr	r4, [pc, #48]	; (800643c <__libc_init_array+0x44>)
 800640c:	f004 fd6a 	bl	800aee4 <_init>
 8006410:	1ba4      	subs	r4, r4, r6
 8006412:	10a4      	asrs	r4, r4, #2
 8006414:	2500      	movs	r5, #0
 8006416:	42a5      	cmp	r5, r4
 8006418:	d105      	bne.n	8006426 <__libc_init_array+0x2e>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006420:	4798      	blx	r3
 8006422:	3501      	adds	r5, #1
 8006424:	e7ee      	b.n	8006404 <__libc_init_array+0xc>
 8006426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800642a:	4798      	blx	r3
 800642c:	3501      	adds	r5, #1
 800642e:	e7f2      	b.n	8006416 <__libc_init_array+0x1e>
 8006430:	0800ba20 	.word	0x0800ba20
 8006434:	0800ba20 	.word	0x0800ba20
 8006438:	0800ba20 	.word	0x0800ba20
 800643c:	0800ba24 	.word	0x0800ba24

08006440 <memcpy>:
 8006440:	b510      	push	{r4, lr}
 8006442:	1e43      	subs	r3, r0, #1
 8006444:	440a      	add	r2, r1
 8006446:	4291      	cmp	r1, r2
 8006448:	d100      	bne.n	800644c <memcpy+0xc>
 800644a:	bd10      	pop	{r4, pc}
 800644c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006454:	e7f7      	b.n	8006446 <memcpy+0x6>

08006456 <memset>:
 8006456:	4402      	add	r2, r0
 8006458:	4603      	mov	r3, r0
 800645a:	4293      	cmp	r3, r2
 800645c:	d100      	bne.n	8006460 <memset+0xa>
 800645e:	4770      	bx	lr
 8006460:	f803 1b01 	strb.w	r1, [r3], #1
 8006464:	e7f9      	b.n	800645a <memset+0x4>

08006466 <__cvt>:
 8006466:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646a:	ec55 4b10 	vmov	r4, r5, d0
 800646e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006470:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006474:	2d00      	cmp	r5, #0
 8006476:	460e      	mov	r6, r1
 8006478:	4691      	mov	r9, r2
 800647a:	4619      	mov	r1, r3
 800647c:	bfb8      	it	lt
 800647e:	4622      	movlt	r2, r4
 8006480:	462b      	mov	r3, r5
 8006482:	f027 0720 	bic.w	r7, r7, #32
 8006486:	bfbb      	ittet	lt
 8006488:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800648c:	461d      	movlt	r5, r3
 800648e:	2300      	movge	r3, #0
 8006490:	232d      	movlt	r3, #45	; 0x2d
 8006492:	bfb8      	it	lt
 8006494:	4614      	movlt	r4, r2
 8006496:	2f46      	cmp	r7, #70	; 0x46
 8006498:	700b      	strb	r3, [r1, #0]
 800649a:	d004      	beq.n	80064a6 <__cvt+0x40>
 800649c:	2f45      	cmp	r7, #69	; 0x45
 800649e:	d100      	bne.n	80064a2 <__cvt+0x3c>
 80064a0:	3601      	adds	r6, #1
 80064a2:	2102      	movs	r1, #2
 80064a4:	e000      	b.n	80064a8 <__cvt+0x42>
 80064a6:	2103      	movs	r1, #3
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	ab02      	add	r3, sp, #8
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4632      	mov	r2, r6
 80064b2:	4653      	mov	r3, sl
 80064b4:	ec45 4b10 	vmov	d0, r4, r5
 80064b8:	f001 fd76 	bl	8007fa8 <_dtoa_r>
 80064bc:	2f47      	cmp	r7, #71	; 0x47
 80064be:	4680      	mov	r8, r0
 80064c0:	d102      	bne.n	80064c8 <__cvt+0x62>
 80064c2:	f019 0f01 	tst.w	r9, #1
 80064c6:	d026      	beq.n	8006516 <__cvt+0xb0>
 80064c8:	2f46      	cmp	r7, #70	; 0x46
 80064ca:	eb08 0906 	add.w	r9, r8, r6
 80064ce:	d111      	bne.n	80064f4 <__cvt+0x8e>
 80064d0:	f898 3000 	ldrb.w	r3, [r8]
 80064d4:	2b30      	cmp	r3, #48	; 0x30
 80064d6:	d10a      	bne.n	80064ee <__cvt+0x88>
 80064d8:	2200      	movs	r2, #0
 80064da:	2300      	movs	r3, #0
 80064dc:	4620      	mov	r0, r4
 80064de:	4629      	mov	r1, r5
 80064e0:	f7fa fafa 	bl	8000ad8 <__aeabi_dcmpeq>
 80064e4:	b918      	cbnz	r0, 80064ee <__cvt+0x88>
 80064e6:	f1c6 0601 	rsb	r6, r6, #1
 80064ea:	f8ca 6000 	str.w	r6, [sl]
 80064ee:	f8da 3000 	ldr.w	r3, [sl]
 80064f2:	4499      	add	r9, r3
 80064f4:	2200      	movs	r2, #0
 80064f6:	2300      	movs	r3, #0
 80064f8:	4620      	mov	r0, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	f7fa faec 	bl	8000ad8 <__aeabi_dcmpeq>
 8006500:	b938      	cbnz	r0, 8006512 <__cvt+0xac>
 8006502:	2230      	movs	r2, #48	; 0x30
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	454b      	cmp	r3, r9
 8006508:	d205      	bcs.n	8006516 <__cvt+0xb0>
 800650a:	1c59      	adds	r1, r3, #1
 800650c:	9103      	str	r1, [sp, #12]
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	e7f8      	b.n	8006504 <__cvt+0x9e>
 8006512:	f8cd 900c 	str.w	r9, [sp, #12]
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800651a:	eba3 0308 	sub.w	r3, r3, r8
 800651e:	4640      	mov	r0, r8
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	b004      	add	sp, #16
 8006524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006528 <__exponent>:
 8006528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800652a:	2900      	cmp	r1, #0
 800652c:	4604      	mov	r4, r0
 800652e:	bfba      	itte	lt
 8006530:	4249      	neglt	r1, r1
 8006532:	232d      	movlt	r3, #45	; 0x2d
 8006534:	232b      	movge	r3, #43	; 0x2b
 8006536:	2909      	cmp	r1, #9
 8006538:	f804 2b02 	strb.w	r2, [r4], #2
 800653c:	7043      	strb	r3, [r0, #1]
 800653e:	dd20      	ble.n	8006582 <__exponent+0x5a>
 8006540:	f10d 0307 	add.w	r3, sp, #7
 8006544:	461f      	mov	r7, r3
 8006546:	260a      	movs	r6, #10
 8006548:	fb91 f5f6 	sdiv	r5, r1, r6
 800654c:	fb06 1115 	mls	r1, r6, r5, r1
 8006550:	3130      	adds	r1, #48	; 0x30
 8006552:	2d09      	cmp	r5, #9
 8006554:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006558:	f103 32ff 	add.w	r2, r3, #4294967295
 800655c:	4629      	mov	r1, r5
 800655e:	dc09      	bgt.n	8006574 <__exponent+0x4c>
 8006560:	3130      	adds	r1, #48	; 0x30
 8006562:	3b02      	subs	r3, #2
 8006564:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006568:	42bb      	cmp	r3, r7
 800656a:	4622      	mov	r2, r4
 800656c:	d304      	bcc.n	8006578 <__exponent+0x50>
 800656e:	1a10      	subs	r0, r2, r0
 8006570:	b003      	add	sp, #12
 8006572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006574:	4613      	mov	r3, r2
 8006576:	e7e7      	b.n	8006548 <__exponent+0x20>
 8006578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800657c:	f804 2b01 	strb.w	r2, [r4], #1
 8006580:	e7f2      	b.n	8006568 <__exponent+0x40>
 8006582:	2330      	movs	r3, #48	; 0x30
 8006584:	4419      	add	r1, r3
 8006586:	7083      	strb	r3, [r0, #2]
 8006588:	1d02      	adds	r2, r0, #4
 800658a:	70c1      	strb	r1, [r0, #3]
 800658c:	e7ef      	b.n	800656e <__exponent+0x46>
	...

08006590 <_printf_float>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	b08d      	sub	sp, #52	; 0x34
 8006596:	460c      	mov	r4, r1
 8006598:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800659c:	4616      	mov	r6, r2
 800659e:	461f      	mov	r7, r3
 80065a0:	4605      	mov	r5, r0
 80065a2:	f002 fde5 	bl	8009170 <_localeconv_r>
 80065a6:	6803      	ldr	r3, [r0, #0]
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7f9 fe18 	bl	80001e0 <strlen>
 80065b0:	2300      	movs	r3, #0
 80065b2:	930a      	str	r3, [sp, #40]	; 0x28
 80065b4:	f8d8 3000 	ldr.w	r3, [r8]
 80065b8:	9005      	str	r0, [sp, #20]
 80065ba:	3307      	adds	r3, #7
 80065bc:	f023 0307 	bic.w	r3, r3, #7
 80065c0:	f103 0208 	add.w	r2, r3, #8
 80065c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065c8:	f8d4 b000 	ldr.w	fp, [r4]
 80065cc:	f8c8 2000 	str.w	r2, [r8]
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065e0:	9307      	str	r3, [sp, #28]
 80065e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	4ba7      	ldr	r3, [pc, #668]	; (8006888 <_printf_float+0x2f8>)
 80065ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065f0:	f7fa faa4 	bl	8000b3c <__aeabi_dcmpun>
 80065f4:	bb70      	cbnz	r0, 8006654 <_printf_float+0xc4>
 80065f6:	f04f 32ff 	mov.w	r2, #4294967295
 80065fa:	4ba3      	ldr	r3, [pc, #652]	; (8006888 <_printf_float+0x2f8>)
 80065fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006600:	f7fa fa7e 	bl	8000b00 <__aeabi_dcmple>
 8006604:	bb30      	cbnz	r0, 8006654 <_printf_float+0xc4>
 8006606:	2200      	movs	r2, #0
 8006608:	2300      	movs	r3, #0
 800660a:	4640      	mov	r0, r8
 800660c:	4649      	mov	r1, r9
 800660e:	f7fa fa6d 	bl	8000aec <__aeabi_dcmplt>
 8006612:	b110      	cbz	r0, 800661a <_printf_float+0x8a>
 8006614:	232d      	movs	r3, #45	; 0x2d
 8006616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661a:	4a9c      	ldr	r2, [pc, #624]	; (800688c <_printf_float+0x2fc>)
 800661c:	4b9c      	ldr	r3, [pc, #624]	; (8006890 <_printf_float+0x300>)
 800661e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006622:	bf8c      	ite	hi
 8006624:	4690      	movhi	r8, r2
 8006626:	4698      	movls	r8, r3
 8006628:	2303      	movs	r3, #3
 800662a:	f02b 0204 	bic.w	r2, fp, #4
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	f04f 0900 	mov.w	r9, #0
 8006636:	9700      	str	r7, [sp, #0]
 8006638:	4633      	mov	r3, r6
 800663a:	aa0b      	add	r2, sp, #44	; 0x2c
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f000 f9e6 	bl	8006a10 <_printf_common>
 8006644:	3001      	adds	r0, #1
 8006646:	f040 808d 	bne.w	8006764 <_printf_float+0x1d4>
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	b00d      	add	sp, #52	; 0x34
 8006650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	4640      	mov	r0, r8
 800665a:	4649      	mov	r1, r9
 800665c:	f7fa fa6e 	bl	8000b3c <__aeabi_dcmpun>
 8006660:	b110      	cbz	r0, 8006668 <_printf_float+0xd8>
 8006662:	4a8c      	ldr	r2, [pc, #560]	; (8006894 <_printf_float+0x304>)
 8006664:	4b8c      	ldr	r3, [pc, #560]	; (8006898 <_printf_float+0x308>)
 8006666:	e7da      	b.n	800661e <_printf_float+0x8e>
 8006668:	6861      	ldr	r1, [r4, #4]
 800666a:	1c4b      	adds	r3, r1, #1
 800666c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006670:	a80a      	add	r0, sp, #40	; 0x28
 8006672:	d13e      	bne.n	80066f2 <_printf_float+0x162>
 8006674:	2306      	movs	r3, #6
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	2300      	movs	r3, #0
 800667a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800667e:	ab09      	add	r3, sp, #36	; 0x24
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	ec49 8b10 	vmov	d0, r8, r9
 8006686:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800668a:	6022      	str	r2, [r4, #0]
 800668c:	f8cd a004 	str.w	sl, [sp, #4]
 8006690:	6861      	ldr	r1, [r4, #4]
 8006692:	4628      	mov	r0, r5
 8006694:	f7ff fee7 	bl	8006466 <__cvt>
 8006698:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800669c:	2b47      	cmp	r3, #71	; 0x47
 800669e:	4680      	mov	r8, r0
 80066a0:	d109      	bne.n	80066b6 <_printf_float+0x126>
 80066a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a4:	1cd8      	adds	r0, r3, #3
 80066a6:	db02      	blt.n	80066ae <_printf_float+0x11e>
 80066a8:	6862      	ldr	r2, [r4, #4]
 80066aa:	4293      	cmp	r3, r2
 80066ac:	dd47      	ble.n	800673e <_printf_float+0x1ae>
 80066ae:	f1aa 0a02 	sub.w	sl, sl, #2
 80066b2:	fa5f fa8a 	uxtb.w	sl, sl
 80066b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80066ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066bc:	d824      	bhi.n	8006708 <_printf_float+0x178>
 80066be:	3901      	subs	r1, #1
 80066c0:	4652      	mov	r2, sl
 80066c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066c6:	9109      	str	r1, [sp, #36]	; 0x24
 80066c8:	f7ff ff2e 	bl	8006528 <__exponent>
 80066cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ce:	1813      	adds	r3, r2, r0
 80066d0:	2a01      	cmp	r2, #1
 80066d2:	4681      	mov	r9, r0
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	dc02      	bgt.n	80066de <_printf_float+0x14e>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	07d1      	lsls	r1, r2, #31
 80066dc:	d501      	bpl.n	80066e2 <_printf_float+0x152>
 80066de:	3301      	adds	r3, #1
 80066e0:	6123      	str	r3, [r4, #16]
 80066e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0a5      	beq.n	8006636 <_printf_float+0xa6>
 80066ea:	232d      	movs	r3, #45	; 0x2d
 80066ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f0:	e7a1      	b.n	8006636 <_printf_float+0xa6>
 80066f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80066f6:	f000 8177 	beq.w	80069e8 <_printf_float+0x458>
 80066fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066fe:	d1bb      	bne.n	8006678 <_printf_float+0xe8>
 8006700:	2900      	cmp	r1, #0
 8006702:	d1b9      	bne.n	8006678 <_printf_float+0xe8>
 8006704:	2301      	movs	r3, #1
 8006706:	e7b6      	b.n	8006676 <_printf_float+0xe6>
 8006708:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800670c:	d119      	bne.n	8006742 <_printf_float+0x1b2>
 800670e:	2900      	cmp	r1, #0
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	dd0c      	ble.n	800672e <_printf_float+0x19e>
 8006714:	6121      	str	r1, [r4, #16]
 8006716:	b913      	cbnz	r3, 800671e <_printf_float+0x18e>
 8006718:	6822      	ldr	r2, [r4, #0]
 800671a:	07d2      	lsls	r2, r2, #31
 800671c:	d502      	bpl.n	8006724 <_printf_float+0x194>
 800671e:	3301      	adds	r3, #1
 8006720:	440b      	add	r3, r1
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006726:	65a3      	str	r3, [r4, #88]	; 0x58
 8006728:	f04f 0900 	mov.w	r9, #0
 800672c:	e7d9      	b.n	80066e2 <_printf_float+0x152>
 800672e:	b913      	cbnz	r3, 8006736 <_printf_float+0x1a6>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	07d0      	lsls	r0, r2, #31
 8006734:	d501      	bpl.n	800673a <_printf_float+0x1aa>
 8006736:	3302      	adds	r3, #2
 8006738:	e7f3      	b.n	8006722 <_printf_float+0x192>
 800673a:	2301      	movs	r3, #1
 800673c:	e7f1      	b.n	8006722 <_printf_float+0x192>
 800673e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006742:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006746:	4293      	cmp	r3, r2
 8006748:	db05      	blt.n	8006756 <_printf_float+0x1c6>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	07d1      	lsls	r1, r2, #31
 8006750:	d5e8      	bpl.n	8006724 <_printf_float+0x194>
 8006752:	3301      	adds	r3, #1
 8006754:	e7e5      	b.n	8006722 <_printf_float+0x192>
 8006756:	2b00      	cmp	r3, #0
 8006758:	bfd4      	ite	le
 800675a:	f1c3 0302 	rsble	r3, r3, #2
 800675e:	2301      	movgt	r3, #1
 8006760:	4413      	add	r3, r2
 8006762:	e7de      	b.n	8006722 <_printf_float+0x192>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	055a      	lsls	r2, r3, #21
 8006768:	d407      	bmi.n	800677a <_printf_float+0x1ea>
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	4642      	mov	r2, r8
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	d12b      	bne.n	80067d0 <_printf_float+0x240>
 8006778:	e767      	b.n	800664a <_printf_float+0xba>
 800677a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800677e:	f240 80dc 	bls.w	800693a <_printf_float+0x3aa>
 8006782:	2200      	movs	r2, #0
 8006784:	2300      	movs	r3, #0
 8006786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800678a:	f7fa f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800678e:	2800      	cmp	r0, #0
 8006790:	d033      	beq.n	80067fa <_printf_float+0x26a>
 8006792:	2301      	movs	r3, #1
 8006794:	4a41      	ldr	r2, [pc, #260]	; (800689c <_printf_float+0x30c>)
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	f43f af54 	beq.w	800664a <_printf_float+0xba>
 80067a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067a6:	429a      	cmp	r2, r3
 80067a8:	db02      	blt.n	80067b0 <_printf_float+0x220>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	07d8      	lsls	r0, r3, #31
 80067ae:	d50f      	bpl.n	80067d0 <_printf_float+0x240>
 80067b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b4:	4631      	mov	r1, r6
 80067b6:	4628      	mov	r0, r5
 80067b8:	47b8      	blx	r7
 80067ba:	3001      	adds	r0, #1
 80067bc:	f43f af45 	beq.w	800664a <_printf_float+0xba>
 80067c0:	f04f 0800 	mov.w	r8, #0
 80067c4:	f104 091a 	add.w	r9, r4, #26
 80067c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4543      	cmp	r3, r8
 80067ce:	dc09      	bgt.n	80067e4 <_printf_float+0x254>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	079b      	lsls	r3, r3, #30
 80067d4:	f100 8103 	bmi.w	80069de <_printf_float+0x44e>
 80067d8:	68e0      	ldr	r0, [r4, #12]
 80067da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067dc:	4298      	cmp	r0, r3
 80067de:	bfb8      	it	lt
 80067e0:	4618      	movlt	r0, r3
 80067e2:	e734      	b.n	800664e <_printf_float+0xbe>
 80067e4:	2301      	movs	r3, #1
 80067e6:	464a      	mov	r2, r9
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f af2b 	beq.w	800664a <_printf_float+0xba>
 80067f4:	f108 0801 	add.w	r8, r8, #1
 80067f8:	e7e6      	b.n	80067c8 <_printf_float+0x238>
 80067fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	dc2b      	bgt.n	8006858 <_printf_float+0x2c8>
 8006800:	2301      	movs	r3, #1
 8006802:	4a26      	ldr	r2, [pc, #152]	; (800689c <_printf_float+0x30c>)
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	f43f af1d 	beq.w	800664a <_printf_float+0xba>
 8006810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006812:	b923      	cbnz	r3, 800681e <_printf_float+0x28e>
 8006814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006816:	b913      	cbnz	r3, 800681e <_printf_float+0x28e>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	07d9      	lsls	r1, r3, #31
 800681c:	d5d8      	bpl.n	80067d0 <_printf_float+0x240>
 800681e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	f43f af0e 	beq.w	800664a <_printf_float+0xba>
 800682e:	f04f 0900 	mov.w	r9, #0
 8006832:	f104 0a1a 	add.w	sl, r4, #26
 8006836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006838:	425b      	negs	r3, r3
 800683a:	454b      	cmp	r3, r9
 800683c:	dc01      	bgt.n	8006842 <_printf_float+0x2b2>
 800683e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006840:	e794      	b.n	800676c <_printf_float+0x1dc>
 8006842:	2301      	movs	r3, #1
 8006844:	4652      	mov	r2, sl
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	47b8      	blx	r7
 800684c:	3001      	adds	r0, #1
 800684e:	f43f aefc 	beq.w	800664a <_printf_float+0xba>
 8006852:	f109 0901 	add.w	r9, r9, #1
 8006856:	e7ee      	b.n	8006836 <_printf_float+0x2a6>
 8006858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800685a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800685c:	429a      	cmp	r2, r3
 800685e:	bfa8      	it	ge
 8006860:	461a      	movge	r2, r3
 8006862:	2a00      	cmp	r2, #0
 8006864:	4691      	mov	r9, r2
 8006866:	dd07      	ble.n	8006878 <_printf_float+0x2e8>
 8006868:	4613      	mov	r3, r2
 800686a:	4631      	mov	r1, r6
 800686c:	4642      	mov	r2, r8
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	f43f aee9 	beq.w	800664a <_printf_float+0xba>
 8006878:	f104 031a 	add.w	r3, r4, #26
 800687c:	f04f 0b00 	mov.w	fp, #0
 8006880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006884:	9306      	str	r3, [sp, #24]
 8006886:	e015      	b.n	80068b4 <_printf_float+0x324>
 8006888:	7fefffff 	.word	0x7fefffff
 800688c:	0800b590 	.word	0x0800b590
 8006890:	0800b58c 	.word	0x0800b58c
 8006894:	0800b598 	.word	0x0800b598
 8006898:	0800b594 	.word	0x0800b594
 800689c:	0800b59c 	.word	0x0800b59c
 80068a0:	2301      	movs	r3, #1
 80068a2:	9a06      	ldr	r2, [sp, #24]
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f aecd 	beq.w	800664a <_printf_float+0xba>
 80068b0:	f10b 0b01 	add.w	fp, fp, #1
 80068b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80068b8:	ebaa 0309 	sub.w	r3, sl, r9
 80068bc:	455b      	cmp	r3, fp
 80068be:	dcef      	bgt.n	80068a0 <_printf_float+0x310>
 80068c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c4:	429a      	cmp	r2, r3
 80068c6:	44d0      	add	r8, sl
 80068c8:	db15      	blt.n	80068f6 <_printf_float+0x366>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	07da      	lsls	r2, r3, #31
 80068ce:	d412      	bmi.n	80068f6 <_printf_float+0x366>
 80068d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068d4:	eba3 020a 	sub.w	r2, r3, sl
 80068d8:	eba3 0a01 	sub.w	sl, r3, r1
 80068dc:	4592      	cmp	sl, r2
 80068de:	bfa8      	it	ge
 80068e0:	4692      	movge	sl, r2
 80068e2:	f1ba 0f00 	cmp.w	sl, #0
 80068e6:	dc0e      	bgt.n	8006906 <_printf_float+0x376>
 80068e8:	f04f 0800 	mov.w	r8, #0
 80068ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068f0:	f104 091a 	add.w	r9, r4, #26
 80068f4:	e019      	b.n	800692a <_printf_float+0x39a>
 80068f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b8      	blx	r7
 8006900:	3001      	adds	r0, #1
 8006902:	d1e5      	bne.n	80068d0 <_printf_float+0x340>
 8006904:	e6a1      	b.n	800664a <_printf_float+0xba>
 8006906:	4653      	mov	r3, sl
 8006908:	4642      	mov	r2, r8
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	d1e9      	bne.n	80068e8 <_printf_float+0x358>
 8006914:	e699      	b.n	800664a <_printf_float+0xba>
 8006916:	2301      	movs	r3, #1
 8006918:	464a      	mov	r2, r9
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f ae92 	beq.w	800664a <_printf_float+0xba>
 8006926:	f108 0801 	add.w	r8, r8, #1
 800692a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	eba3 030a 	sub.w	r3, r3, sl
 8006934:	4543      	cmp	r3, r8
 8006936:	dcee      	bgt.n	8006916 <_printf_float+0x386>
 8006938:	e74a      	b.n	80067d0 <_printf_float+0x240>
 800693a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800693c:	2a01      	cmp	r2, #1
 800693e:	dc01      	bgt.n	8006944 <_printf_float+0x3b4>
 8006940:	07db      	lsls	r3, r3, #31
 8006942:	d53a      	bpl.n	80069ba <_printf_float+0x42a>
 8006944:	2301      	movs	r3, #1
 8006946:	4642      	mov	r2, r8
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f ae7b 	beq.w	800664a <_printf_float+0xba>
 8006954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	f108 0801 	add.w	r8, r8, #1
 8006964:	f43f ae71 	beq.w	800664a <_printf_float+0xba>
 8006968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696a:	2200      	movs	r2, #0
 800696c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006974:	2300      	movs	r3, #0
 8006976:	f7fa f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800697a:	b9c8      	cbnz	r0, 80069b0 <_printf_float+0x420>
 800697c:	4653      	mov	r3, sl
 800697e:	4642      	mov	r2, r8
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	d10e      	bne.n	80069a8 <_printf_float+0x418>
 800698a:	e65e      	b.n	800664a <_printf_float+0xba>
 800698c:	2301      	movs	r3, #1
 800698e:	4652      	mov	r2, sl
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	f43f ae57 	beq.w	800664a <_printf_float+0xba>
 800699c:	f108 0801 	add.w	r8, r8, #1
 80069a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a2:	3b01      	subs	r3, #1
 80069a4:	4543      	cmp	r3, r8
 80069a6:	dcf1      	bgt.n	800698c <_printf_float+0x3fc>
 80069a8:	464b      	mov	r3, r9
 80069aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069ae:	e6de      	b.n	800676e <_printf_float+0x1de>
 80069b0:	f04f 0800 	mov.w	r8, #0
 80069b4:	f104 0a1a 	add.w	sl, r4, #26
 80069b8:	e7f2      	b.n	80069a0 <_printf_float+0x410>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e7df      	b.n	800697e <_printf_float+0x3ee>
 80069be:	2301      	movs	r3, #1
 80069c0:	464a      	mov	r2, r9
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	f43f ae3e 	beq.w	800664a <_printf_float+0xba>
 80069ce:	f108 0801 	add.w	r8, r8, #1
 80069d2:	68e3      	ldr	r3, [r4, #12]
 80069d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	4543      	cmp	r3, r8
 80069da:	dcf0      	bgt.n	80069be <_printf_float+0x42e>
 80069dc:	e6fc      	b.n	80067d8 <_printf_float+0x248>
 80069de:	f04f 0800 	mov.w	r8, #0
 80069e2:	f104 0919 	add.w	r9, r4, #25
 80069e6:	e7f4      	b.n	80069d2 <_printf_float+0x442>
 80069e8:	2900      	cmp	r1, #0
 80069ea:	f43f ae8b 	beq.w	8006704 <_printf_float+0x174>
 80069ee:	2300      	movs	r3, #0
 80069f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80069f4:	ab09      	add	r3, sp, #36	; 0x24
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	ec49 8b10 	vmov	d0, r8, r9
 80069fc:	6022      	str	r2, [r4, #0]
 80069fe:	f8cd a004 	str.w	sl, [sp, #4]
 8006a02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7ff fd2d 	bl	8006466 <__cvt>
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	e648      	b.n	80066a2 <_printf_float+0x112>

08006a10 <_printf_common>:
 8006a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	4691      	mov	r9, r2
 8006a16:	461f      	mov	r7, r3
 8006a18:	688a      	ldr	r2, [r1, #8]
 8006a1a:	690b      	ldr	r3, [r1, #16]
 8006a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a20:	4293      	cmp	r3, r2
 8006a22:	bfb8      	it	lt
 8006a24:	4613      	movlt	r3, r2
 8006a26:	f8c9 3000 	str.w	r3, [r9]
 8006a2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460c      	mov	r4, r1
 8006a32:	b112      	cbz	r2, 8006a3a <_printf_common+0x2a>
 8006a34:	3301      	adds	r3, #1
 8006a36:	f8c9 3000 	str.w	r3, [r9]
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	0699      	lsls	r1, r3, #26
 8006a3e:	bf42      	ittt	mi
 8006a40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a44:	3302      	addmi	r3, #2
 8006a46:	f8c9 3000 	strmi.w	r3, [r9]
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	f015 0506 	ands.w	r5, r5, #6
 8006a50:	d107      	bne.n	8006a62 <_printf_common+0x52>
 8006a52:	f104 0a19 	add.w	sl, r4, #25
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	f8d9 2000 	ldr.w	r2, [r9]
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	42ab      	cmp	r3, r5
 8006a60:	dc28      	bgt.n	8006ab4 <_printf_common+0xa4>
 8006a62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	3300      	adds	r3, #0
 8006a6a:	bf18      	it	ne
 8006a6c:	2301      	movne	r3, #1
 8006a6e:	0692      	lsls	r2, r2, #26
 8006a70:	d42d      	bmi.n	8006ace <_printf_common+0xbe>
 8006a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a76:	4639      	mov	r1, r7
 8006a78:	4630      	mov	r0, r6
 8006a7a:	47c0      	blx	r8
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d020      	beq.n	8006ac2 <_printf_common+0xb2>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	68e5      	ldr	r5, [r4, #12]
 8006a84:	f8d9 2000 	ldr.w	r2, [r9]
 8006a88:	f003 0306 	and.w	r3, r3, #6
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	bf08      	it	eq
 8006a90:	1aad      	subeq	r5, r5, r2
 8006a92:	68a3      	ldr	r3, [r4, #8]
 8006a94:	6922      	ldr	r2, [r4, #16]
 8006a96:	bf0c      	ite	eq
 8006a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a9c:	2500      	movne	r5, #0
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	bfc4      	itt	gt
 8006aa2:	1a9b      	subgt	r3, r3, r2
 8006aa4:	18ed      	addgt	r5, r5, r3
 8006aa6:	f04f 0900 	mov.w	r9, #0
 8006aaa:	341a      	adds	r4, #26
 8006aac:	454d      	cmp	r5, r9
 8006aae:	d11a      	bne.n	8006ae6 <_printf_common+0xd6>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e008      	b.n	8006ac6 <_printf_common+0xb6>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	4639      	mov	r1, r7
 8006aba:	4630      	mov	r0, r6
 8006abc:	47c0      	blx	r8
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d103      	bne.n	8006aca <_printf_common+0xba>
 8006ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aca:	3501      	adds	r5, #1
 8006acc:	e7c3      	b.n	8006a56 <_printf_common+0x46>
 8006ace:	18e1      	adds	r1, r4, r3
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	2030      	movs	r0, #48	; 0x30
 8006ad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ad8:	4422      	add	r2, r4
 8006ada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ade:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ae2:	3302      	adds	r3, #2
 8006ae4:	e7c5      	b.n	8006a72 <_printf_common+0x62>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4622      	mov	r2, r4
 8006aea:	4639      	mov	r1, r7
 8006aec:	4630      	mov	r0, r6
 8006aee:	47c0      	blx	r8
 8006af0:	3001      	adds	r0, #1
 8006af2:	d0e6      	beq.n	8006ac2 <_printf_common+0xb2>
 8006af4:	f109 0901 	add.w	r9, r9, #1
 8006af8:	e7d8      	b.n	8006aac <_printf_common+0x9c>
	...

08006afc <_printf_i>:
 8006afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b04:	460c      	mov	r4, r1
 8006b06:	7e09      	ldrb	r1, [r1, #24]
 8006b08:	b085      	sub	sp, #20
 8006b0a:	296e      	cmp	r1, #110	; 0x6e
 8006b0c:	4617      	mov	r7, r2
 8006b0e:	4606      	mov	r6, r0
 8006b10:	4698      	mov	r8, r3
 8006b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b14:	f000 80b3 	beq.w	8006c7e <_printf_i+0x182>
 8006b18:	d822      	bhi.n	8006b60 <_printf_i+0x64>
 8006b1a:	2963      	cmp	r1, #99	; 0x63
 8006b1c:	d036      	beq.n	8006b8c <_printf_i+0x90>
 8006b1e:	d80a      	bhi.n	8006b36 <_printf_i+0x3a>
 8006b20:	2900      	cmp	r1, #0
 8006b22:	f000 80b9 	beq.w	8006c98 <_printf_i+0x19c>
 8006b26:	2958      	cmp	r1, #88	; 0x58
 8006b28:	f000 8083 	beq.w	8006c32 <_printf_i+0x136>
 8006b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b34:	e032      	b.n	8006b9c <_printf_i+0xa0>
 8006b36:	2964      	cmp	r1, #100	; 0x64
 8006b38:	d001      	beq.n	8006b3e <_printf_i+0x42>
 8006b3a:	2969      	cmp	r1, #105	; 0x69
 8006b3c:	d1f6      	bne.n	8006b2c <_printf_i+0x30>
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	6813      	ldr	r3, [r2, #0]
 8006b42:	0605      	lsls	r5, r0, #24
 8006b44:	f103 0104 	add.w	r1, r3, #4
 8006b48:	d52a      	bpl.n	8006ba0 <_printf_i+0xa4>
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da03      	bge.n	8006b5a <_printf_i+0x5e>
 8006b52:	222d      	movs	r2, #45	; 0x2d
 8006b54:	425b      	negs	r3, r3
 8006b56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b5a:	486f      	ldr	r0, [pc, #444]	; (8006d18 <_printf_i+0x21c>)
 8006b5c:	220a      	movs	r2, #10
 8006b5e:	e039      	b.n	8006bd4 <_printf_i+0xd8>
 8006b60:	2973      	cmp	r1, #115	; 0x73
 8006b62:	f000 809d 	beq.w	8006ca0 <_printf_i+0x1a4>
 8006b66:	d808      	bhi.n	8006b7a <_printf_i+0x7e>
 8006b68:	296f      	cmp	r1, #111	; 0x6f
 8006b6a:	d020      	beq.n	8006bae <_printf_i+0xb2>
 8006b6c:	2970      	cmp	r1, #112	; 0x70
 8006b6e:	d1dd      	bne.n	8006b2c <_printf_i+0x30>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	f043 0320 	orr.w	r3, r3, #32
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	e003      	b.n	8006b82 <_printf_i+0x86>
 8006b7a:	2975      	cmp	r1, #117	; 0x75
 8006b7c:	d017      	beq.n	8006bae <_printf_i+0xb2>
 8006b7e:	2978      	cmp	r1, #120	; 0x78
 8006b80:	d1d4      	bne.n	8006b2c <_printf_i+0x30>
 8006b82:	2378      	movs	r3, #120	; 0x78
 8006b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b88:	4864      	ldr	r0, [pc, #400]	; (8006d1c <_printf_i+0x220>)
 8006b8a:	e055      	b.n	8006c38 <_printf_i+0x13c>
 8006b8c:	6813      	ldr	r3, [r2, #0]
 8006b8e:	1d19      	adds	r1, r3, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e08c      	b.n	8006cba <_printf_i+0x1be>
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6011      	str	r1, [r2, #0]
 8006ba4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ba8:	bf18      	it	ne
 8006baa:	b21b      	sxthne	r3, r3
 8006bac:	e7cf      	b.n	8006b4e <_printf_i+0x52>
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	1d18      	adds	r0, r3, #4
 8006bb4:	6010      	str	r0, [r2, #0]
 8006bb6:	0628      	lsls	r0, r5, #24
 8006bb8:	d501      	bpl.n	8006bbe <_printf_i+0xc2>
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	e002      	b.n	8006bc4 <_printf_i+0xc8>
 8006bbe:	0668      	lsls	r0, r5, #25
 8006bc0:	d5fb      	bpl.n	8006bba <_printf_i+0xbe>
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	4854      	ldr	r0, [pc, #336]	; (8006d18 <_printf_i+0x21c>)
 8006bc6:	296f      	cmp	r1, #111	; 0x6f
 8006bc8:	bf14      	ite	ne
 8006bca:	220a      	movne	r2, #10
 8006bcc:	2208      	moveq	r2, #8
 8006bce:	2100      	movs	r1, #0
 8006bd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bd4:	6865      	ldr	r5, [r4, #4]
 8006bd6:	60a5      	str	r5, [r4, #8]
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	f2c0 8095 	blt.w	8006d08 <_printf_i+0x20c>
 8006bde:	6821      	ldr	r1, [r4, #0]
 8006be0:	f021 0104 	bic.w	r1, r1, #4
 8006be4:	6021      	str	r1, [r4, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d13d      	bne.n	8006c66 <_printf_i+0x16a>
 8006bea:	2d00      	cmp	r5, #0
 8006bec:	f040 808e 	bne.w	8006d0c <_printf_i+0x210>
 8006bf0:	4665      	mov	r5, ip
 8006bf2:	2a08      	cmp	r2, #8
 8006bf4:	d10b      	bne.n	8006c0e <_printf_i+0x112>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	07db      	lsls	r3, r3, #31
 8006bfa:	d508      	bpl.n	8006c0e <_printf_i+0x112>
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	bfde      	ittt	le
 8006c04:	2330      	movle	r3, #48	; 0x30
 8006c06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c0e:	ebac 0305 	sub.w	r3, ip, r5
 8006c12:	6123      	str	r3, [r4, #16]
 8006c14:	f8cd 8000 	str.w	r8, [sp]
 8006c18:	463b      	mov	r3, r7
 8006c1a:	aa03      	add	r2, sp, #12
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f7ff fef6 	bl	8006a10 <_printf_common>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d14d      	bne.n	8006cc4 <_printf_i+0x1c8>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	b005      	add	sp, #20
 8006c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c32:	4839      	ldr	r0, [pc, #228]	; (8006d18 <_printf_i+0x21c>)
 8006c34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c38:	6813      	ldr	r3, [r2, #0]
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	1d1d      	adds	r5, r3, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6015      	str	r5, [r2, #0]
 8006c42:	060a      	lsls	r2, r1, #24
 8006c44:	d50b      	bpl.n	8006c5e <_printf_i+0x162>
 8006c46:	07ca      	lsls	r2, r1, #31
 8006c48:	bf44      	itt	mi
 8006c4a:	f041 0120 	orrmi.w	r1, r1, #32
 8006c4e:	6021      	strmi	r1, [r4, #0]
 8006c50:	b91b      	cbnz	r3, 8006c5a <_printf_i+0x15e>
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	f022 0220 	bic.w	r2, r2, #32
 8006c58:	6022      	str	r2, [r4, #0]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	e7b7      	b.n	8006bce <_printf_i+0xd2>
 8006c5e:	064d      	lsls	r5, r1, #25
 8006c60:	bf48      	it	mi
 8006c62:	b29b      	uxthmi	r3, r3
 8006c64:	e7ef      	b.n	8006c46 <_printf_i+0x14a>
 8006c66:	4665      	mov	r5, ip
 8006c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c6c:	fb02 3311 	mls	r3, r2, r1, r3
 8006c70:	5cc3      	ldrb	r3, [r0, r3]
 8006c72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c76:	460b      	mov	r3, r1
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d1f5      	bne.n	8006c68 <_printf_i+0x16c>
 8006c7c:	e7b9      	b.n	8006bf2 <_printf_i+0xf6>
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	6825      	ldr	r5, [r4, #0]
 8006c82:	6961      	ldr	r1, [r4, #20]
 8006c84:	1d18      	adds	r0, r3, #4
 8006c86:	6010      	str	r0, [r2, #0]
 8006c88:	0628      	lsls	r0, r5, #24
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	d501      	bpl.n	8006c92 <_printf_i+0x196>
 8006c8e:	6019      	str	r1, [r3, #0]
 8006c90:	e002      	b.n	8006c98 <_printf_i+0x19c>
 8006c92:	066a      	lsls	r2, r5, #25
 8006c94:	d5fb      	bpl.n	8006c8e <_printf_i+0x192>
 8006c96:	8019      	strh	r1, [r3, #0]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	4665      	mov	r5, ip
 8006c9e:	e7b9      	b.n	8006c14 <_printf_i+0x118>
 8006ca0:	6813      	ldr	r3, [r2, #0]
 8006ca2:	1d19      	adds	r1, r3, #4
 8006ca4:	6011      	str	r1, [r2, #0]
 8006ca6:	681d      	ldr	r5, [r3, #0]
 8006ca8:	6862      	ldr	r2, [r4, #4]
 8006caa:	2100      	movs	r1, #0
 8006cac:	4628      	mov	r0, r5
 8006cae:	f7f9 fa9f 	bl	80001f0 <memchr>
 8006cb2:	b108      	cbz	r0, 8006cb8 <_printf_i+0x1bc>
 8006cb4:	1b40      	subs	r0, r0, r5
 8006cb6:	6060      	str	r0, [r4, #4]
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc2:	e7a7      	b.n	8006c14 <_printf_i+0x118>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4639      	mov	r1, r7
 8006cca:	4630      	mov	r0, r6
 8006ccc:	47c0      	blx	r8
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d0aa      	beq.n	8006c28 <_printf_i+0x12c>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	079b      	lsls	r3, r3, #30
 8006cd6:	d413      	bmi.n	8006d00 <_printf_i+0x204>
 8006cd8:	68e0      	ldr	r0, [r4, #12]
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	4298      	cmp	r0, r3
 8006cde:	bfb8      	it	lt
 8006ce0:	4618      	movlt	r0, r3
 8006ce2:	e7a3      	b.n	8006c2c <_printf_i+0x130>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	464a      	mov	r2, r9
 8006ce8:	4639      	mov	r1, r7
 8006cea:	4630      	mov	r0, r6
 8006cec:	47c0      	blx	r8
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d09a      	beq.n	8006c28 <_printf_i+0x12c>
 8006cf2:	3501      	adds	r5, #1
 8006cf4:	68e3      	ldr	r3, [r4, #12]
 8006cf6:	9a03      	ldr	r2, [sp, #12]
 8006cf8:	1a9b      	subs	r3, r3, r2
 8006cfa:	42ab      	cmp	r3, r5
 8006cfc:	dcf2      	bgt.n	8006ce4 <_printf_i+0x1e8>
 8006cfe:	e7eb      	b.n	8006cd8 <_printf_i+0x1dc>
 8006d00:	2500      	movs	r5, #0
 8006d02:	f104 0919 	add.w	r9, r4, #25
 8006d06:	e7f5      	b.n	8006cf4 <_printf_i+0x1f8>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1ac      	bne.n	8006c66 <_printf_i+0x16a>
 8006d0c:	7803      	ldrb	r3, [r0, #0]
 8006d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d16:	e76c      	b.n	8006bf2 <_printf_i+0xf6>
 8006d18:	0800b59e 	.word	0x0800b59e
 8006d1c:	0800b5af 	.word	0x0800b5af

08006d20 <_scanf_float>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	469a      	mov	sl, r3
 8006d26:	688b      	ldr	r3, [r1, #8]
 8006d28:	4616      	mov	r6, r2
 8006d2a:	1e5a      	subs	r2, r3, #1
 8006d2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006d30:	b087      	sub	sp, #28
 8006d32:	bf83      	ittte	hi
 8006d34:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006d38:	189b      	addhi	r3, r3, r2
 8006d3a:	9301      	strhi	r3, [sp, #4]
 8006d3c:	2300      	movls	r3, #0
 8006d3e:	bf86      	itte	hi
 8006d40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006d44:	608b      	strhi	r3, [r1, #8]
 8006d46:	9301      	strls	r3, [sp, #4]
 8006d48:	680b      	ldr	r3, [r1, #0]
 8006d4a:	4688      	mov	r8, r1
 8006d4c:	f04f 0b00 	mov.w	fp, #0
 8006d50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006d54:	f848 3b1c 	str.w	r3, [r8], #28
 8006d58:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	4645      	mov	r5, r8
 8006d62:	465a      	mov	r2, fp
 8006d64:	46d9      	mov	r9, fp
 8006d66:	f8cd b008 	str.w	fp, [sp, #8]
 8006d6a:	68a1      	ldr	r1, [r4, #8]
 8006d6c:	b181      	cbz	r1, 8006d90 <_scanf_float+0x70>
 8006d6e:	6833      	ldr	r3, [r6, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b49      	cmp	r3, #73	; 0x49
 8006d74:	d071      	beq.n	8006e5a <_scanf_float+0x13a>
 8006d76:	d84d      	bhi.n	8006e14 <_scanf_float+0xf4>
 8006d78:	2b39      	cmp	r3, #57	; 0x39
 8006d7a:	d840      	bhi.n	8006dfe <_scanf_float+0xde>
 8006d7c:	2b31      	cmp	r3, #49	; 0x31
 8006d7e:	f080 8088 	bcs.w	8006e92 <_scanf_float+0x172>
 8006d82:	2b2d      	cmp	r3, #45	; 0x2d
 8006d84:	f000 8090 	beq.w	8006ea8 <_scanf_float+0x188>
 8006d88:	d815      	bhi.n	8006db6 <_scanf_float+0x96>
 8006d8a:	2b2b      	cmp	r3, #43	; 0x2b
 8006d8c:	f000 808c 	beq.w	8006ea8 <_scanf_float+0x188>
 8006d90:	f1b9 0f00 	cmp.w	r9, #0
 8006d94:	d003      	beq.n	8006d9e <_scanf_float+0x7e>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	3a01      	subs	r2, #1
 8006da0:	2a01      	cmp	r2, #1
 8006da2:	f200 80ea 	bhi.w	8006f7a <_scanf_float+0x25a>
 8006da6:	4545      	cmp	r5, r8
 8006da8:	f200 80dc 	bhi.w	8006f64 <_scanf_float+0x244>
 8006dac:	2601      	movs	r6, #1
 8006dae:	4630      	mov	r0, r6
 8006db0:	b007      	add	sp, #28
 8006db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db6:	2b2e      	cmp	r3, #46	; 0x2e
 8006db8:	f000 809f 	beq.w	8006efa <_scanf_float+0x1da>
 8006dbc:	2b30      	cmp	r3, #48	; 0x30
 8006dbe:	d1e7      	bne.n	8006d90 <_scanf_float+0x70>
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006dc6:	d064      	beq.n	8006e92 <_scanf_float+0x172>
 8006dc8:	9b01      	ldr	r3, [sp, #4]
 8006dca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006dce:	6020      	str	r0, [r4, #0]
 8006dd0:	f109 0901 	add.w	r9, r9, #1
 8006dd4:	b11b      	cbz	r3, 8006dde <_scanf_float+0xbe>
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	3101      	adds	r1, #1
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	60a1      	str	r1, [r4, #8]
 8006dde:	68a3      	ldr	r3, [r4, #8]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	60a3      	str	r3, [r4, #8]
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	3301      	adds	r3, #1
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	6873      	ldr	r3, [r6, #4]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	6073      	str	r3, [r6, #4]
 8006df2:	f340 80ac 	ble.w	8006f4e <_scanf_float+0x22e>
 8006df6:	6833      	ldr	r3, [r6, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	6033      	str	r3, [r6, #0]
 8006dfc:	e7b5      	b.n	8006d6a <_scanf_float+0x4a>
 8006dfe:	2b45      	cmp	r3, #69	; 0x45
 8006e00:	f000 8085 	beq.w	8006f0e <_scanf_float+0x1ee>
 8006e04:	2b46      	cmp	r3, #70	; 0x46
 8006e06:	d06a      	beq.n	8006ede <_scanf_float+0x1be>
 8006e08:	2b41      	cmp	r3, #65	; 0x41
 8006e0a:	d1c1      	bne.n	8006d90 <_scanf_float+0x70>
 8006e0c:	2a01      	cmp	r2, #1
 8006e0e:	d1bf      	bne.n	8006d90 <_scanf_float+0x70>
 8006e10:	2202      	movs	r2, #2
 8006e12:	e046      	b.n	8006ea2 <_scanf_float+0x182>
 8006e14:	2b65      	cmp	r3, #101	; 0x65
 8006e16:	d07a      	beq.n	8006f0e <_scanf_float+0x1ee>
 8006e18:	d818      	bhi.n	8006e4c <_scanf_float+0x12c>
 8006e1a:	2b54      	cmp	r3, #84	; 0x54
 8006e1c:	d066      	beq.n	8006eec <_scanf_float+0x1cc>
 8006e1e:	d811      	bhi.n	8006e44 <_scanf_float+0x124>
 8006e20:	2b4e      	cmp	r3, #78	; 0x4e
 8006e22:	d1b5      	bne.n	8006d90 <_scanf_float+0x70>
 8006e24:	2a00      	cmp	r2, #0
 8006e26:	d146      	bne.n	8006eb6 <_scanf_float+0x196>
 8006e28:	f1b9 0f00 	cmp.w	r9, #0
 8006e2c:	d145      	bne.n	8006eba <_scanf_float+0x19a>
 8006e2e:	6821      	ldr	r1, [r4, #0]
 8006e30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006e34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006e38:	d13f      	bne.n	8006eba <_scanf_float+0x19a>
 8006e3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e3e:	6021      	str	r1, [r4, #0]
 8006e40:	2201      	movs	r2, #1
 8006e42:	e02e      	b.n	8006ea2 <_scanf_float+0x182>
 8006e44:	2b59      	cmp	r3, #89	; 0x59
 8006e46:	d01e      	beq.n	8006e86 <_scanf_float+0x166>
 8006e48:	2b61      	cmp	r3, #97	; 0x61
 8006e4a:	e7de      	b.n	8006e0a <_scanf_float+0xea>
 8006e4c:	2b6e      	cmp	r3, #110	; 0x6e
 8006e4e:	d0e9      	beq.n	8006e24 <_scanf_float+0x104>
 8006e50:	d815      	bhi.n	8006e7e <_scanf_float+0x15e>
 8006e52:	2b66      	cmp	r3, #102	; 0x66
 8006e54:	d043      	beq.n	8006ede <_scanf_float+0x1be>
 8006e56:	2b69      	cmp	r3, #105	; 0x69
 8006e58:	d19a      	bne.n	8006d90 <_scanf_float+0x70>
 8006e5a:	f1bb 0f00 	cmp.w	fp, #0
 8006e5e:	d138      	bne.n	8006ed2 <_scanf_float+0x1b2>
 8006e60:	f1b9 0f00 	cmp.w	r9, #0
 8006e64:	d197      	bne.n	8006d96 <_scanf_float+0x76>
 8006e66:	6821      	ldr	r1, [r4, #0]
 8006e68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006e6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006e70:	d195      	bne.n	8006d9e <_scanf_float+0x7e>
 8006e72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e76:	6021      	str	r1, [r4, #0]
 8006e78:	f04f 0b01 	mov.w	fp, #1
 8006e7c:	e011      	b.n	8006ea2 <_scanf_float+0x182>
 8006e7e:	2b74      	cmp	r3, #116	; 0x74
 8006e80:	d034      	beq.n	8006eec <_scanf_float+0x1cc>
 8006e82:	2b79      	cmp	r3, #121	; 0x79
 8006e84:	d184      	bne.n	8006d90 <_scanf_float+0x70>
 8006e86:	f1bb 0f07 	cmp.w	fp, #7
 8006e8a:	d181      	bne.n	8006d90 <_scanf_float+0x70>
 8006e8c:	f04f 0b08 	mov.w	fp, #8
 8006e90:	e007      	b.n	8006ea2 <_scanf_float+0x182>
 8006e92:	eb12 0f0b 	cmn.w	r2, fp
 8006e96:	f47f af7b 	bne.w	8006d90 <_scanf_float+0x70>
 8006e9a:	6821      	ldr	r1, [r4, #0]
 8006e9c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006ea0:	6021      	str	r1, [r4, #0]
 8006ea2:	702b      	strb	r3, [r5, #0]
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	e79a      	b.n	8006dde <_scanf_float+0xbe>
 8006ea8:	6821      	ldr	r1, [r4, #0]
 8006eaa:	0608      	lsls	r0, r1, #24
 8006eac:	f57f af70 	bpl.w	8006d90 <_scanf_float+0x70>
 8006eb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006eb4:	e7f4      	b.n	8006ea0 <_scanf_float+0x180>
 8006eb6:	2a02      	cmp	r2, #2
 8006eb8:	d047      	beq.n	8006f4a <_scanf_float+0x22a>
 8006eba:	f1bb 0f01 	cmp.w	fp, #1
 8006ebe:	d003      	beq.n	8006ec8 <_scanf_float+0x1a8>
 8006ec0:	f1bb 0f04 	cmp.w	fp, #4
 8006ec4:	f47f af64 	bne.w	8006d90 <_scanf_float+0x70>
 8006ec8:	f10b 0b01 	add.w	fp, fp, #1
 8006ecc:	fa5f fb8b 	uxtb.w	fp, fp
 8006ed0:	e7e7      	b.n	8006ea2 <_scanf_float+0x182>
 8006ed2:	f1bb 0f03 	cmp.w	fp, #3
 8006ed6:	d0f7      	beq.n	8006ec8 <_scanf_float+0x1a8>
 8006ed8:	f1bb 0f05 	cmp.w	fp, #5
 8006edc:	e7f2      	b.n	8006ec4 <_scanf_float+0x1a4>
 8006ede:	f1bb 0f02 	cmp.w	fp, #2
 8006ee2:	f47f af55 	bne.w	8006d90 <_scanf_float+0x70>
 8006ee6:	f04f 0b03 	mov.w	fp, #3
 8006eea:	e7da      	b.n	8006ea2 <_scanf_float+0x182>
 8006eec:	f1bb 0f06 	cmp.w	fp, #6
 8006ef0:	f47f af4e 	bne.w	8006d90 <_scanf_float+0x70>
 8006ef4:	f04f 0b07 	mov.w	fp, #7
 8006ef8:	e7d3      	b.n	8006ea2 <_scanf_float+0x182>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	0588      	lsls	r0, r1, #22
 8006efe:	f57f af47 	bpl.w	8006d90 <_scanf_float+0x70>
 8006f02:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006f06:	6021      	str	r1, [r4, #0]
 8006f08:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f0c:	e7c9      	b.n	8006ea2 <_scanf_float+0x182>
 8006f0e:	6821      	ldr	r1, [r4, #0]
 8006f10:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006f14:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006f18:	d006      	beq.n	8006f28 <_scanf_float+0x208>
 8006f1a:	0548      	lsls	r0, r1, #21
 8006f1c:	f57f af38 	bpl.w	8006d90 <_scanf_float+0x70>
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	f43f af3b 	beq.w	8006d9e <_scanf_float+0x7e>
 8006f28:	0588      	lsls	r0, r1, #22
 8006f2a:	bf58      	it	pl
 8006f2c:	9802      	ldrpl	r0, [sp, #8]
 8006f2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f32:	bf58      	it	pl
 8006f34:	eba9 0000 	subpl.w	r0, r9, r0
 8006f38:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006f3c:	bf58      	it	pl
 8006f3e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006f42:	6021      	str	r1, [r4, #0]
 8006f44:	f04f 0900 	mov.w	r9, #0
 8006f48:	e7ab      	b.n	8006ea2 <_scanf_float+0x182>
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	e7a9      	b.n	8006ea2 <_scanf_float+0x182>
 8006f4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f52:	9205      	str	r2, [sp, #20]
 8006f54:	4631      	mov	r1, r6
 8006f56:	4638      	mov	r0, r7
 8006f58:	4798      	blx	r3
 8006f5a:	9a05      	ldr	r2, [sp, #20]
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f43f af04 	beq.w	8006d6a <_scanf_float+0x4a>
 8006f62:	e715      	b.n	8006d90 <_scanf_float+0x70>
 8006f64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	4638      	mov	r0, r7
 8006f70:	4798      	blx	r3
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	e715      	b.n	8006da6 <_scanf_float+0x86>
 8006f7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006f7e:	2b06      	cmp	r3, #6
 8006f80:	d80a      	bhi.n	8006f98 <_scanf_float+0x278>
 8006f82:	f1bb 0f02 	cmp.w	fp, #2
 8006f86:	d968      	bls.n	800705a <_scanf_float+0x33a>
 8006f88:	f1ab 0b03 	sub.w	fp, fp, #3
 8006f8c:	fa5f fb8b 	uxtb.w	fp, fp
 8006f90:	eba5 0b0b 	sub.w	fp, r5, fp
 8006f94:	455d      	cmp	r5, fp
 8006f96:	d14b      	bne.n	8007030 <_scanf_float+0x310>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	05da      	lsls	r2, r3, #23
 8006f9c:	d51f      	bpl.n	8006fde <_scanf_float+0x2be>
 8006f9e:	055b      	lsls	r3, r3, #21
 8006fa0:	d468      	bmi.n	8007074 <_scanf_float+0x354>
 8006fa2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	2965      	cmp	r1, #101	; 0x65
 8006faa:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fae:	f105 3bff 	add.w	fp, r5, #4294967295
 8006fb2:	6123      	str	r3, [r4, #16]
 8006fb4:	d00d      	beq.n	8006fd2 <_scanf_float+0x2b2>
 8006fb6:	2945      	cmp	r1, #69	; 0x45
 8006fb8:	d00b      	beq.n	8006fd2 <_scanf_float+0x2b2>
 8006fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fbe:	4632      	mov	r2, r6
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	4798      	blx	r3
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f1a5 0b02 	sub.w	fp, r5, #2
 8006fd0:	6123      	str	r3, [r4, #16]
 8006fd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fd6:	4632      	mov	r2, r6
 8006fd8:	4638      	mov	r0, r7
 8006fda:	4798      	blx	r3
 8006fdc:	465d      	mov	r5, fp
 8006fde:	6826      	ldr	r6, [r4, #0]
 8006fe0:	f016 0610 	ands.w	r6, r6, #16
 8006fe4:	d17a      	bne.n	80070dc <_scanf_float+0x3bc>
 8006fe6:	702e      	strb	r6, [r5, #0]
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff2:	d142      	bne.n	800707a <_scanf_float+0x35a>
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	eba9 0303 	sub.w	r3, r9, r3
 8006ffa:	425a      	negs	r2, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d149      	bne.n	8007094 <_scanf_float+0x374>
 8007000:	2200      	movs	r2, #0
 8007002:	4641      	mov	r1, r8
 8007004:	4638      	mov	r0, r7
 8007006:	f000 fea3 	bl	8007d50 <_strtod_r>
 800700a:	6825      	ldr	r5, [r4, #0]
 800700c:	f8da 3000 	ldr.w	r3, [sl]
 8007010:	f015 0f02 	tst.w	r5, #2
 8007014:	f103 0204 	add.w	r2, r3, #4
 8007018:	ec59 8b10 	vmov	r8, r9, d0
 800701c:	f8ca 2000 	str.w	r2, [sl]
 8007020:	d043      	beq.n	80070aa <_scanf_float+0x38a>
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	e9c3 8900 	strd	r8, r9, [r3]
 8007028:	68e3      	ldr	r3, [r4, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	60e3      	str	r3, [r4, #12]
 800702e:	e6be      	b.n	8006dae <_scanf_float+0x8e>
 8007030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007034:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007038:	4632      	mov	r2, r6
 800703a:	4638      	mov	r0, r7
 800703c:	4798      	blx	r3
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	3b01      	subs	r3, #1
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	e7a6      	b.n	8006f94 <_scanf_float+0x274>
 8007046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800704a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800704e:	4632      	mov	r2, r6
 8007050:	4638      	mov	r0, r7
 8007052:	4798      	blx	r3
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	3b01      	subs	r3, #1
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	4545      	cmp	r5, r8
 800705c:	d8f3      	bhi.n	8007046 <_scanf_float+0x326>
 800705e:	e6a5      	b.n	8006dac <_scanf_float+0x8c>
 8007060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007064:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007068:	4632      	mov	r2, r6
 800706a:	4638      	mov	r0, r7
 800706c:	4798      	blx	r3
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	3b01      	subs	r3, #1
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	4545      	cmp	r5, r8
 8007076:	d8f3      	bhi.n	8007060 <_scanf_float+0x340>
 8007078:	e698      	b.n	8006dac <_scanf_float+0x8c>
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0bf      	beq.n	8007000 <_scanf_float+0x2e0>
 8007080:	9904      	ldr	r1, [sp, #16]
 8007082:	230a      	movs	r3, #10
 8007084:	4632      	mov	r2, r6
 8007086:	3101      	adds	r1, #1
 8007088:	4638      	mov	r0, r7
 800708a:	f000 feed 	bl	8007e68 <_strtol_r>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	9d04      	ldr	r5, [sp, #16]
 8007092:	1ac2      	subs	r2, r0, r3
 8007094:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007098:	429d      	cmp	r5, r3
 800709a:	bf28      	it	cs
 800709c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80070a0:	490f      	ldr	r1, [pc, #60]	; (80070e0 <_scanf_float+0x3c0>)
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f824 	bl	80070f0 <siprintf>
 80070a8:	e7aa      	b.n	8007000 <_scanf_float+0x2e0>
 80070aa:	f015 0504 	ands.w	r5, r5, #4
 80070ae:	d1b8      	bne.n	8007022 <_scanf_float+0x302>
 80070b0:	681f      	ldr	r7, [r3, #0]
 80070b2:	ee10 2a10 	vmov	r2, s0
 80070b6:	464b      	mov	r3, r9
 80070b8:	ee10 0a10 	vmov	r0, s0
 80070bc:	4649      	mov	r1, r9
 80070be:	f7f9 fd3d 	bl	8000b3c <__aeabi_dcmpun>
 80070c2:	b128      	cbz	r0, 80070d0 <_scanf_float+0x3b0>
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 f80d 	bl	80070e4 <nanf>
 80070ca:	ed87 0a00 	vstr	s0, [r7]
 80070ce:	e7ab      	b.n	8007028 <_scanf_float+0x308>
 80070d0:	4640      	mov	r0, r8
 80070d2:	4649      	mov	r1, r9
 80070d4:	f7f9 fd90 	bl	8000bf8 <__aeabi_d2f>
 80070d8:	6038      	str	r0, [r7, #0]
 80070da:	e7a5      	b.n	8007028 <_scanf_float+0x308>
 80070dc:	2600      	movs	r6, #0
 80070de:	e666      	b.n	8006dae <_scanf_float+0x8e>
 80070e0:	0800b5c0 	.word	0x0800b5c0

080070e4 <nanf>:
 80070e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070ec <nanf+0x8>
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	7fc00000 	.word	0x7fc00000

080070f0 <siprintf>:
 80070f0:	b40e      	push	{r1, r2, r3}
 80070f2:	b500      	push	{lr}
 80070f4:	b09c      	sub	sp, #112	; 0x70
 80070f6:	ab1d      	add	r3, sp, #116	; 0x74
 80070f8:	9002      	str	r0, [sp, #8]
 80070fa:	9006      	str	r0, [sp, #24]
 80070fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007100:	4809      	ldr	r0, [pc, #36]	; (8007128 <siprintf+0x38>)
 8007102:	9107      	str	r1, [sp, #28]
 8007104:	9104      	str	r1, [sp, #16]
 8007106:	4909      	ldr	r1, [pc, #36]	; (800712c <siprintf+0x3c>)
 8007108:	f853 2b04 	ldr.w	r2, [r3], #4
 800710c:	9105      	str	r1, [sp, #20]
 800710e:	6800      	ldr	r0, [r0, #0]
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	a902      	add	r1, sp, #8
 8007114:	f002 fd64 	bl	8009be0 <_svfiprintf_r>
 8007118:	9b02      	ldr	r3, [sp, #8]
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	b01c      	add	sp, #112	; 0x70
 8007120:	f85d eb04 	ldr.w	lr, [sp], #4
 8007124:	b003      	add	sp, #12
 8007126:	4770      	bx	lr
 8007128:	20000024 	.word	0x20000024
 800712c:	ffff0208 	.word	0xffff0208

08007130 <sulp>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	460d      	mov	r5, r1
 8007136:	ec45 4b10 	vmov	d0, r4, r5
 800713a:	4616      	mov	r6, r2
 800713c:	f002 fb0c 	bl	8009758 <__ulp>
 8007140:	ec51 0b10 	vmov	r0, r1, d0
 8007144:	b17e      	cbz	r6, 8007166 <sulp+0x36>
 8007146:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800714a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800714e:	2b00      	cmp	r3, #0
 8007150:	dd09      	ble.n	8007166 <sulp+0x36>
 8007152:	051b      	lsls	r3, r3, #20
 8007154:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007158:	2400      	movs	r4, #0
 800715a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800715e:	4622      	mov	r2, r4
 8007160:	462b      	mov	r3, r5
 8007162:	f7f9 fa51 	bl	8000608 <__aeabi_dmul>
 8007166:	bd70      	pop	{r4, r5, r6, pc}

08007168 <_strtod_l>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	461f      	mov	r7, r3
 800716e:	b0a1      	sub	sp, #132	; 0x84
 8007170:	2300      	movs	r3, #0
 8007172:	4681      	mov	r9, r0
 8007174:	4638      	mov	r0, r7
 8007176:	460e      	mov	r6, r1
 8007178:	9217      	str	r2, [sp, #92]	; 0x5c
 800717a:	931c      	str	r3, [sp, #112]	; 0x70
 800717c:	f001 fff5 	bl	800916a <__localeconv_l>
 8007180:	4680      	mov	r8, r0
 8007182:	6800      	ldr	r0, [r0, #0]
 8007184:	f7f9 f82c 	bl	80001e0 <strlen>
 8007188:	f04f 0a00 	mov.w	sl, #0
 800718c:	4604      	mov	r4, r0
 800718e:	f04f 0b00 	mov.w	fp, #0
 8007192:	961b      	str	r6, [sp, #108]	; 0x6c
 8007194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	2a0d      	cmp	r2, #13
 800719a:	d832      	bhi.n	8007202 <_strtod_l+0x9a>
 800719c:	2a09      	cmp	r2, #9
 800719e:	d236      	bcs.n	800720e <_strtod_l+0xa6>
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	d03e      	beq.n	8007222 <_strtod_l+0xba>
 80071a4:	2300      	movs	r3, #0
 80071a6:	930d      	str	r3, [sp, #52]	; 0x34
 80071a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80071aa:	782b      	ldrb	r3, [r5, #0]
 80071ac:	2b30      	cmp	r3, #48	; 0x30
 80071ae:	f040 80ac 	bne.w	800730a <_strtod_l+0x1a2>
 80071b2:	786b      	ldrb	r3, [r5, #1]
 80071b4:	2b58      	cmp	r3, #88	; 0x58
 80071b6:	d001      	beq.n	80071bc <_strtod_l+0x54>
 80071b8:	2b78      	cmp	r3, #120	; 0x78
 80071ba:	d167      	bne.n	800728c <_strtod_l+0x124>
 80071bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	ab1c      	add	r3, sp, #112	; 0x70
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	9702      	str	r7, [sp, #8]
 80071c6:	ab1d      	add	r3, sp, #116	; 0x74
 80071c8:	4a88      	ldr	r2, [pc, #544]	; (80073ec <_strtod_l+0x284>)
 80071ca:	a91b      	add	r1, sp, #108	; 0x6c
 80071cc:	4648      	mov	r0, r9
 80071ce:	f001 fcf2 	bl	8008bb6 <__gethex>
 80071d2:	f010 0407 	ands.w	r4, r0, #7
 80071d6:	4606      	mov	r6, r0
 80071d8:	d005      	beq.n	80071e6 <_strtod_l+0x7e>
 80071da:	2c06      	cmp	r4, #6
 80071dc:	d12b      	bne.n	8007236 <_strtod_l+0xce>
 80071de:	3501      	adds	r5, #1
 80071e0:	2300      	movs	r3, #0
 80071e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80071e4:	930d      	str	r3, [sp, #52]	; 0x34
 80071e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 859a 	bne.w	8007d22 <_strtod_l+0xbba>
 80071ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071f0:	b1e3      	cbz	r3, 800722c <_strtod_l+0xc4>
 80071f2:	4652      	mov	r2, sl
 80071f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071f8:	ec43 2b10 	vmov	d0, r2, r3
 80071fc:	b021      	add	sp, #132	; 0x84
 80071fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007202:	2a2b      	cmp	r2, #43	; 0x2b
 8007204:	d015      	beq.n	8007232 <_strtod_l+0xca>
 8007206:	2a2d      	cmp	r2, #45	; 0x2d
 8007208:	d004      	beq.n	8007214 <_strtod_l+0xac>
 800720a:	2a20      	cmp	r2, #32
 800720c:	d1ca      	bne.n	80071a4 <_strtod_l+0x3c>
 800720e:	3301      	adds	r3, #1
 8007210:	931b      	str	r3, [sp, #108]	; 0x6c
 8007212:	e7bf      	b.n	8007194 <_strtod_l+0x2c>
 8007214:	2201      	movs	r2, #1
 8007216:	920d      	str	r2, [sp, #52]	; 0x34
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	921b      	str	r2, [sp, #108]	; 0x6c
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1c2      	bne.n	80071a8 <_strtod_l+0x40>
 8007222:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007224:	961b      	str	r6, [sp, #108]	; 0x6c
 8007226:	2b00      	cmp	r3, #0
 8007228:	f040 8579 	bne.w	8007d1e <_strtod_l+0xbb6>
 800722c:	4652      	mov	r2, sl
 800722e:	465b      	mov	r3, fp
 8007230:	e7e2      	b.n	80071f8 <_strtod_l+0x90>
 8007232:	2200      	movs	r2, #0
 8007234:	e7ef      	b.n	8007216 <_strtod_l+0xae>
 8007236:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007238:	b13a      	cbz	r2, 800724a <_strtod_l+0xe2>
 800723a:	2135      	movs	r1, #53	; 0x35
 800723c:	a81e      	add	r0, sp, #120	; 0x78
 800723e:	f002 fb83 	bl	8009948 <__copybits>
 8007242:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007244:	4648      	mov	r0, r9
 8007246:	f001 ffef 	bl	8009228 <_Bfree>
 800724a:	3c01      	subs	r4, #1
 800724c:	2c04      	cmp	r4, #4
 800724e:	d806      	bhi.n	800725e <_strtod_l+0xf6>
 8007250:	e8df f004 	tbb	[pc, r4]
 8007254:	1714030a 	.word	0x1714030a
 8007258:	0a          	.byte	0x0a
 8007259:	00          	.byte	0x00
 800725a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800725e:	0730      	lsls	r0, r6, #28
 8007260:	d5c1      	bpl.n	80071e6 <_strtod_l+0x7e>
 8007262:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007266:	e7be      	b.n	80071e6 <_strtod_l+0x7e>
 8007268:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800726c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800726e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007272:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007276:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800727a:	e7f0      	b.n	800725e <_strtod_l+0xf6>
 800727c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80073f0 <_strtod_l+0x288>
 8007280:	e7ed      	b.n	800725e <_strtod_l+0xf6>
 8007282:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007286:	f04f 3aff 	mov.w	sl, #4294967295
 800728a:	e7e8      	b.n	800725e <_strtod_l+0xf6>
 800728c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	921b      	str	r2, [sp, #108]	; 0x6c
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b30      	cmp	r3, #48	; 0x30
 8007296:	d0f9      	beq.n	800728c <_strtod_l+0x124>
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0a4      	beq.n	80071e6 <_strtod_l+0x7e>
 800729c:	2301      	movs	r3, #1
 800729e:	2500      	movs	r5, #0
 80072a0:	9306      	str	r3, [sp, #24]
 80072a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072a4:	9308      	str	r3, [sp, #32]
 80072a6:	9507      	str	r5, [sp, #28]
 80072a8:	9505      	str	r5, [sp, #20]
 80072aa:	220a      	movs	r2, #10
 80072ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80072ae:	7807      	ldrb	r7, [r0, #0]
 80072b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80072b4:	b2d9      	uxtb	r1, r3
 80072b6:	2909      	cmp	r1, #9
 80072b8:	d929      	bls.n	800730e <_strtod_l+0x1a6>
 80072ba:	4622      	mov	r2, r4
 80072bc:	f8d8 1000 	ldr.w	r1, [r8]
 80072c0:	f002 fd96 	bl	8009df0 <strncmp>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d031      	beq.n	800732c <_strtod_l+0x1c4>
 80072c8:	2000      	movs	r0, #0
 80072ca:	9c05      	ldr	r4, [sp, #20]
 80072cc:	9004      	str	r0, [sp, #16]
 80072ce:	463b      	mov	r3, r7
 80072d0:	4602      	mov	r2, r0
 80072d2:	2b65      	cmp	r3, #101	; 0x65
 80072d4:	d001      	beq.n	80072da <_strtod_l+0x172>
 80072d6:	2b45      	cmp	r3, #69	; 0x45
 80072d8:	d114      	bne.n	8007304 <_strtod_l+0x19c>
 80072da:	b924      	cbnz	r4, 80072e6 <_strtod_l+0x17e>
 80072dc:	b910      	cbnz	r0, 80072e4 <_strtod_l+0x17c>
 80072de:	9b06      	ldr	r3, [sp, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d09e      	beq.n	8007222 <_strtod_l+0xba>
 80072e4:	2400      	movs	r4, #0
 80072e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80072e8:	1c73      	adds	r3, r6, #1
 80072ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80072ec:	7873      	ldrb	r3, [r6, #1]
 80072ee:	2b2b      	cmp	r3, #43	; 0x2b
 80072f0:	d078      	beq.n	80073e4 <_strtod_l+0x27c>
 80072f2:	2b2d      	cmp	r3, #45	; 0x2d
 80072f4:	d070      	beq.n	80073d8 <_strtod_l+0x270>
 80072f6:	f04f 0c00 	mov.w	ip, #0
 80072fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80072fe:	2f09      	cmp	r7, #9
 8007300:	d97c      	bls.n	80073fc <_strtod_l+0x294>
 8007302:	961b      	str	r6, [sp, #108]	; 0x6c
 8007304:	f04f 0e00 	mov.w	lr, #0
 8007308:	e09a      	b.n	8007440 <_strtod_l+0x2d8>
 800730a:	2300      	movs	r3, #0
 800730c:	e7c7      	b.n	800729e <_strtod_l+0x136>
 800730e:	9905      	ldr	r1, [sp, #20]
 8007310:	2908      	cmp	r1, #8
 8007312:	bfdd      	ittte	le
 8007314:	9907      	ldrle	r1, [sp, #28]
 8007316:	fb02 3301 	mlale	r3, r2, r1, r3
 800731a:	9307      	strle	r3, [sp, #28]
 800731c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007320:	9b05      	ldr	r3, [sp, #20]
 8007322:	3001      	adds	r0, #1
 8007324:	3301      	adds	r3, #1
 8007326:	9305      	str	r3, [sp, #20]
 8007328:	901b      	str	r0, [sp, #108]	; 0x6c
 800732a:	e7bf      	b.n	80072ac <_strtod_l+0x144>
 800732c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800732e:	191a      	adds	r2, r3, r4
 8007330:	921b      	str	r2, [sp, #108]	; 0x6c
 8007332:	9a05      	ldr	r2, [sp, #20]
 8007334:	5d1b      	ldrb	r3, [r3, r4]
 8007336:	2a00      	cmp	r2, #0
 8007338:	d037      	beq.n	80073aa <_strtod_l+0x242>
 800733a:	9c05      	ldr	r4, [sp, #20]
 800733c:	4602      	mov	r2, r0
 800733e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007342:	2909      	cmp	r1, #9
 8007344:	d913      	bls.n	800736e <_strtod_l+0x206>
 8007346:	2101      	movs	r1, #1
 8007348:	9104      	str	r1, [sp, #16]
 800734a:	e7c2      	b.n	80072d2 <_strtod_l+0x16a>
 800734c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	921b      	str	r2, [sp, #108]	; 0x6c
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	3001      	adds	r0, #1
 8007356:	2b30      	cmp	r3, #48	; 0x30
 8007358:	d0f8      	beq.n	800734c <_strtod_l+0x1e4>
 800735a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800735e:	2a08      	cmp	r2, #8
 8007360:	f200 84e4 	bhi.w	8007d2c <_strtod_l+0xbc4>
 8007364:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007366:	9208      	str	r2, [sp, #32]
 8007368:	4602      	mov	r2, r0
 800736a:	2000      	movs	r0, #0
 800736c:	4604      	mov	r4, r0
 800736e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007372:	f100 0101 	add.w	r1, r0, #1
 8007376:	d012      	beq.n	800739e <_strtod_l+0x236>
 8007378:	440a      	add	r2, r1
 800737a:	eb00 0c04 	add.w	ip, r0, r4
 800737e:	4621      	mov	r1, r4
 8007380:	270a      	movs	r7, #10
 8007382:	458c      	cmp	ip, r1
 8007384:	d113      	bne.n	80073ae <_strtod_l+0x246>
 8007386:	1821      	adds	r1, r4, r0
 8007388:	2908      	cmp	r1, #8
 800738a:	f104 0401 	add.w	r4, r4, #1
 800738e:	4404      	add	r4, r0
 8007390:	dc19      	bgt.n	80073c6 <_strtod_l+0x25e>
 8007392:	9b07      	ldr	r3, [sp, #28]
 8007394:	210a      	movs	r1, #10
 8007396:	fb01 e303 	mla	r3, r1, r3, lr
 800739a:	9307      	str	r3, [sp, #28]
 800739c:	2100      	movs	r1, #0
 800739e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073a0:	1c58      	adds	r0, r3, #1
 80073a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	4608      	mov	r0, r1
 80073a8:	e7c9      	b.n	800733e <_strtod_l+0x1d6>
 80073aa:	9805      	ldr	r0, [sp, #20]
 80073ac:	e7d3      	b.n	8007356 <_strtod_l+0x1ee>
 80073ae:	2908      	cmp	r1, #8
 80073b0:	f101 0101 	add.w	r1, r1, #1
 80073b4:	dc03      	bgt.n	80073be <_strtod_l+0x256>
 80073b6:	9b07      	ldr	r3, [sp, #28]
 80073b8:	437b      	muls	r3, r7
 80073ba:	9307      	str	r3, [sp, #28]
 80073bc:	e7e1      	b.n	8007382 <_strtod_l+0x21a>
 80073be:	2910      	cmp	r1, #16
 80073c0:	bfd8      	it	le
 80073c2:	437d      	mulle	r5, r7
 80073c4:	e7dd      	b.n	8007382 <_strtod_l+0x21a>
 80073c6:	2c10      	cmp	r4, #16
 80073c8:	bfdc      	itt	le
 80073ca:	210a      	movle	r1, #10
 80073cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80073d0:	e7e4      	b.n	800739c <_strtod_l+0x234>
 80073d2:	2301      	movs	r3, #1
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	e781      	b.n	80072dc <_strtod_l+0x174>
 80073d8:	f04f 0c01 	mov.w	ip, #1
 80073dc:	1cb3      	adds	r3, r6, #2
 80073de:	931b      	str	r3, [sp, #108]	; 0x6c
 80073e0:	78b3      	ldrb	r3, [r6, #2]
 80073e2:	e78a      	b.n	80072fa <_strtod_l+0x192>
 80073e4:	f04f 0c00 	mov.w	ip, #0
 80073e8:	e7f8      	b.n	80073dc <_strtod_l+0x274>
 80073ea:	bf00      	nop
 80073ec:	0800b5c8 	.word	0x0800b5c8
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073f6:	1c5f      	adds	r7, r3, #1
 80073f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b30      	cmp	r3, #48	; 0x30
 80073fe:	d0f9      	beq.n	80073f4 <_strtod_l+0x28c>
 8007400:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007404:	2f08      	cmp	r7, #8
 8007406:	f63f af7d 	bhi.w	8007304 <_strtod_l+0x19c>
 800740a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800740e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007410:	930a      	str	r3, [sp, #40]	; 0x28
 8007412:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007414:	1c5f      	adds	r7, r3, #1
 8007416:	971b      	str	r7, [sp, #108]	; 0x6c
 8007418:	785b      	ldrb	r3, [r3, #1]
 800741a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800741e:	f1b8 0f09 	cmp.w	r8, #9
 8007422:	d937      	bls.n	8007494 <_strtod_l+0x32c>
 8007424:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007426:	1a7f      	subs	r7, r7, r1
 8007428:	2f08      	cmp	r7, #8
 800742a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800742e:	dc37      	bgt.n	80074a0 <_strtod_l+0x338>
 8007430:	45be      	cmp	lr, r7
 8007432:	bfa8      	it	ge
 8007434:	46be      	movge	lr, r7
 8007436:	f1bc 0f00 	cmp.w	ip, #0
 800743a:	d001      	beq.n	8007440 <_strtod_l+0x2d8>
 800743c:	f1ce 0e00 	rsb	lr, lr, #0
 8007440:	2c00      	cmp	r4, #0
 8007442:	d151      	bne.n	80074e8 <_strtod_l+0x380>
 8007444:	2800      	cmp	r0, #0
 8007446:	f47f aece 	bne.w	80071e6 <_strtod_l+0x7e>
 800744a:	9a06      	ldr	r2, [sp, #24]
 800744c:	2a00      	cmp	r2, #0
 800744e:	f47f aeca 	bne.w	80071e6 <_strtod_l+0x7e>
 8007452:	9a04      	ldr	r2, [sp, #16]
 8007454:	2a00      	cmp	r2, #0
 8007456:	f47f aee4 	bne.w	8007222 <_strtod_l+0xba>
 800745a:	2b4e      	cmp	r3, #78	; 0x4e
 800745c:	d027      	beq.n	80074ae <_strtod_l+0x346>
 800745e:	dc21      	bgt.n	80074a4 <_strtod_l+0x33c>
 8007460:	2b49      	cmp	r3, #73	; 0x49
 8007462:	f47f aede 	bne.w	8007222 <_strtod_l+0xba>
 8007466:	49a0      	ldr	r1, [pc, #640]	; (80076e8 <_strtod_l+0x580>)
 8007468:	a81b      	add	r0, sp, #108	; 0x6c
 800746a:	f001 fdd7 	bl	800901c <__match>
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f aed7 	beq.w	8007222 <_strtod_l+0xba>
 8007474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007476:	499d      	ldr	r1, [pc, #628]	; (80076ec <_strtod_l+0x584>)
 8007478:	3b01      	subs	r3, #1
 800747a:	a81b      	add	r0, sp, #108	; 0x6c
 800747c:	931b      	str	r3, [sp, #108]	; 0x6c
 800747e:	f001 fdcd 	bl	800901c <__match>
 8007482:	b910      	cbnz	r0, 800748a <_strtod_l+0x322>
 8007484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007486:	3301      	adds	r3, #1
 8007488:	931b      	str	r3, [sp, #108]	; 0x6c
 800748a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007700 <_strtod_l+0x598>
 800748e:	f04f 0a00 	mov.w	sl, #0
 8007492:	e6a8      	b.n	80071e6 <_strtod_l+0x7e>
 8007494:	210a      	movs	r1, #10
 8007496:	fb01 3e0e 	mla	lr, r1, lr, r3
 800749a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800749e:	e7b8      	b.n	8007412 <_strtod_l+0x2aa>
 80074a0:	46be      	mov	lr, r7
 80074a2:	e7c8      	b.n	8007436 <_strtod_l+0x2ce>
 80074a4:	2b69      	cmp	r3, #105	; 0x69
 80074a6:	d0de      	beq.n	8007466 <_strtod_l+0x2fe>
 80074a8:	2b6e      	cmp	r3, #110	; 0x6e
 80074aa:	f47f aeba 	bne.w	8007222 <_strtod_l+0xba>
 80074ae:	4990      	ldr	r1, [pc, #576]	; (80076f0 <_strtod_l+0x588>)
 80074b0:	a81b      	add	r0, sp, #108	; 0x6c
 80074b2:	f001 fdb3 	bl	800901c <__match>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f43f aeb3 	beq.w	8007222 <_strtod_l+0xba>
 80074bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b28      	cmp	r3, #40	; 0x28
 80074c2:	d10e      	bne.n	80074e2 <_strtod_l+0x37a>
 80074c4:	aa1e      	add	r2, sp, #120	; 0x78
 80074c6:	498b      	ldr	r1, [pc, #556]	; (80076f4 <_strtod_l+0x58c>)
 80074c8:	a81b      	add	r0, sp, #108	; 0x6c
 80074ca:	f001 fdbb 	bl	8009044 <__hexnan>
 80074ce:	2805      	cmp	r0, #5
 80074d0:	d107      	bne.n	80074e2 <_strtod_l+0x37a>
 80074d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80074d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80074dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80074e0:	e681      	b.n	80071e6 <_strtod_l+0x7e>
 80074e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007708 <_strtod_l+0x5a0>
 80074e6:	e7d2      	b.n	800748e <_strtod_l+0x326>
 80074e8:	ebae 0302 	sub.w	r3, lr, r2
 80074ec:	9306      	str	r3, [sp, #24]
 80074ee:	9b05      	ldr	r3, [sp, #20]
 80074f0:	9807      	ldr	r0, [sp, #28]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bf08      	it	eq
 80074f6:	4623      	moveq	r3, r4
 80074f8:	2c10      	cmp	r4, #16
 80074fa:	9305      	str	r3, [sp, #20]
 80074fc:	46a0      	mov	r8, r4
 80074fe:	bfa8      	it	ge
 8007500:	f04f 0810 	movge.w	r8, #16
 8007504:	f7f9 f806 	bl	8000514 <__aeabi_ui2d>
 8007508:	2c09      	cmp	r4, #9
 800750a:	4682      	mov	sl, r0
 800750c:	468b      	mov	fp, r1
 800750e:	dc13      	bgt.n	8007538 <_strtod_l+0x3d0>
 8007510:	9b06      	ldr	r3, [sp, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f43f ae67 	beq.w	80071e6 <_strtod_l+0x7e>
 8007518:	9b06      	ldr	r3, [sp, #24]
 800751a:	dd7a      	ble.n	8007612 <_strtod_l+0x4aa>
 800751c:	2b16      	cmp	r3, #22
 800751e:	dc61      	bgt.n	80075e4 <_strtod_l+0x47c>
 8007520:	4a75      	ldr	r2, [pc, #468]	; (80076f8 <_strtod_l+0x590>)
 8007522:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007526:	e9de 0100 	ldrd	r0, r1, [lr]
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	f7f9 f86b 	bl	8000608 <__aeabi_dmul>
 8007532:	4682      	mov	sl, r0
 8007534:	468b      	mov	fp, r1
 8007536:	e656      	b.n	80071e6 <_strtod_l+0x7e>
 8007538:	4b6f      	ldr	r3, [pc, #444]	; (80076f8 <_strtod_l+0x590>)
 800753a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800753e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007542:	f7f9 f861 	bl	8000608 <__aeabi_dmul>
 8007546:	4606      	mov	r6, r0
 8007548:	4628      	mov	r0, r5
 800754a:	460f      	mov	r7, r1
 800754c:	f7f8 ffe2 	bl	8000514 <__aeabi_ui2d>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4630      	mov	r0, r6
 8007556:	4639      	mov	r1, r7
 8007558:	f7f8 fea0 	bl	800029c <__adddf3>
 800755c:	2c0f      	cmp	r4, #15
 800755e:	4682      	mov	sl, r0
 8007560:	468b      	mov	fp, r1
 8007562:	ddd5      	ble.n	8007510 <_strtod_l+0x3a8>
 8007564:	9b06      	ldr	r3, [sp, #24]
 8007566:	eba4 0808 	sub.w	r8, r4, r8
 800756a:	4498      	add	r8, r3
 800756c:	f1b8 0f00 	cmp.w	r8, #0
 8007570:	f340 8096 	ble.w	80076a0 <_strtod_l+0x538>
 8007574:	f018 030f 	ands.w	r3, r8, #15
 8007578:	d00a      	beq.n	8007590 <_strtod_l+0x428>
 800757a:	495f      	ldr	r1, [pc, #380]	; (80076f8 <_strtod_l+0x590>)
 800757c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007580:	4652      	mov	r2, sl
 8007582:	465b      	mov	r3, fp
 8007584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007588:	f7f9 f83e 	bl	8000608 <__aeabi_dmul>
 800758c:	4682      	mov	sl, r0
 800758e:	468b      	mov	fp, r1
 8007590:	f038 080f 	bics.w	r8, r8, #15
 8007594:	d073      	beq.n	800767e <_strtod_l+0x516>
 8007596:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800759a:	dd47      	ble.n	800762c <_strtod_l+0x4c4>
 800759c:	2400      	movs	r4, #0
 800759e:	46a0      	mov	r8, r4
 80075a0:	9407      	str	r4, [sp, #28]
 80075a2:	9405      	str	r4, [sp, #20]
 80075a4:	2322      	movs	r3, #34	; 0x22
 80075a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007700 <_strtod_l+0x598>
 80075aa:	f8c9 3000 	str.w	r3, [r9]
 80075ae:	f04f 0a00 	mov.w	sl, #0
 80075b2:	9b07      	ldr	r3, [sp, #28]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f43f ae16 	beq.w	80071e6 <_strtod_l+0x7e>
 80075ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80075bc:	4648      	mov	r0, r9
 80075be:	f001 fe33 	bl	8009228 <_Bfree>
 80075c2:	9905      	ldr	r1, [sp, #20]
 80075c4:	4648      	mov	r0, r9
 80075c6:	f001 fe2f 	bl	8009228 <_Bfree>
 80075ca:	4641      	mov	r1, r8
 80075cc:	4648      	mov	r0, r9
 80075ce:	f001 fe2b 	bl	8009228 <_Bfree>
 80075d2:	9907      	ldr	r1, [sp, #28]
 80075d4:	4648      	mov	r0, r9
 80075d6:	f001 fe27 	bl	8009228 <_Bfree>
 80075da:	4621      	mov	r1, r4
 80075dc:	4648      	mov	r0, r9
 80075de:	f001 fe23 	bl	8009228 <_Bfree>
 80075e2:	e600      	b.n	80071e6 <_strtod_l+0x7e>
 80075e4:	9a06      	ldr	r2, [sp, #24]
 80075e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80075ea:	4293      	cmp	r3, r2
 80075ec:	dbba      	blt.n	8007564 <_strtod_l+0x3fc>
 80075ee:	4d42      	ldr	r5, [pc, #264]	; (80076f8 <_strtod_l+0x590>)
 80075f0:	f1c4 040f 	rsb	r4, r4, #15
 80075f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80075f8:	4652      	mov	r2, sl
 80075fa:	465b      	mov	r3, fp
 80075fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007600:	f7f9 f802 	bl	8000608 <__aeabi_dmul>
 8007604:	9b06      	ldr	r3, [sp, #24]
 8007606:	1b1c      	subs	r4, r3, r4
 8007608:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800760c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007610:	e78d      	b.n	800752e <_strtod_l+0x3c6>
 8007612:	f113 0f16 	cmn.w	r3, #22
 8007616:	dba5      	blt.n	8007564 <_strtod_l+0x3fc>
 8007618:	4a37      	ldr	r2, [pc, #220]	; (80076f8 <_strtod_l+0x590>)
 800761a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800761e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007622:	4650      	mov	r0, sl
 8007624:	4659      	mov	r1, fp
 8007626:	f7f9 f919 	bl	800085c <__aeabi_ddiv>
 800762a:	e782      	b.n	8007532 <_strtod_l+0x3ca>
 800762c:	2300      	movs	r3, #0
 800762e:	4e33      	ldr	r6, [pc, #204]	; (80076fc <_strtod_l+0x594>)
 8007630:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007634:	4650      	mov	r0, sl
 8007636:	4659      	mov	r1, fp
 8007638:	461d      	mov	r5, r3
 800763a:	f1b8 0f01 	cmp.w	r8, #1
 800763e:	dc21      	bgt.n	8007684 <_strtod_l+0x51c>
 8007640:	b10b      	cbz	r3, 8007646 <_strtod_l+0x4de>
 8007642:	4682      	mov	sl, r0
 8007644:	468b      	mov	fp, r1
 8007646:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <_strtod_l+0x594>)
 8007648:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800764c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007650:	4652      	mov	r2, sl
 8007652:	465b      	mov	r3, fp
 8007654:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007658:	f7f8 ffd6 	bl	8000608 <__aeabi_dmul>
 800765c:	4b28      	ldr	r3, [pc, #160]	; (8007700 <_strtod_l+0x598>)
 800765e:	460a      	mov	r2, r1
 8007660:	400b      	ands	r3, r1
 8007662:	4928      	ldr	r1, [pc, #160]	; (8007704 <_strtod_l+0x59c>)
 8007664:	428b      	cmp	r3, r1
 8007666:	4682      	mov	sl, r0
 8007668:	d898      	bhi.n	800759c <_strtod_l+0x434>
 800766a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800766e:	428b      	cmp	r3, r1
 8007670:	bf86      	itte	hi
 8007672:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800770c <_strtod_l+0x5a4>
 8007676:	f04f 3aff 	movhi.w	sl, #4294967295
 800767a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800767e:	2300      	movs	r3, #0
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	e077      	b.n	8007774 <_strtod_l+0x60c>
 8007684:	f018 0f01 	tst.w	r8, #1
 8007688:	d006      	beq.n	8007698 <_strtod_l+0x530>
 800768a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7f8 ffb9 	bl	8000608 <__aeabi_dmul>
 8007696:	2301      	movs	r3, #1
 8007698:	3501      	adds	r5, #1
 800769a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800769e:	e7cc      	b.n	800763a <_strtod_l+0x4d2>
 80076a0:	d0ed      	beq.n	800767e <_strtod_l+0x516>
 80076a2:	f1c8 0800 	rsb	r8, r8, #0
 80076a6:	f018 020f 	ands.w	r2, r8, #15
 80076aa:	d00a      	beq.n	80076c2 <_strtod_l+0x55a>
 80076ac:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <_strtod_l+0x590>)
 80076ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076b2:	4650      	mov	r0, sl
 80076b4:	4659      	mov	r1, fp
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f9 f8cf 	bl	800085c <__aeabi_ddiv>
 80076be:	4682      	mov	sl, r0
 80076c0:	468b      	mov	fp, r1
 80076c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80076c6:	d0da      	beq.n	800767e <_strtod_l+0x516>
 80076c8:	f1b8 0f1f 	cmp.w	r8, #31
 80076cc:	dd20      	ble.n	8007710 <_strtod_l+0x5a8>
 80076ce:	2400      	movs	r4, #0
 80076d0:	46a0      	mov	r8, r4
 80076d2:	9407      	str	r4, [sp, #28]
 80076d4:	9405      	str	r4, [sp, #20]
 80076d6:	2322      	movs	r3, #34	; 0x22
 80076d8:	f04f 0a00 	mov.w	sl, #0
 80076dc:	f04f 0b00 	mov.w	fp, #0
 80076e0:	f8c9 3000 	str.w	r3, [r9]
 80076e4:	e765      	b.n	80075b2 <_strtod_l+0x44a>
 80076e6:	bf00      	nop
 80076e8:	0800b591 	.word	0x0800b591
 80076ec:	0800b61b 	.word	0x0800b61b
 80076f0:	0800b599 	.word	0x0800b599
 80076f4:	0800b5dc 	.word	0x0800b5dc
 80076f8:	0800b658 	.word	0x0800b658
 80076fc:	0800b630 	.word	0x0800b630
 8007700:	7ff00000 	.word	0x7ff00000
 8007704:	7ca00000 	.word	0x7ca00000
 8007708:	fff80000 	.word	0xfff80000
 800770c:	7fefffff 	.word	0x7fefffff
 8007710:	f018 0310 	ands.w	r3, r8, #16
 8007714:	bf18      	it	ne
 8007716:	236a      	movne	r3, #106	; 0x6a
 8007718:	4da0      	ldr	r5, [pc, #640]	; (800799c <_strtod_l+0x834>)
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	4650      	mov	r0, sl
 800771e:	4659      	mov	r1, fp
 8007720:	2300      	movs	r3, #0
 8007722:	f1b8 0f00 	cmp.w	r8, #0
 8007726:	f300 810a 	bgt.w	800793e <_strtod_l+0x7d6>
 800772a:	b10b      	cbz	r3, 8007730 <_strtod_l+0x5c8>
 800772c:	4682      	mov	sl, r0
 800772e:	468b      	mov	fp, r1
 8007730:	9b04      	ldr	r3, [sp, #16]
 8007732:	b1bb      	cbz	r3, 8007764 <_strtod_l+0x5fc>
 8007734:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007738:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800773c:	2b00      	cmp	r3, #0
 800773e:	4659      	mov	r1, fp
 8007740:	dd10      	ble.n	8007764 <_strtod_l+0x5fc>
 8007742:	2b1f      	cmp	r3, #31
 8007744:	f340 8107 	ble.w	8007956 <_strtod_l+0x7ee>
 8007748:	2b34      	cmp	r3, #52	; 0x34
 800774a:	bfde      	ittt	le
 800774c:	3b20      	suble	r3, #32
 800774e:	f04f 32ff 	movle.w	r2, #4294967295
 8007752:	fa02 f303 	lslle.w	r3, r2, r3
 8007756:	f04f 0a00 	mov.w	sl, #0
 800775a:	bfcc      	ite	gt
 800775c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007760:	ea03 0b01 	andle.w	fp, r3, r1
 8007764:	2200      	movs	r2, #0
 8007766:	2300      	movs	r3, #0
 8007768:	4650      	mov	r0, sl
 800776a:	4659      	mov	r1, fp
 800776c:	f7f9 f9b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007770:	2800      	cmp	r0, #0
 8007772:	d1ac      	bne.n	80076ce <_strtod_l+0x566>
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	9a05      	ldr	r2, [sp, #20]
 800777a:	9908      	ldr	r1, [sp, #32]
 800777c:	4623      	mov	r3, r4
 800777e:	4648      	mov	r0, r9
 8007780:	f001 fda4 	bl	80092cc <__s2b>
 8007784:	9007      	str	r0, [sp, #28]
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f af08 	beq.w	800759c <_strtod_l+0x434>
 800778c:	9a06      	ldr	r2, [sp, #24]
 800778e:	9b06      	ldr	r3, [sp, #24]
 8007790:	2a00      	cmp	r2, #0
 8007792:	f1c3 0300 	rsb	r3, r3, #0
 8007796:	bfa8      	it	ge
 8007798:	2300      	movge	r3, #0
 800779a:	930e      	str	r3, [sp, #56]	; 0x38
 800779c:	2400      	movs	r4, #0
 800779e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077a2:	9316      	str	r3, [sp, #88]	; 0x58
 80077a4:	46a0      	mov	r8, r4
 80077a6:	9b07      	ldr	r3, [sp, #28]
 80077a8:	4648      	mov	r0, r9
 80077aa:	6859      	ldr	r1, [r3, #4]
 80077ac:	f001 fd08 	bl	80091c0 <_Balloc>
 80077b0:	9005      	str	r0, [sp, #20]
 80077b2:	2800      	cmp	r0, #0
 80077b4:	f43f aef6 	beq.w	80075a4 <_strtod_l+0x43c>
 80077b8:	9b07      	ldr	r3, [sp, #28]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	3202      	adds	r2, #2
 80077be:	f103 010c 	add.w	r1, r3, #12
 80077c2:	0092      	lsls	r2, r2, #2
 80077c4:	300c      	adds	r0, #12
 80077c6:	f7fe fe3b 	bl	8006440 <memcpy>
 80077ca:	aa1e      	add	r2, sp, #120	; 0x78
 80077cc:	a91d      	add	r1, sp, #116	; 0x74
 80077ce:	ec4b ab10 	vmov	d0, sl, fp
 80077d2:	4648      	mov	r0, r9
 80077d4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80077d8:	f002 f834 	bl	8009844 <__d2b>
 80077dc:	901c      	str	r0, [sp, #112]	; 0x70
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f aee0 	beq.w	80075a4 <_strtod_l+0x43c>
 80077e4:	2101      	movs	r1, #1
 80077e6:	4648      	mov	r0, r9
 80077e8:	f001 fdfc 	bl	80093e4 <__i2b>
 80077ec:	4680      	mov	r8, r0
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f aed8 	beq.w	80075a4 <_strtod_l+0x43c>
 80077f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80077f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	bfab      	itete	ge
 80077fc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80077fe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007800:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007802:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007804:	bfac      	ite	ge
 8007806:	18f7      	addge	r7, r6, r3
 8007808:	1b9d      	sublt	r5, r3, r6
 800780a:	9b04      	ldr	r3, [sp, #16]
 800780c:	1af6      	subs	r6, r6, r3
 800780e:	4416      	add	r6, r2
 8007810:	4b63      	ldr	r3, [pc, #396]	; (80079a0 <_strtod_l+0x838>)
 8007812:	3e01      	subs	r6, #1
 8007814:	429e      	cmp	r6, r3
 8007816:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800781a:	f280 80af 	bge.w	800797c <_strtod_l+0x814>
 800781e:	1b9b      	subs	r3, r3, r6
 8007820:	2b1f      	cmp	r3, #31
 8007822:	eba2 0203 	sub.w	r2, r2, r3
 8007826:	f04f 0101 	mov.w	r1, #1
 800782a:	f300 809b 	bgt.w	8007964 <_strtod_l+0x7fc>
 800782e:	fa01 f303 	lsl.w	r3, r1, r3
 8007832:	930f      	str	r3, [sp, #60]	; 0x3c
 8007834:	2300      	movs	r3, #0
 8007836:	930a      	str	r3, [sp, #40]	; 0x28
 8007838:	18be      	adds	r6, r7, r2
 800783a:	9b04      	ldr	r3, [sp, #16]
 800783c:	42b7      	cmp	r7, r6
 800783e:	4415      	add	r5, r2
 8007840:	441d      	add	r5, r3
 8007842:	463b      	mov	r3, r7
 8007844:	bfa8      	it	ge
 8007846:	4633      	movge	r3, r6
 8007848:	42ab      	cmp	r3, r5
 800784a:	bfa8      	it	ge
 800784c:	462b      	movge	r3, r5
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfc2      	ittt	gt
 8007852:	1af6      	subgt	r6, r6, r3
 8007854:	1aed      	subgt	r5, r5, r3
 8007856:	1aff      	subgt	r7, r7, r3
 8007858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800785a:	b1bb      	cbz	r3, 800788c <_strtod_l+0x724>
 800785c:	4641      	mov	r1, r8
 800785e:	461a      	mov	r2, r3
 8007860:	4648      	mov	r0, r9
 8007862:	f001 fe5f 	bl	8009524 <__pow5mult>
 8007866:	4680      	mov	r8, r0
 8007868:	2800      	cmp	r0, #0
 800786a:	f43f ae9b 	beq.w	80075a4 <_strtod_l+0x43c>
 800786e:	4601      	mov	r1, r0
 8007870:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007872:	4648      	mov	r0, r9
 8007874:	f001 fdbf 	bl	80093f6 <__multiply>
 8007878:	900c      	str	r0, [sp, #48]	; 0x30
 800787a:	2800      	cmp	r0, #0
 800787c:	f43f ae92 	beq.w	80075a4 <_strtod_l+0x43c>
 8007880:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007882:	4648      	mov	r0, r9
 8007884:	f001 fcd0 	bl	8009228 <_Bfree>
 8007888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800788a:	931c      	str	r3, [sp, #112]	; 0x70
 800788c:	2e00      	cmp	r6, #0
 800788e:	dc7a      	bgt.n	8007986 <_strtod_l+0x81e>
 8007890:	9b06      	ldr	r3, [sp, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dd08      	ble.n	80078a8 <_strtod_l+0x740>
 8007896:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007898:	9905      	ldr	r1, [sp, #20]
 800789a:	4648      	mov	r0, r9
 800789c:	f001 fe42 	bl	8009524 <__pow5mult>
 80078a0:	9005      	str	r0, [sp, #20]
 80078a2:	2800      	cmp	r0, #0
 80078a4:	f43f ae7e 	beq.w	80075a4 <_strtod_l+0x43c>
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	dd08      	ble.n	80078be <_strtod_l+0x756>
 80078ac:	462a      	mov	r2, r5
 80078ae:	9905      	ldr	r1, [sp, #20]
 80078b0:	4648      	mov	r0, r9
 80078b2:	f001 fe85 	bl	80095c0 <__lshift>
 80078b6:	9005      	str	r0, [sp, #20]
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f43f ae73 	beq.w	80075a4 <_strtod_l+0x43c>
 80078be:	2f00      	cmp	r7, #0
 80078c0:	dd08      	ble.n	80078d4 <_strtod_l+0x76c>
 80078c2:	4641      	mov	r1, r8
 80078c4:	463a      	mov	r2, r7
 80078c6:	4648      	mov	r0, r9
 80078c8:	f001 fe7a 	bl	80095c0 <__lshift>
 80078cc:	4680      	mov	r8, r0
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f43f ae68 	beq.w	80075a4 <_strtod_l+0x43c>
 80078d4:	9a05      	ldr	r2, [sp, #20]
 80078d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80078d8:	4648      	mov	r0, r9
 80078da:	f001 fedf 	bl	800969c <__mdiff>
 80078de:	4604      	mov	r4, r0
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f43f ae5f 	beq.w	80075a4 <_strtod_l+0x43c>
 80078e6:	68c3      	ldr	r3, [r0, #12]
 80078e8:	930c      	str	r3, [sp, #48]	; 0x30
 80078ea:	2300      	movs	r3, #0
 80078ec:	60c3      	str	r3, [r0, #12]
 80078ee:	4641      	mov	r1, r8
 80078f0:	f001 feba 	bl	8009668 <__mcmp>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	da55      	bge.n	80079a4 <_strtod_l+0x83c>
 80078f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078fa:	b9e3      	cbnz	r3, 8007936 <_strtod_l+0x7ce>
 80078fc:	f1ba 0f00 	cmp.w	sl, #0
 8007900:	d119      	bne.n	8007936 <_strtod_l+0x7ce>
 8007902:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007906:	b9b3      	cbnz	r3, 8007936 <_strtod_l+0x7ce>
 8007908:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800790c:	0d1b      	lsrs	r3, r3, #20
 800790e:	051b      	lsls	r3, r3, #20
 8007910:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007914:	d90f      	bls.n	8007936 <_strtod_l+0x7ce>
 8007916:	6963      	ldr	r3, [r4, #20]
 8007918:	b913      	cbnz	r3, 8007920 <_strtod_l+0x7b8>
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	2b01      	cmp	r3, #1
 800791e:	dd0a      	ble.n	8007936 <_strtod_l+0x7ce>
 8007920:	4621      	mov	r1, r4
 8007922:	2201      	movs	r2, #1
 8007924:	4648      	mov	r0, r9
 8007926:	f001 fe4b 	bl	80095c0 <__lshift>
 800792a:	4641      	mov	r1, r8
 800792c:	4604      	mov	r4, r0
 800792e:	f001 fe9b 	bl	8009668 <__mcmp>
 8007932:	2800      	cmp	r0, #0
 8007934:	dc67      	bgt.n	8007a06 <_strtod_l+0x89e>
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d171      	bne.n	8007a20 <_strtod_l+0x8b8>
 800793c:	e63d      	b.n	80075ba <_strtod_l+0x452>
 800793e:	f018 0f01 	tst.w	r8, #1
 8007942:	d004      	beq.n	800794e <_strtod_l+0x7e6>
 8007944:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007948:	f7f8 fe5e 	bl	8000608 <__aeabi_dmul>
 800794c:	2301      	movs	r3, #1
 800794e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007952:	3508      	adds	r5, #8
 8007954:	e6e5      	b.n	8007722 <_strtod_l+0x5ba>
 8007956:	f04f 32ff 	mov.w	r2, #4294967295
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	ea03 0a0a 	and.w	sl, r3, sl
 8007962:	e6ff      	b.n	8007764 <_strtod_l+0x5fc>
 8007964:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007968:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800796c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007970:	36e2      	adds	r6, #226	; 0xe2
 8007972:	fa01 f306 	lsl.w	r3, r1, r6
 8007976:	930a      	str	r3, [sp, #40]	; 0x28
 8007978:	910f      	str	r1, [sp, #60]	; 0x3c
 800797a:	e75d      	b.n	8007838 <_strtod_l+0x6d0>
 800797c:	2300      	movs	r3, #0
 800797e:	930a      	str	r3, [sp, #40]	; 0x28
 8007980:	2301      	movs	r3, #1
 8007982:	930f      	str	r3, [sp, #60]	; 0x3c
 8007984:	e758      	b.n	8007838 <_strtod_l+0x6d0>
 8007986:	4632      	mov	r2, r6
 8007988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800798a:	4648      	mov	r0, r9
 800798c:	f001 fe18 	bl	80095c0 <__lshift>
 8007990:	901c      	str	r0, [sp, #112]	; 0x70
 8007992:	2800      	cmp	r0, #0
 8007994:	f47f af7c 	bne.w	8007890 <_strtod_l+0x728>
 8007998:	e604      	b.n	80075a4 <_strtod_l+0x43c>
 800799a:	bf00      	nop
 800799c:	0800b5f0 	.word	0x0800b5f0
 80079a0:	fffffc02 	.word	0xfffffc02
 80079a4:	465d      	mov	r5, fp
 80079a6:	f040 8086 	bne.w	8007ab6 <_strtod_l+0x94e>
 80079aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079b0:	b32a      	cbz	r2, 80079fe <_strtod_l+0x896>
 80079b2:	4aaf      	ldr	r2, [pc, #700]	; (8007c70 <_strtod_l+0xb08>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d153      	bne.n	8007a60 <_strtod_l+0x8f8>
 80079b8:	9b04      	ldr	r3, [sp, #16]
 80079ba:	4650      	mov	r0, sl
 80079bc:	b1d3      	cbz	r3, 80079f4 <_strtod_l+0x88c>
 80079be:	4aad      	ldr	r2, [pc, #692]	; (8007c74 <_strtod_l+0xb0c>)
 80079c0:	402a      	ands	r2, r5
 80079c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80079c6:	f04f 31ff 	mov.w	r1, #4294967295
 80079ca:	d816      	bhi.n	80079fa <_strtod_l+0x892>
 80079cc:	0d12      	lsrs	r2, r2, #20
 80079ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80079d2:	fa01 f303 	lsl.w	r3, r1, r3
 80079d6:	4298      	cmp	r0, r3
 80079d8:	d142      	bne.n	8007a60 <_strtod_l+0x8f8>
 80079da:	4ba7      	ldr	r3, [pc, #668]	; (8007c78 <_strtod_l+0xb10>)
 80079dc:	429d      	cmp	r5, r3
 80079de:	d102      	bne.n	80079e6 <_strtod_l+0x87e>
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f addf 	beq.w	80075a4 <_strtod_l+0x43c>
 80079e6:	4ba3      	ldr	r3, [pc, #652]	; (8007c74 <_strtod_l+0xb0c>)
 80079e8:	402b      	ands	r3, r5
 80079ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079ee:	f04f 0a00 	mov.w	sl, #0
 80079f2:	e7a0      	b.n	8007936 <_strtod_l+0x7ce>
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	e7ed      	b.n	80079d6 <_strtod_l+0x86e>
 80079fa:	460b      	mov	r3, r1
 80079fc:	e7eb      	b.n	80079d6 <_strtod_l+0x86e>
 80079fe:	bb7b      	cbnz	r3, 8007a60 <_strtod_l+0x8f8>
 8007a00:	f1ba 0f00 	cmp.w	sl, #0
 8007a04:	d12c      	bne.n	8007a60 <_strtod_l+0x8f8>
 8007a06:	9904      	ldr	r1, [sp, #16]
 8007a08:	4a9a      	ldr	r2, [pc, #616]	; (8007c74 <_strtod_l+0xb0c>)
 8007a0a:	465b      	mov	r3, fp
 8007a0c:	b1f1      	cbz	r1, 8007a4c <_strtod_l+0x8e4>
 8007a0e:	ea02 010b 	and.w	r1, r2, fp
 8007a12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a16:	dc19      	bgt.n	8007a4c <_strtod_l+0x8e4>
 8007a18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a1c:	f77f ae5b 	ble.w	80076d6 <_strtod_l+0x56e>
 8007a20:	4a96      	ldr	r2, [pc, #600]	; (8007c7c <_strtod_l+0xb14>)
 8007a22:	2300      	movs	r3, #0
 8007a24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007a28:	4650      	mov	r0, sl
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a30:	f7f8 fdea 	bl	8000608 <__aeabi_dmul>
 8007a34:	4682      	mov	sl, r0
 8007a36:	468b      	mov	fp, r1
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	f47f adbe 	bne.w	80075ba <_strtod_l+0x452>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f47f adbb 	bne.w	80075ba <_strtod_l+0x452>
 8007a44:	2322      	movs	r3, #34	; 0x22
 8007a46:	f8c9 3000 	str.w	r3, [r9]
 8007a4a:	e5b6      	b.n	80075ba <_strtod_l+0x452>
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a5a:	f04f 3aff 	mov.w	sl, #4294967295
 8007a5e:	e76a      	b.n	8007936 <_strtod_l+0x7ce>
 8007a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a62:	b193      	cbz	r3, 8007a8a <_strtod_l+0x922>
 8007a64:	422b      	tst	r3, r5
 8007a66:	f43f af66 	beq.w	8007936 <_strtod_l+0x7ce>
 8007a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a6c:	9a04      	ldr	r2, [sp, #16]
 8007a6e:	4650      	mov	r0, sl
 8007a70:	4659      	mov	r1, fp
 8007a72:	b173      	cbz	r3, 8007a92 <_strtod_l+0x92a>
 8007a74:	f7ff fb5c 	bl	8007130 <sulp>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a80:	f7f8 fc0c 	bl	800029c <__adddf3>
 8007a84:	4682      	mov	sl, r0
 8007a86:	468b      	mov	fp, r1
 8007a88:	e755      	b.n	8007936 <_strtod_l+0x7ce>
 8007a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a8c:	ea13 0f0a 	tst.w	r3, sl
 8007a90:	e7e9      	b.n	8007a66 <_strtod_l+0x8fe>
 8007a92:	f7ff fb4d 	bl	8007130 <sulp>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a9e:	f7f8 fbfb 	bl	8000298 <__aeabi_dsub>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	468b      	mov	fp, r1
 8007aaa:	f7f9 f815 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f47f ae11 	bne.w	80076d6 <_strtod_l+0x56e>
 8007ab4:	e73f      	b.n	8007936 <_strtod_l+0x7ce>
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f001 ff12 	bl	80098e2 <__ratio>
 8007abe:	ec57 6b10 	vmov	r6, r7, d0
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ac8:	ee10 0a10 	vmov	r0, s0
 8007acc:	4639      	mov	r1, r7
 8007ace:	f7f9 f817 	bl	8000b00 <__aeabi_dcmple>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d077      	beq.n	8007bc6 <_strtod_l+0xa5e>
 8007ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d04a      	beq.n	8007b72 <_strtod_l+0xa0a>
 8007adc:	4b68      	ldr	r3, [pc, #416]	; (8007c80 <_strtod_l+0xb18>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007ae4:	4f66      	ldr	r7, [pc, #408]	; (8007c80 <_strtod_l+0xb18>)
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	4b62      	ldr	r3, [pc, #392]	; (8007c74 <_strtod_l+0xb0c>)
 8007aea:	402b      	ands	r3, r5
 8007aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007af0:	4b64      	ldr	r3, [pc, #400]	; (8007c84 <_strtod_l+0xb1c>)
 8007af2:	429a      	cmp	r2, r3
 8007af4:	f040 80ce 	bne.w	8007c94 <_strtod_l+0xb2c>
 8007af8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b00:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007b04:	ec4b ab10 	vmov	d0, sl, fp
 8007b08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007b0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b10:	f001 fe22 	bl	8009758 <__ulp>
 8007b14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b18:	ec53 2b10 	vmov	r2, r3, d0
 8007b1c:	f7f8 fd74 	bl	8000608 <__aeabi_dmul>
 8007b20:	4652      	mov	r2, sl
 8007b22:	465b      	mov	r3, fp
 8007b24:	f7f8 fbba 	bl	800029c <__adddf3>
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4952      	ldr	r1, [pc, #328]	; (8007c74 <_strtod_l+0xb0c>)
 8007b2c:	4a56      	ldr	r2, [pc, #344]	; (8007c88 <_strtod_l+0xb20>)
 8007b2e:	4019      	ands	r1, r3
 8007b30:	4291      	cmp	r1, r2
 8007b32:	4682      	mov	sl, r0
 8007b34:	d95b      	bls.n	8007bee <_strtod_l+0xa86>
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d103      	bne.n	8007b48 <_strtod_l+0x9e0>
 8007b40:	9b08      	ldr	r3, [sp, #32]
 8007b42:	3301      	adds	r3, #1
 8007b44:	f43f ad2e 	beq.w	80075a4 <_strtod_l+0x43c>
 8007b48:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007c78 <_strtod_l+0xb10>
 8007b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b52:	4648      	mov	r0, r9
 8007b54:	f001 fb68 	bl	8009228 <_Bfree>
 8007b58:	9905      	ldr	r1, [sp, #20]
 8007b5a:	4648      	mov	r0, r9
 8007b5c:	f001 fb64 	bl	8009228 <_Bfree>
 8007b60:	4641      	mov	r1, r8
 8007b62:	4648      	mov	r0, r9
 8007b64:	f001 fb60 	bl	8009228 <_Bfree>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4648      	mov	r0, r9
 8007b6c:	f001 fb5c 	bl	8009228 <_Bfree>
 8007b70:	e619      	b.n	80077a6 <_strtod_l+0x63e>
 8007b72:	f1ba 0f00 	cmp.w	sl, #0
 8007b76:	d11a      	bne.n	8007bae <_strtod_l+0xa46>
 8007b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b7c:	b9eb      	cbnz	r3, 8007bba <_strtod_l+0xa52>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4b3f      	ldr	r3, [pc, #252]	; (8007c80 <_strtod_l+0xb18>)
 8007b82:	4630      	mov	r0, r6
 8007b84:	4639      	mov	r1, r7
 8007b86:	f7f8 ffb1 	bl	8000aec <__aeabi_dcmplt>
 8007b8a:	b9c8      	cbnz	r0, 8007bc0 <_strtod_l+0xa58>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	4639      	mov	r1, r7
 8007b90:	2200      	movs	r2, #0
 8007b92:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <_strtod_l+0xb24>)
 8007b94:	f7f8 fd38 	bl	8000608 <__aeabi_dmul>
 8007b98:	4606      	mov	r6, r0
 8007b9a:	460f      	mov	r7, r1
 8007b9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007ba0:	9618      	str	r6, [sp, #96]	; 0x60
 8007ba2:	9319      	str	r3, [sp, #100]	; 0x64
 8007ba4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007ba8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007bac:	e79c      	b.n	8007ae8 <_strtod_l+0x980>
 8007bae:	f1ba 0f01 	cmp.w	sl, #1
 8007bb2:	d102      	bne.n	8007bba <_strtod_l+0xa52>
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	f43f ad8e 	beq.w	80076d6 <_strtod_l+0x56e>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4b34      	ldr	r3, [pc, #208]	; (8007c90 <_strtod_l+0xb28>)
 8007bbe:	e78f      	b.n	8007ae0 <_strtod_l+0x978>
 8007bc0:	2600      	movs	r6, #0
 8007bc2:	4f32      	ldr	r7, [pc, #200]	; (8007c8c <_strtod_l+0xb24>)
 8007bc4:	e7ea      	b.n	8007b9c <_strtod_l+0xa34>
 8007bc6:	4b31      	ldr	r3, [pc, #196]	; (8007c8c <_strtod_l+0xb24>)
 8007bc8:	4630      	mov	r0, r6
 8007bca:	4639      	mov	r1, r7
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f7f8 fd1b 	bl	8000608 <__aeabi_dmul>
 8007bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	460f      	mov	r7, r1
 8007bd8:	b933      	cbnz	r3, 8007be8 <_strtod_l+0xa80>
 8007bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bde:	9010      	str	r0, [sp, #64]	; 0x40
 8007be0:	9311      	str	r3, [sp, #68]	; 0x44
 8007be2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007be6:	e7df      	b.n	8007ba8 <_strtod_l+0xa40>
 8007be8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007bec:	e7f9      	b.n	8007be2 <_strtod_l+0xa7a>
 8007bee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007bf2:	9b04      	ldr	r3, [sp, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1ab      	bne.n	8007b50 <_strtod_l+0x9e8>
 8007bf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bfc:	0d1b      	lsrs	r3, r3, #20
 8007bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c00:	051b      	lsls	r3, r3, #20
 8007c02:	429a      	cmp	r2, r3
 8007c04:	465d      	mov	r5, fp
 8007c06:	d1a3      	bne.n	8007b50 <_strtod_l+0x9e8>
 8007c08:	4639      	mov	r1, r7
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7f8 ffac 	bl	8000b68 <__aeabi_d2iz>
 8007c10:	f7f8 fc90 	bl	8000534 <__aeabi_i2d>
 8007c14:	460b      	mov	r3, r1
 8007c16:	4602      	mov	r2, r0
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7f8 fb3c 	bl	8000298 <__aeabi_dsub>
 8007c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c22:	4606      	mov	r6, r0
 8007c24:	460f      	mov	r7, r1
 8007c26:	b933      	cbnz	r3, 8007c36 <_strtod_l+0xace>
 8007c28:	f1ba 0f00 	cmp.w	sl, #0
 8007c2c:	d103      	bne.n	8007c36 <_strtod_l+0xace>
 8007c2e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007c32:	2d00      	cmp	r5, #0
 8007c34:	d06d      	beq.n	8007d12 <_strtod_l+0xbaa>
 8007c36:	a30a      	add	r3, pc, #40	; (adr r3, 8007c60 <_strtod_l+0xaf8>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 ff54 	bl	8000aec <__aeabi_dcmplt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f47f acb8 	bne.w	80075ba <_strtod_l+0x452>
 8007c4a:	a307      	add	r3, pc, #28	; (adr r3, 8007c68 <_strtod_l+0xb00>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7f8 ff68 	bl	8000b28 <__aeabi_dcmpgt>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f43f af79 	beq.w	8007b50 <_strtod_l+0x9e8>
 8007c5e:	e4ac      	b.n	80075ba <_strtod_l+0x452>
 8007c60:	94a03595 	.word	0x94a03595
 8007c64:	3fdfffff 	.word	0x3fdfffff
 8007c68:	35afe535 	.word	0x35afe535
 8007c6c:	3fe00000 	.word	0x3fe00000
 8007c70:	000fffff 	.word	0x000fffff
 8007c74:	7ff00000 	.word	0x7ff00000
 8007c78:	7fefffff 	.word	0x7fefffff
 8007c7c:	39500000 	.word	0x39500000
 8007c80:	3ff00000 	.word	0x3ff00000
 8007c84:	7fe00000 	.word	0x7fe00000
 8007c88:	7c9fffff 	.word	0x7c9fffff
 8007c8c:	3fe00000 	.word	0x3fe00000
 8007c90:	bff00000 	.word	0xbff00000
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	b333      	cbz	r3, 8007ce6 <_strtod_l+0xb7e>
 8007c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c9a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c9e:	d822      	bhi.n	8007ce6 <_strtod_l+0xb7e>
 8007ca0:	a327      	add	r3, pc, #156	; (adr r3, 8007d40 <_strtod_l+0xbd8>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f7f8 ff29 	bl	8000b00 <__aeabi_dcmple>
 8007cae:	b1a0      	cbz	r0, 8007cda <_strtod_l+0xb72>
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7f8 ff80 	bl	8000bb8 <__aeabi_d2uiz>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	bf08      	it	eq
 8007cbc:	2001      	moveq	r0, #1
 8007cbe:	f7f8 fc29 	bl	8000514 <__aeabi_ui2d>
 8007cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	460f      	mov	r7, r1
 8007cc8:	bb03      	cbnz	r3, 8007d0c <_strtod_l+0xba4>
 8007cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cce:	9012      	str	r0, [sp, #72]	; 0x48
 8007cd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007cd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cde:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ce6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007cea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007cee:	f001 fd33 	bl	8009758 <__ulp>
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	ec53 2b10 	vmov	r2, r3, d0
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	f7f8 fc85 	bl	8000608 <__aeabi_dmul>
 8007cfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d02:	f7f8 facb 	bl	800029c <__adddf3>
 8007d06:	4682      	mov	sl, r0
 8007d08:	468b      	mov	fp, r1
 8007d0a:	e772      	b.n	8007bf2 <_strtod_l+0xa8a>
 8007d0c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007d10:	e7df      	b.n	8007cd2 <_strtod_l+0xb6a>
 8007d12:	a30d      	add	r3, pc, #52	; (adr r3, 8007d48 <_strtod_l+0xbe0>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fee8 	bl	8000aec <__aeabi_dcmplt>
 8007d1c:	e79c      	b.n	8007c58 <_strtod_l+0xaf0>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	930d      	str	r3, [sp, #52]	; 0x34
 8007d22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	f7ff ba61 	b.w	80071ee <_strtod_l+0x86>
 8007d2c:	2b65      	cmp	r3, #101	; 0x65
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	f43f ab4e 	beq.w	80073d2 <_strtod_l+0x26a>
 8007d36:	2101      	movs	r1, #1
 8007d38:	4614      	mov	r4, r2
 8007d3a:	9104      	str	r1, [sp, #16]
 8007d3c:	f7ff bacb 	b.w	80072d6 <_strtod_l+0x16e>
 8007d40:	ffc00000 	.word	0xffc00000
 8007d44:	41dfffff 	.word	0x41dfffff
 8007d48:	94a03595 	.word	0x94a03595
 8007d4c:	3fcfffff 	.word	0x3fcfffff

08007d50 <_strtod_r>:
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <_strtod_r+0x18>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	b410      	push	{r4}
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	4c04      	ldr	r4, [pc, #16]	; (8007d6c <_strtod_r+0x1c>)
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bf08      	it	eq
 8007d5e:	4623      	moveq	r3, r4
 8007d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d64:	f7ff ba00 	b.w	8007168 <_strtod_l>
 8007d68:	20000024 	.word	0x20000024
 8007d6c:	20000088 	.word	0x20000088

08007d70 <_strtol_l.isra.0>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	4680      	mov	r8, r0
 8007d76:	4689      	mov	r9, r1
 8007d78:	4692      	mov	sl, r2
 8007d7a:	461e      	mov	r6, r3
 8007d7c:	460f      	mov	r7, r1
 8007d7e:	463d      	mov	r5, r7
 8007d80:	9808      	ldr	r0, [sp, #32]
 8007d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d86:	f001 f9ed 	bl	8009164 <__locale_ctype_ptr_l>
 8007d8a:	4420      	add	r0, r4
 8007d8c:	7843      	ldrb	r3, [r0, #1]
 8007d8e:	f013 0308 	ands.w	r3, r3, #8
 8007d92:	d132      	bne.n	8007dfa <_strtol_l.isra.0+0x8a>
 8007d94:	2c2d      	cmp	r4, #45	; 0x2d
 8007d96:	d132      	bne.n	8007dfe <_strtol_l.isra.0+0x8e>
 8007d98:	787c      	ldrb	r4, [r7, #1]
 8007d9a:	1cbd      	adds	r5, r7, #2
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	2e00      	cmp	r6, #0
 8007da0:	d05d      	beq.n	8007e5e <_strtol_l.isra.0+0xee>
 8007da2:	2e10      	cmp	r6, #16
 8007da4:	d109      	bne.n	8007dba <_strtol_l.isra.0+0x4a>
 8007da6:	2c30      	cmp	r4, #48	; 0x30
 8007da8:	d107      	bne.n	8007dba <_strtol_l.isra.0+0x4a>
 8007daa:	782b      	ldrb	r3, [r5, #0]
 8007dac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007db0:	2b58      	cmp	r3, #88	; 0x58
 8007db2:	d14f      	bne.n	8007e54 <_strtol_l.isra.0+0xe4>
 8007db4:	786c      	ldrb	r4, [r5, #1]
 8007db6:	2610      	movs	r6, #16
 8007db8:	3502      	adds	r5, #2
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	bf14      	ite	ne
 8007dbe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007dc2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007dc6:	2700      	movs	r7, #0
 8007dc8:	fbb1 fcf6 	udiv	ip, r1, r6
 8007dcc:	4638      	mov	r0, r7
 8007dce:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007dd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007dd6:	2b09      	cmp	r3, #9
 8007dd8:	d817      	bhi.n	8007e0a <_strtol_l.isra.0+0x9a>
 8007dda:	461c      	mov	r4, r3
 8007ddc:	42a6      	cmp	r6, r4
 8007dde:	dd23      	ble.n	8007e28 <_strtol_l.isra.0+0xb8>
 8007de0:	1c7b      	adds	r3, r7, #1
 8007de2:	d007      	beq.n	8007df4 <_strtol_l.isra.0+0x84>
 8007de4:	4584      	cmp	ip, r0
 8007de6:	d31c      	bcc.n	8007e22 <_strtol_l.isra.0+0xb2>
 8007de8:	d101      	bne.n	8007dee <_strtol_l.isra.0+0x7e>
 8007dea:	45a6      	cmp	lr, r4
 8007dec:	db19      	blt.n	8007e22 <_strtol_l.isra.0+0xb2>
 8007dee:	fb00 4006 	mla	r0, r0, r6, r4
 8007df2:	2701      	movs	r7, #1
 8007df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007df8:	e7eb      	b.n	8007dd2 <_strtol_l.isra.0+0x62>
 8007dfa:	462f      	mov	r7, r5
 8007dfc:	e7bf      	b.n	8007d7e <_strtol_l.isra.0+0xe>
 8007dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8007e00:	bf04      	itt	eq
 8007e02:	1cbd      	addeq	r5, r7, #2
 8007e04:	787c      	ldrbeq	r4, [r7, #1]
 8007e06:	461a      	mov	r2, r3
 8007e08:	e7c9      	b.n	8007d9e <_strtol_l.isra.0+0x2e>
 8007e0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007e0e:	2b19      	cmp	r3, #25
 8007e10:	d801      	bhi.n	8007e16 <_strtol_l.isra.0+0xa6>
 8007e12:	3c37      	subs	r4, #55	; 0x37
 8007e14:	e7e2      	b.n	8007ddc <_strtol_l.isra.0+0x6c>
 8007e16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007e1a:	2b19      	cmp	r3, #25
 8007e1c:	d804      	bhi.n	8007e28 <_strtol_l.isra.0+0xb8>
 8007e1e:	3c57      	subs	r4, #87	; 0x57
 8007e20:	e7dc      	b.n	8007ddc <_strtol_l.isra.0+0x6c>
 8007e22:	f04f 37ff 	mov.w	r7, #4294967295
 8007e26:	e7e5      	b.n	8007df4 <_strtol_l.isra.0+0x84>
 8007e28:	1c7b      	adds	r3, r7, #1
 8007e2a:	d108      	bne.n	8007e3e <_strtol_l.isra.0+0xce>
 8007e2c:	2322      	movs	r3, #34	; 0x22
 8007e2e:	f8c8 3000 	str.w	r3, [r8]
 8007e32:	4608      	mov	r0, r1
 8007e34:	f1ba 0f00 	cmp.w	sl, #0
 8007e38:	d107      	bne.n	8007e4a <_strtol_l.isra.0+0xda>
 8007e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3e:	b102      	cbz	r2, 8007e42 <_strtol_l.isra.0+0xd2>
 8007e40:	4240      	negs	r0, r0
 8007e42:	f1ba 0f00 	cmp.w	sl, #0
 8007e46:	d0f8      	beq.n	8007e3a <_strtol_l.isra.0+0xca>
 8007e48:	b10f      	cbz	r7, 8007e4e <_strtol_l.isra.0+0xde>
 8007e4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007e4e:	f8ca 9000 	str.w	r9, [sl]
 8007e52:	e7f2      	b.n	8007e3a <_strtol_l.isra.0+0xca>
 8007e54:	2430      	movs	r4, #48	; 0x30
 8007e56:	2e00      	cmp	r6, #0
 8007e58:	d1af      	bne.n	8007dba <_strtol_l.isra.0+0x4a>
 8007e5a:	2608      	movs	r6, #8
 8007e5c:	e7ad      	b.n	8007dba <_strtol_l.isra.0+0x4a>
 8007e5e:	2c30      	cmp	r4, #48	; 0x30
 8007e60:	d0a3      	beq.n	8007daa <_strtol_l.isra.0+0x3a>
 8007e62:	260a      	movs	r6, #10
 8007e64:	e7a9      	b.n	8007dba <_strtol_l.isra.0+0x4a>
	...

08007e68 <_strtol_r>:
 8007e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e6a:	4c06      	ldr	r4, [pc, #24]	; (8007e84 <_strtol_r+0x1c>)
 8007e6c:	4d06      	ldr	r5, [pc, #24]	; (8007e88 <_strtol_r+0x20>)
 8007e6e:	6824      	ldr	r4, [r4, #0]
 8007e70:	6a24      	ldr	r4, [r4, #32]
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	bf08      	it	eq
 8007e76:	462c      	moveq	r4, r5
 8007e78:	9400      	str	r4, [sp, #0]
 8007e7a:	f7ff ff79 	bl	8007d70 <_strtol_l.isra.0>
 8007e7e:	b003      	add	sp, #12
 8007e80:	bd30      	pop	{r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20000024 	.word	0x20000024
 8007e88:	20000088 	.word	0x20000088

08007e8c <quorem>:
 8007e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	6903      	ldr	r3, [r0, #16]
 8007e92:	690c      	ldr	r4, [r1, #16]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	4680      	mov	r8, r0
 8007e98:	f2c0 8082 	blt.w	8007fa0 <quorem+0x114>
 8007e9c:	3c01      	subs	r4, #1
 8007e9e:	f101 0714 	add.w	r7, r1, #20
 8007ea2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ea6:	f100 0614 	add.w	r6, r0, #20
 8007eaa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007eae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007eb2:	eb06 030c 	add.w	r3, r6, ip
 8007eb6:	3501      	adds	r5, #1
 8007eb8:	eb07 090c 	add.w	r9, r7, ip
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ec2:	b395      	cbz	r5, 8007f2a <quorem+0x9e>
 8007ec4:	f04f 0a00 	mov.w	sl, #0
 8007ec8:	4638      	mov	r0, r7
 8007eca:	46b6      	mov	lr, r6
 8007ecc:	46d3      	mov	fp, sl
 8007ece:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ed2:	b293      	uxth	r3, r2
 8007ed4:	fb05 a303 	mla	r3, r5, r3, sl
 8007ed8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	ebab 0303 	sub.w	r3, fp, r3
 8007ee2:	0c12      	lsrs	r2, r2, #16
 8007ee4:	f8de b000 	ldr.w	fp, [lr]
 8007ee8:	fb05 a202 	mla	r2, r5, r2, sl
 8007eec:	fa13 f38b 	uxtah	r3, r3, fp
 8007ef0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ef4:	fa1f fb82 	uxth.w	fp, r2
 8007ef8:	f8de 2000 	ldr.w	r2, [lr]
 8007efc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f0a:	4581      	cmp	r9, r0
 8007f0c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f10:	f84e 3b04 	str.w	r3, [lr], #4
 8007f14:	d2db      	bcs.n	8007ece <quorem+0x42>
 8007f16:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f1a:	b933      	cbnz	r3, 8007f2a <quorem+0x9e>
 8007f1c:	9b01      	ldr	r3, [sp, #4]
 8007f1e:	3b04      	subs	r3, #4
 8007f20:	429e      	cmp	r6, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	d330      	bcc.n	8007f88 <quorem+0xfc>
 8007f26:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f001 fb9c 	bl	8009668 <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	db25      	blt.n	8007f80 <quorem+0xf4>
 8007f34:	3501      	adds	r5, #1
 8007f36:	4630      	mov	r0, r6
 8007f38:	f04f 0c00 	mov.w	ip, #0
 8007f3c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f40:	f8d0 e000 	ldr.w	lr, [r0]
 8007f44:	b293      	uxth	r3, r2
 8007f46:	ebac 0303 	sub.w	r3, ip, r3
 8007f4a:	0c12      	lsrs	r2, r2, #16
 8007f4c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f5e:	45b9      	cmp	r9, r7
 8007f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f64:	f840 3b04 	str.w	r3, [r0], #4
 8007f68:	d2e8      	bcs.n	8007f3c <quorem+0xb0>
 8007f6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f72:	b92a      	cbnz	r2, 8007f80 <quorem+0xf4>
 8007f74:	3b04      	subs	r3, #4
 8007f76:	429e      	cmp	r6, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	d30b      	bcc.n	8007f94 <quorem+0x108>
 8007f7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f80:	4628      	mov	r0, r5
 8007f82:	b003      	add	sp, #12
 8007f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	3b04      	subs	r3, #4
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	d1ca      	bne.n	8007f26 <quorem+0x9a>
 8007f90:	3c01      	subs	r4, #1
 8007f92:	e7c5      	b.n	8007f20 <quorem+0x94>
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	3b04      	subs	r3, #4
 8007f98:	2a00      	cmp	r2, #0
 8007f9a:	d1ef      	bne.n	8007f7c <quorem+0xf0>
 8007f9c:	3c01      	subs	r4, #1
 8007f9e:	e7ea      	b.n	8007f76 <quorem+0xea>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e7ee      	b.n	8007f82 <quorem+0xf6>
 8007fa4:	0000      	movs	r0, r0
	...

08007fa8 <_dtoa_r>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	ec57 6b10 	vmov	r6, r7, d0
 8007fb0:	b097      	sub	sp, #92	; 0x5c
 8007fb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fb4:	9106      	str	r1, [sp, #24]
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fba:	9312      	str	r3, [sp, #72]	; 0x48
 8007fbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fc0:	e9cd 6700 	strd	r6, r7, [sp]
 8007fc4:	b93d      	cbnz	r5, 8007fd6 <_dtoa_r+0x2e>
 8007fc6:	2010      	movs	r0, #16
 8007fc8:	f001 f8e0 	bl	800918c <malloc>
 8007fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8007fce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fd2:	6005      	str	r5, [r0, #0]
 8007fd4:	60c5      	str	r5, [r0, #12]
 8007fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd8:	6819      	ldr	r1, [r3, #0]
 8007fda:	b151      	cbz	r1, 8007ff2 <_dtoa_r+0x4a>
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	604a      	str	r2, [r1, #4]
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	4093      	lsls	r3, r2
 8007fe4:	608b      	str	r3, [r1, #8]
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f001 f91e 	bl	8009228 <_Bfree>
 8007fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	1e3b      	subs	r3, r7, #0
 8007ff4:	bfbb      	ittet	lt
 8007ff6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ffa:	9301      	strlt	r3, [sp, #4]
 8007ffc:	2300      	movge	r3, #0
 8007ffe:	2201      	movlt	r2, #1
 8008000:	bfac      	ite	ge
 8008002:	f8c8 3000 	strge.w	r3, [r8]
 8008006:	f8c8 2000 	strlt.w	r2, [r8]
 800800a:	4baf      	ldr	r3, [pc, #700]	; (80082c8 <_dtoa_r+0x320>)
 800800c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008010:	ea33 0308 	bics.w	r3, r3, r8
 8008014:	d114      	bne.n	8008040 <_dtoa_r+0x98>
 8008016:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008018:	f242 730f 	movw	r3, #9999	; 0x270f
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	9b00      	ldr	r3, [sp, #0]
 8008020:	b923      	cbnz	r3, 800802c <_dtoa_r+0x84>
 8008022:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008026:	2800      	cmp	r0, #0
 8008028:	f000 8542 	beq.w	8008ab0 <_dtoa_r+0xb08>
 800802c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800802e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80082dc <_dtoa_r+0x334>
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8544 	beq.w	8008ac0 <_dtoa_r+0xb18>
 8008038:	f10b 0303 	add.w	r3, fp, #3
 800803c:	f000 bd3e 	b.w	8008abc <_dtoa_r+0xb14>
 8008040:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008044:	2200      	movs	r2, #0
 8008046:	2300      	movs	r3, #0
 8008048:	4630      	mov	r0, r6
 800804a:	4639      	mov	r1, r7
 800804c:	f7f8 fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 8008050:	4681      	mov	r9, r0
 8008052:	b168      	cbz	r0, 8008070 <_dtoa_r+0xc8>
 8008054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008056:	2301      	movs	r3, #1
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8524 	beq.w	8008aaa <_dtoa_r+0xb02>
 8008062:	4b9a      	ldr	r3, [pc, #616]	; (80082cc <_dtoa_r+0x324>)
 8008064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008066:	f103 3bff 	add.w	fp, r3, #4294967295
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	f000 bd28 	b.w	8008ac0 <_dtoa_r+0xb18>
 8008070:	aa14      	add	r2, sp, #80	; 0x50
 8008072:	a915      	add	r1, sp, #84	; 0x54
 8008074:	ec47 6b10 	vmov	d0, r6, r7
 8008078:	4620      	mov	r0, r4
 800807a:	f001 fbe3 	bl	8009844 <__d2b>
 800807e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008082:	9004      	str	r0, [sp, #16]
 8008084:	2d00      	cmp	r5, #0
 8008086:	d07c      	beq.n	8008182 <_dtoa_r+0x1da>
 8008088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800808c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008090:	46b2      	mov	sl, r6
 8008092:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800809a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800809e:	2200      	movs	r2, #0
 80080a0:	4b8b      	ldr	r3, [pc, #556]	; (80082d0 <_dtoa_r+0x328>)
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	f7f8 f8f7 	bl	8000298 <__aeabi_dsub>
 80080aa:	a381      	add	r3, pc, #516	; (adr r3, 80082b0 <_dtoa_r+0x308>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 faaa 	bl	8000608 <__aeabi_dmul>
 80080b4:	a380      	add	r3, pc, #512	; (adr r3, 80082b8 <_dtoa_r+0x310>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 f8ef 	bl	800029c <__adddf3>
 80080be:	4606      	mov	r6, r0
 80080c0:	4628      	mov	r0, r5
 80080c2:	460f      	mov	r7, r1
 80080c4:	f7f8 fa36 	bl	8000534 <__aeabi_i2d>
 80080c8:	a37d      	add	r3, pc, #500	; (adr r3, 80082c0 <_dtoa_r+0x318>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fa9b 	bl	8000608 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 f8df 	bl	800029c <__adddf3>
 80080de:	4606      	mov	r6, r0
 80080e0:	460f      	mov	r7, r1
 80080e2:	f7f8 fd41 	bl	8000b68 <__aeabi_d2iz>
 80080e6:	2200      	movs	r2, #0
 80080e8:	4682      	mov	sl, r0
 80080ea:	2300      	movs	r3, #0
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fcfc 	bl	8000aec <__aeabi_dcmplt>
 80080f4:	b148      	cbz	r0, 800810a <_dtoa_r+0x162>
 80080f6:	4650      	mov	r0, sl
 80080f8:	f7f8 fa1c 	bl	8000534 <__aeabi_i2d>
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	f7f8 fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8008104:	b908      	cbnz	r0, 800810a <_dtoa_r+0x162>
 8008106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800810a:	f1ba 0f16 	cmp.w	sl, #22
 800810e:	d859      	bhi.n	80081c4 <_dtoa_r+0x21c>
 8008110:	4970      	ldr	r1, [pc, #448]	; (80082d4 <_dtoa_r+0x32c>)
 8008112:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800811a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800811e:	f7f8 fd03 	bl	8000b28 <__aeabi_dcmpgt>
 8008122:	2800      	cmp	r0, #0
 8008124:	d050      	beq.n	80081c8 <_dtoa_r+0x220>
 8008126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800812a:	2300      	movs	r3, #0
 800812c:	930f      	str	r3, [sp, #60]	; 0x3c
 800812e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008130:	1b5d      	subs	r5, r3, r5
 8008132:	f1b5 0801 	subs.w	r8, r5, #1
 8008136:	bf49      	itett	mi
 8008138:	f1c5 0301 	rsbmi	r3, r5, #1
 800813c:	2300      	movpl	r3, #0
 800813e:	9305      	strmi	r3, [sp, #20]
 8008140:	f04f 0800 	movmi.w	r8, #0
 8008144:	bf58      	it	pl
 8008146:	9305      	strpl	r3, [sp, #20]
 8008148:	f1ba 0f00 	cmp.w	sl, #0
 800814c:	db3e      	blt.n	80081cc <_dtoa_r+0x224>
 800814e:	2300      	movs	r3, #0
 8008150:	44d0      	add	r8, sl
 8008152:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008156:	9307      	str	r3, [sp, #28]
 8008158:	9b06      	ldr	r3, [sp, #24]
 800815a:	2b09      	cmp	r3, #9
 800815c:	f200 8090 	bhi.w	8008280 <_dtoa_r+0x2d8>
 8008160:	2b05      	cmp	r3, #5
 8008162:	bfc4      	itt	gt
 8008164:	3b04      	subgt	r3, #4
 8008166:	9306      	strgt	r3, [sp, #24]
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	f1a3 0302 	sub.w	r3, r3, #2
 800816e:	bfcc      	ite	gt
 8008170:	2500      	movgt	r5, #0
 8008172:	2501      	movle	r5, #1
 8008174:	2b03      	cmp	r3, #3
 8008176:	f200 808f 	bhi.w	8008298 <_dtoa_r+0x2f0>
 800817a:	e8df f003 	tbb	[pc, r3]
 800817e:	7f7d      	.short	0x7f7d
 8008180:	7131      	.short	0x7131
 8008182:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008186:	441d      	add	r5, r3
 8008188:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800818c:	2820      	cmp	r0, #32
 800818e:	dd13      	ble.n	80081b8 <_dtoa_r+0x210>
 8008190:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008194:	9b00      	ldr	r3, [sp, #0]
 8008196:	fa08 f800 	lsl.w	r8, r8, r0
 800819a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800819e:	fa23 f000 	lsr.w	r0, r3, r0
 80081a2:	ea48 0000 	orr.w	r0, r8, r0
 80081a6:	f7f8 f9b5 	bl	8000514 <__aeabi_ui2d>
 80081aa:	2301      	movs	r3, #1
 80081ac:	4682      	mov	sl, r0
 80081ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80081b2:	3d01      	subs	r5, #1
 80081b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80081b6:	e772      	b.n	800809e <_dtoa_r+0xf6>
 80081b8:	9b00      	ldr	r3, [sp, #0]
 80081ba:	f1c0 0020 	rsb	r0, r0, #32
 80081be:	fa03 f000 	lsl.w	r0, r3, r0
 80081c2:	e7f0      	b.n	80081a6 <_dtoa_r+0x1fe>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e7b1      	b.n	800812c <_dtoa_r+0x184>
 80081c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80081ca:	e7b0      	b.n	800812e <_dtoa_r+0x186>
 80081cc:	9b05      	ldr	r3, [sp, #20]
 80081ce:	eba3 030a 	sub.w	r3, r3, sl
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	f1ca 0300 	rsb	r3, sl, #0
 80081d8:	9307      	str	r3, [sp, #28]
 80081da:	2300      	movs	r3, #0
 80081dc:	930e      	str	r3, [sp, #56]	; 0x38
 80081de:	e7bb      	b.n	8008158 <_dtoa_r+0x1b0>
 80081e0:	2301      	movs	r3, #1
 80081e2:	930a      	str	r3, [sp, #40]	; 0x28
 80081e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	dd59      	ble.n	800829e <_dtoa_r+0x2f6>
 80081ea:	9302      	str	r3, [sp, #8]
 80081ec:	4699      	mov	r9, r3
 80081ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081f0:	2200      	movs	r2, #0
 80081f2:	6072      	str	r2, [r6, #4]
 80081f4:	2204      	movs	r2, #4
 80081f6:	f102 0014 	add.w	r0, r2, #20
 80081fa:	4298      	cmp	r0, r3
 80081fc:	6871      	ldr	r1, [r6, #4]
 80081fe:	d953      	bls.n	80082a8 <_dtoa_r+0x300>
 8008200:	4620      	mov	r0, r4
 8008202:	f000 ffdd 	bl	80091c0 <_Balloc>
 8008206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008208:	6030      	str	r0, [r6, #0]
 800820a:	f1b9 0f0e 	cmp.w	r9, #14
 800820e:	f8d3 b000 	ldr.w	fp, [r3]
 8008212:	f200 80e6 	bhi.w	80083e2 <_dtoa_r+0x43a>
 8008216:	2d00      	cmp	r5, #0
 8008218:	f000 80e3 	beq.w	80083e2 <_dtoa_r+0x43a>
 800821c:	ed9d 7b00 	vldr	d7, [sp]
 8008220:	f1ba 0f00 	cmp.w	sl, #0
 8008224:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008228:	dd74      	ble.n	8008314 <_dtoa_r+0x36c>
 800822a:	4a2a      	ldr	r2, [pc, #168]	; (80082d4 <_dtoa_r+0x32c>)
 800822c:	f00a 030f 	and.w	r3, sl, #15
 8008230:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008234:	ed93 7b00 	vldr	d7, [r3]
 8008238:	ea4f 162a 	mov.w	r6, sl, asr #4
 800823c:	06f0      	lsls	r0, r6, #27
 800823e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008242:	d565      	bpl.n	8008310 <_dtoa_r+0x368>
 8008244:	4b24      	ldr	r3, [pc, #144]	; (80082d8 <_dtoa_r+0x330>)
 8008246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800824a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800824e:	f7f8 fb05 	bl	800085c <__aeabi_ddiv>
 8008252:	e9cd 0100 	strd	r0, r1, [sp]
 8008256:	f006 060f 	and.w	r6, r6, #15
 800825a:	2503      	movs	r5, #3
 800825c:	4f1e      	ldr	r7, [pc, #120]	; (80082d8 <_dtoa_r+0x330>)
 800825e:	e04c      	b.n	80082fa <_dtoa_r+0x352>
 8008260:	2301      	movs	r3, #1
 8008262:	930a      	str	r3, [sp, #40]	; 0x28
 8008264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008266:	4453      	add	r3, sl
 8008268:	f103 0901 	add.w	r9, r3, #1
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	464b      	mov	r3, r9
 8008270:	2b01      	cmp	r3, #1
 8008272:	bfb8      	it	lt
 8008274:	2301      	movlt	r3, #1
 8008276:	e7ba      	b.n	80081ee <_dtoa_r+0x246>
 8008278:	2300      	movs	r3, #0
 800827a:	e7b2      	b.n	80081e2 <_dtoa_r+0x23a>
 800827c:	2300      	movs	r3, #0
 800827e:	e7f0      	b.n	8008262 <_dtoa_r+0x2ba>
 8008280:	2501      	movs	r5, #1
 8008282:	2300      	movs	r3, #0
 8008284:	9306      	str	r3, [sp, #24]
 8008286:	950a      	str	r5, [sp, #40]	; 0x28
 8008288:	f04f 33ff 	mov.w	r3, #4294967295
 800828c:	9302      	str	r3, [sp, #8]
 800828e:	4699      	mov	r9, r3
 8008290:	2200      	movs	r2, #0
 8008292:	2312      	movs	r3, #18
 8008294:	920b      	str	r2, [sp, #44]	; 0x2c
 8008296:	e7aa      	b.n	80081ee <_dtoa_r+0x246>
 8008298:	2301      	movs	r3, #1
 800829a:	930a      	str	r3, [sp, #40]	; 0x28
 800829c:	e7f4      	b.n	8008288 <_dtoa_r+0x2e0>
 800829e:	2301      	movs	r3, #1
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	4699      	mov	r9, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	e7f5      	b.n	8008294 <_dtoa_r+0x2ec>
 80082a8:	3101      	adds	r1, #1
 80082aa:	6071      	str	r1, [r6, #4]
 80082ac:	0052      	lsls	r2, r2, #1
 80082ae:	e7a2      	b.n	80081f6 <_dtoa_r+0x24e>
 80082b0:	636f4361 	.word	0x636f4361
 80082b4:	3fd287a7 	.word	0x3fd287a7
 80082b8:	8b60c8b3 	.word	0x8b60c8b3
 80082bc:	3fc68a28 	.word	0x3fc68a28
 80082c0:	509f79fb 	.word	0x509f79fb
 80082c4:	3fd34413 	.word	0x3fd34413
 80082c8:	7ff00000 	.word	0x7ff00000
 80082cc:	0800b59d 	.word	0x0800b59d
 80082d0:	3ff80000 	.word	0x3ff80000
 80082d4:	0800b658 	.word	0x0800b658
 80082d8:	0800b630 	.word	0x0800b630
 80082dc:	0800b621 	.word	0x0800b621
 80082e0:	07f1      	lsls	r1, r6, #31
 80082e2:	d508      	bpl.n	80082f6 <_dtoa_r+0x34e>
 80082e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ec:	f7f8 f98c 	bl	8000608 <__aeabi_dmul>
 80082f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082f4:	3501      	adds	r5, #1
 80082f6:	1076      	asrs	r6, r6, #1
 80082f8:	3708      	adds	r7, #8
 80082fa:	2e00      	cmp	r6, #0
 80082fc:	d1f0      	bne.n	80082e0 <_dtoa_r+0x338>
 80082fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008302:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008306:	f7f8 faa9 	bl	800085c <__aeabi_ddiv>
 800830a:	e9cd 0100 	strd	r0, r1, [sp]
 800830e:	e01a      	b.n	8008346 <_dtoa_r+0x39e>
 8008310:	2502      	movs	r5, #2
 8008312:	e7a3      	b.n	800825c <_dtoa_r+0x2b4>
 8008314:	f000 80a0 	beq.w	8008458 <_dtoa_r+0x4b0>
 8008318:	f1ca 0600 	rsb	r6, sl, #0
 800831c:	4b9f      	ldr	r3, [pc, #636]	; (800859c <_dtoa_r+0x5f4>)
 800831e:	4fa0      	ldr	r7, [pc, #640]	; (80085a0 <_dtoa_r+0x5f8>)
 8008320:	f006 020f 	and.w	r2, r6, #15
 8008324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008330:	f7f8 f96a 	bl	8000608 <__aeabi_dmul>
 8008334:	e9cd 0100 	strd	r0, r1, [sp]
 8008338:	1136      	asrs	r6, r6, #4
 800833a:	2300      	movs	r3, #0
 800833c:	2502      	movs	r5, #2
 800833e:	2e00      	cmp	r6, #0
 8008340:	d17f      	bne.n	8008442 <_dtoa_r+0x49a>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e1      	bne.n	800830a <_dtoa_r+0x362>
 8008346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 8087 	beq.w	800845c <_dtoa_r+0x4b4>
 800834e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008352:	2200      	movs	r2, #0
 8008354:	4b93      	ldr	r3, [pc, #588]	; (80085a4 <_dtoa_r+0x5fc>)
 8008356:	4630      	mov	r0, r6
 8008358:	4639      	mov	r1, r7
 800835a:	f7f8 fbc7 	bl	8000aec <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d07c      	beq.n	800845c <_dtoa_r+0x4b4>
 8008362:	f1b9 0f00 	cmp.w	r9, #0
 8008366:	d079      	beq.n	800845c <_dtoa_r+0x4b4>
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	dd35      	ble.n	80083da <_dtoa_r+0x432>
 800836e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008372:	9308      	str	r3, [sp, #32]
 8008374:	4639      	mov	r1, r7
 8008376:	2200      	movs	r2, #0
 8008378:	4b8b      	ldr	r3, [pc, #556]	; (80085a8 <_dtoa_r+0x600>)
 800837a:	4630      	mov	r0, r6
 800837c:	f7f8 f944 	bl	8000608 <__aeabi_dmul>
 8008380:	e9cd 0100 	strd	r0, r1, [sp]
 8008384:	9f02      	ldr	r7, [sp, #8]
 8008386:	3501      	adds	r5, #1
 8008388:	4628      	mov	r0, r5
 800838a:	f7f8 f8d3 	bl	8000534 <__aeabi_i2d>
 800838e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008392:	f7f8 f939 	bl	8000608 <__aeabi_dmul>
 8008396:	2200      	movs	r2, #0
 8008398:	4b84      	ldr	r3, [pc, #528]	; (80085ac <_dtoa_r+0x604>)
 800839a:	f7f7 ff7f 	bl	800029c <__adddf3>
 800839e:	4605      	mov	r5, r0
 80083a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80083a4:	2f00      	cmp	r7, #0
 80083a6:	d15d      	bne.n	8008464 <_dtoa_r+0x4bc>
 80083a8:	2200      	movs	r2, #0
 80083aa:	4b81      	ldr	r3, [pc, #516]	; (80085b0 <_dtoa_r+0x608>)
 80083ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083b0:	f7f7 ff72 	bl	8000298 <__aeabi_dsub>
 80083b4:	462a      	mov	r2, r5
 80083b6:	4633      	mov	r3, r6
 80083b8:	e9cd 0100 	strd	r0, r1, [sp]
 80083bc:	f7f8 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	f040 8288 	bne.w	80088d6 <_dtoa_r+0x92e>
 80083c6:	462a      	mov	r2, r5
 80083c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083d0:	f7f8 fb8c 	bl	8000aec <__aeabi_dcmplt>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f040 827c 	bne.w	80088d2 <_dtoa_r+0x92a>
 80083da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083de:	e9cd 2300 	strd	r2, r3, [sp]
 80083e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f2c0 8150 	blt.w	800868a <_dtoa_r+0x6e2>
 80083ea:	f1ba 0f0e 	cmp.w	sl, #14
 80083ee:	f300 814c 	bgt.w	800868a <_dtoa_r+0x6e2>
 80083f2:	4b6a      	ldr	r3, [pc, #424]	; (800859c <_dtoa_r+0x5f4>)
 80083f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083f8:	ed93 7b00 	vldr	d7, [r3]
 80083fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008404:	f280 80d8 	bge.w	80085b8 <_dtoa_r+0x610>
 8008408:	f1b9 0f00 	cmp.w	r9, #0
 800840c:	f300 80d4 	bgt.w	80085b8 <_dtoa_r+0x610>
 8008410:	f040 825e 	bne.w	80088d0 <_dtoa_r+0x928>
 8008414:	2200      	movs	r2, #0
 8008416:	4b66      	ldr	r3, [pc, #408]	; (80085b0 <_dtoa_r+0x608>)
 8008418:	ec51 0b17 	vmov	r0, r1, d7
 800841c:	f7f8 f8f4 	bl	8000608 <__aeabi_dmul>
 8008420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008424:	f7f8 fb76 	bl	8000b14 <__aeabi_dcmpge>
 8008428:	464f      	mov	r7, r9
 800842a:	464e      	mov	r6, r9
 800842c:	2800      	cmp	r0, #0
 800842e:	f040 8234 	bne.w	800889a <_dtoa_r+0x8f2>
 8008432:	2331      	movs	r3, #49	; 0x31
 8008434:	f10b 0501 	add.w	r5, fp, #1
 8008438:	f88b 3000 	strb.w	r3, [fp]
 800843c:	f10a 0a01 	add.w	sl, sl, #1
 8008440:	e22f      	b.n	80088a2 <_dtoa_r+0x8fa>
 8008442:	07f2      	lsls	r2, r6, #31
 8008444:	d505      	bpl.n	8008452 <_dtoa_r+0x4aa>
 8008446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844a:	f7f8 f8dd 	bl	8000608 <__aeabi_dmul>
 800844e:	3501      	adds	r5, #1
 8008450:	2301      	movs	r3, #1
 8008452:	1076      	asrs	r6, r6, #1
 8008454:	3708      	adds	r7, #8
 8008456:	e772      	b.n	800833e <_dtoa_r+0x396>
 8008458:	2502      	movs	r5, #2
 800845a:	e774      	b.n	8008346 <_dtoa_r+0x39e>
 800845c:	f8cd a020 	str.w	sl, [sp, #32]
 8008460:	464f      	mov	r7, r9
 8008462:	e791      	b.n	8008388 <_dtoa_r+0x3e0>
 8008464:	4b4d      	ldr	r3, [pc, #308]	; (800859c <_dtoa_r+0x5f4>)
 8008466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800846a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	2b00      	cmp	r3, #0
 8008472:	d047      	beq.n	8008504 <_dtoa_r+0x55c>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	2000      	movs	r0, #0
 800847a:	494e      	ldr	r1, [pc, #312]	; (80085b4 <_dtoa_r+0x60c>)
 800847c:	f7f8 f9ee 	bl	800085c <__aeabi_ddiv>
 8008480:	462a      	mov	r2, r5
 8008482:	4633      	mov	r3, r6
 8008484:	f7f7 ff08 	bl	8000298 <__aeabi_dsub>
 8008488:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800848c:	465d      	mov	r5, fp
 800848e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008492:	f7f8 fb69 	bl	8000b68 <__aeabi_d2iz>
 8008496:	4606      	mov	r6, r0
 8008498:	f7f8 f84c 	bl	8000534 <__aeabi_i2d>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a4:	f7f7 fef8 	bl	8000298 <__aeabi_dsub>
 80084a8:	3630      	adds	r6, #48	; 0x30
 80084aa:	f805 6b01 	strb.w	r6, [r5], #1
 80084ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084b2:	e9cd 0100 	strd	r0, r1, [sp]
 80084b6:	f7f8 fb19 	bl	8000aec <__aeabi_dcmplt>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d163      	bne.n	8008586 <_dtoa_r+0x5de>
 80084be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084c2:	2000      	movs	r0, #0
 80084c4:	4937      	ldr	r1, [pc, #220]	; (80085a4 <_dtoa_r+0x5fc>)
 80084c6:	f7f7 fee7 	bl	8000298 <__aeabi_dsub>
 80084ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084ce:	f7f8 fb0d 	bl	8000aec <__aeabi_dcmplt>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f040 80b7 	bne.w	8008646 <_dtoa_r+0x69e>
 80084d8:	eba5 030b 	sub.w	r3, r5, fp
 80084dc:	429f      	cmp	r7, r3
 80084de:	f77f af7c 	ble.w	80083da <_dtoa_r+0x432>
 80084e2:	2200      	movs	r2, #0
 80084e4:	4b30      	ldr	r3, [pc, #192]	; (80085a8 <_dtoa_r+0x600>)
 80084e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084ea:	f7f8 f88d 	bl	8000608 <__aeabi_dmul>
 80084ee:	2200      	movs	r2, #0
 80084f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084f4:	4b2c      	ldr	r3, [pc, #176]	; (80085a8 <_dtoa_r+0x600>)
 80084f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084fa:	f7f8 f885 	bl	8000608 <__aeabi_dmul>
 80084fe:	e9cd 0100 	strd	r0, r1, [sp]
 8008502:	e7c4      	b.n	800848e <_dtoa_r+0x4e6>
 8008504:	462a      	mov	r2, r5
 8008506:	4633      	mov	r3, r6
 8008508:	f7f8 f87e 	bl	8000608 <__aeabi_dmul>
 800850c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008510:	eb0b 0507 	add.w	r5, fp, r7
 8008514:	465e      	mov	r6, fp
 8008516:	e9dd 0100 	ldrd	r0, r1, [sp]
 800851a:	f7f8 fb25 	bl	8000b68 <__aeabi_d2iz>
 800851e:	4607      	mov	r7, r0
 8008520:	f7f8 f808 	bl	8000534 <__aeabi_i2d>
 8008524:	3730      	adds	r7, #48	; 0x30
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852e:	f7f7 feb3 	bl	8000298 <__aeabi_dsub>
 8008532:	f806 7b01 	strb.w	r7, [r6], #1
 8008536:	42ae      	cmp	r6, r5
 8008538:	e9cd 0100 	strd	r0, r1, [sp]
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	d126      	bne.n	8008590 <_dtoa_r+0x5e8>
 8008542:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <_dtoa_r+0x60c>)
 8008544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008548:	f7f7 fea8 	bl	800029c <__adddf3>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008554:	f7f8 fae8 	bl	8000b28 <__aeabi_dcmpgt>
 8008558:	2800      	cmp	r0, #0
 800855a:	d174      	bne.n	8008646 <_dtoa_r+0x69e>
 800855c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008560:	2000      	movs	r0, #0
 8008562:	4914      	ldr	r1, [pc, #80]	; (80085b4 <_dtoa_r+0x60c>)
 8008564:	f7f7 fe98 	bl	8000298 <__aeabi_dsub>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008570:	f7f8 fabc 	bl	8000aec <__aeabi_dcmplt>
 8008574:	2800      	cmp	r0, #0
 8008576:	f43f af30 	beq.w	80083da <_dtoa_r+0x432>
 800857a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800857e:	2b30      	cmp	r3, #48	; 0x30
 8008580:	f105 32ff 	add.w	r2, r5, #4294967295
 8008584:	d002      	beq.n	800858c <_dtoa_r+0x5e4>
 8008586:	f8dd a020 	ldr.w	sl, [sp, #32]
 800858a:	e04a      	b.n	8008622 <_dtoa_r+0x67a>
 800858c:	4615      	mov	r5, r2
 800858e:	e7f4      	b.n	800857a <_dtoa_r+0x5d2>
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <_dtoa_r+0x600>)
 8008592:	f7f8 f839 	bl	8000608 <__aeabi_dmul>
 8008596:	e9cd 0100 	strd	r0, r1, [sp]
 800859a:	e7bc      	b.n	8008516 <_dtoa_r+0x56e>
 800859c:	0800b658 	.word	0x0800b658
 80085a0:	0800b630 	.word	0x0800b630
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	40240000 	.word	0x40240000
 80085ac:	401c0000 	.word	0x401c0000
 80085b0:	40140000 	.word	0x40140000
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085bc:	465d      	mov	r5, fp
 80085be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c2:	4630      	mov	r0, r6
 80085c4:	4639      	mov	r1, r7
 80085c6:	f7f8 f949 	bl	800085c <__aeabi_ddiv>
 80085ca:	f7f8 facd 	bl	8000b68 <__aeabi_d2iz>
 80085ce:	4680      	mov	r8, r0
 80085d0:	f7f7 ffb0 	bl	8000534 <__aeabi_i2d>
 80085d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d8:	f7f8 f816 	bl	8000608 <__aeabi_dmul>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085e8:	f7f7 fe56 	bl	8000298 <__aeabi_dsub>
 80085ec:	f805 6b01 	strb.w	r6, [r5], #1
 80085f0:	eba5 060b 	sub.w	r6, r5, fp
 80085f4:	45b1      	cmp	r9, r6
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	d139      	bne.n	8008670 <_dtoa_r+0x6c8>
 80085fc:	f7f7 fe4e 	bl	800029c <__adddf3>
 8008600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008604:	4606      	mov	r6, r0
 8008606:	460f      	mov	r7, r1
 8008608:	f7f8 fa8e 	bl	8000b28 <__aeabi_dcmpgt>
 800860c:	b9c8      	cbnz	r0, 8008642 <_dtoa_r+0x69a>
 800860e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008612:	4630      	mov	r0, r6
 8008614:	4639      	mov	r1, r7
 8008616:	f7f8 fa5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800861a:	b110      	cbz	r0, 8008622 <_dtoa_r+0x67a>
 800861c:	f018 0f01 	tst.w	r8, #1
 8008620:	d10f      	bne.n	8008642 <_dtoa_r+0x69a>
 8008622:	9904      	ldr	r1, [sp, #16]
 8008624:	4620      	mov	r0, r4
 8008626:	f000 fdff 	bl	8009228 <_Bfree>
 800862a:	2300      	movs	r3, #0
 800862c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800862e:	702b      	strb	r3, [r5, #0]
 8008630:	f10a 0301 	add.w	r3, sl, #1
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8241 	beq.w	8008ac0 <_dtoa_r+0xb18>
 800863e:	601d      	str	r5, [r3, #0]
 8008640:	e23e      	b.n	8008ac0 <_dtoa_r+0xb18>
 8008642:	f8cd a020 	str.w	sl, [sp, #32]
 8008646:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800864a:	2a39      	cmp	r2, #57	; 0x39
 800864c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008650:	d108      	bne.n	8008664 <_dtoa_r+0x6bc>
 8008652:	459b      	cmp	fp, r3
 8008654:	d10a      	bne.n	800866c <_dtoa_r+0x6c4>
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	3301      	adds	r3, #1
 800865a:	9308      	str	r3, [sp, #32]
 800865c:	2330      	movs	r3, #48	; 0x30
 800865e:	f88b 3000 	strb.w	r3, [fp]
 8008662:	465b      	mov	r3, fp
 8008664:	781a      	ldrb	r2, [r3, #0]
 8008666:	3201      	adds	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	e78c      	b.n	8008586 <_dtoa_r+0x5de>
 800866c:	461d      	mov	r5, r3
 800866e:	e7ea      	b.n	8008646 <_dtoa_r+0x69e>
 8008670:	2200      	movs	r2, #0
 8008672:	4b9b      	ldr	r3, [pc, #620]	; (80088e0 <_dtoa_r+0x938>)
 8008674:	f7f7 ffc8 	bl	8000608 <__aeabi_dmul>
 8008678:	2200      	movs	r2, #0
 800867a:	2300      	movs	r3, #0
 800867c:	4606      	mov	r6, r0
 800867e:	460f      	mov	r7, r1
 8008680:	f7f8 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008684:	2800      	cmp	r0, #0
 8008686:	d09a      	beq.n	80085be <_dtoa_r+0x616>
 8008688:	e7cb      	b.n	8008622 <_dtoa_r+0x67a>
 800868a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800868c:	2a00      	cmp	r2, #0
 800868e:	f000 808b 	beq.w	80087a8 <_dtoa_r+0x800>
 8008692:	9a06      	ldr	r2, [sp, #24]
 8008694:	2a01      	cmp	r2, #1
 8008696:	dc6e      	bgt.n	8008776 <_dtoa_r+0x7ce>
 8008698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800869a:	2a00      	cmp	r2, #0
 800869c:	d067      	beq.n	800876e <_dtoa_r+0x7c6>
 800869e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086a2:	9f07      	ldr	r7, [sp, #28]
 80086a4:	9d05      	ldr	r5, [sp, #20]
 80086a6:	9a05      	ldr	r2, [sp, #20]
 80086a8:	2101      	movs	r1, #1
 80086aa:	441a      	add	r2, r3
 80086ac:	4620      	mov	r0, r4
 80086ae:	9205      	str	r2, [sp, #20]
 80086b0:	4498      	add	r8, r3
 80086b2:	f000 fe97 	bl	80093e4 <__i2b>
 80086b6:	4606      	mov	r6, r0
 80086b8:	2d00      	cmp	r5, #0
 80086ba:	dd0c      	ble.n	80086d6 <_dtoa_r+0x72e>
 80086bc:	f1b8 0f00 	cmp.w	r8, #0
 80086c0:	dd09      	ble.n	80086d6 <_dtoa_r+0x72e>
 80086c2:	4545      	cmp	r5, r8
 80086c4:	9a05      	ldr	r2, [sp, #20]
 80086c6:	462b      	mov	r3, r5
 80086c8:	bfa8      	it	ge
 80086ca:	4643      	movge	r3, r8
 80086cc:	1ad2      	subs	r2, r2, r3
 80086ce:	9205      	str	r2, [sp, #20]
 80086d0:	1aed      	subs	r5, r5, r3
 80086d2:	eba8 0803 	sub.w	r8, r8, r3
 80086d6:	9b07      	ldr	r3, [sp, #28]
 80086d8:	b1eb      	cbz	r3, 8008716 <_dtoa_r+0x76e>
 80086da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d067      	beq.n	80087b0 <_dtoa_r+0x808>
 80086e0:	b18f      	cbz	r7, 8008706 <_dtoa_r+0x75e>
 80086e2:	4631      	mov	r1, r6
 80086e4:	463a      	mov	r2, r7
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 ff1c 	bl	8009524 <__pow5mult>
 80086ec:	9a04      	ldr	r2, [sp, #16]
 80086ee:	4601      	mov	r1, r0
 80086f0:	4606      	mov	r6, r0
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fe7f 	bl	80093f6 <__multiply>
 80086f8:	9904      	ldr	r1, [sp, #16]
 80086fa:	9008      	str	r0, [sp, #32]
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fd93 	bl	8009228 <_Bfree>
 8008702:	9b08      	ldr	r3, [sp, #32]
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	1bda      	subs	r2, r3, r7
 800870a:	d004      	beq.n	8008716 <_dtoa_r+0x76e>
 800870c:	9904      	ldr	r1, [sp, #16]
 800870e:	4620      	mov	r0, r4
 8008710:	f000 ff08 	bl	8009524 <__pow5mult>
 8008714:	9004      	str	r0, [sp, #16]
 8008716:	2101      	movs	r1, #1
 8008718:	4620      	mov	r0, r4
 800871a:	f000 fe63 	bl	80093e4 <__i2b>
 800871e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008720:	4607      	mov	r7, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 81d0 	beq.w	8008ac8 <_dtoa_r+0xb20>
 8008728:	461a      	mov	r2, r3
 800872a:	4601      	mov	r1, r0
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fef9 	bl	8009524 <__pow5mult>
 8008732:	9b06      	ldr	r3, [sp, #24]
 8008734:	2b01      	cmp	r3, #1
 8008736:	4607      	mov	r7, r0
 8008738:	dc40      	bgt.n	80087bc <_dtoa_r+0x814>
 800873a:	9b00      	ldr	r3, [sp, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d139      	bne.n	80087b4 <_dtoa_r+0x80c>
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008746:	2b00      	cmp	r3, #0
 8008748:	d136      	bne.n	80087b8 <_dtoa_r+0x810>
 800874a:	9b01      	ldr	r3, [sp, #4]
 800874c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008750:	0d1b      	lsrs	r3, r3, #20
 8008752:	051b      	lsls	r3, r3, #20
 8008754:	b12b      	cbz	r3, 8008762 <_dtoa_r+0x7ba>
 8008756:	9b05      	ldr	r3, [sp, #20]
 8008758:	3301      	adds	r3, #1
 800875a:	9305      	str	r3, [sp, #20]
 800875c:	f108 0801 	add.w	r8, r8, #1
 8008760:	2301      	movs	r3, #1
 8008762:	9307      	str	r3, [sp, #28]
 8008764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008766:	2b00      	cmp	r3, #0
 8008768:	d12a      	bne.n	80087c0 <_dtoa_r+0x818>
 800876a:	2001      	movs	r0, #1
 800876c:	e030      	b.n	80087d0 <_dtoa_r+0x828>
 800876e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008770:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008774:	e795      	b.n	80086a2 <_dtoa_r+0x6fa>
 8008776:	9b07      	ldr	r3, [sp, #28]
 8008778:	f109 37ff 	add.w	r7, r9, #4294967295
 800877c:	42bb      	cmp	r3, r7
 800877e:	bfbf      	itttt	lt
 8008780:	9b07      	ldrlt	r3, [sp, #28]
 8008782:	9707      	strlt	r7, [sp, #28]
 8008784:	1afa      	sublt	r2, r7, r3
 8008786:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008788:	bfbb      	ittet	lt
 800878a:	189b      	addlt	r3, r3, r2
 800878c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800878e:	1bdf      	subge	r7, r3, r7
 8008790:	2700      	movlt	r7, #0
 8008792:	f1b9 0f00 	cmp.w	r9, #0
 8008796:	bfb5      	itete	lt
 8008798:	9b05      	ldrlt	r3, [sp, #20]
 800879a:	9d05      	ldrge	r5, [sp, #20]
 800879c:	eba3 0509 	sublt.w	r5, r3, r9
 80087a0:	464b      	movge	r3, r9
 80087a2:	bfb8      	it	lt
 80087a4:	2300      	movlt	r3, #0
 80087a6:	e77e      	b.n	80086a6 <_dtoa_r+0x6fe>
 80087a8:	9f07      	ldr	r7, [sp, #28]
 80087aa:	9d05      	ldr	r5, [sp, #20]
 80087ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087ae:	e783      	b.n	80086b8 <_dtoa_r+0x710>
 80087b0:	9a07      	ldr	r2, [sp, #28]
 80087b2:	e7ab      	b.n	800870c <_dtoa_r+0x764>
 80087b4:	2300      	movs	r3, #0
 80087b6:	e7d4      	b.n	8008762 <_dtoa_r+0x7ba>
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	e7d2      	b.n	8008762 <_dtoa_r+0x7ba>
 80087bc:	2300      	movs	r3, #0
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087c6:	6918      	ldr	r0, [r3, #16]
 80087c8:	f000 fdbe 	bl	8009348 <__hi0bits>
 80087cc:	f1c0 0020 	rsb	r0, r0, #32
 80087d0:	4440      	add	r0, r8
 80087d2:	f010 001f 	ands.w	r0, r0, #31
 80087d6:	d047      	beq.n	8008868 <_dtoa_r+0x8c0>
 80087d8:	f1c0 0320 	rsb	r3, r0, #32
 80087dc:	2b04      	cmp	r3, #4
 80087de:	dd3b      	ble.n	8008858 <_dtoa_r+0x8b0>
 80087e0:	9b05      	ldr	r3, [sp, #20]
 80087e2:	f1c0 001c 	rsb	r0, r0, #28
 80087e6:	4403      	add	r3, r0
 80087e8:	9305      	str	r3, [sp, #20]
 80087ea:	4405      	add	r5, r0
 80087ec:	4480      	add	r8, r0
 80087ee:	9b05      	ldr	r3, [sp, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dd05      	ble.n	8008800 <_dtoa_r+0x858>
 80087f4:	461a      	mov	r2, r3
 80087f6:	9904      	ldr	r1, [sp, #16]
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fee1 	bl	80095c0 <__lshift>
 80087fe:	9004      	str	r0, [sp, #16]
 8008800:	f1b8 0f00 	cmp.w	r8, #0
 8008804:	dd05      	ble.n	8008812 <_dtoa_r+0x86a>
 8008806:	4639      	mov	r1, r7
 8008808:	4642      	mov	r2, r8
 800880a:	4620      	mov	r0, r4
 800880c:	f000 fed8 	bl	80095c0 <__lshift>
 8008810:	4607      	mov	r7, r0
 8008812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008814:	b353      	cbz	r3, 800886c <_dtoa_r+0x8c4>
 8008816:	4639      	mov	r1, r7
 8008818:	9804      	ldr	r0, [sp, #16]
 800881a:	f000 ff25 	bl	8009668 <__mcmp>
 800881e:	2800      	cmp	r0, #0
 8008820:	da24      	bge.n	800886c <_dtoa_r+0x8c4>
 8008822:	2300      	movs	r3, #0
 8008824:	220a      	movs	r2, #10
 8008826:	9904      	ldr	r1, [sp, #16]
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fd14 	bl	8009256 <__multadd>
 800882e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008830:	9004      	str	r0, [sp, #16]
 8008832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 814d 	beq.w	8008ad6 <_dtoa_r+0xb2e>
 800883c:	2300      	movs	r3, #0
 800883e:	4631      	mov	r1, r6
 8008840:	220a      	movs	r2, #10
 8008842:	4620      	mov	r0, r4
 8008844:	f000 fd07 	bl	8009256 <__multadd>
 8008848:	9b02      	ldr	r3, [sp, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	4606      	mov	r6, r0
 800884e:	dc4f      	bgt.n	80088f0 <_dtoa_r+0x948>
 8008850:	9b06      	ldr	r3, [sp, #24]
 8008852:	2b02      	cmp	r3, #2
 8008854:	dd4c      	ble.n	80088f0 <_dtoa_r+0x948>
 8008856:	e011      	b.n	800887c <_dtoa_r+0x8d4>
 8008858:	d0c9      	beq.n	80087ee <_dtoa_r+0x846>
 800885a:	9a05      	ldr	r2, [sp, #20]
 800885c:	331c      	adds	r3, #28
 800885e:	441a      	add	r2, r3
 8008860:	9205      	str	r2, [sp, #20]
 8008862:	441d      	add	r5, r3
 8008864:	4498      	add	r8, r3
 8008866:	e7c2      	b.n	80087ee <_dtoa_r+0x846>
 8008868:	4603      	mov	r3, r0
 800886a:	e7f6      	b.n	800885a <_dtoa_r+0x8b2>
 800886c:	f1b9 0f00 	cmp.w	r9, #0
 8008870:	dc38      	bgt.n	80088e4 <_dtoa_r+0x93c>
 8008872:	9b06      	ldr	r3, [sp, #24]
 8008874:	2b02      	cmp	r3, #2
 8008876:	dd35      	ble.n	80088e4 <_dtoa_r+0x93c>
 8008878:	f8cd 9008 	str.w	r9, [sp, #8]
 800887c:	9b02      	ldr	r3, [sp, #8]
 800887e:	b963      	cbnz	r3, 800889a <_dtoa_r+0x8f2>
 8008880:	4639      	mov	r1, r7
 8008882:	2205      	movs	r2, #5
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fce6 	bl	8009256 <__multadd>
 800888a:	4601      	mov	r1, r0
 800888c:	4607      	mov	r7, r0
 800888e:	9804      	ldr	r0, [sp, #16]
 8008890:	f000 feea 	bl	8009668 <__mcmp>
 8008894:	2800      	cmp	r0, #0
 8008896:	f73f adcc 	bgt.w	8008432 <_dtoa_r+0x48a>
 800889a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800889c:	465d      	mov	r5, fp
 800889e:	ea6f 0a03 	mvn.w	sl, r3
 80088a2:	f04f 0900 	mov.w	r9, #0
 80088a6:	4639      	mov	r1, r7
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fcbd 	bl	8009228 <_Bfree>
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	f43f aeb7 	beq.w	8008622 <_dtoa_r+0x67a>
 80088b4:	f1b9 0f00 	cmp.w	r9, #0
 80088b8:	d005      	beq.n	80088c6 <_dtoa_r+0x91e>
 80088ba:	45b1      	cmp	r9, r6
 80088bc:	d003      	beq.n	80088c6 <_dtoa_r+0x91e>
 80088be:	4649      	mov	r1, r9
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fcb1 	bl	8009228 <_Bfree>
 80088c6:	4631      	mov	r1, r6
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fcad 	bl	8009228 <_Bfree>
 80088ce:	e6a8      	b.n	8008622 <_dtoa_r+0x67a>
 80088d0:	2700      	movs	r7, #0
 80088d2:	463e      	mov	r6, r7
 80088d4:	e7e1      	b.n	800889a <_dtoa_r+0x8f2>
 80088d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088da:	463e      	mov	r6, r7
 80088dc:	e5a9      	b.n	8008432 <_dtoa_r+0x48a>
 80088de:	bf00      	nop
 80088e0:	40240000 	.word	0x40240000
 80088e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80fa 	beq.w	8008ae4 <_dtoa_r+0xb3c>
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	dd05      	ble.n	8008900 <_dtoa_r+0x958>
 80088f4:	4631      	mov	r1, r6
 80088f6:	462a      	mov	r2, r5
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fe61 	bl	80095c0 <__lshift>
 80088fe:	4606      	mov	r6, r0
 8008900:	9b07      	ldr	r3, [sp, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d04c      	beq.n	80089a0 <_dtoa_r+0x9f8>
 8008906:	6871      	ldr	r1, [r6, #4]
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fc59 	bl	80091c0 <_Balloc>
 800890e:	6932      	ldr	r2, [r6, #16]
 8008910:	3202      	adds	r2, #2
 8008912:	4605      	mov	r5, r0
 8008914:	0092      	lsls	r2, r2, #2
 8008916:	f106 010c 	add.w	r1, r6, #12
 800891a:	300c      	adds	r0, #12
 800891c:	f7fd fd90 	bl	8006440 <memcpy>
 8008920:	2201      	movs	r2, #1
 8008922:	4629      	mov	r1, r5
 8008924:	4620      	mov	r0, r4
 8008926:	f000 fe4b 	bl	80095c0 <__lshift>
 800892a:	9b00      	ldr	r3, [sp, #0]
 800892c:	f8cd b014 	str.w	fp, [sp, #20]
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	46b1      	mov	r9, r6
 8008936:	9307      	str	r3, [sp, #28]
 8008938:	4606      	mov	r6, r0
 800893a:	4639      	mov	r1, r7
 800893c:	9804      	ldr	r0, [sp, #16]
 800893e:	f7ff faa5 	bl	8007e8c <quorem>
 8008942:	4649      	mov	r1, r9
 8008944:	4605      	mov	r5, r0
 8008946:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800894a:	9804      	ldr	r0, [sp, #16]
 800894c:	f000 fe8c 	bl	8009668 <__mcmp>
 8008950:	4632      	mov	r2, r6
 8008952:	9000      	str	r0, [sp, #0]
 8008954:	4639      	mov	r1, r7
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fea0 	bl	800969c <__mdiff>
 800895c:	68c3      	ldr	r3, [r0, #12]
 800895e:	4602      	mov	r2, r0
 8008960:	bb03      	cbnz	r3, 80089a4 <_dtoa_r+0x9fc>
 8008962:	4601      	mov	r1, r0
 8008964:	9008      	str	r0, [sp, #32]
 8008966:	9804      	ldr	r0, [sp, #16]
 8008968:	f000 fe7e 	bl	8009668 <__mcmp>
 800896c:	9a08      	ldr	r2, [sp, #32]
 800896e:	4603      	mov	r3, r0
 8008970:	4611      	mov	r1, r2
 8008972:	4620      	mov	r0, r4
 8008974:	9308      	str	r3, [sp, #32]
 8008976:	f000 fc57 	bl	8009228 <_Bfree>
 800897a:	9b08      	ldr	r3, [sp, #32]
 800897c:	b9a3      	cbnz	r3, 80089a8 <_dtoa_r+0xa00>
 800897e:	9a06      	ldr	r2, [sp, #24]
 8008980:	b992      	cbnz	r2, 80089a8 <_dtoa_r+0xa00>
 8008982:	9a07      	ldr	r2, [sp, #28]
 8008984:	b982      	cbnz	r2, 80089a8 <_dtoa_r+0xa00>
 8008986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800898a:	d029      	beq.n	80089e0 <_dtoa_r+0xa38>
 800898c:	9b00      	ldr	r3, [sp, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd01      	ble.n	8008996 <_dtoa_r+0x9ee>
 8008992:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008996:	9b05      	ldr	r3, [sp, #20]
 8008998:	1c5d      	adds	r5, r3, #1
 800899a:	f883 8000 	strb.w	r8, [r3]
 800899e:	e782      	b.n	80088a6 <_dtoa_r+0x8fe>
 80089a0:	4630      	mov	r0, r6
 80089a2:	e7c2      	b.n	800892a <_dtoa_r+0x982>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e7e3      	b.n	8008970 <_dtoa_r+0x9c8>
 80089a8:	9a00      	ldr	r2, [sp, #0]
 80089aa:	2a00      	cmp	r2, #0
 80089ac:	db04      	blt.n	80089b8 <_dtoa_r+0xa10>
 80089ae:	d125      	bne.n	80089fc <_dtoa_r+0xa54>
 80089b0:	9a06      	ldr	r2, [sp, #24]
 80089b2:	bb1a      	cbnz	r2, 80089fc <_dtoa_r+0xa54>
 80089b4:	9a07      	ldr	r2, [sp, #28]
 80089b6:	bb0a      	cbnz	r2, 80089fc <_dtoa_r+0xa54>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	ddec      	ble.n	8008996 <_dtoa_r+0x9ee>
 80089bc:	2201      	movs	r2, #1
 80089be:	9904      	ldr	r1, [sp, #16]
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 fdfd 	bl	80095c0 <__lshift>
 80089c6:	4639      	mov	r1, r7
 80089c8:	9004      	str	r0, [sp, #16]
 80089ca:	f000 fe4d 	bl	8009668 <__mcmp>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	dc03      	bgt.n	80089da <_dtoa_r+0xa32>
 80089d2:	d1e0      	bne.n	8008996 <_dtoa_r+0x9ee>
 80089d4:	f018 0f01 	tst.w	r8, #1
 80089d8:	d0dd      	beq.n	8008996 <_dtoa_r+0x9ee>
 80089da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089de:	d1d8      	bne.n	8008992 <_dtoa_r+0x9ea>
 80089e0:	9b05      	ldr	r3, [sp, #20]
 80089e2:	9a05      	ldr	r2, [sp, #20]
 80089e4:	1c5d      	adds	r5, r3, #1
 80089e6:	2339      	movs	r3, #57	; 0x39
 80089e8:	7013      	strb	r3, [r2, #0]
 80089ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089ee:	2b39      	cmp	r3, #57	; 0x39
 80089f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80089f4:	d04f      	beq.n	8008a96 <_dtoa_r+0xaee>
 80089f6:	3301      	adds	r3, #1
 80089f8:	7013      	strb	r3, [r2, #0]
 80089fa:	e754      	b.n	80088a6 <_dtoa_r+0x8fe>
 80089fc:	9a05      	ldr	r2, [sp, #20]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f102 0501 	add.w	r5, r2, #1
 8008a04:	dd06      	ble.n	8008a14 <_dtoa_r+0xa6c>
 8008a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a0a:	d0e9      	beq.n	80089e0 <_dtoa_r+0xa38>
 8008a0c:	f108 0801 	add.w	r8, r8, #1
 8008a10:	9b05      	ldr	r3, [sp, #20]
 8008a12:	e7c2      	b.n	800899a <_dtoa_r+0x9f2>
 8008a14:	9a02      	ldr	r2, [sp, #8]
 8008a16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a1a:	eba5 030b 	sub.w	r3, r5, fp
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d021      	beq.n	8008a66 <_dtoa_r+0xabe>
 8008a22:	2300      	movs	r3, #0
 8008a24:	220a      	movs	r2, #10
 8008a26:	9904      	ldr	r1, [sp, #16]
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fc14 	bl	8009256 <__multadd>
 8008a2e:	45b1      	cmp	r9, r6
 8008a30:	9004      	str	r0, [sp, #16]
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	f04f 020a 	mov.w	r2, #10
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	d105      	bne.n	8008a4c <_dtoa_r+0xaa4>
 8008a40:	f000 fc09 	bl	8009256 <__multadd>
 8008a44:	4681      	mov	r9, r0
 8008a46:	4606      	mov	r6, r0
 8008a48:	9505      	str	r5, [sp, #20]
 8008a4a:	e776      	b.n	800893a <_dtoa_r+0x992>
 8008a4c:	f000 fc03 	bl	8009256 <__multadd>
 8008a50:	4631      	mov	r1, r6
 8008a52:	4681      	mov	r9, r0
 8008a54:	2300      	movs	r3, #0
 8008a56:	220a      	movs	r2, #10
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 fbfc 	bl	8009256 <__multadd>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	e7f2      	b.n	8008a48 <_dtoa_r+0xaa0>
 8008a62:	f04f 0900 	mov.w	r9, #0
 8008a66:	2201      	movs	r2, #1
 8008a68:	9904      	ldr	r1, [sp, #16]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fda8 	bl	80095c0 <__lshift>
 8008a70:	4639      	mov	r1, r7
 8008a72:	9004      	str	r0, [sp, #16]
 8008a74:	f000 fdf8 	bl	8009668 <__mcmp>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	dcb6      	bgt.n	80089ea <_dtoa_r+0xa42>
 8008a7c:	d102      	bne.n	8008a84 <_dtoa_r+0xadc>
 8008a7e:	f018 0f01 	tst.w	r8, #1
 8008a82:	d1b2      	bne.n	80089ea <_dtoa_r+0xa42>
 8008a84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a88:	2b30      	cmp	r3, #48	; 0x30
 8008a8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a8e:	f47f af0a 	bne.w	80088a6 <_dtoa_r+0x8fe>
 8008a92:	4615      	mov	r5, r2
 8008a94:	e7f6      	b.n	8008a84 <_dtoa_r+0xadc>
 8008a96:	4593      	cmp	fp, r2
 8008a98:	d105      	bne.n	8008aa6 <_dtoa_r+0xafe>
 8008a9a:	2331      	movs	r3, #49	; 0x31
 8008a9c:	f10a 0a01 	add.w	sl, sl, #1
 8008aa0:	f88b 3000 	strb.w	r3, [fp]
 8008aa4:	e6ff      	b.n	80088a6 <_dtoa_r+0x8fe>
 8008aa6:	4615      	mov	r5, r2
 8008aa8:	e79f      	b.n	80089ea <_dtoa_r+0xa42>
 8008aaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008b10 <_dtoa_r+0xb68>
 8008aae:	e007      	b.n	8008ac0 <_dtoa_r+0xb18>
 8008ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008b14 <_dtoa_r+0xb6c>
 8008ab6:	b11b      	cbz	r3, 8008ac0 <_dtoa_r+0xb18>
 8008ab8:	f10b 0308 	add.w	r3, fp, #8
 8008abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	b017      	add	sp, #92	; 0x5c
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac8:	9b06      	ldr	r3, [sp, #24]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	f77f ae35 	ble.w	800873a <_dtoa_r+0x792>
 8008ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ad2:	9307      	str	r3, [sp, #28]
 8008ad4:	e649      	b.n	800876a <_dtoa_r+0x7c2>
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dc03      	bgt.n	8008ae4 <_dtoa_r+0xb3c>
 8008adc:	9b06      	ldr	r3, [sp, #24]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	f73f aecc 	bgt.w	800887c <_dtoa_r+0x8d4>
 8008ae4:	465d      	mov	r5, fp
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	9804      	ldr	r0, [sp, #16]
 8008aea:	f7ff f9cf 	bl	8007e8c <quorem>
 8008aee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008af2:	f805 8b01 	strb.w	r8, [r5], #1
 8008af6:	9a02      	ldr	r2, [sp, #8]
 8008af8:	eba5 030b 	sub.w	r3, r5, fp
 8008afc:	429a      	cmp	r2, r3
 8008afe:	ddb0      	ble.n	8008a62 <_dtoa_r+0xaba>
 8008b00:	2300      	movs	r3, #0
 8008b02:	220a      	movs	r2, #10
 8008b04:	9904      	ldr	r1, [sp, #16]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 fba5 	bl	8009256 <__multadd>
 8008b0c:	9004      	str	r0, [sp, #16]
 8008b0e:	e7ea      	b.n	8008ae6 <_dtoa_r+0xb3e>
 8008b10:	0800b59c 	.word	0x0800b59c
 8008b14:	0800b618 	.word	0x0800b618

08008b18 <rshift>:
 8008b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1a:	6906      	ldr	r6, [r0, #16]
 8008b1c:	114b      	asrs	r3, r1, #5
 8008b1e:	429e      	cmp	r6, r3
 8008b20:	f100 0414 	add.w	r4, r0, #20
 8008b24:	dd30      	ble.n	8008b88 <rshift+0x70>
 8008b26:	f011 011f 	ands.w	r1, r1, #31
 8008b2a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008b2e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008b32:	d108      	bne.n	8008b46 <rshift+0x2e>
 8008b34:	4621      	mov	r1, r4
 8008b36:	42b2      	cmp	r2, r6
 8008b38:	460b      	mov	r3, r1
 8008b3a:	d211      	bcs.n	8008b60 <rshift+0x48>
 8008b3c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008b40:	f841 3b04 	str.w	r3, [r1], #4
 8008b44:	e7f7      	b.n	8008b36 <rshift+0x1e>
 8008b46:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008b4a:	f1c1 0c20 	rsb	ip, r1, #32
 8008b4e:	40cd      	lsrs	r5, r1
 8008b50:	3204      	adds	r2, #4
 8008b52:	4623      	mov	r3, r4
 8008b54:	42b2      	cmp	r2, r6
 8008b56:	4617      	mov	r7, r2
 8008b58:	d30c      	bcc.n	8008b74 <rshift+0x5c>
 8008b5a:	601d      	str	r5, [r3, #0]
 8008b5c:	b105      	cbz	r5, 8008b60 <rshift+0x48>
 8008b5e:	3304      	adds	r3, #4
 8008b60:	1b1a      	subs	r2, r3, r4
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b68:	bf08      	it	eq
 8008b6a:	2300      	moveq	r3, #0
 8008b6c:	6102      	str	r2, [r0, #16]
 8008b6e:	bf08      	it	eq
 8008b70:	6143      	streq	r3, [r0, #20]
 8008b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b74:	683f      	ldr	r7, [r7, #0]
 8008b76:	fa07 f70c 	lsl.w	r7, r7, ip
 8008b7a:	433d      	orrs	r5, r7
 8008b7c:	f843 5b04 	str.w	r5, [r3], #4
 8008b80:	f852 5b04 	ldr.w	r5, [r2], #4
 8008b84:	40cd      	lsrs	r5, r1
 8008b86:	e7e5      	b.n	8008b54 <rshift+0x3c>
 8008b88:	4623      	mov	r3, r4
 8008b8a:	e7e9      	b.n	8008b60 <rshift+0x48>

08008b8c <__hexdig_fun>:
 8008b8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b90:	2b09      	cmp	r3, #9
 8008b92:	d802      	bhi.n	8008b9a <__hexdig_fun+0xe>
 8008b94:	3820      	subs	r0, #32
 8008b96:	b2c0      	uxtb	r0, r0
 8008b98:	4770      	bx	lr
 8008b9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	d801      	bhi.n	8008ba6 <__hexdig_fun+0x1a>
 8008ba2:	3847      	subs	r0, #71	; 0x47
 8008ba4:	e7f7      	b.n	8008b96 <__hexdig_fun+0xa>
 8008ba6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d801      	bhi.n	8008bb2 <__hexdig_fun+0x26>
 8008bae:	3827      	subs	r0, #39	; 0x27
 8008bb0:	e7f1      	b.n	8008b96 <__hexdig_fun+0xa>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	4770      	bx	lr

08008bb6 <__gethex>:
 8008bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	b08b      	sub	sp, #44	; 0x2c
 8008bbc:	468a      	mov	sl, r1
 8008bbe:	9002      	str	r0, [sp, #8]
 8008bc0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008bc2:	9306      	str	r3, [sp, #24]
 8008bc4:	4690      	mov	r8, r2
 8008bc6:	f000 fad0 	bl	800916a <__localeconv_l>
 8008bca:	6803      	ldr	r3, [r0, #0]
 8008bcc:	9303      	str	r3, [sp, #12]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7f7 fb06 	bl	80001e0 <strlen>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	9001      	str	r0, [sp, #4]
 8008bd8:	4403      	add	r3, r0
 8008bda:	f04f 0b00 	mov.w	fp, #0
 8008bde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008be2:	9307      	str	r3, [sp, #28]
 8008be4:	f8da 3000 	ldr.w	r3, [sl]
 8008be8:	3302      	adds	r3, #2
 8008bea:	461f      	mov	r7, r3
 8008bec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008bf0:	2830      	cmp	r0, #48	; 0x30
 8008bf2:	d06c      	beq.n	8008cce <__gethex+0x118>
 8008bf4:	f7ff ffca 	bl	8008b8c <__hexdig_fun>
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d16a      	bne.n	8008cd4 <__gethex+0x11e>
 8008bfe:	9a01      	ldr	r2, [sp, #4]
 8008c00:	9903      	ldr	r1, [sp, #12]
 8008c02:	4638      	mov	r0, r7
 8008c04:	f001 f8f4 	bl	8009df0 <strncmp>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d166      	bne.n	8008cda <__gethex+0x124>
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	5cf8      	ldrb	r0, [r7, r3]
 8008c10:	18fe      	adds	r6, r7, r3
 8008c12:	f7ff ffbb 	bl	8008b8c <__hexdig_fun>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d062      	beq.n	8008ce0 <__gethex+0x12a>
 8008c1a:	4633      	mov	r3, r6
 8008c1c:	7818      	ldrb	r0, [r3, #0]
 8008c1e:	2830      	cmp	r0, #48	; 0x30
 8008c20:	461f      	mov	r7, r3
 8008c22:	f103 0301 	add.w	r3, r3, #1
 8008c26:	d0f9      	beq.n	8008c1c <__gethex+0x66>
 8008c28:	f7ff ffb0 	bl	8008b8c <__hexdig_fun>
 8008c2c:	fab0 f580 	clz	r5, r0
 8008c30:	096d      	lsrs	r5, r5, #5
 8008c32:	4634      	mov	r4, r6
 8008c34:	f04f 0b01 	mov.w	fp, #1
 8008c38:	463a      	mov	r2, r7
 8008c3a:	4616      	mov	r6, r2
 8008c3c:	3201      	adds	r2, #1
 8008c3e:	7830      	ldrb	r0, [r6, #0]
 8008c40:	f7ff ffa4 	bl	8008b8c <__hexdig_fun>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d1f8      	bne.n	8008c3a <__gethex+0x84>
 8008c48:	9a01      	ldr	r2, [sp, #4]
 8008c4a:	9903      	ldr	r1, [sp, #12]
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f001 f8cf 	bl	8009df0 <strncmp>
 8008c52:	b950      	cbnz	r0, 8008c6a <__gethex+0xb4>
 8008c54:	b954      	cbnz	r4, 8008c6c <__gethex+0xb6>
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	18f4      	adds	r4, r6, r3
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	4616      	mov	r6, r2
 8008c5e:	3201      	adds	r2, #1
 8008c60:	7830      	ldrb	r0, [r6, #0]
 8008c62:	f7ff ff93 	bl	8008b8c <__hexdig_fun>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d1f8      	bne.n	8008c5c <__gethex+0xa6>
 8008c6a:	b10c      	cbz	r4, 8008c70 <__gethex+0xba>
 8008c6c:	1ba4      	subs	r4, r4, r6
 8008c6e:	00a4      	lsls	r4, r4, #2
 8008c70:	7833      	ldrb	r3, [r6, #0]
 8008c72:	2b50      	cmp	r3, #80	; 0x50
 8008c74:	d001      	beq.n	8008c7a <__gethex+0xc4>
 8008c76:	2b70      	cmp	r3, #112	; 0x70
 8008c78:	d140      	bne.n	8008cfc <__gethex+0x146>
 8008c7a:	7873      	ldrb	r3, [r6, #1]
 8008c7c:	2b2b      	cmp	r3, #43	; 0x2b
 8008c7e:	d031      	beq.n	8008ce4 <__gethex+0x12e>
 8008c80:	2b2d      	cmp	r3, #45	; 0x2d
 8008c82:	d033      	beq.n	8008cec <__gethex+0x136>
 8008c84:	1c71      	adds	r1, r6, #1
 8008c86:	f04f 0900 	mov.w	r9, #0
 8008c8a:	7808      	ldrb	r0, [r1, #0]
 8008c8c:	f7ff ff7e 	bl	8008b8c <__hexdig_fun>
 8008c90:	1e43      	subs	r3, r0, #1
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b18      	cmp	r3, #24
 8008c96:	d831      	bhi.n	8008cfc <__gethex+0x146>
 8008c98:	f1a0 0210 	sub.w	r2, r0, #16
 8008c9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ca0:	f7ff ff74 	bl	8008b8c <__hexdig_fun>
 8008ca4:	1e43      	subs	r3, r0, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b18      	cmp	r3, #24
 8008caa:	d922      	bls.n	8008cf2 <__gethex+0x13c>
 8008cac:	f1b9 0f00 	cmp.w	r9, #0
 8008cb0:	d000      	beq.n	8008cb4 <__gethex+0xfe>
 8008cb2:	4252      	negs	r2, r2
 8008cb4:	4414      	add	r4, r2
 8008cb6:	f8ca 1000 	str.w	r1, [sl]
 8008cba:	b30d      	cbz	r5, 8008d00 <__gethex+0x14a>
 8008cbc:	f1bb 0f00 	cmp.w	fp, #0
 8008cc0:	bf0c      	ite	eq
 8008cc2:	2706      	moveq	r7, #6
 8008cc4:	2700      	movne	r7, #0
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	b00b      	add	sp, #44	; 0x2c
 8008cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cce:	f10b 0b01 	add.w	fp, fp, #1
 8008cd2:	e78a      	b.n	8008bea <__gethex+0x34>
 8008cd4:	2500      	movs	r5, #0
 8008cd6:	462c      	mov	r4, r5
 8008cd8:	e7ae      	b.n	8008c38 <__gethex+0x82>
 8008cda:	463e      	mov	r6, r7
 8008cdc:	2501      	movs	r5, #1
 8008cde:	e7c7      	b.n	8008c70 <__gethex+0xba>
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	e7fb      	b.n	8008cdc <__gethex+0x126>
 8008ce4:	f04f 0900 	mov.w	r9, #0
 8008ce8:	1cb1      	adds	r1, r6, #2
 8008cea:	e7ce      	b.n	8008c8a <__gethex+0xd4>
 8008cec:	f04f 0901 	mov.w	r9, #1
 8008cf0:	e7fa      	b.n	8008ce8 <__gethex+0x132>
 8008cf2:	230a      	movs	r3, #10
 8008cf4:	fb03 0202 	mla	r2, r3, r2, r0
 8008cf8:	3a10      	subs	r2, #16
 8008cfa:	e7cf      	b.n	8008c9c <__gethex+0xe6>
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	e7da      	b.n	8008cb6 <__gethex+0x100>
 8008d00:	1bf3      	subs	r3, r6, r7
 8008d02:	3b01      	subs	r3, #1
 8008d04:	4629      	mov	r1, r5
 8008d06:	2b07      	cmp	r3, #7
 8008d08:	dc49      	bgt.n	8008d9e <__gethex+0x1e8>
 8008d0a:	9802      	ldr	r0, [sp, #8]
 8008d0c:	f000 fa58 	bl	80091c0 <_Balloc>
 8008d10:	9b01      	ldr	r3, [sp, #4]
 8008d12:	f100 0914 	add.w	r9, r0, #20
 8008d16:	f04f 0b00 	mov.w	fp, #0
 8008d1a:	f1c3 0301 	rsb	r3, r3, #1
 8008d1e:	4605      	mov	r5, r0
 8008d20:	f8cd 9010 	str.w	r9, [sp, #16]
 8008d24:	46da      	mov	sl, fp
 8008d26:	9308      	str	r3, [sp, #32]
 8008d28:	42b7      	cmp	r7, r6
 8008d2a:	d33b      	bcc.n	8008da4 <__gethex+0x1ee>
 8008d2c:	9804      	ldr	r0, [sp, #16]
 8008d2e:	f840 ab04 	str.w	sl, [r0], #4
 8008d32:	eba0 0009 	sub.w	r0, r0, r9
 8008d36:	1080      	asrs	r0, r0, #2
 8008d38:	6128      	str	r0, [r5, #16]
 8008d3a:	0147      	lsls	r7, r0, #5
 8008d3c:	4650      	mov	r0, sl
 8008d3e:	f000 fb03 	bl	8009348 <__hi0bits>
 8008d42:	f8d8 6000 	ldr.w	r6, [r8]
 8008d46:	1a3f      	subs	r7, r7, r0
 8008d48:	42b7      	cmp	r7, r6
 8008d4a:	dd64      	ble.n	8008e16 <__gethex+0x260>
 8008d4c:	1bbf      	subs	r7, r7, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	4628      	mov	r0, r5
 8008d52:	f000 fe13 	bl	800997c <__any_on>
 8008d56:	4682      	mov	sl, r0
 8008d58:	b178      	cbz	r0, 8008d7a <__gethex+0x1c4>
 8008d5a:	1e7b      	subs	r3, r7, #1
 8008d5c:	1159      	asrs	r1, r3, #5
 8008d5e:	f003 021f 	and.w	r2, r3, #31
 8008d62:	f04f 0a01 	mov.w	sl, #1
 8008d66:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d6a:	fa0a f202 	lsl.w	r2, sl, r2
 8008d6e:	420a      	tst	r2, r1
 8008d70:	d003      	beq.n	8008d7a <__gethex+0x1c4>
 8008d72:	4553      	cmp	r3, sl
 8008d74:	dc46      	bgt.n	8008e04 <__gethex+0x24e>
 8008d76:	f04f 0a02 	mov.w	sl, #2
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f7ff fecb 	bl	8008b18 <rshift>
 8008d82:	443c      	add	r4, r7
 8008d84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	da52      	bge.n	8008e32 <__gethex+0x27c>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	9802      	ldr	r0, [sp, #8]
 8008d90:	f000 fa4a 	bl	8009228 <_Bfree>
 8008d94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d96:	2300      	movs	r3, #0
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	27a3      	movs	r7, #163	; 0xa3
 8008d9c:	e793      	b.n	8008cc6 <__gethex+0x110>
 8008d9e:	3101      	adds	r1, #1
 8008da0:	105b      	asrs	r3, r3, #1
 8008da2:	e7b0      	b.n	8008d06 <__gethex+0x150>
 8008da4:	1e73      	subs	r3, r6, #1
 8008da6:	9305      	str	r3, [sp, #20]
 8008da8:	9a07      	ldr	r2, [sp, #28]
 8008daa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d018      	beq.n	8008de4 <__gethex+0x22e>
 8008db2:	f1bb 0f20 	cmp.w	fp, #32
 8008db6:	d107      	bne.n	8008dc8 <__gethex+0x212>
 8008db8:	9b04      	ldr	r3, [sp, #16]
 8008dba:	f8c3 a000 	str.w	sl, [r3]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	f04f 0a00 	mov.w	sl, #0
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	46d3      	mov	fp, sl
 8008dc8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008dcc:	f7ff fede 	bl	8008b8c <__hexdig_fun>
 8008dd0:	f000 000f 	and.w	r0, r0, #15
 8008dd4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008dd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008ddc:	f10b 0b04 	add.w	fp, fp, #4
 8008de0:	9b05      	ldr	r3, [sp, #20]
 8008de2:	e00d      	b.n	8008e00 <__gethex+0x24a>
 8008de4:	9b05      	ldr	r3, [sp, #20]
 8008de6:	9a08      	ldr	r2, [sp, #32]
 8008de8:	4413      	add	r3, r2
 8008dea:	42bb      	cmp	r3, r7
 8008dec:	d3e1      	bcc.n	8008db2 <__gethex+0x1fc>
 8008dee:	4618      	mov	r0, r3
 8008df0:	9a01      	ldr	r2, [sp, #4]
 8008df2:	9903      	ldr	r1, [sp, #12]
 8008df4:	9309      	str	r3, [sp, #36]	; 0x24
 8008df6:	f000 fffb 	bl	8009df0 <strncmp>
 8008dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d1d8      	bne.n	8008db2 <__gethex+0x1fc>
 8008e00:	461e      	mov	r6, r3
 8008e02:	e791      	b.n	8008d28 <__gethex+0x172>
 8008e04:	1eb9      	subs	r1, r7, #2
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 fdb8 	bl	800997c <__any_on>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d0b2      	beq.n	8008d76 <__gethex+0x1c0>
 8008e10:	f04f 0a03 	mov.w	sl, #3
 8008e14:	e7b1      	b.n	8008d7a <__gethex+0x1c4>
 8008e16:	da09      	bge.n	8008e2c <__gethex+0x276>
 8008e18:	1bf7      	subs	r7, r6, r7
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	463a      	mov	r2, r7
 8008e1e:	9802      	ldr	r0, [sp, #8]
 8008e20:	f000 fbce 	bl	80095c0 <__lshift>
 8008e24:	1be4      	subs	r4, r4, r7
 8008e26:	4605      	mov	r5, r0
 8008e28:	f100 0914 	add.w	r9, r0, #20
 8008e2c:	f04f 0a00 	mov.w	sl, #0
 8008e30:	e7a8      	b.n	8008d84 <__gethex+0x1ce>
 8008e32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e36:	42a0      	cmp	r0, r4
 8008e38:	dd6a      	ble.n	8008f10 <__gethex+0x35a>
 8008e3a:	1b04      	subs	r4, r0, r4
 8008e3c:	42a6      	cmp	r6, r4
 8008e3e:	dc2e      	bgt.n	8008e9e <__gethex+0x2e8>
 8008e40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d022      	beq.n	8008e8e <__gethex+0x2d8>
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d024      	beq.n	8008e96 <__gethex+0x2e0>
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d115      	bne.n	8008e7c <__gethex+0x2c6>
 8008e50:	42a6      	cmp	r6, r4
 8008e52:	d113      	bne.n	8008e7c <__gethex+0x2c6>
 8008e54:	2e01      	cmp	r6, #1
 8008e56:	dc0b      	bgt.n	8008e70 <__gethex+0x2ba>
 8008e58:	9a06      	ldr	r2, [sp, #24]
 8008e5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	2301      	movs	r3, #1
 8008e62:	612b      	str	r3, [r5, #16]
 8008e64:	f8c9 3000 	str.w	r3, [r9]
 8008e68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e6a:	2762      	movs	r7, #98	; 0x62
 8008e6c:	601d      	str	r5, [r3, #0]
 8008e6e:	e72a      	b.n	8008cc6 <__gethex+0x110>
 8008e70:	1e71      	subs	r1, r6, #1
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 fd82 	bl	800997c <__any_on>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1ed      	bne.n	8008e58 <__gethex+0x2a2>
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	9802      	ldr	r0, [sp, #8]
 8008e80:	f000 f9d2 	bl	8009228 <_Bfree>
 8008e84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e86:	2300      	movs	r3, #0
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	2750      	movs	r7, #80	; 0x50
 8008e8c:	e71b      	b.n	8008cc6 <__gethex+0x110>
 8008e8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0e1      	beq.n	8008e58 <__gethex+0x2a2>
 8008e94:	e7f2      	b.n	8008e7c <__gethex+0x2c6>
 8008e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1dd      	bne.n	8008e58 <__gethex+0x2a2>
 8008e9c:	e7ee      	b.n	8008e7c <__gethex+0x2c6>
 8008e9e:	1e67      	subs	r7, r4, #1
 8008ea0:	f1ba 0f00 	cmp.w	sl, #0
 8008ea4:	d131      	bne.n	8008f0a <__gethex+0x354>
 8008ea6:	b127      	cbz	r7, 8008eb2 <__gethex+0x2fc>
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f000 fd66 	bl	800997c <__any_on>
 8008eb0:	4682      	mov	sl, r0
 8008eb2:	117a      	asrs	r2, r7, #5
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	f007 071f 	and.w	r7, r7, #31
 8008eba:	fa03 f707 	lsl.w	r7, r3, r7
 8008ebe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	421f      	tst	r7, r3
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	bf18      	it	ne
 8008eca:	f04a 0a02 	orrne.w	sl, sl, #2
 8008ece:	1b36      	subs	r6, r6, r4
 8008ed0:	f7ff fe22 	bl	8008b18 <rshift>
 8008ed4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008ed8:	2702      	movs	r7, #2
 8008eda:	f1ba 0f00 	cmp.w	sl, #0
 8008ede:	d048      	beq.n	8008f72 <__gethex+0x3bc>
 8008ee0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d015      	beq.n	8008f14 <__gethex+0x35e>
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d017      	beq.n	8008f1c <__gethex+0x366>
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d109      	bne.n	8008f04 <__gethex+0x34e>
 8008ef0:	f01a 0f02 	tst.w	sl, #2
 8008ef4:	d006      	beq.n	8008f04 <__gethex+0x34e>
 8008ef6:	f8d9 3000 	ldr.w	r3, [r9]
 8008efa:	ea4a 0a03 	orr.w	sl, sl, r3
 8008efe:	f01a 0f01 	tst.w	sl, #1
 8008f02:	d10e      	bne.n	8008f22 <__gethex+0x36c>
 8008f04:	f047 0710 	orr.w	r7, r7, #16
 8008f08:	e033      	b.n	8008f72 <__gethex+0x3bc>
 8008f0a:	f04f 0a01 	mov.w	sl, #1
 8008f0e:	e7d0      	b.n	8008eb2 <__gethex+0x2fc>
 8008f10:	2701      	movs	r7, #1
 8008f12:	e7e2      	b.n	8008eda <__gethex+0x324>
 8008f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f16:	f1c3 0301 	rsb	r3, r3, #1
 8008f1a:	9315      	str	r3, [sp, #84]	; 0x54
 8008f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0f0      	beq.n	8008f04 <__gethex+0x34e>
 8008f22:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008f26:	f105 0314 	add.w	r3, r5, #20
 8008f2a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008f2e:	eb03 010a 	add.w	r1, r3, sl
 8008f32:	f04f 0c00 	mov.w	ip, #0
 8008f36:	4618      	mov	r0, r3
 8008f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f40:	d01c      	beq.n	8008f7c <__gethex+0x3c6>
 8008f42:	3201      	adds	r2, #1
 8008f44:	6002      	str	r2, [r0, #0]
 8008f46:	2f02      	cmp	r7, #2
 8008f48:	f105 0314 	add.w	r3, r5, #20
 8008f4c:	d138      	bne.n	8008fc0 <__gethex+0x40a>
 8008f4e:	f8d8 2000 	ldr.w	r2, [r8]
 8008f52:	3a01      	subs	r2, #1
 8008f54:	42b2      	cmp	r2, r6
 8008f56:	d10a      	bne.n	8008f6e <__gethex+0x3b8>
 8008f58:	1171      	asrs	r1, r6, #5
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f006 061f 	and.w	r6, r6, #31
 8008f60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f64:	fa02 f606 	lsl.w	r6, r2, r6
 8008f68:	421e      	tst	r6, r3
 8008f6a:	bf18      	it	ne
 8008f6c:	4617      	movne	r7, r2
 8008f6e:	f047 0720 	orr.w	r7, r7, #32
 8008f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f74:	601d      	str	r5, [r3, #0]
 8008f76:	9b06      	ldr	r3, [sp, #24]
 8008f78:	601c      	str	r4, [r3, #0]
 8008f7a:	e6a4      	b.n	8008cc6 <__gethex+0x110>
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f82:	d8d8      	bhi.n	8008f36 <__gethex+0x380>
 8008f84:	68ab      	ldr	r3, [r5, #8]
 8008f86:	4599      	cmp	r9, r3
 8008f88:	db12      	blt.n	8008fb0 <__gethex+0x3fa>
 8008f8a:	6869      	ldr	r1, [r5, #4]
 8008f8c:	9802      	ldr	r0, [sp, #8]
 8008f8e:	3101      	adds	r1, #1
 8008f90:	f000 f916 	bl	80091c0 <_Balloc>
 8008f94:	692a      	ldr	r2, [r5, #16]
 8008f96:	3202      	adds	r2, #2
 8008f98:	f105 010c 	add.w	r1, r5, #12
 8008f9c:	4683      	mov	fp, r0
 8008f9e:	0092      	lsls	r2, r2, #2
 8008fa0:	300c      	adds	r0, #12
 8008fa2:	f7fd fa4d 	bl	8006440 <memcpy>
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	9802      	ldr	r0, [sp, #8]
 8008faa:	f000 f93d 	bl	8009228 <_Bfree>
 8008fae:	465d      	mov	r5, fp
 8008fb0:	692b      	ldr	r3, [r5, #16]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008fb8:	612a      	str	r2, [r5, #16]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	615a      	str	r2, [r3, #20]
 8008fbe:	e7c2      	b.n	8008f46 <__gethex+0x390>
 8008fc0:	692a      	ldr	r2, [r5, #16]
 8008fc2:	454a      	cmp	r2, r9
 8008fc4:	dd0b      	ble.n	8008fde <__gethex+0x428>
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f7ff fda5 	bl	8008b18 <rshift>
 8008fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fd2:	3401      	adds	r4, #1
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	f6ff aed9 	blt.w	8008d8c <__gethex+0x1d6>
 8008fda:	2701      	movs	r7, #1
 8008fdc:	e7c7      	b.n	8008f6e <__gethex+0x3b8>
 8008fde:	f016 061f 	ands.w	r6, r6, #31
 8008fe2:	d0fa      	beq.n	8008fda <__gethex+0x424>
 8008fe4:	449a      	add	sl, r3
 8008fe6:	f1c6 0620 	rsb	r6, r6, #32
 8008fea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008fee:	f000 f9ab 	bl	8009348 <__hi0bits>
 8008ff2:	42b0      	cmp	r0, r6
 8008ff4:	dbe7      	blt.n	8008fc6 <__gethex+0x410>
 8008ff6:	e7f0      	b.n	8008fda <__gethex+0x424>

08008ff8 <L_shift>:
 8008ff8:	f1c2 0208 	rsb	r2, r2, #8
 8008ffc:	0092      	lsls	r2, r2, #2
 8008ffe:	b570      	push	{r4, r5, r6, lr}
 8009000:	f1c2 0620 	rsb	r6, r2, #32
 8009004:	6843      	ldr	r3, [r0, #4]
 8009006:	6804      	ldr	r4, [r0, #0]
 8009008:	fa03 f506 	lsl.w	r5, r3, r6
 800900c:	432c      	orrs	r4, r5
 800900e:	40d3      	lsrs	r3, r2
 8009010:	6004      	str	r4, [r0, #0]
 8009012:	f840 3f04 	str.w	r3, [r0, #4]!
 8009016:	4288      	cmp	r0, r1
 8009018:	d3f4      	bcc.n	8009004 <L_shift+0xc>
 800901a:	bd70      	pop	{r4, r5, r6, pc}

0800901c <__match>:
 800901c:	b530      	push	{r4, r5, lr}
 800901e:	6803      	ldr	r3, [r0, #0]
 8009020:	3301      	adds	r3, #1
 8009022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009026:	b914      	cbnz	r4, 800902e <__match+0x12>
 8009028:	6003      	str	r3, [r0, #0]
 800902a:	2001      	movs	r0, #1
 800902c:	bd30      	pop	{r4, r5, pc}
 800902e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009032:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009036:	2d19      	cmp	r5, #25
 8009038:	bf98      	it	ls
 800903a:	3220      	addls	r2, #32
 800903c:	42a2      	cmp	r2, r4
 800903e:	d0f0      	beq.n	8009022 <__match+0x6>
 8009040:	2000      	movs	r0, #0
 8009042:	e7f3      	b.n	800902c <__match+0x10>

08009044 <__hexnan>:
 8009044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	680b      	ldr	r3, [r1, #0]
 800904a:	6801      	ldr	r1, [r0, #0]
 800904c:	115f      	asrs	r7, r3, #5
 800904e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009052:	f013 031f 	ands.w	r3, r3, #31
 8009056:	b087      	sub	sp, #28
 8009058:	bf18      	it	ne
 800905a:	3704      	addne	r7, #4
 800905c:	2500      	movs	r5, #0
 800905e:	1f3e      	subs	r6, r7, #4
 8009060:	4682      	mov	sl, r0
 8009062:	4690      	mov	r8, r2
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	f847 5c04 	str.w	r5, [r7, #-4]
 800906a:	46b1      	mov	r9, r6
 800906c:	4634      	mov	r4, r6
 800906e:	9502      	str	r5, [sp, #8]
 8009070:	46ab      	mov	fp, r5
 8009072:	784a      	ldrb	r2, [r1, #1]
 8009074:	1c4b      	adds	r3, r1, #1
 8009076:	9303      	str	r3, [sp, #12]
 8009078:	b342      	cbz	r2, 80090cc <__hexnan+0x88>
 800907a:	4610      	mov	r0, r2
 800907c:	9105      	str	r1, [sp, #20]
 800907e:	9204      	str	r2, [sp, #16]
 8009080:	f7ff fd84 	bl	8008b8c <__hexdig_fun>
 8009084:	2800      	cmp	r0, #0
 8009086:	d143      	bne.n	8009110 <__hexnan+0xcc>
 8009088:	9a04      	ldr	r2, [sp, #16]
 800908a:	9905      	ldr	r1, [sp, #20]
 800908c:	2a20      	cmp	r2, #32
 800908e:	d818      	bhi.n	80090c2 <__hexnan+0x7e>
 8009090:	9b02      	ldr	r3, [sp, #8]
 8009092:	459b      	cmp	fp, r3
 8009094:	dd13      	ble.n	80090be <__hexnan+0x7a>
 8009096:	454c      	cmp	r4, r9
 8009098:	d206      	bcs.n	80090a8 <__hexnan+0x64>
 800909a:	2d07      	cmp	r5, #7
 800909c:	dc04      	bgt.n	80090a8 <__hexnan+0x64>
 800909e:	462a      	mov	r2, r5
 80090a0:	4649      	mov	r1, r9
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7ff ffa8 	bl	8008ff8 <L_shift>
 80090a8:	4544      	cmp	r4, r8
 80090aa:	d944      	bls.n	8009136 <__hexnan+0xf2>
 80090ac:	2300      	movs	r3, #0
 80090ae:	f1a4 0904 	sub.w	r9, r4, #4
 80090b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80090b6:	f8cd b008 	str.w	fp, [sp, #8]
 80090ba:	464c      	mov	r4, r9
 80090bc:	461d      	mov	r5, r3
 80090be:	9903      	ldr	r1, [sp, #12]
 80090c0:	e7d7      	b.n	8009072 <__hexnan+0x2e>
 80090c2:	2a29      	cmp	r2, #41	; 0x29
 80090c4:	d14a      	bne.n	800915c <__hexnan+0x118>
 80090c6:	3102      	adds	r1, #2
 80090c8:	f8ca 1000 	str.w	r1, [sl]
 80090cc:	f1bb 0f00 	cmp.w	fp, #0
 80090d0:	d044      	beq.n	800915c <__hexnan+0x118>
 80090d2:	454c      	cmp	r4, r9
 80090d4:	d206      	bcs.n	80090e4 <__hexnan+0xa0>
 80090d6:	2d07      	cmp	r5, #7
 80090d8:	dc04      	bgt.n	80090e4 <__hexnan+0xa0>
 80090da:	462a      	mov	r2, r5
 80090dc:	4649      	mov	r1, r9
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff ff8a 	bl	8008ff8 <L_shift>
 80090e4:	4544      	cmp	r4, r8
 80090e6:	d928      	bls.n	800913a <__hexnan+0xf6>
 80090e8:	4643      	mov	r3, r8
 80090ea:	f854 2b04 	ldr.w	r2, [r4], #4
 80090ee:	f843 2b04 	str.w	r2, [r3], #4
 80090f2:	42a6      	cmp	r6, r4
 80090f4:	d2f9      	bcs.n	80090ea <__hexnan+0xa6>
 80090f6:	2200      	movs	r2, #0
 80090f8:	f843 2b04 	str.w	r2, [r3], #4
 80090fc:	429e      	cmp	r6, r3
 80090fe:	d2fb      	bcs.n	80090f8 <__hexnan+0xb4>
 8009100:	6833      	ldr	r3, [r6, #0]
 8009102:	b91b      	cbnz	r3, 800910c <__hexnan+0xc8>
 8009104:	4546      	cmp	r6, r8
 8009106:	d127      	bne.n	8009158 <__hexnan+0x114>
 8009108:	2301      	movs	r3, #1
 800910a:	6033      	str	r3, [r6, #0]
 800910c:	2005      	movs	r0, #5
 800910e:	e026      	b.n	800915e <__hexnan+0x11a>
 8009110:	3501      	adds	r5, #1
 8009112:	2d08      	cmp	r5, #8
 8009114:	f10b 0b01 	add.w	fp, fp, #1
 8009118:	dd06      	ble.n	8009128 <__hexnan+0xe4>
 800911a:	4544      	cmp	r4, r8
 800911c:	d9cf      	bls.n	80090be <__hexnan+0x7a>
 800911e:	2300      	movs	r3, #0
 8009120:	f844 3c04 	str.w	r3, [r4, #-4]
 8009124:	2501      	movs	r5, #1
 8009126:	3c04      	subs	r4, #4
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	f000 000f 	and.w	r0, r0, #15
 800912e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009132:	6020      	str	r0, [r4, #0]
 8009134:	e7c3      	b.n	80090be <__hexnan+0x7a>
 8009136:	2508      	movs	r5, #8
 8009138:	e7c1      	b.n	80090be <__hexnan+0x7a>
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0df      	beq.n	8009100 <__hexnan+0xbc>
 8009140:	f04f 32ff 	mov.w	r2, #4294967295
 8009144:	f1c3 0320 	rsb	r3, r3, #32
 8009148:	fa22 f303 	lsr.w	r3, r2, r3
 800914c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009150:	401a      	ands	r2, r3
 8009152:	f847 2c04 	str.w	r2, [r7, #-4]
 8009156:	e7d3      	b.n	8009100 <__hexnan+0xbc>
 8009158:	3e04      	subs	r6, #4
 800915a:	e7d1      	b.n	8009100 <__hexnan+0xbc>
 800915c:	2004      	movs	r0, #4
 800915e:	b007      	add	sp, #28
 8009160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009164 <__locale_ctype_ptr_l>:
 8009164:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009168:	4770      	bx	lr

0800916a <__localeconv_l>:
 800916a:	30f0      	adds	r0, #240	; 0xf0
 800916c:	4770      	bx	lr
	...

08009170 <_localeconv_r>:
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <_localeconv_r+0x14>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6a18      	ldr	r0, [r3, #32]
 8009176:	4b04      	ldr	r3, [pc, #16]	; (8009188 <_localeconv_r+0x18>)
 8009178:	2800      	cmp	r0, #0
 800917a:	bf08      	it	eq
 800917c:	4618      	moveq	r0, r3
 800917e:	30f0      	adds	r0, #240	; 0xf0
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20000024 	.word	0x20000024
 8009188:	20000088 	.word	0x20000088

0800918c <malloc>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <malloc+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f000 bc71 	b.w	8009a78 <_malloc_r>
 8009196:	bf00      	nop
 8009198:	20000024 	.word	0x20000024

0800919c <__ascii_mbtowc>:
 800919c:	b082      	sub	sp, #8
 800919e:	b901      	cbnz	r1, 80091a2 <__ascii_mbtowc+0x6>
 80091a0:	a901      	add	r1, sp, #4
 80091a2:	b142      	cbz	r2, 80091b6 <__ascii_mbtowc+0x1a>
 80091a4:	b14b      	cbz	r3, 80091ba <__ascii_mbtowc+0x1e>
 80091a6:	7813      	ldrb	r3, [r2, #0]
 80091a8:	600b      	str	r3, [r1, #0]
 80091aa:	7812      	ldrb	r2, [r2, #0]
 80091ac:	1c10      	adds	r0, r2, #0
 80091ae:	bf18      	it	ne
 80091b0:	2001      	movne	r0, #1
 80091b2:	b002      	add	sp, #8
 80091b4:	4770      	bx	lr
 80091b6:	4610      	mov	r0, r2
 80091b8:	e7fb      	b.n	80091b2 <__ascii_mbtowc+0x16>
 80091ba:	f06f 0001 	mvn.w	r0, #1
 80091be:	e7f8      	b.n	80091b2 <__ascii_mbtowc+0x16>

080091c0 <_Balloc>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091c4:	4604      	mov	r4, r0
 80091c6:	460e      	mov	r6, r1
 80091c8:	b93d      	cbnz	r5, 80091da <_Balloc+0x1a>
 80091ca:	2010      	movs	r0, #16
 80091cc:	f7ff ffde 	bl	800918c <malloc>
 80091d0:	6260      	str	r0, [r4, #36]	; 0x24
 80091d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091d6:	6005      	str	r5, [r0, #0]
 80091d8:	60c5      	str	r5, [r0, #12]
 80091da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80091dc:	68eb      	ldr	r3, [r5, #12]
 80091de:	b183      	cbz	r3, 8009202 <_Balloc+0x42>
 80091e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80091e8:	b9b8      	cbnz	r0, 800921a <_Balloc+0x5a>
 80091ea:	2101      	movs	r1, #1
 80091ec:	fa01 f506 	lsl.w	r5, r1, r6
 80091f0:	1d6a      	adds	r2, r5, #5
 80091f2:	0092      	lsls	r2, r2, #2
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 fbe2 	bl	80099be <_calloc_r>
 80091fa:	b160      	cbz	r0, 8009216 <_Balloc+0x56>
 80091fc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009200:	e00e      	b.n	8009220 <_Balloc+0x60>
 8009202:	2221      	movs	r2, #33	; 0x21
 8009204:	2104      	movs	r1, #4
 8009206:	4620      	mov	r0, r4
 8009208:	f000 fbd9 	bl	80099be <_calloc_r>
 800920c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800920e:	60e8      	str	r0, [r5, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e4      	bne.n	80091e0 <_Balloc+0x20>
 8009216:	2000      	movs	r0, #0
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	6802      	ldr	r2, [r0, #0]
 800921c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009220:	2300      	movs	r3, #0
 8009222:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009226:	e7f7      	b.n	8009218 <_Balloc+0x58>

08009228 <_Bfree>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800922c:	4606      	mov	r6, r0
 800922e:	460d      	mov	r5, r1
 8009230:	b93c      	cbnz	r4, 8009242 <_Bfree+0x1a>
 8009232:	2010      	movs	r0, #16
 8009234:	f7ff ffaa 	bl	800918c <malloc>
 8009238:	6270      	str	r0, [r6, #36]	; 0x24
 800923a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800923e:	6004      	str	r4, [r0, #0]
 8009240:	60c4      	str	r4, [r0, #12]
 8009242:	b13d      	cbz	r5, 8009254 <_Bfree+0x2c>
 8009244:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009246:	686a      	ldr	r2, [r5, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800924e:	6029      	str	r1, [r5, #0]
 8009250:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009254:	bd70      	pop	{r4, r5, r6, pc}

08009256 <__multadd>:
 8009256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800925a:	690d      	ldr	r5, [r1, #16]
 800925c:	461f      	mov	r7, r3
 800925e:	4606      	mov	r6, r0
 8009260:	460c      	mov	r4, r1
 8009262:	f101 0c14 	add.w	ip, r1, #20
 8009266:	2300      	movs	r3, #0
 8009268:	f8dc 0000 	ldr.w	r0, [ip]
 800926c:	b281      	uxth	r1, r0
 800926e:	fb02 7101 	mla	r1, r2, r1, r7
 8009272:	0c0f      	lsrs	r7, r1, #16
 8009274:	0c00      	lsrs	r0, r0, #16
 8009276:	fb02 7000 	mla	r0, r2, r0, r7
 800927a:	b289      	uxth	r1, r1
 800927c:	3301      	adds	r3, #1
 800927e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009282:	429d      	cmp	r5, r3
 8009284:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009288:	f84c 1b04 	str.w	r1, [ip], #4
 800928c:	dcec      	bgt.n	8009268 <__multadd+0x12>
 800928e:	b1d7      	cbz	r7, 80092c6 <__multadd+0x70>
 8009290:	68a3      	ldr	r3, [r4, #8]
 8009292:	42ab      	cmp	r3, r5
 8009294:	dc12      	bgt.n	80092bc <__multadd+0x66>
 8009296:	6861      	ldr	r1, [r4, #4]
 8009298:	4630      	mov	r0, r6
 800929a:	3101      	adds	r1, #1
 800929c:	f7ff ff90 	bl	80091c0 <_Balloc>
 80092a0:	6922      	ldr	r2, [r4, #16]
 80092a2:	3202      	adds	r2, #2
 80092a4:	f104 010c 	add.w	r1, r4, #12
 80092a8:	4680      	mov	r8, r0
 80092aa:	0092      	lsls	r2, r2, #2
 80092ac:	300c      	adds	r0, #12
 80092ae:	f7fd f8c7 	bl	8006440 <memcpy>
 80092b2:	4621      	mov	r1, r4
 80092b4:	4630      	mov	r0, r6
 80092b6:	f7ff ffb7 	bl	8009228 <_Bfree>
 80092ba:	4644      	mov	r4, r8
 80092bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092c0:	3501      	adds	r5, #1
 80092c2:	615f      	str	r7, [r3, #20]
 80092c4:	6125      	str	r5, [r4, #16]
 80092c6:	4620      	mov	r0, r4
 80092c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080092cc <__s2b>:
 80092cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d0:	460c      	mov	r4, r1
 80092d2:	4615      	mov	r5, r2
 80092d4:	461f      	mov	r7, r3
 80092d6:	2209      	movs	r2, #9
 80092d8:	3308      	adds	r3, #8
 80092da:	4606      	mov	r6, r0
 80092dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80092e0:	2100      	movs	r1, #0
 80092e2:	2201      	movs	r2, #1
 80092e4:	429a      	cmp	r2, r3
 80092e6:	db20      	blt.n	800932a <__s2b+0x5e>
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff ff69 	bl	80091c0 <_Balloc>
 80092ee:	9b08      	ldr	r3, [sp, #32]
 80092f0:	6143      	str	r3, [r0, #20]
 80092f2:	2d09      	cmp	r5, #9
 80092f4:	f04f 0301 	mov.w	r3, #1
 80092f8:	6103      	str	r3, [r0, #16]
 80092fa:	dd19      	ble.n	8009330 <__s2b+0x64>
 80092fc:	f104 0809 	add.w	r8, r4, #9
 8009300:	46c1      	mov	r9, r8
 8009302:	442c      	add	r4, r5
 8009304:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009308:	4601      	mov	r1, r0
 800930a:	3b30      	subs	r3, #48	; 0x30
 800930c:	220a      	movs	r2, #10
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ffa1 	bl	8009256 <__multadd>
 8009314:	45a1      	cmp	r9, r4
 8009316:	d1f5      	bne.n	8009304 <__s2b+0x38>
 8009318:	eb08 0405 	add.w	r4, r8, r5
 800931c:	3c08      	subs	r4, #8
 800931e:	1b2d      	subs	r5, r5, r4
 8009320:	1963      	adds	r3, r4, r5
 8009322:	42bb      	cmp	r3, r7
 8009324:	db07      	blt.n	8009336 <__s2b+0x6a>
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932a:	0052      	lsls	r2, r2, #1
 800932c:	3101      	adds	r1, #1
 800932e:	e7d9      	b.n	80092e4 <__s2b+0x18>
 8009330:	340a      	adds	r4, #10
 8009332:	2509      	movs	r5, #9
 8009334:	e7f3      	b.n	800931e <__s2b+0x52>
 8009336:	f814 3b01 	ldrb.w	r3, [r4], #1
 800933a:	4601      	mov	r1, r0
 800933c:	3b30      	subs	r3, #48	; 0x30
 800933e:	220a      	movs	r2, #10
 8009340:	4630      	mov	r0, r6
 8009342:	f7ff ff88 	bl	8009256 <__multadd>
 8009346:	e7eb      	b.n	8009320 <__s2b+0x54>

08009348 <__hi0bits>:
 8009348:	0c02      	lsrs	r2, r0, #16
 800934a:	0412      	lsls	r2, r2, #16
 800934c:	4603      	mov	r3, r0
 800934e:	b9b2      	cbnz	r2, 800937e <__hi0bits+0x36>
 8009350:	0403      	lsls	r3, r0, #16
 8009352:	2010      	movs	r0, #16
 8009354:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009358:	bf04      	itt	eq
 800935a:	021b      	lsleq	r3, r3, #8
 800935c:	3008      	addeq	r0, #8
 800935e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009362:	bf04      	itt	eq
 8009364:	011b      	lsleq	r3, r3, #4
 8009366:	3004      	addeq	r0, #4
 8009368:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800936c:	bf04      	itt	eq
 800936e:	009b      	lsleq	r3, r3, #2
 8009370:	3002      	addeq	r0, #2
 8009372:	2b00      	cmp	r3, #0
 8009374:	db06      	blt.n	8009384 <__hi0bits+0x3c>
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	d503      	bpl.n	8009382 <__hi0bits+0x3a>
 800937a:	3001      	adds	r0, #1
 800937c:	4770      	bx	lr
 800937e:	2000      	movs	r0, #0
 8009380:	e7e8      	b.n	8009354 <__hi0bits+0xc>
 8009382:	2020      	movs	r0, #32
 8009384:	4770      	bx	lr

08009386 <__lo0bits>:
 8009386:	6803      	ldr	r3, [r0, #0]
 8009388:	f013 0207 	ands.w	r2, r3, #7
 800938c:	4601      	mov	r1, r0
 800938e:	d00b      	beq.n	80093a8 <__lo0bits+0x22>
 8009390:	07da      	lsls	r2, r3, #31
 8009392:	d423      	bmi.n	80093dc <__lo0bits+0x56>
 8009394:	0798      	lsls	r0, r3, #30
 8009396:	bf49      	itett	mi
 8009398:	085b      	lsrmi	r3, r3, #1
 800939a:	089b      	lsrpl	r3, r3, #2
 800939c:	2001      	movmi	r0, #1
 800939e:	600b      	strmi	r3, [r1, #0]
 80093a0:	bf5c      	itt	pl
 80093a2:	600b      	strpl	r3, [r1, #0]
 80093a4:	2002      	movpl	r0, #2
 80093a6:	4770      	bx	lr
 80093a8:	b298      	uxth	r0, r3
 80093aa:	b9a8      	cbnz	r0, 80093d8 <__lo0bits+0x52>
 80093ac:	0c1b      	lsrs	r3, r3, #16
 80093ae:	2010      	movs	r0, #16
 80093b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093b4:	bf04      	itt	eq
 80093b6:	0a1b      	lsreq	r3, r3, #8
 80093b8:	3008      	addeq	r0, #8
 80093ba:	071a      	lsls	r2, r3, #28
 80093bc:	bf04      	itt	eq
 80093be:	091b      	lsreq	r3, r3, #4
 80093c0:	3004      	addeq	r0, #4
 80093c2:	079a      	lsls	r2, r3, #30
 80093c4:	bf04      	itt	eq
 80093c6:	089b      	lsreq	r3, r3, #2
 80093c8:	3002      	addeq	r0, #2
 80093ca:	07da      	lsls	r2, r3, #31
 80093cc:	d402      	bmi.n	80093d4 <__lo0bits+0x4e>
 80093ce:	085b      	lsrs	r3, r3, #1
 80093d0:	d006      	beq.n	80093e0 <__lo0bits+0x5a>
 80093d2:	3001      	adds	r0, #1
 80093d4:	600b      	str	r3, [r1, #0]
 80093d6:	4770      	bx	lr
 80093d8:	4610      	mov	r0, r2
 80093da:	e7e9      	b.n	80093b0 <__lo0bits+0x2a>
 80093dc:	2000      	movs	r0, #0
 80093de:	4770      	bx	lr
 80093e0:	2020      	movs	r0, #32
 80093e2:	4770      	bx	lr

080093e4 <__i2b>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	460c      	mov	r4, r1
 80093e8:	2101      	movs	r1, #1
 80093ea:	f7ff fee9 	bl	80091c0 <_Balloc>
 80093ee:	2201      	movs	r2, #1
 80093f0:	6144      	str	r4, [r0, #20]
 80093f2:	6102      	str	r2, [r0, #16]
 80093f4:	bd10      	pop	{r4, pc}

080093f6 <__multiply>:
 80093f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fa:	4614      	mov	r4, r2
 80093fc:	690a      	ldr	r2, [r1, #16]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	429a      	cmp	r2, r3
 8009402:	bfb8      	it	lt
 8009404:	460b      	movlt	r3, r1
 8009406:	4688      	mov	r8, r1
 8009408:	bfbc      	itt	lt
 800940a:	46a0      	movlt	r8, r4
 800940c:	461c      	movlt	r4, r3
 800940e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009412:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800941a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800941e:	eb07 0609 	add.w	r6, r7, r9
 8009422:	42b3      	cmp	r3, r6
 8009424:	bfb8      	it	lt
 8009426:	3101      	addlt	r1, #1
 8009428:	f7ff feca 	bl	80091c0 <_Balloc>
 800942c:	f100 0514 	add.w	r5, r0, #20
 8009430:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009434:	462b      	mov	r3, r5
 8009436:	2200      	movs	r2, #0
 8009438:	4573      	cmp	r3, lr
 800943a:	d316      	bcc.n	800946a <__multiply+0x74>
 800943c:	f104 0214 	add.w	r2, r4, #20
 8009440:	f108 0114 	add.w	r1, r8, #20
 8009444:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009448:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	9b00      	ldr	r3, [sp, #0]
 8009450:	9201      	str	r2, [sp, #4]
 8009452:	4293      	cmp	r3, r2
 8009454:	d80c      	bhi.n	8009470 <__multiply+0x7a>
 8009456:	2e00      	cmp	r6, #0
 8009458:	dd03      	ble.n	8009462 <__multiply+0x6c>
 800945a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800945e:	2b00      	cmp	r3, #0
 8009460:	d05d      	beq.n	800951e <__multiply+0x128>
 8009462:	6106      	str	r6, [r0, #16]
 8009464:	b003      	add	sp, #12
 8009466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946a:	f843 2b04 	str.w	r2, [r3], #4
 800946e:	e7e3      	b.n	8009438 <__multiply+0x42>
 8009470:	f8b2 b000 	ldrh.w	fp, [r2]
 8009474:	f1bb 0f00 	cmp.w	fp, #0
 8009478:	d023      	beq.n	80094c2 <__multiply+0xcc>
 800947a:	4689      	mov	r9, r1
 800947c:	46ac      	mov	ip, r5
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	f859 4b04 	ldr.w	r4, [r9], #4
 8009486:	f8dc a000 	ldr.w	sl, [ip]
 800948a:	b2a3      	uxth	r3, r4
 800948c:	fa1f fa8a 	uxth.w	sl, sl
 8009490:	fb0b a303 	mla	r3, fp, r3, sl
 8009494:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009498:	f8dc 4000 	ldr.w	r4, [ip]
 800949c:	4443      	add	r3, r8
 800949e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80094a2:	fb0b 840a 	mla	r4, fp, sl, r8
 80094a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80094aa:	46e2      	mov	sl, ip
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094b2:	454f      	cmp	r7, r9
 80094b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80094b8:	f84a 3b04 	str.w	r3, [sl], #4
 80094bc:	d82b      	bhi.n	8009516 <__multiply+0x120>
 80094be:	f8cc 8004 	str.w	r8, [ip, #4]
 80094c2:	9b01      	ldr	r3, [sp, #4]
 80094c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80094c8:	3204      	adds	r2, #4
 80094ca:	f1ba 0f00 	cmp.w	sl, #0
 80094ce:	d020      	beq.n	8009512 <__multiply+0x11c>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	4689      	mov	r9, r1
 80094d4:	46a8      	mov	r8, r5
 80094d6:	f04f 0b00 	mov.w	fp, #0
 80094da:	f8b9 c000 	ldrh.w	ip, [r9]
 80094de:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80094e2:	fb0a 440c 	mla	r4, sl, ip, r4
 80094e6:	445c      	add	r4, fp
 80094e8:	46c4      	mov	ip, r8
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094f0:	f84c 3b04 	str.w	r3, [ip], #4
 80094f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80094f8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80094fc:	0c1b      	lsrs	r3, r3, #16
 80094fe:	fb0a b303 	mla	r3, sl, r3, fp
 8009502:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009506:	454f      	cmp	r7, r9
 8009508:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800950c:	d805      	bhi.n	800951a <__multiply+0x124>
 800950e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009512:	3504      	adds	r5, #4
 8009514:	e79b      	b.n	800944e <__multiply+0x58>
 8009516:	46d4      	mov	ip, sl
 8009518:	e7b3      	b.n	8009482 <__multiply+0x8c>
 800951a:	46e0      	mov	r8, ip
 800951c:	e7dd      	b.n	80094da <__multiply+0xe4>
 800951e:	3e01      	subs	r6, #1
 8009520:	e799      	b.n	8009456 <__multiply+0x60>
	...

08009524 <__pow5mult>:
 8009524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009528:	4615      	mov	r5, r2
 800952a:	f012 0203 	ands.w	r2, r2, #3
 800952e:	4606      	mov	r6, r0
 8009530:	460f      	mov	r7, r1
 8009532:	d007      	beq.n	8009544 <__pow5mult+0x20>
 8009534:	3a01      	subs	r2, #1
 8009536:	4c21      	ldr	r4, [pc, #132]	; (80095bc <__pow5mult+0x98>)
 8009538:	2300      	movs	r3, #0
 800953a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800953e:	f7ff fe8a 	bl	8009256 <__multadd>
 8009542:	4607      	mov	r7, r0
 8009544:	10ad      	asrs	r5, r5, #2
 8009546:	d035      	beq.n	80095b4 <__pow5mult+0x90>
 8009548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800954a:	b93c      	cbnz	r4, 800955c <__pow5mult+0x38>
 800954c:	2010      	movs	r0, #16
 800954e:	f7ff fe1d 	bl	800918c <malloc>
 8009552:	6270      	str	r0, [r6, #36]	; 0x24
 8009554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009558:	6004      	str	r4, [r0, #0]
 800955a:	60c4      	str	r4, [r0, #12]
 800955c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009564:	b94c      	cbnz	r4, 800957a <__pow5mult+0x56>
 8009566:	f240 2171 	movw	r1, #625	; 0x271
 800956a:	4630      	mov	r0, r6
 800956c:	f7ff ff3a 	bl	80093e4 <__i2b>
 8009570:	2300      	movs	r3, #0
 8009572:	f8c8 0008 	str.w	r0, [r8, #8]
 8009576:	4604      	mov	r4, r0
 8009578:	6003      	str	r3, [r0, #0]
 800957a:	f04f 0800 	mov.w	r8, #0
 800957e:	07eb      	lsls	r3, r5, #31
 8009580:	d50a      	bpl.n	8009598 <__pow5mult+0x74>
 8009582:	4639      	mov	r1, r7
 8009584:	4622      	mov	r2, r4
 8009586:	4630      	mov	r0, r6
 8009588:	f7ff ff35 	bl	80093f6 <__multiply>
 800958c:	4639      	mov	r1, r7
 800958e:	4681      	mov	r9, r0
 8009590:	4630      	mov	r0, r6
 8009592:	f7ff fe49 	bl	8009228 <_Bfree>
 8009596:	464f      	mov	r7, r9
 8009598:	106d      	asrs	r5, r5, #1
 800959a:	d00b      	beq.n	80095b4 <__pow5mult+0x90>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	b938      	cbnz	r0, 80095b0 <__pow5mult+0x8c>
 80095a0:	4622      	mov	r2, r4
 80095a2:	4621      	mov	r1, r4
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff ff26 	bl	80093f6 <__multiply>
 80095aa:	6020      	str	r0, [r4, #0]
 80095ac:	f8c0 8000 	str.w	r8, [r0]
 80095b0:	4604      	mov	r4, r0
 80095b2:	e7e4      	b.n	800957e <__pow5mult+0x5a>
 80095b4:	4638      	mov	r0, r7
 80095b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ba:	bf00      	nop
 80095bc:	0800b720 	.word	0x0800b720

080095c0 <__lshift>:
 80095c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	460c      	mov	r4, r1
 80095c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	6849      	ldr	r1, [r1, #4]
 80095ce:	eb0a 0903 	add.w	r9, sl, r3
 80095d2:	68a3      	ldr	r3, [r4, #8]
 80095d4:	4607      	mov	r7, r0
 80095d6:	4616      	mov	r6, r2
 80095d8:	f109 0501 	add.w	r5, r9, #1
 80095dc:	42ab      	cmp	r3, r5
 80095de:	db32      	blt.n	8009646 <__lshift+0x86>
 80095e0:	4638      	mov	r0, r7
 80095e2:	f7ff fded 	bl	80091c0 <_Balloc>
 80095e6:	2300      	movs	r3, #0
 80095e8:	4680      	mov	r8, r0
 80095ea:	f100 0114 	add.w	r1, r0, #20
 80095ee:	461a      	mov	r2, r3
 80095f0:	4553      	cmp	r3, sl
 80095f2:	db2b      	blt.n	800964c <__lshift+0x8c>
 80095f4:	6920      	ldr	r0, [r4, #16]
 80095f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095fa:	f104 0314 	add.w	r3, r4, #20
 80095fe:	f016 021f 	ands.w	r2, r6, #31
 8009602:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009606:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800960a:	d025      	beq.n	8009658 <__lshift+0x98>
 800960c:	f1c2 0e20 	rsb	lr, r2, #32
 8009610:	2000      	movs	r0, #0
 8009612:	681e      	ldr	r6, [r3, #0]
 8009614:	468a      	mov	sl, r1
 8009616:	4096      	lsls	r6, r2
 8009618:	4330      	orrs	r0, r6
 800961a:	f84a 0b04 	str.w	r0, [sl], #4
 800961e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009622:	459c      	cmp	ip, r3
 8009624:	fa20 f00e 	lsr.w	r0, r0, lr
 8009628:	d814      	bhi.n	8009654 <__lshift+0x94>
 800962a:	6048      	str	r0, [r1, #4]
 800962c:	b108      	cbz	r0, 8009632 <__lshift+0x72>
 800962e:	f109 0502 	add.w	r5, r9, #2
 8009632:	3d01      	subs	r5, #1
 8009634:	4638      	mov	r0, r7
 8009636:	f8c8 5010 	str.w	r5, [r8, #16]
 800963a:	4621      	mov	r1, r4
 800963c:	f7ff fdf4 	bl	8009228 <_Bfree>
 8009640:	4640      	mov	r0, r8
 8009642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009646:	3101      	adds	r1, #1
 8009648:	005b      	lsls	r3, r3, #1
 800964a:	e7c7      	b.n	80095dc <__lshift+0x1c>
 800964c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009650:	3301      	adds	r3, #1
 8009652:	e7cd      	b.n	80095f0 <__lshift+0x30>
 8009654:	4651      	mov	r1, sl
 8009656:	e7dc      	b.n	8009612 <__lshift+0x52>
 8009658:	3904      	subs	r1, #4
 800965a:	f853 2b04 	ldr.w	r2, [r3], #4
 800965e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009662:	459c      	cmp	ip, r3
 8009664:	d8f9      	bhi.n	800965a <__lshift+0x9a>
 8009666:	e7e4      	b.n	8009632 <__lshift+0x72>

08009668 <__mcmp>:
 8009668:	6903      	ldr	r3, [r0, #16]
 800966a:	690a      	ldr	r2, [r1, #16]
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	b530      	push	{r4, r5, lr}
 8009670:	d10c      	bne.n	800968c <__mcmp+0x24>
 8009672:	0092      	lsls	r2, r2, #2
 8009674:	3014      	adds	r0, #20
 8009676:	3114      	adds	r1, #20
 8009678:	1884      	adds	r4, r0, r2
 800967a:	4411      	add	r1, r2
 800967c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009680:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009684:	4295      	cmp	r5, r2
 8009686:	d003      	beq.n	8009690 <__mcmp+0x28>
 8009688:	d305      	bcc.n	8009696 <__mcmp+0x2e>
 800968a:	2301      	movs	r3, #1
 800968c:	4618      	mov	r0, r3
 800968e:	bd30      	pop	{r4, r5, pc}
 8009690:	42a0      	cmp	r0, r4
 8009692:	d3f3      	bcc.n	800967c <__mcmp+0x14>
 8009694:	e7fa      	b.n	800968c <__mcmp+0x24>
 8009696:	f04f 33ff 	mov.w	r3, #4294967295
 800969a:	e7f7      	b.n	800968c <__mcmp+0x24>

0800969c <__mdiff>:
 800969c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a0:	460d      	mov	r5, r1
 80096a2:	4607      	mov	r7, r0
 80096a4:	4611      	mov	r1, r2
 80096a6:	4628      	mov	r0, r5
 80096a8:	4614      	mov	r4, r2
 80096aa:	f7ff ffdd 	bl	8009668 <__mcmp>
 80096ae:	1e06      	subs	r6, r0, #0
 80096b0:	d108      	bne.n	80096c4 <__mdiff+0x28>
 80096b2:	4631      	mov	r1, r6
 80096b4:	4638      	mov	r0, r7
 80096b6:	f7ff fd83 	bl	80091c0 <_Balloc>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80096c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c4:	bfa4      	itt	ge
 80096c6:	4623      	movge	r3, r4
 80096c8:	462c      	movge	r4, r5
 80096ca:	4638      	mov	r0, r7
 80096cc:	6861      	ldr	r1, [r4, #4]
 80096ce:	bfa6      	itte	ge
 80096d0:	461d      	movge	r5, r3
 80096d2:	2600      	movge	r6, #0
 80096d4:	2601      	movlt	r6, #1
 80096d6:	f7ff fd73 	bl	80091c0 <_Balloc>
 80096da:	692b      	ldr	r3, [r5, #16]
 80096dc:	60c6      	str	r6, [r0, #12]
 80096de:	6926      	ldr	r6, [r4, #16]
 80096e0:	f105 0914 	add.w	r9, r5, #20
 80096e4:	f104 0214 	add.w	r2, r4, #20
 80096e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80096ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80096f0:	f100 0514 	add.w	r5, r0, #20
 80096f4:	f04f 0e00 	mov.w	lr, #0
 80096f8:	f852 ab04 	ldr.w	sl, [r2], #4
 80096fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8009700:	fa1e f18a 	uxtah	r1, lr, sl
 8009704:	b2a3      	uxth	r3, r4
 8009706:	1ac9      	subs	r1, r1, r3
 8009708:	0c23      	lsrs	r3, r4, #16
 800970a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800970e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009712:	b289      	uxth	r1, r1
 8009714:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009718:	45c8      	cmp	r8, r9
 800971a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800971e:	4694      	mov	ip, r2
 8009720:	f845 3b04 	str.w	r3, [r5], #4
 8009724:	d8e8      	bhi.n	80096f8 <__mdiff+0x5c>
 8009726:	45bc      	cmp	ip, r7
 8009728:	d304      	bcc.n	8009734 <__mdiff+0x98>
 800972a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800972e:	b183      	cbz	r3, 8009752 <__mdiff+0xb6>
 8009730:	6106      	str	r6, [r0, #16]
 8009732:	e7c5      	b.n	80096c0 <__mdiff+0x24>
 8009734:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009738:	fa1e f381 	uxtah	r3, lr, r1
 800973c:	141a      	asrs	r2, r3, #16
 800973e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009742:	b29b      	uxth	r3, r3
 8009744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009748:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800974c:	f845 3b04 	str.w	r3, [r5], #4
 8009750:	e7e9      	b.n	8009726 <__mdiff+0x8a>
 8009752:	3e01      	subs	r6, #1
 8009754:	e7e9      	b.n	800972a <__mdiff+0x8e>
	...

08009758 <__ulp>:
 8009758:	4b12      	ldr	r3, [pc, #72]	; (80097a4 <__ulp+0x4c>)
 800975a:	ee10 2a90 	vmov	r2, s1
 800975e:	401a      	ands	r2, r3
 8009760:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009764:	2b00      	cmp	r3, #0
 8009766:	dd04      	ble.n	8009772 <__ulp+0x1a>
 8009768:	2000      	movs	r0, #0
 800976a:	4619      	mov	r1, r3
 800976c:	ec41 0b10 	vmov	d0, r0, r1
 8009770:	4770      	bx	lr
 8009772:	425b      	negs	r3, r3
 8009774:	151b      	asrs	r3, r3, #20
 8009776:	2b13      	cmp	r3, #19
 8009778:	f04f 0000 	mov.w	r0, #0
 800977c:	f04f 0100 	mov.w	r1, #0
 8009780:	dc04      	bgt.n	800978c <__ulp+0x34>
 8009782:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009786:	fa42 f103 	asr.w	r1, r2, r3
 800978a:	e7ef      	b.n	800976c <__ulp+0x14>
 800978c:	3b14      	subs	r3, #20
 800978e:	2b1e      	cmp	r3, #30
 8009790:	f04f 0201 	mov.w	r2, #1
 8009794:	bfda      	itte	le
 8009796:	f1c3 031f 	rsble	r3, r3, #31
 800979a:	fa02 f303 	lslle.w	r3, r2, r3
 800979e:	4613      	movgt	r3, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	e7e3      	b.n	800976c <__ulp+0x14>
 80097a4:	7ff00000 	.word	0x7ff00000

080097a8 <__b2d>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	6905      	ldr	r5, [r0, #16]
 80097ac:	f100 0714 	add.w	r7, r0, #20
 80097b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80097b4:	1f2e      	subs	r6, r5, #4
 80097b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7ff fdc4 	bl	8009348 <__hi0bits>
 80097c0:	f1c0 0320 	rsb	r3, r0, #32
 80097c4:	280a      	cmp	r0, #10
 80097c6:	600b      	str	r3, [r1, #0]
 80097c8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009840 <__b2d+0x98>
 80097cc:	dc14      	bgt.n	80097f8 <__b2d+0x50>
 80097ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80097d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80097d6:	42b7      	cmp	r7, r6
 80097d8:	ea41 030c 	orr.w	r3, r1, ip
 80097dc:	bf34      	ite	cc
 80097de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097e2:	2100      	movcs	r1, #0
 80097e4:	3015      	adds	r0, #21
 80097e6:	fa04 f000 	lsl.w	r0, r4, r0
 80097ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80097ee:	ea40 0201 	orr.w	r2, r0, r1
 80097f2:	ec43 2b10 	vmov	d0, r2, r3
 80097f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f8:	42b7      	cmp	r7, r6
 80097fa:	bf3a      	itte	cc
 80097fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8009800:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009804:	2100      	movcs	r1, #0
 8009806:	380b      	subs	r0, #11
 8009808:	d015      	beq.n	8009836 <__b2d+0x8e>
 800980a:	4084      	lsls	r4, r0
 800980c:	f1c0 0520 	rsb	r5, r0, #32
 8009810:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009814:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009818:	42be      	cmp	r6, r7
 800981a:	fa21 fc05 	lsr.w	ip, r1, r5
 800981e:	ea44 030c 	orr.w	r3, r4, ip
 8009822:	bf8c      	ite	hi
 8009824:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009828:	2400      	movls	r4, #0
 800982a:	fa01 f000 	lsl.w	r0, r1, r0
 800982e:	40ec      	lsrs	r4, r5
 8009830:	ea40 0204 	orr.w	r2, r0, r4
 8009834:	e7dd      	b.n	80097f2 <__b2d+0x4a>
 8009836:	ea44 030c 	orr.w	r3, r4, ip
 800983a:	460a      	mov	r2, r1
 800983c:	e7d9      	b.n	80097f2 <__b2d+0x4a>
 800983e:	bf00      	nop
 8009840:	3ff00000 	.word	0x3ff00000

08009844 <__d2b>:
 8009844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009848:	460e      	mov	r6, r1
 800984a:	2101      	movs	r1, #1
 800984c:	ec59 8b10 	vmov	r8, r9, d0
 8009850:	4615      	mov	r5, r2
 8009852:	f7ff fcb5 	bl	80091c0 <_Balloc>
 8009856:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800985a:	4607      	mov	r7, r0
 800985c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009860:	bb34      	cbnz	r4, 80098b0 <__d2b+0x6c>
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	f1b8 0300 	subs.w	r3, r8, #0
 8009868:	d027      	beq.n	80098ba <__d2b+0x76>
 800986a:	a802      	add	r0, sp, #8
 800986c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009870:	f7ff fd89 	bl	8009386 <__lo0bits>
 8009874:	9900      	ldr	r1, [sp, #0]
 8009876:	b1f0      	cbz	r0, 80098b6 <__d2b+0x72>
 8009878:	9a01      	ldr	r2, [sp, #4]
 800987a:	f1c0 0320 	rsb	r3, r0, #32
 800987e:	fa02 f303 	lsl.w	r3, r2, r3
 8009882:	430b      	orrs	r3, r1
 8009884:	40c2      	lsrs	r2, r0
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	9201      	str	r2, [sp, #4]
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	2b00      	cmp	r3, #0
 8009890:	bf14      	ite	ne
 8009892:	2102      	movne	r1, #2
 8009894:	2101      	moveq	r1, #1
 8009896:	6139      	str	r1, [r7, #16]
 8009898:	b1c4      	cbz	r4, 80098cc <__d2b+0x88>
 800989a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800989e:	4404      	add	r4, r0
 80098a0:	6034      	str	r4, [r6, #0]
 80098a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098a6:	6028      	str	r0, [r5, #0]
 80098a8:	4638      	mov	r0, r7
 80098aa:	b003      	add	sp, #12
 80098ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098b4:	e7d5      	b.n	8009862 <__d2b+0x1e>
 80098b6:	6179      	str	r1, [r7, #20]
 80098b8:	e7e7      	b.n	800988a <__d2b+0x46>
 80098ba:	a801      	add	r0, sp, #4
 80098bc:	f7ff fd63 	bl	8009386 <__lo0bits>
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	2101      	movs	r1, #1
 80098c6:	6139      	str	r1, [r7, #16]
 80098c8:	3020      	adds	r0, #32
 80098ca:	e7e5      	b.n	8009898 <__d2b+0x54>
 80098cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80098d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098d4:	6030      	str	r0, [r6, #0]
 80098d6:	6918      	ldr	r0, [r3, #16]
 80098d8:	f7ff fd36 	bl	8009348 <__hi0bits>
 80098dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80098e0:	e7e1      	b.n	80098a6 <__d2b+0x62>

080098e2 <__ratio>:
 80098e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e6:	4688      	mov	r8, r1
 80098e8:	4669      	mov	r1, sp
 80098ea:	4681      	mov	r9, r0
 80098ec:	f7ff ff5c 	bl	80097a8 <__b2d>
 80098f0:	a901      	add	r1, sp, #4
 80098f2:	4640      	mov	r0, r8
 80098f4:	ec57 6b10 	vmov	r6, r7, d0
 80098f8:	f7ff ff56 	bl	80097a8 <__b2d>
 80098fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009900:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009904:	eba3 0c02 	sub.w	ip, r3, r2
 8009908:	e9dd 3200 	ldrd	r3, r2, [sp]
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009912:	ec5b ab10 	vmov	sl, fp, d0
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfce      	itee	gt
 800991a:	463a      	movgt	r2, r7
 800991c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009920:	465a      	movle	r2, fp
 8009922:	4659      	mov	r1, fp
 8009924:	463d      	mov	r5, r7
 8009926:	bfd4      	ite	le
 8009928:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800992c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009930:	4630      	mov	r0, r6
 8009932:	ee10 2a10 	vmov	r2, s0
 8009936:	460b      	mov	r3, r1
 8009938:	4629      	mov	r1, r5
 800993a:	f7f6 ff8f 	bl	800085c <__aeabi_ddiv>
 800993e:	ec41 0b10 	vmov	d0, r0, r1
 8009942:	b003      	add	sp, #12
 8009944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009948 <__copybits>:
 8009948:	3901      	subs	r1, #1
 800994a:	b510      	push	{r4, lr}
 800994c:	1149      	asrs	r1, r1, #5
 800994e:	6914      	ldr	r4, [r2, #16]
 8009950:	3101      	adds	r1, #1
 8009952:	f102 0314 	add.w	r3, r2, #20
 8009956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800995a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800995e:	42a3      	cmp	r3, r4
 8009960:	4602      	mov	r2, r0
 8009962:	d303      	bcc.n	800996c <__copybits+0x24>
 8009964:	2300      	movs	r3, #0
 8009966:	428a      	cmp	r2, r1
 8009968:	d305      	bcc.n	8009976 <__copybits+0x2e>
 800996a:	bd10      	pop	{r4, pc}
 800996c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009970:	f840 2b04 	str.w	r2, [r0], #4
 8009974:	e7f3      	b.n	800995e <__copybits+0x16>
 8009976:	f842 3b04 	str.w	r3, [r2], #4
 800997a:	e7f4      	b.n	8009966 <__copybits+0x1e>

0800997c <__any_on>:
 800997c:	f100 0214 	add.w	r2, r0, #20
 8009980:	6900      	ldr	r0, [r0, #16]
 8009982:	114b      	asrs	r3, r1, #5
 8009984:	4298      	cmp	r0, r3
 8009986:	b510      	push	{r4, lr}
 8009988:	db11      	blt.n	80099ae <__any_on+0x32>
 800998a:	dd0a      	ble.n	80099a2 <__any_on+0x26>
 800998c:	f011 011f 	ands.w	r1, r1, #31
 8009990:	d007      	beq.n	80099a2 <__any_on+0x26>
 8009992:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009996:	fa24 f001 	lsr.w	r0, r4, r1
 800999a:	fa00 f101 	lsl.w	r1, r0, r1
 800999e:	428c      	cmp	r4, r1
 80099a0:	d10b      	bne.n	80099ba <__any_on+0x3e>
 80099a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d803      	bhi.n	80099b2 <__any_on+0x36>
 80099aa:	2000      	movs	r0, #0
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	4603      	mov	r3, r0
 80099b0:	e7f7      	b.n	80099a2 <__any_on+0x26>
 80099b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099b6:	2900      	cmp	r1, #0
 80099b8:	d0f5      	beq.n	80099a6 <__any_on+0x2a>
 80099ba:	2001      	movs	r0, #1
 80099bc:	e7f6      	b.n	80099ac <__any_on+0x30>

080099be <_calloc_r>:
 80099be:	b538      	push	{r3, r4, r5, lr}
 80099c0:	fb02 f401 	mul.w	r4, r2, r1
 80099c4:	4621      	mov	r1, r4
 80099c6:	f000 f857 	bl	8009a78 <_malloc_r>
 80099ca:	4605      	mov	r5, r0
 80099cc:	b118      	cbz	r0, 80099d6 <_calloc_r+0x18>
 80099ce:	4622      	mov	r2, r4
 80099d0:	2100      	movs	r1, #0
 80099d2:	f7fc fd40 	bl	8006456 <memset>
 80099d6:	4628      	mov	r0, r5
 80099d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080099dc <_free_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4605      	mov	r5, r0
 80099e0:	2900      	cmp	r1, #0
 80099e2:	d045      	beq.n	8009a70 <_free_r+0x94>
 80099e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e8:	1f0c      	subs	r4, r1, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bfb8      	it	lt
 80099ee:	18e4      	addlt	r4, r4, r3
 80099f0:	f000 fa36 	bl	8009e60 <__malloc_lock>
 80099f4:	4a1f      	ldr	r2, [pc, #124]	; (8009a74 <_free_r+0x98>)
 80099f6:	6813      	ldr	r3, [r2, #0]
 80099f8:	4610      	mov	r0, r2
 80099fa:	b933      	cbnz	r3, 8009a0a <_free_r+0x2e>
 80099fc:	6063      	str	r3, [r4, #4]
 80099fe:	6014      	str	r4, [r2, #0]
 8009a00:	4628      	mov	r0, r5
 8009a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a06:	f000 ba2c 	b.w	8009e62 <__malloc_unlock>
 8009a0a:	42a3      	cmp	r3, r4
 8009a0c:	d90c      	bls.n	8009a28 <_free_r+0x4c>
 8009a0e:	6821      	ldr	r1, [r4, #0]
 8009a10:	1862      	adds	r2, r4, r1
 8009a12:	4293      	cmp	r3, r2
 8009a14:	bf04      	itt	eq
 8009a16:	681a      	ldreq	r2, [r3, #0]
 8009a18:	685b      	ldreq	r3, [r3, #4]
 8009a1a:	6063      	str	r3, [r4, #4]
 8009a1c:	bf04      	itt	eq
 8009a1e:	1852      	addeq	r2, r2, r1
 8009a20:	6022      	streq	r2, [r4, #0]
 8009a22:	6004      	str	r4, [r0, #0]
 8009a24:	e7ec      	b.n	8009a00 <_free_r+0x24>
 8009a26:	4613      	mov	r3, r2
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	b10a      	cbz	r2, 8009a30 <_free_r+0x54>
 8009a2c:	42a2      	cmp	r2, r4
 8009a2e:	d9fa      	bls.n	8009a26 <_free_r+0x4a>
 8009a30:	6819      	ldr	r1, [r3, #0]
 8009a32:	1858      	adds	r0, r3, r1
 8009a34:	42a0      	cmp	r0, r4
 8009a36:	d10b      	bne.n	8009a50 <_free_r+0x74>
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	4401      	add	r1, r0
 8009a3c:	1858      	adds	r0, r3, r1
 8009a3e:	4282      	cmp	r2, r0
 8009a40:	6019      	str	r1, [r3, #0]
 8009a42:	d1dd      	bne.n	8009a00 <_free_r+0x24>
 8009a44:	6810      	ldr	r0, [r2, #0]
 8009a46:	6852      	ldr	r2, [r2, #4]
 8009a48:	605a      	str	r2, [r3, #4]
 8009a4a:	4401      	add	r1, r0
 8009a4c:	6019      	str	r1, [r3, #0]
 8009a4e:	e7d7      	b.n	8009a00 <_free_r+0x24>
 8009a50:	d902      	bls.n	8009a58 <_free_r+0x7c>
 8009a52:	230c      	movs	r3, #12
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	e7d3      	b.n	8009a00 <_free_r+0x24>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	1821      	adds	r1, r4, r0
 8009a5c:	428a      	cmp	r2, r1
 8009a5e:	bf04      	itt	eq
 8009a60:	6811      	ldreq	r1, [r2, #0]
 8009a62:	6852      	ldreq	r2, [r2, #4]
 8009a64:	6062      	str	r2, [r4, #4]
 8009a66:	bf04      	itt	eq
 8009a68:	1809      	addeq	r1, r1, r0
 8009a6a:	6021      	streq	r1, [r4, #0]
 8009a6c:	605c      	str	r4, [r3, #4]
 8009a6e:	e7c7      	b.n	8009a00 <_free_r+0x24>
 8009a70:	bd38      	pop	{r3, r4, r5, pc}
 8009a72:	bf00      	nop
 8009a74:	20000330 	.word	0x20000330

08009a78 <_malloc_r>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	1ccd      	adds	r5, r1, #3
 8009a7c:	f025 0503 	bic.w	r5, r5, #3
 8009a80:	3508      	adds	r5, #8
 8009a82:	2d0c      	cmp	r5, #12
 8009a84:	bf38      	it	cc
 8009a86:	250c      	movcc	r5, #12
 8009a88:	2d00      	cmp	r5, #0
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	db01      	blt.n	8009a92 <_malloc_r+0x1a>
 8009a8e:	42a9      	cmp	r1, r5
 8009a90:	d903      	bls.n	8009a9a <_malloc_r+0x22>
 8009a92:	230c      	movs	r3, #12
 8009a94:	6033      	str	r3, [r6, #0]
 8009a96:	2000      	movs	r0, #0
 8009a98:	bd70      	pop	{r4, r5, r6, pc}
 8009a9a:	f000 f9e1 	bl	8009e60 <__malloc_lock>
 8009a9e:	4a21      	ldr	r2, [pc, #132]	; (8009b24 <_malloc_r+0xac>)
 8009aa0:	6814      	ldr	r4, [r2, #0]
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	b991      	cbnz	r1, 8009acc <_malloc_r+0x54>
 8009aa6:	4c20      	ldr	r4, [pc, #128]	; (8009b28 <_malloc_r+0xb0>)
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	b91b      	cbnz	r3, 8009ab4 <_malloc_r+0x3c>
 8009aac:	4630      	mov	r0, r6
 8009aae:	f000 f98f 	bl	8009dd0 <_sbrk_r>
 8009ab2:	6020      	str	r0, [r4, #0]
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f000 f98a 	bl	8009dd0 <_sbrk_r>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d124      	bne.n	8009b0a <_malloc_r+0x92>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	6033      	str	r3, [r6, #0]
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f000 f9cc 	bl	8009e62 <__malloc_unlock>
 8009aca:	e7e4      	b.n	8009a96 <_malloc_r+0x1e>
 8009acc:	680b      	ldr	r3, [r1, #0]
 8009ace:	1b5b      	subs	r3, r3, r5
 8009ad0:	d418      	bmi.n	8009b04 <_malloc_r+0x8c>
 8009ad2:	2b0b      	cmp	r3, #11
 8009ad4:	d90f      	bls.n	8009af6 <_malloc_r+0x7e>
 8009ad6:	600b      	str	r3, [r1, #0]
 8009ad8:	50cd      	str	r5, [r1, r3]
 8009ada:	18cc      	adds	r4, r1, r3
 8009adc:	4630      	mov	r0, r6
 8009ade:	f000 f9c0 	bl	8009e62 <__malloc_unlock>
 8009ae2:	f104 000b 	add.w	r0, r4, #11
 8009ae6:	1d23      	adds	r3, r4, #4
 8009ae8:	f020 0007 	bic.w	r0, r0, #7
 8009aec:	1ac3      	subs	r3, r0, r3
 8009aee:	d0d3      	beq.n	8009a98 <_malloc_r+0x20>
 8009af0:	425a      	negs	r2, r3
 8009af2:	50e2      	str	r2, [r4, r3]
 8009af4:	e7d0      	b.n	8009a98 <_malloc_r+0x20>
 8009af6:	428c      	cmp	r4, r1
 8009af8:	684b      	ldr	r3, [r1, #4]
 8009afa:	bf16      	itet	ne
 8009afc:	6063      	strne	r3, [r4, #4]
 8009afe:	6013      	streq	r3, [r2, #0]
 8009b00:	460c      	movne	r4, r1
 8009b02:	e7eb      	b.n	8009adc <_malloc_r+0x64>
 8009b04:	460c      	mov	r4, r1
 8009b06:	6849      	ldr	r1, [r1, #4]
 8009b08:	e7cc      	b.n	8009aa4 <_malloc_r+0x2c>
 8009b0a:	1cc4      	adds	r4, r0, #3
 8009b0c:	f024 0403 	bic.w	r4, r4, #3
 8009b10:	42a0      	cmp	r0, r4
 8009b12:	d005      	beq.n	8009b20 <_malloc_r+0xa8>
 8009b14:	1a21      	subs	r1, r4, r0
 8009b16:	4630      	mov	r0, r6
 8009b18:	f000 f95a 	bl	8009dd0 <_sbrk_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d0cf      	beq.n	8009ac0 <_malloc_r+0x48>
 8009b20:	6025      	str	r5, [r4, #0]
 8009b22:	e7db      	b.n	8009adc <_malloc_r+0x64>
 8009b24:	20000330 	.word	0x20000330
 8009b28:	20000334 	.word	0x20000334

08009b2c <__ssputs_r>:
 8009b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b30:	688e      	ldr	r6, [r1, #8]
 8009b32:	429e      	cmp	r6, r3
 8009b34:	4682      	mov	sl, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	4690      	mov	r8, r2
 8009b3a:	4699      	mov	r9, r3
 8009b3c:	d837      	bhi.n	8009bae <__ssputs_r+0x82>
 8009b3e:	898a      	ldrh	r2, [r1, #12]
 8009b40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b44:	d031      	beq.n	8009baa <__ssputs_r+0x7e>
 8009b46:	6825      	ldr	r5, [r4, #0]
 8009b48:	6909      	ldr	r1, [r1, #16]
 8009b4a:	1a6f      	subs	r7, r5, r1
 8009b4c:	6965      	ldr	r5, [r4, #20]
 8009b4e:	2302      	movs	r3, #2
 8009b50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b54:	fb95 f5f3 	sdiv	r5, r5, r3
 8009b58:	f109 0301 	add.w	r3, r9, #1
 8009b5c:	443b      	add	r3, r7
 8009b5e:	429d      	cmp	r5, r3
 8009b60:	bf38      	it	cc
 8009b62:	461d      	movcc	r5, r3
 8009b64:	0553      	lsls	r3, r2, #21
 8009b66:	d530      	bpl.n	8009bca <__ssputs_r+0x9e>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7ff ff85 	bl	8009a78 <_malloc_r>
 8009b6e:	4606      	mov	r6, r0
 8009b70:	b950      	cbnz	r0, 8009b88 <__ssputs_r+0x5c>
 8009b72:	230c      	movs	r3, #12
 8009b74:	f8ca 3000 	str.w	r3, [sl]
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b7e:	81a3      	strh	r3, [r4, #12]
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b88:	463a      	mov	r2, r7
 8009b8a:	6921      	ldr	r1, [r4, #16]
 8009b8c:	f7fc fc58 	bl	8006440 <memcpy>
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9a:	81a3      	strh	r3, [r4, #12]
 8009b9c:	6126      	str	r6, [r4, #16]
 8009b9e:	6165      	str	r5, [r4, #20]
 8009ba0:	443e      	add	r6, r7
 8009ba2:	1bed      	subs	r5, r5, r7
 8009ba4:	6026      	str	r6, [r4, #0]
 8009ba6:	60a5      	str	r5, [r4, #8]
 8009ba8:	464e      	mov	r6, r9
 8009baa:	454e      	cmp	r6, r9
 8009bac:	d900      	bls.n	8009bb0 <__ssputs_r+0x84>
 8009bae:	464e      	mov	r6, r9
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	6820      	ldr	r0, [r4, #0]
 8009bb6:	f000 f93a 	bl	8009e2e <memmove>
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	1b9b      	subs	r3, r3, r6
 8009bbe:	60a3      	str	r3, [r4, #8]
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	441e      	add	r6, r3
 8009bc4:	6026      	str	r6, [r4, #0]
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e7dc      	b.n	8009b84 <__ssputs_r+0x58>
 8009bca:	462a      	mov	r2, r5
 8009bcc:	f000 f94a 	bl	8009e64 <_realloc_r>
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d1e2      	bne.n	8009b9c <__ssputs_r+0x70>
 8009bd6:	6921      	ldr	r1, [r4, #16]
 8009bd8:	4650      	mov	r0, sl
 8009bda:	f7ff feff 	bl	80099dc <_free_r>
 8009bde:	e7c8      	b.n	8009b72 <__ssputs_r+0x46>

08009be0 <_svfiprintf_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	461d      	mov	r5, r3
 8009be6:	898b      	ldrh	r3, [r1, #12]
 8009be8:	061f      	lsls	r7, r3, #24
 8009bea:	b09d      	sub	sp, #116	; 0x74
 8009bec:	4680      	mov	r8, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	4616      	mov	r6, r2
 8009bf2:	d50f      	bpl.n	8009c14 <_svfiprintf_r+0x34>
 8009bf4:	690b      	ldr	r3, [r1, #16]
 8009bf6:	b96b      	cbnz	r3, 8009c14 <_svfiprintf_r+0x34>
 8009bf8:	2140      	movs	r1, #64	; 0x40
 8009bfa:	f7ff ff3d 	bl	8009a78 <_malloc_r>
 8009bfe:	6020      	str	r0, [r4, #0]
 8009c00:	6120      	str	r0, [r4, #16]
 8009c02:	b928      	cbnz	r0, 8009c10 <_svfiprintf_r+0x30>
 8009c04:	230c      	movs	r3, #12
 8009c06:	f8c8 3000 	str.w	r3, [r8]
 8009c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0e:	e0c8      	b.n	8009da2 <_svfiprintf_r+0x1c2>
 8009c10:	2340      	movs	r3, #64	; 0x40
 8009c12:	6163      	str	r3, [r4, #20]
 8009c14:	2300      	movs	r3, #0
 8009c16:	9309      	str	r3, [sp, #36]	; 0x24
 8009c18:	2320      	movs	r3, #32
 8009c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c1e:	2330      	movs	r3, #48	; 0x30
 8009c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c24:	9503      	str	r5, [sp, #12]
 8009c26:	f04f 0b01 	mov.w	fp, #1
 8009c2a:	4637      	mov	r7, r6
 8009c2c:	463d      	mov	r5, r7
 8009c2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c32:	b10b      	cbz	r3, 8009c38 <_svfiprintf_r+0x58>
 8009c34:	2b25      	cmp	r3, #37	; 0x25
 8009c36:	d13e      	bne.n	8009cb6 <_svfiprintf_r+0xd6>
 8009c38:	ebb7 0a06 	subs.w	sl, r7, r6
 8009c3c:	d00b      	beq.n	8009c56 <_svfiprintf_r+0x76>
 8009c3e:	4653      	mov	r3, sl
 8009c40:	4632      	mov	r2, r6
 8009c42:	4621      	mov	r1, r4
 8009c44:	4640      	mov	r0, r8
 8009c46:	f7ff ff71 	bl	8009b2c <__ssputs_r>
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	f000 80a4 	beq.w	8009d98 <_svfiprintf_r+0x1b8>
 8009c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c52:	4453      	add	r3, sl
 8009c54:	9309      	str	r3, [sp, #36]	; 0x24
 8009c56:	783b      	ldrb	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 809d 	beq.w	8009d98 <_svfiprintf_r+0x1b8>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	9307      	str	r3, [sp, #28]
 8009c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c70:	931a      	str	r3, [sp, #104]	; 0x68
 8009c72:	462f      	mov	r7, r5
 8009c74:	2205      	movs	r2, #5
 8009c76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009c7a:	4850      	ldr	r0, [pc, #320]	; (8009dbc <_svfiprintf_r+0x1dc>)
 8009c7c:	f7f6 fab8 	bl	80001f0 <memchr>
 8009c80:	9b04      	ldr	r3, [sp, #16]
 8009c82:	b9d0      	cbnz	r0, 8009cba <_svfiprintf_r+0xda>
 8009c84:	06d9      	lsls	r1, r3, #27
 8009c86:	bf44      	itt	mi
 8009c88:	2220      	movmi	r2, #32
 8009c8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c8e:	071a      	lsls	r2, r3, #28
 8009c90:	bf44      	itt	mi
 8009c92:	222b      	movmi	r2, #43	; 0x2b
 8009c94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c98:	782a      	ldrb	r2, [r5, #0]
 8009c9a:	2a2a      	cmp	r2, #42	; 0x2a
 8009c9c:	d015      	beq.n	8009cca <_svfiprintf_r+0xea>
 8009c9e:	9a07      	ldr	r2, [sp, #28]
 8009ca0:	462f      	mov	r7, r5
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	250a      	movs	r5, #10
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cac:	3b30      	subs	r3, #48	; 0x30
 8009cae:	2b09      	cmp	r3, #9
 8009cb0:	d94d      	bls.n	8009d4e <_svfiprintf_r+0x16e>
 8009cb2:	b1b8      	cbz	r0, 8009ce4 <_svfiprintf_r+0x104>
 8009cb4:	e00f      	b.n	8009cd6 <_svfiprintf_r+0xf6>
 8009cb6:	462f      	mov	r7, r5
 8009cb8:	e7b8      	b.n	8009c2c <_svfiprintf_r+0x4c>
 8009cba:	4a40      	ldr	r2, [pc, #256]	; (8009dbc <_svfiprintf_r+0x1dc>)
 8009cbc:	1a80      	subs	r0, r0, r2
 8009cbe:	fa0b f000 	lsl.w	r0, fp, r0
 8009cc2:	4318      	orrs	r0, r3
 8009cc4:	9004      	str	r0, [sp, #16]
 8009cc6:	463d      	mov	r5, r7
 8009cc8:	e7d3      	b.n	8009c72 <_svfiprintf_r+0x92>
 8009cca:	9a03      	ldr	r2, [sp, #12]
 8009ccc:	1d11      	adds	r1, r2, #4
 8009cce:	6812      	ldr	r2, [r2, #0]
 8009cd0:	9103      	str	r1, [sp, #12]
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	db01      	blt.n	8009cda <_svfiprintf_r+0xfa>
 8009cd6:	9207      	str	r2, [sp, #28]
 8009cd8:	e004      	b.n	8009ce4 <_svfiprintf_r+0x104>
 8009cda:	4252      	negs	r2, r2
 8009cdc:	f043 0302 	orr.w	r3, r3, #2
 8009ce0:	9207      	str	r2, [sp, #28]
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	783b      	ldrb	r3, [r7, #0]
 8009ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ce8:	d10c      	bne.n	8009d04 <_svfiprintf_r+0x124>
 8009cea:	787b      	ldrb	r3, [r7, #1]
 8009cec:	2b2a      	cmp	r3, #42	; 0x2a
 8009cee:	d133      	bne.n	8009d58 <_svfiprintf_r+0x178>
 8009cf0:	9b03      	ldr	r3, [sp, #12]
 8009cf2:	1d1a      	adds	r2, r3, #4
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	9203      	str	r2, [sp, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	bfb8      	it	lt
 8009cfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d00:	3702      	adds	r7, #2
 8009d02:	9305      	str	r3, [sp, #20]
 8009d04:	4d2e      	ldr	r5, [pc, #184]	; (8009dc0 <_svfiprintf_r+0x1e0>)
 8009d06:	7839      	ldrb	r1, [r7, #0]
 8009d08:	2203      	movs	r2, #3
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f7f6 fa70 	bl	80001f0 <memchr>
 8009d10:	b138      	cbz	r0, 8009d22 <_svfiprintf_r+0x142>
 8009d12:	2340      	movs	r3, #64	; 0x40
 8009d14:	1b40      	subs	r0, r0, r5
 8009d16:	fa03 f000 	lsl.w	r0, r3, r0
 8009d1a:	9b04      	ldr	r3, [sp, #16]
 8009d1c:	4303      	orrs	r3, r0
 8009d1e:	3701      	adds	r7, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	7839      	ldrb	r1, [r7, #0]
 8009d24:	4827      	ldr	r0, [pc, #156]	; (8009dc4 <_svfiprintf_r+0x1e4>)
 8009d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d2a:	2206      	movs	r2, #6
 8009d2c:	1c7e      	adds	r6, r7, #1
 8009d2e:	f7f6 fa5f 	bl	80001f0 <memchr>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d038      	beq.n	8009da8 <_svfiprintf_r+0x1c8>
 8009d36:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <_svfiprintf_r+0x1e8>)
 8009d38:	bb13      	cbnz	r3, 8009d80 <_svfiprintf_r+0x1a0>
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	3307      	adds	r3, #7
 8009d3e:	f023 0307 	bic.w	r3, r3, #7
 8009d42:	3308      	adds	r3, #8
 8009d44:	9303      	str	r3, [sp, #12]
 8009d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d48:	444b      	add	r3, r9
 8009d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d4c:	e76d      	b.n	8009c2a <_svfiprintf_r+0x4a>
 8009d4e:	fb05 3202 	mla	r2, r5, r2, r3
 8009d52:	2001      	movs	r0, #1
 8009d54:	460f      	mov	r7, r1
 8009d56:	e7a6      	b.n	8009ca6 <_svfiprintf_r+0xc6>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	3701      	adds	r7, #1
 8009d5c:	9305      	str	r3, [sp, #20]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	250a      	movs	r5, #10
 8009d62:	4638      	mov	r0, r7
 8009d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d68:	3a30      	subs	r2, #48	; 0x30
 8009d6a:	2a09      	cmp	r2, #9
 8009d6c:	d903      	bls.n	8009d76 <_svfiprintf_r+0x196>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0c8      	beq.n	8009d04 <_svfiprintf_r+0x124>
 8009d72:	9105      	str	r1, [sp, #20]
 8009d74:	e7c6      	b.n	8009d04 <_svfiprintf_r+0x124>
 8009d76:	fb05 2101 	mla	r1, r5, r1, r2
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	e7f0      	b.n	8009d62 <_svfiprintf_r+0x182>
 8009d80:	ab03      	add	r3, sp, #12
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	4622      	mov	r2, r4
 8009d86:	4b11      	ldr	r3, [pc, #68]	; (8009dcc <_svfiprintf_r+0x1ec>)
 8009d88:	a904      	add	r1, sp, #16
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	f7fc fc00 	bl	8006590 <_printf_float>
 8009d90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d94:	4681      	mov	r9, r0
 8009d96:	d1d6      	bne.n	8009d46 <_svfiprintf_r+0x166>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	065b      	lsls	r3, r3, #25
 8009d9c:	f53f af35 	bmi.w	8009c0a <_svfiprintf_r+0x2a>
 8009da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009da2:	b01d      	add	sp, #116	; 0x74
 8009da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da8:	ab03      	add	r3, sp, #12
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	4622      	mov	r2, r4
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <_svfiprintf_r+0x1ec>)
 8009db0:	a904      	add	r1, sp, #16
 8009db2:	4640      	mov	r0, r8
 8009db4:	f7fc fea2 	bl	8006afc <_printf_i>
 8009db8:	e7ea      	b.n	8009d90 <_svfiprintf_r+0x1b0>
 8009dba:	bf00      	nop
 8009dbc:	0800b72c 	.word	0x0800b72c
 8009dc0:	0800b732 	.word	0x0800b732
 8009dc4:	0800b736 	.word	0x0800b736
 8009dc8:	08006591 	.word	0x08006591
 8009dcc:	08009b2d 	.word	0x08009b2d

08009dd0 <_sbrk_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4c06      	ldr	r4, [pc, #24]	; (8009dec <_sbrk_r+0x1c>)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	f7f8 fe3e 	bl	8002a5c <_sbrk>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_sbrk_r+0x1a>
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_sbrk_r+0x1a>
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	200004fc 	.word	0x200004fc

08009df0 <strncmp>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	b16a      	cbz	r2, 8009e10 <strncmp+0x20>
 8009df4:	3901      	subs	r1, #1
 8009df6:	1884      	adds	r4, r0, r2
 8009df8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009dfc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d103      	bne.n	8009e0c <strncmp+0x1c>
 8009e04:	42a0      	cmp	r0, r4
 8009e06:	d001      	beq.n	8009e0c <strncmp+0x1c>
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1f5      	bne.n	8009df8 <strncmp+0x8>
 8009e0c:	1a98      	subs	r0, r3, r2
 8009e0e:	bd10      	pop	{r4, pc}
 8009e10:	4610      	mov	r0, r2
 8009e12:	e7fc      	b.n	8009e0e <strncmp+0x1e>

08009e14 <__ascii_wctomb>:
 8009e14:	b149      	cbz	r1, 8009e2a <__ascii_wctomb+0x16>
 8009e16:	2aff      	cmp	r2, #255	; 0xff
 8009e18:	bf85      	ittet	hi
 8009e1a:	238a      	movhi	r3, #138	; 0x8a
 8009e1c:	6003      	strhi	r3, [r0, #0]
 8009e1e:	700a      	strbls	r2, [r1, #0]
 8009e20:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e24:	bf98      	it	ls
 8009e26:	2001      	movls	r0, #1
 8009e28:	4770      	bx	lr
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4770      	bx	lr

08009e2e <memmove>:
 8009e2e:	4288      	cmp	r0, r1
 8009e30:	b510      	push	{r4, lr}
 8009e32:	eb01 0302 	add.w	r3, r1, r2
 8009e36:	d807      	bhi.n	8009e48 <memmove+0x1a>
 8009e38:	1e42      	subs	r2, r0, #1
 8009e3a:	4299      	cmp	r1, r3
 8009e3c:	d00a      	beq.n	8009e54 <memmove+0x26>
 8009e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e42:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e46:	e7f8      	b.n	8009e3a <memmove+0xc>
 8009e48:	4283      	cmp	r3, r0
 8009e4a:	d9f5      	bls.n	8009e38 <memmove+0xa>
 8009e4c:	1881      	adds	r1, r0, r2
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	42d3      	cmn	r3, r2
 8009e52:	d100      	bne.n	8009e56 <memmove+0x28>
 8009e54:	bd10      	pop	{r4, pc}
 8009e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e5a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e5e:	e7f7      	b.n	8009e50 <memmove+0x22>

08009e60 <__malloc_lock>:
 8009e60:	4770      	bx	lr

08009e62 <__malloc_unlock>:
 8009e62:	4770      	bx	lr

08009e64 <_realloc_r>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	4607      	mov	r7, r0
 8009e68:	4614      	mov	r4, r2
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	b921      	cbnz	r1, 8009e78 <_realloc_r+0x14>
 8009e6e:	4611      	mov	r1, r2
 8009e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e74:	f7ff be00 	b.w	8009a78 <_malloc_r>
 8009e78:	b922      	cbnz	r2, 8009e84 <_realloc_r+0x20>
 8009e7a:	f7ff fdaf 	bl	80099dc <_free_r>
 8009e7e:	4625      	mov	r5, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e84:	f000 f814 	bl	8009eb0 <_malloc_usable_size_r>
 8009e88:	42a0      	cmp	r0, r4
 8009e8a:	d20f      	bcs.n	8009eac <_realloc_r+0x48>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7ff fdf2 	bl	8009a78 <_malloc_r>
 8009e94:	4605      	mov	r5, r0
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d0f2      	beq.n	8009e80 <_realloc_r+0x1c>
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	f7fc facf 	bl	8006440 <memcpy>
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff fd99 	bl	80099dc <_free_r>
 8009eaa:	e7e9      	b.n	8009e80 <_realloc_r+0x1c>
 8009eac:	4635      	mov	r5, r6
 8009eae:	e7e7      	b.n	8009e80 <_realloc_r+0x1c>

08009eb0 <_malloc_usable_size_r>:
 8009eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb4:	1f18      	subs	r0, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfbc      	itt	lt
 8009eba:	580b      	ldrlt	r3, [r1, r0]
 8009ebc:	18c0      	addlt	r0, r0, r3
 8009ebe:	4770      	bx	lr

08009ec0 <sin>:
 8009ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ec2:	ec51 0b10 	vmov	r0, r1, d0
 8009ec6:	4a20      	ldr	r2, [pc, #128]	; (8009f48 <sin+0x88>)
 8009ec8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	dc07      	bgt.n	8009ee0 <sin+0x20>
 8009ed0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009f40 <sin+0x80>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	f000 fe37 	bl	800ab48 <__kernel_sin>
 8009eda:	ec51 0b10 	vmov	r0, r1, d0
 8009ede:	e007      	b.n	8009ef0 <sin+0x30>
 8009ee0:	4a1a      	ldr	r2, [pc, #104]	; (8009f4c <sin+0x8c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	dd09      	ble.n	8009efa <sin+0x3a>
 8009ee6:	ee10 2a10 	vmov	r2, s0
 8009eea:	460b      	mov	r3, r1
 8009eec:	f7f6 f9d4 	bl	8000298 <__aeabi_dsub>
 8009ef0:	ec41 0b10 	vmov	d0, r0, r1
 8009ef4:	b005      	add	sp, #20
 8009ef6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009efa:	4668      	mov	r0, sp
 8009efc:	f000 f828 	bl	8009f50 <__ieee754_rem_pio2>
 8009f00:	f000 0003 	and.w	r0, r0, #3
 8009f04:	2801      	cmp	r0, #1
 8009f06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f0a:	ed9d 0b00 	vldr	d0, [sp]
 8009f0e:	d004      	beq.n	8009f1a <sin+0x5a>
 8009f10:	2802      	cmp	r0, #2
 8009f12:	d005      	beq.n	8009f20 <sin+0x60>
 8009f14:	b970      	cbnz	r0, 8009f34 <sin+0x74>
 8009f16:	2001      	movs	r0, #1
 8009f18:	e7dd      	b.n	8009ed6 <sin+0x16>
 8009f1a:	f000 fa0d 	bl	800a338 <__kernel_cos>
 8009f1e:	e7dc      	b.n	8009eda <sin+0x1a>
 8009f20:	2001      	movs	r0, #1
 8009f22:	f000 fe11 	bl	800ab48 <__kernel_sin>
 8009f26:	ec53 2b10 	vmov	r2, r3, d0
 8009f2a:	ee10 0a10 	vmov	r0, s0
 8009f2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f32:	e7dd      	b.n	8009ef0 <sin+0x30>
 8009f34:	f000 fa00 	bl	800a338 <__kernel_cos>
 8009f38:	e7f5      	b.n	8009f26 <sin+0x66>
 8009f3a:	bf00      	nop
 8009f3c:	f3af 8000 	nop.w
	...
 8009f48:	3fe921fb 	.word	0x3fe921fb
 8009f4c:	7fefffff 	.word	0x7fefffff

08009f50 <__ieee754_rem_pio2>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	ec57 6b10 	vmov	r6, r7, d0
 8009f58:	4bc3      	ldr	r3, [pc, #780]	; (800a268 <__ieee754_rem_pio2+0x318>)
 8009f5a:	b08d      	sub	sp, #52	; 0x34
 8009f5c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009f60:	4598      	cmp	r8, r3
 8009f62:	4604      	mov	r4, r0
 8009f64:	9704      	str	r7, [sp, #16]
 8009f66:	dc07      	bgt.n	8009f78 <__ieee754_rem_pio2+0x28>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	ed84 0b00 	vstr	d0, [r4]
 8009f70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009f74:	2500      	movs	r5, #0
 8009f76:	e027      	b.n	8009fc8 <__ieee754_rem_pio2+0x78>
 8009f78:	4bbc      	ldr	r3, [pc, #752]	; (800a26c <__ieee754_rem_pio2+0x31c>)
 8009f7a:	4598      	cmp	r8, r3
 8009f7c:	dc75      	bgt.n	800a06a <__ieee754_rem_pio2+0x11a>
 8009f7e:	9b04      	ldr	r3, [sp, #16]
 8009f80:	4dbb      	ldr	r5, [pc, #748]	; (800a270 <__ieee754_rem_pio2+0x320>)
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	ee10 0a10 	vmov	r0, s0
 8009f88:	a3a9      	add	r3, pc, #676	; (adr r3, 800a230 <__ieee754_rem_pio2+0x2e0>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	4639      	mov	r1, r7
 8009f90:	dd36      	ble.n	800a000 <__ieee754_rem_pio2+0xb0>
 8009f92:	f7f6 f981 	bl	8000298 <__aeabi_dsub>
 8009f96:	45a8      	cmp	r8, r5
 8009f98:	4606      	mov	r6, r0
 8009f9a:	460f      	mov	r7, r1
 8009f9c:	d018      	beq.n	8009fd0 <__ieee754_rem_pio2+0x80>
 8009f9e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2e8>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 f978 	bl	8000298 <__aeabi_dsub>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	e9c4 2300 	strd	r2, r3, [r4]
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	f7f6 f970 	bl	8000298 <__aeabi_dsub>
 8009fb8:	a39f      	add	r3, pc, #636	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2e8>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 f96b 	bl	8000298 <__aeabi_dsub>
 8009fc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009fc6:	2501      	movs	r5, #1
 8009fc8:	4628      	mov	r0, r5
 8009fca:	b00d      	add	sp, #52	; 0x34
 8009fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd0:	a39b      	add	r3, pc, #620	; (adr r3, 800a240 <__ieee754_rem_pio2+0x2f0>)
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	f7f6 f95f 	bl	8000298 <__aeabi_dsub>
 8009fda:	a39b      	add	r3, pc, #620	; (adr r3, 800a248 <__ieee754_rem_pio2+0x2f8>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	460f      	mov	r7, r1
 8009fe4:	f7f6 f958 	bl	8000298 <__aeabi_dsub>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	e9c4 2300 	strd	r2, r3, [r4]
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 f950 	bl	8000298 <__aeabi_dsub>
 8009ff8:	a393      	add	r3, pc, #588	; (adr r3, 800a248 <__ieee754_rem_pio2+0x2f8>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	e7de      	b.n	8009fbe <__ieee754_rem_pio2+0x6e>
 800a000:	f7f6 f94c 	bl	800029c <__adddf3>
 800a004:	45a8      	cmp	r8, r5
 800a006:	4606      	mov	r6, r0
 800a008:	460f      	mov	r7, r1
 800a00a:	d016      	beq.n	800a03a <__ieee754_rem_pio2+0xea>
 800a00c:	a38a      	add	r3, pc, #552	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2e8>)
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f7f6 f943 	bl	800029c <__adddf3>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	e9c4 2300 	strd	r2, r3, [r4]
 800a01e:	4630      	mov	r0, r6
 800a020:	4639      	mov	r1, r7
 800a022:	f7f6 f939 	bl	8000298 <__aeabi_dsub>
 800a026:	a384      	add	r3, pc, #528	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2e8>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	f7f6 f936 	bl	800029c <__adddf3>
 800a030:	f04f 35ff 	mov.w	r5, #4294967295
 800a034:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a038:	e7c6      	b.n	8009fc8 <__ieee754_rem_pio2+0x78>
 800a03a:	a381      	add	r3, pc, #516	; (adr r3, 800a240 <__ieee754_rem_pio2+0x2f0>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f7f6 f92c 	bl	800029c <__adddf3>
 800a044:	a380      	add	r3, pc, #512	; (adr r3, 800a248 <__ieee754_rem_pio2+0x2f8>)
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	4606      	mov	r6, r0
 800a04c:	460f      	mov	r7, r1
 800a04e:	f7f6 f925 	bl	800029c <__adddf3>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	e9c4 2300 	strd	r2, r3, [r4]
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 f91b 	bl	8000298 <__aeabi_dsub>
 800a062:	a379      	add	r3, pc, #484	; (adr r3, 800a248 <__ieee754_rem_pio2+0x2f8>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	e7e0      	b.n	800a02c <__ieee754_rem_pio2+0xdc>
 800a06a:	4b82      	ldr	r3, [pc, #520]	; (800a274 <__ieee754_rem_pio2+0x324>)
 800a06c:	4598      	cmp	r8, r3
 800a06e:	f300 80d0 	bgt.w	800a212 <__ieee754_rem_pio2+0x2c2>
 800a072:	f000 fe23 	bl	800acbc <fabs>
 800a076:	ec57 6b10 	vmov	r6, r7, d0
 800a07a:	ee10 0a10 	vmov	r0, s0
 800a07e:	a374      	add	r3, pc, #464	; (adr r3, 800a250 <__ieee754_rem_pio2+0x300>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 fabf 	bl	8000608 <__aeabi_dmul>
 800a08a:	2200      	movs	r2, #0
 800a08c:	4b7a      	ldr	r3, [pc, #488]	; (800a278 <__ieee754_rem_pio2+0x328>)
 800a08e:	f7f6 f905 	bl	800029c <__adddf3>
 800a092:	f7f6 fd69 	bl	8000b68 <__aeabi_d2iz>
 800a096:	4605      	mov	r5, r0
 800a098:	f7f6 fa4c 	bl	8000534 <__aeabi_i2d>
 800a09c:	a364      	add	r3, pc, #400	; (adr r3, 800a230 <__ieee754_rem_pio2+0x2e0>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a6:	f7f6 faaf 	bl	8000608 <__aeabi_dmul>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	f7f6 f8f1 	bl	8000298 <__aeabi_dsub>
 800a0b6:	a360      	add	r3, pc, #384	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2e8>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	4682      	mov	sl, r0
 800a0be:	468b      	mov	fp, r1
 800a0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c4:	f7f6 faa0 	bl	8000608 <__aeabi_dmul>
 800a0c8:	2d1f      	cmp	r5, #31
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460f      	mov	r7, r1
 800a0ce:	dc0c      	bgt.n	800a0ea <__ieee754_rem_pio2+0x19a>
 800a0d0:	1e6a      	subs	r2, r5, #1
 800a0d2:	4b6a      	ldr	r3, [pc, #424]	; (800a27c <__ieee754_rem_pio2+0x32c>)
 800a0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d8:	4543      	cmp	r3, r8
 800a0da:	d006      	beq.n	800a0ea <__ieee754_rem_pio2+0x19a>
 800a0dc:	4632      	mov	r2, r6
 800a0de:	463b      	mov	r3, r7
 800a0e0:	4650      	mov	r0, sl
 800a0e2:	4659      	mov	r1, fp
 800a0e4:	f7f6 f8d8 	bl	8000298 <__aeabi_dsub>
 800a0e8:	e00e      	b.n	800a108 <__ieee754_rem_pio2+0x1b8>
 800a0ea:	4632      	mov	r2, r6
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	4659      	mov	r1, fp
 800a0f2:	f7f6 f8d1 	bl	8000298 <__aeabi_dsub>
 800a0f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	9a05      	ldr	r2, [sp, #20]
 800a0fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b10      	cmp	r3, #16
 800a106:	dc02      	bgt.n	800a10e <__ieee754_rem_pio2+0x1be>
 800a108:	e9c4 0100 	strd	r0, r1, [r4]
 800a10c:	e039      	b.n	800a182 <__ieee754_rem_pio2+0x232>
 800a10e:	a34c      	add	r3, pc, #304	; (adr r3, 800a240 <__ieee754_rem_pio2+0x2f0>)
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a118:	f7f6 fa76 	bl	8000608 <__aeabi_dmul>
 800a11c:	4606      	mov	r6, r0
 800a11e:	460f      	mov	r7, r1
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4650      	mov	r0, sl
 800a126:	4659      	mov	r1, fp
 800a128:	f7f6 f8b6 	bl	8000298 <__aeabi_dsub>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4680      	mov	r8, r0
 800a132:	4689      	mov	r9, r1
 800a134:	4650      	mov	r0, sl
 800a136:	4659      	mov	r1, fp
 800a138:	f7f6 f8ae 	bl	8000298 <__aeabi_dsub>
 800a13c:	4632      	mov	r2, r6
 800a13e:	463b      	mov	r3, r7
 800a140:	f7f6 f8aa 	bl	8000298 <__aeabi_dsub>
 800a144:	a340      	add	r3, pc, #256	; (adr r3, 800a248 <__ieee754_rem_pio2+0x2f8>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	4606      	mov	r6, r0
 800a14c:	460f      	mov	r7, r1
 800a14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a152:	f7f6 fa59 	bl	8000608 <__aeabi_dmul>
 800a156:	4632      	mov	r2, r6
 800a158:	463b      	mov	r3, r7
 800a15a:	f7f6 f89d 	bl	8000298 <__aeabi_dsub>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	4640      	mov	r0, r8
 800a168:	4649      	mov	r1, r9
 800a16a:	f7f6 f895 	bl	8000298 <__aeabi_dsub>
 800a16e:	9a05      	ldr	r2, [sp, #20]
 800a170:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b31      	cmp	r3, #49	; 0x31
 800a178:	dc20      	bgt.n	800a1bc <__ieee754_rem_pio2+0x26c>
 800a17a:	e9c4 0100 	strd	r0, r1, [r4]
 800a17e:	46c2      	mov	sl, r8
 800a180:	46cb      	mov	fp, r9
 800a182:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a186:	4650      	mov	r0, sl
 800a188:	4642      	mov	r2, r8
 800a18a:	464b      	mov	r3, r9
 800a18c:	4659      	mov	r1, fp
 800a18e:	f7f6 f883 	bl	8000298 <__aeabi_dsub>
 800a192:	463b      	mov	r3, r7
 800a194:	4632      	mov	r2, r6
 800a196:	f7f6 f87f 	bl	8000298 <__aeabi_dsub>
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1a2:	f6bf af11 	bge.w	8009fc8 <__ieee754_rem_pio2+0x78>
 800a1a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a1aa:	6063      	str	r3, [r4, #4]
 800a1ac:	f8c4 8000 	str.w	r8, [r4]
 800a1b0:	60a0      	str	r0, [r4, #8]
 800a1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1b6:	60e3      	str	r3, [r4, #12]
 800a1b8:	426d      	negs	r5, r5
 800a1ba:	e705      	b.n	8009fc8 <__ieee754_rem_pio2+0x78>
 800a1bc:	a326      	add	r3, pc, #152	; (adr r3, 800a258 <__ieee754_rem_pio2+0x308>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c6:	f7f6 fa1f 	bl	8000608 <__aeabi_dmul>
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	f7f6 f85f 	bl	8000298 <__aeabi_dsub>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4682      	mov	sl, r0
 800a1e0:	468b      	mov	fp, r1
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	f7f6 f857 	bl	8000298 <__aeabi_dsub>
 800a1ea:	4632      	mov	r2, r6
 800a1ec:	463b      	mov	r3, r7
 800a1ee:	f7f6 f853 	bl	8000298 <__aeabi_dsub>
 800a1f2:	a31b      	add	r3, pc, #108	; (adr r3, 800a260 <__ieee754_rem_pio2+0x310>)
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	460f      	mov	r7, r1
 800a1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a200:	f7f6 fa02 	bl	8000608 <__aeabi_dmul>
 800a204:	4632      	mov	r2, r6
 800a206:	463b      	mov	r3, r7
 800a208:	f7f6 f846 	bl	8000298 <__aeabi_dsub>
 800a20c:	4606      	mov	r6, r0
 800a20e:	460f      	mov	r7, r1
 800a210:	e764      	b.n	800a0dc <__ieee754_rem_pio2+0x18c>
 800a212:	4b1b      	ldr	r3, [pc, #108]	; (800a280 <__ieee754_rem_pio2+0x330>)
 800a214:	4598      	cmp	r8, r3
 800a216:	dd35      	ble.n	800a284 <__ieee754_rem_pio2+0x334>
 800a218:	ee10 2a10 	vmov	r2, s0
 800a21c:	463b      	mov	r3, r7
 800a21e:	4630      	mov	r0, r6
 800a220:	4639      	mov	r1, r7
 800a222:	f7f6 f839 	bl	8000298 <__aeabi_dsub>
 800a226:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a22a:	e9c4 0100 	strd	r0, r1, [r4]
 800a22e:	e6a1      	b.n	8009f74 <__ieee754_rem_pio2+0x24>
 800a230:	54400000 	.word	0x54400000
 800a234:	3ff921fb 	.word	0x3ff921fb
 800a238:	1a626331 	.word	0x1a626331
 800a23c:	3dd0b461 	.word	0x3dd0b461
 800a240:	1a600000 	.word	0x1a600000
 800a244:	3dd0b461 	.word	0x3dd0b461
 800a248:	2e037073 	.word	0x2e037073
 800a24c:	3ba3198a 	.word	0x3ba3198a
 800a250:	6dc9c883 	.word	0x6dc9c883
 800a254:	3fe45f30 	.word	0x3fe45f30
 800a258:	2e000000 	.word	0x2e000000
 800a25c:	3ba3198a 	.word	0x3ba3198a
 800a260:	252049c1 	.word	0x252049c1
 800a264:	397b839a 	.word	0x397b839a
 800a268:	3fe921fb 	.word	0x3fe921fb
 800a26c:	4002d97b 	.word	0x4002d97b
 800a270:	3ff921fb 	.word	0x3ff921fb
 800a274:	413921fb 	.word	0x413921fb
 800a278:	3fe00000 	.word	0x3fe00000
 800a27c:	0800b840 	.word	0x0800b840
 800a280:	7fefffff 	.word	0x7fefffff
 800a284:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a288:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a28c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a290:	4630      	mov	r0, r6
 800a292:	460f      	mov	r7, r1
 800a294:	f7f6 fc68 	bl	8000b68 <__aeabi_d2iz>
 800a298:	f7f6 f94c 	bl	8000534 <__aeabi_i2d>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a2a8:	f7f5 fff6 	bl	8000298 <__aeabi_dsub>
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4b1f      	ldr	r3, [pc, #124]	; (800a32c <__ieee754_rem_pio2+0x3dc>)
 800a2b0:	f7f6 f9aa 	bl	8000608 <__aeabi_dmul>
 800a2b4:	460f      	mov	r7, r1
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	f7f6 fc56 	bl	8000b68 <__aeabi_d2iz>
 800a2bc:	f7f6 f93a 	bl	8000534 <__aeabi_i2d>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2cc:	f7f5 ffe4 	bl	8000298 <__aeabi_dsub>
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4b16      	ldr	r3, [pc, #88]	; (800a32c <__ieee754_rem_pio2+0x3dc>)
 800a2d4:	f7f6 f998 	bl	8000608 <__aeabi_dmul>
 800a2d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a2dc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a2e0:	f04f 0803 	mov.w	r8, #3
 800a2e4:	2600      	movs	r6, #0
 800a2e6:	2700      	movs	r7, #0
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a2f0:	f108 3aff 	add.w	sl, r8, #4294967295
 800a2f4:	f7f6 fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2f8:	b9b0      	cbnz	r0, 800a328 <__ieee754_rem_pio2+0x3d8>
 800a2fa:	4b0d      	ldr	r3, [pc, #52]	; (800a330 <__ieee754_rem_pio2+0x3e0>)
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	2302      	movs	r3, #2
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	462a      	mov	r2, r5
 800a304:	4643      	mov	r3, r8
 800a306:	4621      	mov	r1, r4
 800a308:	a806      	add	r0, sp, #24
 800a30a:	f000 f8dd 	bl	800a4c8 <__kernel_rem_pio2>
 800a30e:	9b04      	ldr	r3, [sp, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	4605      	mov	r5, r0
 800a314:	f6bf ae58 	bge.w	8009fc8 <__ieee754_rem_pio2+0x78>
 800a318:	6863      	ldr	r3, [r4, #4]
 800a31a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a31e:	6063      	str	r3, [r4, #4]
 800a320:	68e3      	ldr	r3, [r4, #12]
 800a322:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a326:	e746      	b.n	800a1b6 <__ieee754_rem_pio2+0x266>
 800a328:	46d0      	mov	r8, sl
 800a32a:	e7dd      	b.n	800a2e8 <__ieee754_rem_pio2+0x398>
 800a32c:	41700000 	.word	0x41700000
 800a330:	0800b8c0 	.word	0x0800b8c0
 800a334:	00000000 	.word	0x00000000

0800a338 <__kernel_cos>:
 800a338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	ec59 8b10 	vmov	r8, r9, d0
 800a340:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a344:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a348:	ed2d 8b02 	vpush	{d8}
 800a34c:	eeb0 8a41 	vmov.f32	s16, s2
 800a350:	eef0 8a61 	vmov.f32	s17, s3
 800a354:	da07      	bge.n	800a366 <__kernel_cos+0x2e>
 800a356:	ee10 0a10 	vmov	r0, s0
 800a35a:	4649      	mov	r1, r9
 800a35c:	f7f6 fc04 	bl	8000b68 <__aeabi_d2iz>
 800a360:	2800      	cmp	r0, #0
 800a362:	f000 8089 	beq.w	800a478 <__kernel_cos+0x140>
 800a366:	4642      	mov	r2, r8
 800a368:	464b      	mov	r3, r9
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	f7f6 f94b 	bl	8000608 <__aeabi_dmul>
 800a372:	2200      	movs	r2, #0
 800a374:	4b4e      	ldr	r3, [pc, #312]	; (800a4b0 <__kernel_cos+0x178>)
 800a376:	4604      	mov	r4, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	f7f6 f945 	bl	8000608 <__aeabi_dmul>
 800a37e:	a340      	add	r3, pc, #256	; (adr r3, 800a480 <__kernel_cos+0x148>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	4682      	mov	sl, r0
 800a386:	468b      	mov	fp, r1
 800a388:	4620      	mov	r0, r4
 800a38a:	4629      	mov	r1, r5
 800a38c:	f7f6 f93c 	bl	8000608 <__aeabi_dmul>
 800a390:	a33d      	add	r3, pc, #244	; (adr r3, 800a488 <__kernel_cos+0x150>)
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f7f5 ff81 	bl	800029c <__adddf3>
 800a39a:	4622      	mov	r2, r4
 800a39c:	462b      	mov	r3, r5
 800a39e:	f7f6 f933 	bl	8000608 <__aeabi_dmul>
 800a3a2:	a33b      	add	r3, pc, #236	; (adr r3, 800a490 <__kernel_cos+0x158>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f5 ff76 	bl	8000298 <__aeabi_dsub>
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	f7f6 f92a 	bl	8000608 <__aeabi_dmul>
 800a3b4:	a338      	add	r3, pc, #224	; (adr r3, 800a498 <__kernel_cos+0x160>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	f7f5 ff6f 	bl	800029c <__adddf3>
 800a3be:	4622      	mov	r2, r4
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	f7f6 f921 	bl	8000608 <__aeabi_dmul>
 800a3c6:	a336      	add	r3, pc, #216	; (adr r3, 800a4a0 <__kernel_cos+0x168>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f5 ff64 	bl	8000298 <__aeabi_dsub>
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	462b      	mov	r3, r5
 800a3d4:	f7f6 f918 	bl	8000608 <__aeabi_dmul>
 800a3d8:	a333      	add	r3, pc, #204	; (adr r3, 800a4a8 <__kernel_cos+0x170>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7f5 ff5d 	bl	800029c <__adddf3>
 800a3e2:	4622      	mov	r2, r4
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	f7f6 f90f 	bl	8000608 <__aeabi_dmul>
 800a3ea:	4622      	mov	r2, r4
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	f7f6 f90b 	bl	8000608 <__aeabi_dmul>
 800a3f2:	ec53 2b18 	vmov	r2, r3, d8
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	f7f6 f903 	bl	8000608 <__aeabi_dmul>
 800a402:	460b      	mov	r3, r1
 800a404:	4602      	mov	r2, r0
 800a406:	4629      	mov	r1, r5
 800a408:	4620      	mov	r0, r4
 800a40a:	f7f5 ff45 	bl	8000298 <__aeabi_dsub>
 800a40e:	4b29      	ldr	r3, [pc, #164]	; (800a4b4 <__kernel_cos+0x17c>)
 800a410:	429e      	cmp	r6, r3
 800a412:	4680      	mov	r8, r0
 800a414:	4689      	mov	r9, r1
 800a416:	dc11      	bgt.n	800a43c <__kernel_cos+0x104>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4650      	mov	r0, sl
 800a41e:	4659      	mov	r1, fp
 800a420:	f7f5 ff3a 	bl	8000298 <__aeabi_dsub>
 800a424:	460b      	mov	r3, r1
 800a426:	4924      	ldr	r1, [pc, #144]	; (800a4b8 <__kernel_cos+0x180>)
 800a428:	4602      	mov	r2, r0
 800a42a:	2000      	movs	r0, #0
 800a42c:	f7f5 ff34 	bl	8000298 <__aeabi_dsub>
 800a430:	ecbd 8b02 	vpop	{d8}
 800a434:	ec41 0b10 	vmov	d0, r0, r1
 800a438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43c:	4b1f      	ldr	r3, [pc, #124]	; (800a4bc <__kernel_cos+0x184>)
 800a43e:	491e      	ldr	r1, [pc, #120]	; (800a4b8 <__kernel_cos+0x180>)
 800a440:	429e      	cmp	r6, r3
 800a442:	bfcc      	ite	gt
 800a444:	4d1e      	ldrgt	r5, [pc, #120]	; (800a4c0 <__kernel_cos+0x188>)
 800a446:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a44a:	2400      	movs	r4, #0
 800a44c:	4622      	mov	r2, r4
 800a44e:	462b      	mov	r3, r5
 800a450:	2000      	movs	r0, #0
 800a452:	f7f5 ff21 	bl	8000298 <__aeabi_dsub>
 800a456:	4622      	mov	r2, r4
 800a458:	4606      	mov	r6, r0
 800a45a:	460f      	mov	r7, r1
 800a45c:	462b      	mov	r3, r5
 800a45e:	4650      	mov	r0, sl
 800a460:	4659      	mov	r1, fp
 800a462:	f7f5 ff19 	bl	8000298 <__aeabi_dsub>
 800a466:	4642      	mov	r2, r8
 800a468:	464b      	mov	r3, r9
 800a46a:	f7f5 ff15 	bl	8000298 <__aeabi_dsub>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4630      	mov	r0, r6
 800a474:	4639      	mov	r1, r7
 800a476:	e7d9      	b.n	800a42c <__kernel_cos+0xf4>
 800a478:	2000      	movs	r0, #0
 800a47a:	490f      	ldr	r1, [pc, #60]	; (800a4b8 <__kernel_cos+0x180>)
 800a47c:	e7d8      	b.n	800a430 <__kernel_cos+0xf8>
 800a47e:	bf00      	nop
 800a480:	be8838d4 	.word	0xbe8838d4
 800a484:	bda8fae9 	.word	0xbda8fae9
 800a488:	bdb4b1c4 	.word	0xbdb4b1c4
 800a48c:	3e21ee9e 	.word	0x3e21ee9e
 800a490:	809c52ad 	.word	0x809c52ad
 800a494:	3e927e4f 	.word	0x3e927e4f
 800a498:	19cb1590 	.word	0x19cb1590
 800a49c:	3efa01a0 	.word	0x3efa01a0
 800a4a0:	16c15177 	.word	0x16c15177
 800a4a4:	3f56c16c 	.word	0x3f56c16c
 800a4a8:	5555554c 	.word	0x5555554c
 800a4ac:	3fa55555 	.word	0x3fa55555
 800a4b0:	3fe00000 	.word	0x3fe00000
 800a4b4:	3fd33332 	.word	0x3fd33332
 800a4b8:	3ff00000 	.word	0x3ff00000
 800a4bc:	3fe90000 	.word	0x3fe90000
 800a4c0:	3fd20000 	.word	0x3fd20000
 800a4c4:	00000000 	.word	0x00000000

0800a4c8 <__kernel_rem_pio2>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	ed2d 8b02 	vpush	{d8}
 800a4d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a4d4:	1ed4      	subs	r4, r2, #3
 800a4d6:	9308      	str	r3, [sp, #32]
 800a4d8:	9101      	str	r1, [sp, #4]
 800a4da:	4bc5      	ldr	r3, [pc, #788]	; (800a7f0 <__kernel_rem_pio2+0x328>)
 800a4dc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a4de:	9009      	str	r0, [sp, #36]	; 0x24
 800a4e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4e4:	9304      	str	r3, [sp, #16]
 800a4e6:	9b08      	ldr	r3, [sp, #32]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	9307      	str	r3, [sp, #28]
 800a4ec:	2318      	movs	r3, #24
 800a4ee:	fb94 f4f3 	sdiv	r4, r4, r3
 800a4f2:	f06f 0317 	mvn.w	r3, #23
 800a4f6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a4fa:	fb04 3303 	mla	r3, r4, r3, r3
 800a4fe:	eb03 0a02 	add.w	sl, r3, r2
 800a502:	9b04      	ldr	r3, [sp, #16]
 800a504:	9a07      	ldr	r2, [sp, #28]
 800a506:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a7e0 <__kernel_rem_pio2+0x318>
 800a50a:	eb03 0802 	add.w	r8, r3, r2
 800a50e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a510:	1aa7      	subs	r7, r4, r2
 800a512:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a516:	ae22      	add	r6, sp, #136	; 0x88
 800a518:	2500      	movs	r5, #0
 800a51a:	4545      	cmp	r5, r8
 800a51c:	dd13      	ble.n	800a546 <__kernel_rem_pio2+0x7e>
 800a51e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a7e0 <__kernel_rem_pio2+0x318>
 800a522:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a526:	2600      	movs	r6, #0
 800a528:	9b04      	ldr	r3, [sp, #16]
 800a52a:	429e      	cmp	r6, r3
 800a52c:	dc32      	bgt.n	800a594 <__kernel_rem_pio2+0xcc>
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	9302      	str	r3, [sp, #8]
 800a532:	9b08      	ldr	r3, [sp, #32]
 800a534:	199d      	adds	r5, r3, r6
 800a536:	ab22      	add	r3, sp, #136	; 0x88
 800a538:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a53c:	9306      	str	r3, [sp, #24]
 800a53e:	ec59 8b18 	vmov	r8, r9, d8
 800a542:	2700      	movs	r7, #0
 800a544:	e01f      	b.n	800a586 <__kernel_rem_pio2+0xbe>
 800a546:	42ef      	cmn	r7, r5
 800a548:	d407      	bmi.n	800a55a <__kernel_rem_pio2+0x92>
 800a54a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a54e:	f7f5 fff1 	bl	8000534 <__aeabi_i2d>
 800a552:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a556:	3501      	adds	r5, #1
 800a558:	e7df      	b.n	800a51a <__kernel_rem_pio2+0x52>
 800a55a:	ec51 0b18 	vmov	r0, r1, d8
 800a55e:	e7f8      	b.n	800a552 <__kernel_rem_pio2+0x8a>
 800a560:	9906      	ldr	r1, [sp, #24]
 800a562:	9d02      	ldr	r5, [sp, #8]
 800a564:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a568:	9106      	str	r1, [sp, #24]
 800a56a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a56e:	9502      	str	r5, [sp, #8]
 800a570:	f7f6 f84a 	bl	8000608 <__aeabi_dmul>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4640      	mov	r0, r8
 800a57a:	4649      	mov	r1, r9
 800a57c:	f7f5 fe8e 	bl	800029c <__adddf3>
 800a580:	3701      	adds	r7, #1
 800a582:	4680      	mov	r8, r0
 800a584:	4689      	mov	r9, r1
 800a586:	9b07      	ldr	r3, [sp, #28]
 800a588:	429f      	cmp	r7, r3
 800a58a:	dde9      	ble.n	800a560 <__kernel_rem_pio2+0x98>
 800a58c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a590:	3601      	adds	r6, #1
 800a592:	e7c9      	b.n	800a528 <__kernel_rem_pio2+0x60>
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	aa0e      	add	r2, sp, #56	; 0x38
 800a598:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a59c:	930c      	str	r3, [sp, #48]	; 0x30
 800a59e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a5a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a5a4:	9c04      	ldr	r4, [sp, #16]
 800a5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5a8:	ab9a      	add	r3, sp, #616	; 0x268
 800a5aa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a5ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5b6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a5ba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a5be:	ab9a      	add	r3, sp, #616	; 0x268
 800a5c0:	445b      	add	r3, fp
 800a5c2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a5c6:	2500      	movs	r5, #0
 800a5c8:	1b63      	subs	r3, r4, r5
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dc78      	bgt.n	800a6c0 <__kernel_rem_pio2+0x1f8>
 800a5ce:	4650      	mov	r0, sl
 800a5d0:	ec49 8b10 	vmov	d0, r8, r9
 800a5d4:	f000 fc00 	bl	800add8 <scalbn>
 800a5d8:	ec57 6b10 	vmov	r6, r7, d0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a5e2:	ee10 0a10 	vmov	r0, s0
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f6 f80e 	bl	8000608 <__aeabi_dmul>
 800a5ec:	ec41 0b10 	vmov	d0, r0, r1
 800a5f0:	f000 fb6e 	bl	800acd0 <floor>
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	ec51 0b10 	vmov	r0, r1, d0
 800a5fa:	4b7e      	ldr	r3, [pc, #504]	; (800a7f4 <__kernel_rem_pio2+0x32c>)
 800a5fc:	f7f6 f804 	bl	8000608 <__aeabi_dmul>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4630      	mov	r0, r6
 800a606:	4639      	mov	r1, r7
 800a608:	f7f5 fe46 	bl	8000298 <__aeabi_dsub>
 800a60c:	460f      	mov	r7, r1
 800a60e:	4606      	mov	r6, r0
 800a610:	f7f6 faaa 	bl	8000b68 <__aeabi_d2iz>
 800a614:	9006      	str	r0, [sp, #24]
 800a616:	f7f5 ff8d 	bl	8000534 <__aeabi_i2d>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	f7f5 fe39 	bl	8000298 <__aeabi_dsub>
 800a626:	f1ba 0f00 	cmp.w	sl, #0
 800a62a:	4606      	mov	r6, r0
 800a62c:	460f      	mov	r7, r1
 800a62e:	dd6c      	ble.n	800a70a <__kernel_rem_pio2+0x242>
 800a630:	1e62      	subs	r2, r4, #1
 800a632:	ab0e      	add	r3, sp, #56	; 0x38
 800a634:	f1ca 0118 	rsb	r1, sl, #24
 800a638:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a63c:	9d06      	ldr	r5, [sp, #24]
 800a63e:	fa40 f301 	asr.w	r3, r0, r1
 800a642:	441d      	add	r5, r3
 800a644:	408b      	lsls	r3, r1
 800a646:	1ac0      	subs	r0, r0, r3
 800a648:	ab0e      	add	r3, sp, #56	; 0x38
 800a64a:	9506      	str	r5, [sp, #24]
 800a64c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a650:	f1ca 0317 	rsb	r3, sl, #23
 800a654:	fa40 f303 	asr.w	r3, r0, r3
 800a658:	9302      	str	r3, [sp, #8]
 800a65a:	9b02      	ldr	r3, [sp, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dd62      	ble.n	800a726 <__kernel_rem_pio2+0x25e>
 800a660:	9b06      	ldr	r3, [sp, #24]
 800a662:	2200      	movs	r2, #0
 800a664:	3301      	adds	r3, #1
 800a666:	9306      	str	r3, [sp, #24]
 800a668:	4615      	mov	r5, r2
 800a66a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a66e:	4294      	cmp	r4, r2
 800a670:	f300 8095 	bgt.w	800a79e <__kernel_rem_pio2+0x2d6>
 800a674:	f1ba 0f00 	cmp.w	sl, #0
 800a678:	dd07      	ble.n	800a68a <__kernel_rem_pio2+0x1c2>
 800a67a:	f1ba 0f01 	cmp.w	sl, #1
 800a67e:	f000 80a2 	beq.w	800a7c6 <__kernel_rem_pio2+0x2fe>
 800a682:	f1ba 0f02 	cmp.w	sl, #2
 800a686:	f000 80c1 	beq.w	800a80c <__kernel_rem_pio2+0x344>
 800a68a:	9b02      	ldr	r3, [sp, #8]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d14a      	bne.n	800a726 <__kernel_rem_pio2+0x25e>
 800a690:	4632      	mov	r2, r6
 800a692:	463b      	mov	r3, r7
 800a694:	2000      	movs	r0, #0
 800a696:	4958      	ldr	r1, [pc, #352]	; (800a7f8 <__kernel_rem_pio2+0x330>)
 800a698:	f7f5 fdfe 	bl	8000298 <__aeabi_dsub>
 800a69c:	4606      	mov	r6, r0
 800a69e:	460f      	mov	r7, r1
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	d040      	beq.n	800a726 <__kernel_rem_pio2+0x25e>
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a7e8 <__kernel_rem_pio2+0x320>
 800a6aa:	f000 fb95 	bl	800add8 <scalbn>
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	ec53 2b10 	vmov	r2, r3, d0
 800a6b6:	f7f5 fdef 	bl	8000298 <__aeabi_dsub>
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	e032      	b.n	800a726 <__kernel_rem_pio2+0x25e>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4b4e      	ldr	r3, [pc, #312]	; (800a7fc <__kernel_rem_pio2+0x334>)
 800a6c4:	4640      	mov	r0, r8
 800a6c6:	4649      	mov	r1, r9
 800a6c8:	f7f5 ff9e 	bl	8000608 <__aeabi_dmul>
 800a6cc:	f7f6 fa4c 	bl	8000b68 <__aeabi_d2iz>
 800a6d0:	f7f5 ff30 	bl	8000534 <__aeabi_i2d>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4b4a      	ldr	r3, [pc, #296]	; (800a800 <__kernel_rem_pio2+0x338>)
 800a6d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6dc:	f7f5 ff94 	bl	8000608 <__aeabi_dmul>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	4649      	mov	r1, r9
 800a6e8:	f7f5 fdd6 	bl	8000298 <__aeabi_dsub>
 800a6ec:	f7f6 fa3c 	bl	8000b68 <__aeabi_d2iz>
 800a6f0:	ab0e      	add	r3, sp, #56	; 0x38
 800a6f2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a6f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a6fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fe:	f7f5 fdcd 	bl	800029c <__adddf3>
 800a702:	3501      	adds	r5, #1
 800a704:	4680      	mov	r8, r0
 800a706:	4689      	mov	r9, r1
 800a708:	e75e      	b.n	800a5c8 <__kernel_rem_pio2+0x100>
 800a70a:	d105      	bne.n	800a718 <__kernel_rem_pio2+0x250>
 800a70c:	1e63      	subs	r3, r4, #1
 800a70e:	aa0e      	add	r2, sp, #56	; 0x38
 800a710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a714:	15c3      	asrs	r3, r0, #23
 800a716:	e79f      	b.n	800a658 <__kernel_rem_pio2+0x190>
 800a718:	2200      	movs	r2, #0
 800a71a:	4b3a      	ldr	r3, [pc, #232]	; (800a804 <__kernel_rem_pio2+0x33c>)
 800a71c:	f7f6 f9fa 	bl	8000b14 <__aeabi_dcmpge>
 800a720:	2800      	cmp	r0, #0
 800a722:	d139      	bne.n	800a798 <__kernel_rem_pio2+0x2d0>
 800a724:	9002      	str	r0, [sp, #8]
 800a726:	2200      	movs	r2, #0
 800a728:	2300      	movs	r3, #0
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	f7f6 f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a732:	2800      	cmp	r0, #0
 800a734:	f000 80c7 	beq.w	800a8c6 <__kernel_rem_pio2+0x3fe>
 800a738:	1e65      	subs	r5, r4, #1
 800a73a:	462b      	mov	r3, r5
 800a73c:	2200      	movs	r2, #0
 800a73e:	9904      	ldr	r1, [sp, #16]
 800a740:	428b      	cmp	r3, r1
 800a742:	da6a      	bge.n	800a81a <__kernel_rem_pio2+0x352>
 800a744:	2a00      	cmp	r2, #0
 800a746:	f000 8088 	beq.w	800a85a <__kernel_rem_pio2+0x392>
 800a74a:	ab0e      	add	r3, sp, #56	; 0x38
 800a74c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a750:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 80b4 	beq.w	800a8c2 <__kernel_rem_pio2+0x3fa>
 800a75a:	4650      	mov	r0, sl
 800a75c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a7e8 <__kernel_rem_pio2+0x320>
 800a760:	f000 fb3a 	bl	800add8 <scalbn>
 800a764:	00ec      	lsls	r4, r5, #3
 800a766:	ab72      	add	r3, sp, #456	; 0x1c8
 800a768:	191e      	adds	r6, r3, r4
 800a76a:	ec59 8b10 	vmov	r8, r9, d0
 800a76e:	f106 0a08 	add.w	sl, r6, #8
 800a772:	462f      	mov	r7, r5
 800a774:	2f00      	cmp	r7, #0
 800a776:	f280 80df 	bge.w	800a938 <__kernel_rem_pio2+0x470>
 800a77a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a7e0 <__kernel_rem_pio2+0x318>
 800a77e:	f04f 0a00 	mov.w	sl, #0
 800a782:	eba5 030a 	sub.w	r3, r5, sl
 800a786:	2b00      	cmp	r3, #0
 800a788:	f2c0 810a 	blt.w	800a9a0 <__kernel_rem_pio2+0x4d8>
 800a78c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a808 <__kernel_rem_pio2+0x340>
 800a790:	ec59 8b18 	vmov	r8, r9, d8
 800a794:	2700      	movs	r7, #0
 800a796:	e0f5      	b.n	800a984 <__kernel_rem_pio2+0x4bc>
 800a798:	2302      	movs	r3, #2
 800a79a:	9302      	str	r3, [sp, #8]
 800a79c:	e760      	b.n	800a660 <__kernel_rem_pio2+0x198>
 800a79e:	ab0e      	add	r3, sp, #56	; 0x38
 800a7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a4:	b94d      	cbnz	r5, 800a7ba <__kernel_rem_pio2+0x2f2>
 800a7a6:	b12b      	cbz	r3, 800a7b4 <__kernel_rem_pio2+0x2ec>
 800a7a8:	a80e      	add	r0, sp, #56	; 0x38
 800a7aa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a7ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	3201      	adds	r2, #1
 800a7b6:	461d      	mov	r5, r3
 800a7b8:	e759      	b.n	800a66e <__kernel_rem_pio2+0x1a6>
 800a7ba:	a80e      	add	r0, sp, #56	; 0x38
 800a7bc:	1acb      	subs	r3, r1, r3
 800a7be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a7c2:	462b      	mov	r3, r5
 800a7c4:	e7f6      	b.n	800a7b4 <__kernel_rem_pio2+0x2ec>
 800a7c6:	1e62      	subs	r2, r4, #1
 800a7c8:	ab0e      	add	r3, sp, #56	; 0x38
 800a7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a7d2:	a90e      	add	r1, sp, #56	; 0x38
 800a7d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a7d8:	e757      	b.n	800a68a <__kernel_rem_pio2+0x1c2>
 800a7da:	bf00      	nop
 800a7dc:	f3af 8000 	nop.w
	...
 800a7ec:	3ff00000 	.word	0x3ff00000
 800a7f0:	0800ba08 	.word	0x0800ba08
 800a7f4:	40200000 	.word	0x40200000
 800a7f8:	3ff00000 	.word	0x3ff00000
 800a7fc:	3e700000 	.word	0x3e700000
 800a800:	41700000 	.word	0x41700000
 800a804:	3fe00000 	.word	0x3fe00000
 800a808:	0800b9c8 	.word	0x0800b9c8
 800a80c:	1e62      	subs	r2, r4, #1
 800a80e:	ab0e      	add	r3, sp, #56	; 0x38
 800a810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a814:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a818:	e7db      	b.n	800a7d2 <__kernel_rem_pio2+0x30a>
 800a81a:	a90e      	add	r1, sp, #56	; 0x38
 800a81c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a820:	3b01      	subs	r3, #1
 800a822:	430a      	orrs	r2, r1
 800a824:	e78b      	b.n	800a73e <__kernel_rem_pio2+0x276>
 800a826:	3301      	adds	r3, #1
 800a828:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a82c:	2900      	cmp	r1, #0
 800a82e:	d0fa      	beq.n	800a826 <__kernel_rem_pio2+0x35e>
 800a830:	9a08      	ldr	r2, [sp, #32]
 800a832:	4422      	add	r2, r4
 800a834:	00d2      	lsls	r2, r2, #3
 800a836:	a922      	add	r1, sp, #136	; 0x88
 800a838:	18e3      	adds	r3, r4, r3
 800a83a:	9206      	str	r2, [sp, #24]
 800a83c:	440a      	add	r2, r1
 800a83e:	9302      	str	r3, [sp, #8]
 800a840:	f10b 0108 	add.w	r1, fp, #8
 800a844:	f102 0308 	add.w	r3, r2, #8
 800a848:	1c66      	adds	r6, r4, #1
 800a84a:	910a      	str	r1, [sp, #40]	; 0x28
 800a84c:	2500      	movs	r5, #0
 800a84e:	930d      	str	r3, [sp, #52]	; 0x34
 800a850:	9b02      	ldr	r3, [sp, #8]
 800a852:	42b3      	cmp	r3, r6
 800a854:	da04      	bge.n	800a860 <__kernel_rem_pio2+0x398>
 800a856:	461c      	mov	r4, r3
 800a858:	e6a6      	b.n	800a5a8 <__kernel_rem_pio2+0xe0>
 800a85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a85c:	2301      	movs	r3, #1
 800a85e:	e7e3      	b.n	800a828 <__kernel_rem_pio2+0x360>
 800a860:	9b06      	ldr	r3, [sp, #24]
 800a862:	18ef      	adds	r7, r5, r3
 800a864:	ab22      	add	r3, sp, #136	; 0x88
 800a866:	441f      	add	r7, r3
 800a868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a86a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a86e:	f7f5 fe61 	bl	8000534 <__aeabi_i2d>
 800a872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a874:	461c      	mov	r4, r3
 800a876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a878:	e9c7 0100 	strd	r0, r1, [r7]
 800a87c:	eb03 0b05 	add.w	fp, r3, r5
 800a880:	2700      	movs	r7, #0
 800a882:	f04f 0800 	mov.w	r8, #0
 800a886:	f04f 0900 	mov.w	r9, #0
 800a88a:	9b07      	ldr	r3, [sp, #28]
 800a88c:	429f      	cmp	r7, r3
 800a88e:	dd08      	ble.n	800a8a2 <__kernel_rem_pio2+0x3da>
 800a890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a892:	aa72      	add	r2, sp, #456	; 0x1c8
 800a894:	18eb      	adds	r3, r5, r3
 800a896:	4413      	add	r3, r2
 800a898:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a89c:	3601      	adds	r6, #1
 800a89e:	3508      	adds	r5, #8
 800a8a0:	e7d6      	b.n	800a850 <__kernel_rem_pio2+0x388>
 800a8a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a8a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a8aa:	f7f5 fead 	bl	8000608 <__aeabi_dmul>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	f7f5 fcf1 	bl	800029c <__adddf3>
 800a8ba:	3701      	adds	r7, #1
 800a8bc:	4680      	mov	r8, r0
 800a8be:	4689      	mov	r9, r1
 800a8c0:	e7e3      	b.n	800a88a <__kernel_rem_pio2+0x3c2>
 800a8c2:	3d01      	subs	r5, #1
 800a8c4:	e741      	b.n	800a74a <__kernel_rem_pio2+0x282>
 800a8c6:	f1ca 0000 	rsb	r0, sl, #0
 800a8ca:	ec47 6b10 	vmov	d0, r6, r7
 800a8ce:	f000 fa83 	bl	800add8 <scalbn>
 800a8d2:	ec57 6b10 	vmov	r6, r7, d0
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4b99      	ldr	r3, [pc, #612]	; (800ab40 <__kernel_rem_pio2+0x678>)
 800a8da:	ee10 0a10 	vmov	r0, s0
 800a8de:	4639      	mov	r1, r7
 800a8e0:	f7f6 f918 	bl	8000b14 <__aeabi_dcmpge>
 800a8e4:	b1f8      	cbz	r0, 800a926 <__kernel_rem_pio2+0x45e>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	4b96      	ldr	r3, [pc, #600]	; (800ab44 <__kernel_rem_pio2+0x67c>)
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	f7f5 fe8b 	bl	8000608 <__aeabi_dmul>
 800a8f2:	f7f6 f939 	bl	8000b68 <__aeabi_d2iz>
 800a8f6:	4680      	mov	r8, r0
 800a8f8:	f7f5 fe1c 	bl	8000534 <__aeabi_i2d>
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	4b90      	ldr	r3, [pc, #576]	; (800ab40 <__kernel_rem_pio2+0x678>)
 800a900:	f7f5 fe82 	bl	8000608 <__aeabi_dmul>
 800a904:	460b      	mov	r3, r1
 800a906:	4602      	mov	r2, r0
 800a908:	4639      	mov	r1, r7
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7f5 fcc4 	bl	8000298 <__aeabi_dsub>
 800a910:	f7f6 f92a 	bl	8000b68 <__aeabi_d2iz>
 800a914:	1c65      	adds	r5, r4, #1
 800a916:	ab0e      	add	r3, sp, #56	; 0x38
 800a918:	f10a 0a18 	add.w	sl, sl, #24
 800a91c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a920:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a924:	e719      	b.n	800a75a <__kernel_rem_pio2+0x292>
 800a926:	4630      	mov	r0, r6
 800a928:	4639      	mov	r1, r7
 800a92a:	f7f6 f91d 	bl	8000b68 <__aeabi_d2iz>
 800a92e:	ab0e      	add	r3, sp, #56	; 0x38
 800a930:	4625      	mov	r5, r4
 800a932:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a936:	e710      	b.n	800a75a <__kernel_rem_pio2+0x292>
 800a938:	ab0e      	add	r3, sp, #56	; 0x38
 800a93a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a93e:	f7f5 fdf9 	bl	8000534 <__aeabi_i2d>
 800a942:	4642      	mov	r2, r8
 800a944:	464b      	mov	r3, r9
 800a946:	f7f5 fe5f 	bl	8000608 <__aeabi_dmul>
 800a94a:	2200      	movs	r2, #0
 800a94c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a950:	4b7c      	ldr	r3, [pc, #496]	; (800ab44 <__kernel_rem_pio2+0x67c>)
 800a952:	4640      	mov	r0, r8
 800a954:	4649      	mov	r1, r9
 800a956:	f7f5 fe57 	bl	8000608 <__aeabi_dmul>
 800a95a:	3f01      	subs	r7, #1
 800a95c:	4680      	mov	r8, r0
 800a95e:	4689      	mov	r9, r1
 800a960:	e708      	b.n	800a774 <__kernel_rem_pio2+0x2ac>
 800a962:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a96e:	f7f5 fe4b 	bl	8000608 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4640      	mov	r0, r8
 800a978:	4649      	mov	r1, r9
 800a97a:	f7f5 fc8f 	bl	800029c <__adddf3>
 800a97e:	3701      	adds	r7, #1
 800a980:	4680      	mov	r8, r0
 800a982:	4689      	mov	r9, r1
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	429f      	cmp	r7, r3
 800a988:	dc01      	bgt.n	800a98e <__kernel_rem_pio2+0x4c6>
 800a98a:	45ba      	cmp	sl, r7
 800a98c:	dae9      	bge.n	800a962 <__kernel_rem_pio2+0x49a>
 800a98e:	ab4a      	add	r3, sp, #296	; 0x128
 800a990:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a994:	e9c3 8900 	strd	r8, r9, [r3]
 800a998:	f10a 0a01 	add.w	sl, sl, #1
 800a99c:	3e08      	subs	r6, #8
 800a99e:	e6f0      	b.n	800a782 <__kernel_rem_pio2+0x2ba>
 800a9a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d85b      	bhi.n	800aa5e <__kernel_rem_pio2+0x596>
 800a9a6:	e8df f003 	tbb	[pc, r3]
 800a9aa:	264a      	.short	0x264a
 800a9ac:	0226      	.short	0x0226
 800a9ae:	ab9a      	add	r3, sp, #616	; 0x268
 800a9b0:	441c      	add	r4, r3
 800a9b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a9b6:	46a2      	mov	sl, r4
 800a9b8:	46ab      	mov	fp, r5
 800a9ba:	f1bb 0f00 	cmp.w	fp, #0
 800a9be:	dc6c      	bgt.n	800aa9a <__kernel_rem_pio2+0x5d2>
 800a9c0:	46a2      	mov	sl, r4
 800a9c2:	46ab      	mov	fp, r5
 800a9c4:	f1bb 0f01 	cmp.w	fp, #1
 800a9c8:	f300 8086 	bgt.w	800aad8 <__kernel_rem_pio2+0x610>
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	2d01      	cmp	r5, #1
 800a9d2:	f300 80a0 	bgt.w	800ab16 <__kernel_rem_pio2+0x64e>
 800a9d6:	9b02      	ldr	r3, [sp, #8]
 800a9d8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a9dc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f040 809e 	bne.w	800ab22 <__kernel_rem_pio2+0x65a>
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	e9c3 7800 	strd	r7, r8, [r3]
 800a9ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a9f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9f4:	e033      	b.n	800aa5e <__kernel_rem_pio2+0x596>
 800a9f6:	3408      	adds	r4, #8
 800a9f8:	ab4a      	add	r3, sp, #296	; 0x128
 800a9fa:	441c      	add	r4, r3
 800a9fc:	462e      	mov	r6, r5
 800a9fe:	2000      	movs	r0, #0
 800aa00:	2100      	movs	r1, #0
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	da3a      	bge.n	800aa7c <__kernel_rem_pio2+0x5b4>
 800aa06:	9b02      	ldr	r3, [sp, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d03d      	beq.n	800aa88 <__kernel_rem_pio2+0x5c0>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa12:	9c01      	ldr	r4, [sp, #4]
 800aa14:	e9c4 2300 	strd	r2, r3, [r4]
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800aa20:	f7f5 fc3a 	bl	8000298 <__aeabi_dsub>
 800aa24:	ae4c      	add	r6, sp, #304	; 0x130
 800aa26:	2401      	movs	r4, #1
 800aa28:	42a5      	cmp	r5, r4
 800aa2a:	da30      	bge.n	800aa8e <__kernel_rem_pio2+0x5c6>
 800aa2c:	9b02      	ldr	r3, [sp, #8]
 800aa2e:	b113      	cbz	r3, 800aa36 <__kernel_rem_pio2+0x56e>
 800aa30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa34:	4619      	mov	r1, r3
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aa3c:	e00f      	b.n	800aa5e <__kernel_rem_pio2+0x596>
 800aa3e:	ab9a      	add	r3, sp, #616	; 0x268
 800aa40:	441c      	add	r4, r3
 800aa42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aa46:	2000      	movs	r0, #0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	da10      	bge.n	800aa70 <__kernel_rem_pio2+0x5a8>
 800aa4e:	9b02      	ldr	r3, [sp, #8]
 800aa50:	b113      	cbz	r3, 800aa58 <__kernel_rem_pio2+0x590>
 800aa52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa56:	4619      	mov	r1, r3
 800aa58:	9b01      	ldr	r3, [sp, #4]
 800aa5a:	e9c3 0100 	strd	r0, r1, [r3]
 800aa5e:	9b06      	ldr	r3, [sp, #24]
 800aa60:	f003 0007 	and.w	r0, r3, #7
 800aa64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800aa68:	ecbd 8b02 	vpop	{d8}
 800aa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa70:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa74:	f7f5 fc12 	bl	800029c <__adddf3>
 800aa78:	3d01      	subs	r5, #1
 800aa7a:	e7e6      	b.n	800aa4a <__kernel_rem_pio2+0x582>
 800aa7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa80:	f7f5 fc0c 	bl	800029c <__adddf3>
 800aa84:	3e01      	subs	r6, #1
 800aa86:	e7bc      	b.n	800aa02 <__kernel_rem_pio2+0x53a>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	e7c1      	b.n	800aa12 <__kernel_rem_pio2+0x54a>
 800aa8e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800aa92:	f7f5 fc03 	bl	800029c <__adddf3>
 800aa96:	3401      	adds	r4, #1
 800aa98:	e7c6      	b.n	800aa28 <__kernel_rem_pio2+0x560>
 800aa9a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800aa9e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	ec53 2b17 	vmov	r2, r3, d7
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aaae:	f7f5 fbf5 	bl	800029c <__adddf3>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	4606      	mov	r6, r0
 800aab8:	460f      	mov	r7, r1
 800aaba:	4640      	mov	r0, r8
 800aabc:	4649      	mov	r1, r9
 800aabe:	f7f5 fbeb 	bl	8000298 <__aeabi_dsub>
 800aac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aac6:	f7f5 fbe9 	bl	800029c <__adddf3>
 800aaca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aace:	e9ca 0100 	strd	r0, r1, [sl]
 800aad2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800aad6:	e770      	b.n	800a9ba <__kernel_rem_pio2+0x4f2>
 800aad8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800aadc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800aae0:	4630      	mov	r0, r6
 800aae2:	ec53 2b17 	vmov	r2, r3, d7
 800aae6:	4639      	mov	r1, r7
 800aae8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aaec:	f7f5 fbd6 	bl	800029c <__adddf3>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	4689      	mov	r9, r1
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f5 fbcc 	bl	8000298 <__aeabi_dsub>
 800ab00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab04:	f7f5 fbca 	bl	800029c <__adddf3>
 800ab08:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab0c:	e9ca 0100 	strd	r0, r1, [sl]
 800ab10:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800ab14:	e756      	b.n	800a9c4 <__kernel_rem_pio2+0x4fc>
 800ab16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab1a:	f7f5 fbbf 	bl	800029c <__adddf3>
 800ab1e:	3d01      	subs	r5, #1
 800ab20:	e756      	b.n	800a9d0 <__kernel_rem_pio2+0x508>
 800ab22:	9b01      	ldr	r3, [sp, #4]
 800ab24:	9a01      	ldr	r2, [sp, #4]
 800ab26:	601f      	str	r7, [r3, #0]
 800ab28:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ab2c:	605c      	str	r4, [r3, #4]
 800ab2e:	609d      	str	r5, [r3, #8]
 800ab30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ab34:	60d3      	str	r3, [r2, #12]
 800ab36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab3a:	6110      	str	r0, [r2, #16]
 800ab3c:	6153      	str	r3, [r2, #20]
 800ab3e:	e78e      	b.n	800aa5e <__kernel_rem_pio2+0x596>
 800ab40:	41700000 	.word	0x41700000
 800ab44:	3e700000 	.word	0x3e700000

0800ab48 <__kernel_sin>:
 800ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	ec55 4b10 	vmov	r4, r5, d0
 800ab50:	b085      	sub	sp, #20
 800ab52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab56:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab5a:	ed8d 1b00 	vstr	d1, [sp]
 800ab5e:	9002      	str	r0, [sp, #8]
 800ab60:	da06      	bge.n	800ab70 <__kernel_sin+0x28>
 800ab62:	ee10 0a10 	vmov	r0, s0
 800ab66:	4629      	mov	r1, r5
 800ab68:	f7f5 fffe 	bl	8000b68 <__aeabi_d2iz>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d051      	beq.n	800ac14 <__kernel_sin+0xcc>
 800ab70:	4622      	mov	r2, r4
 800ab72:	462b      	mov	r3, r5
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	f7f5 fd46 	bl	8000608 <__aeabi_dmul>
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	468b      	mov	fp, r1
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4620      	mov	r0, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	f7f5 fd3e 	bl	8000608 <__aeabi_dmul>
 800ab8c:	a341      	add	r3, pc, #260	; (adr r3, 800ac94 <__kernel_sin+0x14c>)
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	4680      	mov	r8, r0
 800ab94:	4689      	mov	r9, r1
 800ab96:	4650      	mov	r0, sl
 800ab98:	4659      	mov	r1, fp
 800ab9a:	f7f5 fd35 	bl	8000608 <__aeabi_dmul>
 800ab9e:	a33f      	add	r3, pc, #252	; (adr r3, 800ac9c <__kernel_sin+0x154>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f7f5 fb78 	bl	8000298 <__aeabi_dsub>
 800aba8:	4652      	mov	r2, sl
 800abaa:	465b      	mov	r3, fp
 800abac:	f7f5 fd2c 	bl	8000608 <__aeabi_dmul>
 800abb0:	a33c      	add	r3, pc, #240	; (adr r3, 800aca4 <__kernel_sin+0x15c>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f7f5 fb71 	bl	800029c <__adddf3>
 800abba:	4652      	mov	r2, sl
 800abbc:	465b      	mov	r3, fp
 800abbe:	f7f5 fd23 	bl	8000608 <__aeabi_dmul>
 800abc2:	a33a      	add	r3, pc, #232	; (adr r3, 800acac <__kernel_sin+0x164>)
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	f7f5 fb66 	bl	8000298 <__aeabi_dsub>
 800abcc:	4652      	mov	r2, sl
 800abce:	465b      	mov	r3, fp
 800abd0:	f7f5 fd1a 	bl	8000608 <__aeabi_dmul>
 800abd4:	a337      	add	r3, pc, #220	; (adr r3, 800acb4 <__kernel_sin+0x16c>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f7f5 fb5f 	bl	800029c <__adddf3>
 800abde:	9b02      	ldr	r3, [sp, #8]
 800abe0:	4606      	mov	r6, r0
 800abe2:	460f      	mov	r7, r1
 800abe4:	b9db      	cbnz	r3, 800ac1e <__kernel_sin+0xd6>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4650      	mov	r0, sl
 800abec:	4659      	mov	r1, fp
 800abee:	f7f5 fd0b 	bl	8000608 <__aeabi_dmul>
 800abf2:	a325      	add	r3, pc, #148	; (adr r3, 800ac88 <__kernel_sin+0x140>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f7f5 fb4e 	bl	8000298 <__aeabi_dsub>
 800abfc:	4642      	mov	r2, r8
 800abfe:	464b      	mov	r3, r9
 800ac00:	f7f5 fd02 	bl	8000608 <__aeabi_dmul>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f7f5 fb46 	bl	800029c <__adddf3>
 800ac10:	4604      	mov	r4, r0
 800ac12:	460d      	mov	r5, r1
 800ac14:	ec45 4b10 	vmov	d0, r4, r5
 800ac18:	b005      	add	sp, #20
 800ac1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1e:	2200      	movs	r2, #0
 800ac20:	4b1b      	ldr	r3, [pc, #108]	; (800ac90 <__kernel_sin+0x148>)
 800ac22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac26:	f7f5 fcef 	bl	8000608 <__aeabi_dmul>
 800ac2a:	4632      	mov	r2, r6
 800ac2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac30:	463b      	mov	r3, r7
 800ac32:	4640      	mov	r0, r8
 800ac34:	4649      	mov	r1, r9
 800ac36:	f7f5 fce7 	bl	8000608 <__aeabi_dmul>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac42:	f7f5 fb29 	bl	8000298 <__aeabi_dsub>
 800ac46:	4652      	mov	r2, sl
 800ac48:	465b      	mov	r3, fp
 800ac4a:	f7f5 fcdd 	bl	8000608 <__aeabi_dmul>
 800ac4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac52:	f7f5 fb21 	bl	8000298 <__aeabi_dsub>
 800ac56:	a30c      	add	r3, pc, #48	; (adr r3, 800ac88 <__kernel_sin+0x140>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	460f      	mov	r7, r1
 800ac60:	4640      	mov	r0, r8
 800ac62:	4649      	mov	r1, r9
 800ac64:	f7f5 fcd0 	bl	8000608 <__aeabi_dmul>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 fb14 	bl	800029c <__adddf3>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4620      	mov	r0, r4
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	f7f5 fb0c 	bl	8000298 <__aeabi_dsub>
 800ac80:	e7c6      	b.n	800ac10 <__kernel_sin+0xc8>
 800ac82:	bf00      	nop
 800ac84:	f3af 8000 	nop.w
 800ac88:	55555549 	.word	0x55555549
 800ac8c:	3fc55555 	.word	0x3fc55555
 800ac90:	3fe00000 	.word	0x3fe00000
 800ac94:	5acfd57c 	.word	0x5acfd57c
 800ac98:	3de5d93a 	.word	0x3de5d93a
 800ac9c:	8a2b9ceb 	.word	0x8a2b9ceb
 800aca0:	3e5ae5e6 	.word	0x3e5ae5e6
 800aca4:	57b1fe7d 	.word	0x57b1fe7d
 800aca8:	3ec71de3 	.word	0x3ec71de3
 800acac:	19c161d5 	.word	0x19c161d5
 800acb0:	3f2a01a0 	.word	0x3f2a01a0
 800acb4:	1110f8a6 	.word	0x1110f8a6
 800acb8:	3f811111 	.word	0x3f811111

0800acbc <fabs>:
 800acbc:	ec51 0b10 	vmov	r0, r1, d0
 800acc0:	ee10 2a10 	vmov	r2, s0
 800acc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acc8:	ec43 2b10 	vmov	d0, r2, r3
 800accc:	4770      	bx	lr
	...

0800acd0 <floor>:
 800acd0:	ec51 0b10 	vmov	r0, r1, d0
 800acd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800acdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ace0:	2e13      	cmp	r6, #19
 800ace2:	460c      	mov	r4, r1
 800ace4:	ee10 5a10 	vmov	r5, s0
 800ace8:	4680      	mov	r8, r0
 800acea:	dc34      	bgt.n	800ad56 <floor+0x86>
 800acec:	2e00      	cmp	r6, #0
 800acee:	da16      	bge.n	800ad1e <floor+0x4e>
 800acf0:	a335      	add	r3, pc, #212	; (adr r3, 800adc8 <floor+0xf8>)
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	f7f5 fad1 	bl	800029c <__adddf3>
 800acfa:	2200      	movs	r2, #0
 800acfc:	2300      	movs	r3, #0
 800acfe:	f7f5 ff13 	bl	8000b28 <__aeabi_dcmpgt>
 800ad02:	b148      	cbz	r0, 800ad18 <floor+0x48>
 800ad04:	2c00      	cmp	r4, #0
 800ad06:	da59      	bge.n	800adbc <floor+0xec>
 800ad08:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ad0c:	4a30      	ldr	r2, [pc, #192]	; (800add0 <floor+0x100>)
 800ad0e:	432b      	orrs	r3, r5
 800ad10:	2500      	movs	r5, #0
 800ad12:	42ab      	cmp	r3, r5
 800ad14:	bf18      	it	ne
 800ad16:	4614      	movne	r4, r2
 800ad18:	4621      	mov	r1, r4
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	e025      	b.n	800ad6a <floor+0x9a>
 800ad1e:	4f2d      	ldr	r7, [pc, #180]	; (800add4 <floor+0x104>)
 800ad20:	4137      	asrs	r7, r6
 800ad22:	ea01 0307 	and.w	r3, r1, r7
 800ad26:	4303      	orrs	r3, r0
 800ad28:	d01f      	beq.n	800ad6a <floor+0x9a>
 800ad2a:	a327      	add	r3, pc, #156	; (adr r3, 800adc8 <floor+0xf8>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 fab4 	bl	800029c <__adddf3>
 800ad34:	2200      	movs	r2, #0
 800ad36:	2300      	movs	r3, #0
 800ad38:	f7f5 fef6 	bl	8000b28 <__aeabi_dcmpgt>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d0eb      	beq.n	800ad18 <floor+0x48>
 800ad40:	2c00      	cmp	r4, #0
 800ad42:	bfbe      	ittt	lt
 800ad44:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ad48:	fa43 f606 	asrlt.w	r6, r3, r6
 800ad4c:	19a4      	addlt	r4, r4, r6
 800ad4e:	ea24 0407 	bic.w	r4, r4, r7
 800ad52:	2500      	movs	r5, #0
 800ad54:	e7e0      	b.n	800ad18 <floor+0x48>
 800ad56:	2e33      	cmp	r6, #51	; 0x33
 800ad58:	dd0b      	ble.n	800ad72 <floor+0xa2>
 800ad5a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad5e:	d104      	bne.n	800ad6a <floor+0x9a>
 800ad60:	ee10 2a10 	vmov	r2, s0
 800ad64:	460b      	mov	r3, r1
 800ad66:	f7f5 fa99 	bl	800029c <__adddf3>
 800ad6a:	ec41 0b10 	vmov	d0, r0, r1
 800ad6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad72:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ad76:	f04f 33ff 	mov.w	r3, #4294967295
 800ad7a:	fa23 f707 	lsr.w	r7, r3, r7
 800ad7e:	4207      	tst	r7, r0
 800ad80:	d0f3      	beq.n	800ad6a <floor+0x9a>
 800ad82:	a311      	add	r3, pc, #68	; (adr r3, 800adc8 <floor+0xf8>)
 800ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad88:	f7f5 fa88 	bl	800029c <__adddf3>
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f7f5 feca 	bl	8000b28 <__aeabi_dcmpgt>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d0bf      	beq.n	800ad18 <floor+0x48>
 800ad98:	2c00      	cmp	r4, #0
 800ad9a:	da02      	bge.n	800ada2 <floor+0xd2>
 800ad9c:	2e14      	cmp	r6, #20
 800ad9e:	d103      	bne.n	800ada8 <floor+0xd8>
 800ada0:	3401      	adds	r4, #1
 800ada2:	ea25 0507 	bic.w	r5, r5, r7
 800ada6:	e7b7      	b.n	800ad18 <floor+0x48>
 800ada8:	2301      	movs	r3, #1
 800adaa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800adae:	fa03 f606 	lsl.w	r6, r3, r6
 800adb2:	4435      	add	r5, r6
 800adb4:	4545      	cmp	r5, r8
 800adb6:	bf38      	it	cc
 800adb8:	18e4      	addcc	r4, r4, r3
 800adba:	e7f2      	b.n	800ada2 <floor+0xd2>
 800adbc:	2500      	movs	r5, #0
 800adbe:	462c      	mov	r4, r5
 800adc0:	e7aa      	b.n	800ad18 <floor+0x48>
 800adc2:	bf00      	nop
 800adc4:	f3af 8000 	nop.w
 800adc8:	8800759c 	.word	0x8800759c
 800adcc:	7e37e43c 	.word	0x7e37e43c
 800add0:	bff00000 	.word	0xbff00000
 800add4:	000fffff 	.word	0x000fffff

0800add8 <scalbn>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	ec55 4b10 	vmov	r4, r5, d0
 800adde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ade2:	4606      	mov	r6, r0
 800ade4:	462b      	mov	r3, r5
 800ade6:	b9aa      	cbnz	r2, 800ae14 <scalbn+0x3c>
 800ade8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800adec:	4323      	orrs	r3, r4
 800adee:	d03b      	beq.n	800ae68 <scalbn+0x90>
 800adf0:	4b31      	ldr	r3, [pc, #196]	; (800aeb8 <scalbn+0xe0>)
 800adf2:	4629      	mov	r1, r5
 800adf4:	2200      	movs	r2, #0
 800adf6:	ee10 0a10 	vmov	r0, s0
 800adfa:	f7f5 fc05 	bl	8000608 <__aeabi_dmul>
 800adfe:	4b2f      	ldr	r3, [pc, #188]	; (800aebc <scalbn+0xe4>)
 800ae00:	429e      	cmp	r6, r3
 800ae02:	4604      	mov	r4, r0
 800ae04:	460d      	mov	r5, r1
 800ae06:	da12      	bge.n	800ae2e <scalbn+0x56>
 800ae08:	a327      	add	r3, pc, #156	; (adr r3, 800aea8 <scalbn+0xd0>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	f7f5 fbfb 	bl	8000608 <__aeabi_dmul>
 800ae12:	e009      	b.n	800ae28 <scalbn+0x50>
 800ae14:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ae18:	428a      	cmp	r2, r1
 800ae1a:	d10c      	bne.n	800ae36 <scalbn+0x5e>
 800ae1c:	ee10 2a10 	vmov	r2, s0
 800ae20:	4620      	mov	r0, r4
 800ae22:	4629      	mov	r1, r5
 800ae24:	f7f5 fa3a 	bl	800029c <__adddf3>
 800ae28:	4604      	mov	r4, r0
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	e01c      	b.n	800ae68 <scalbn+0x90>
 800ae2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae32:	460b      	mov	r3, r1
 800ae34:	3a36      	subs	r2, #54	; 0x36
 800ae36:	4432      	add	r2, r6
 800ae38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ae3c:	428a      	cmp	r2, r1
 800ae3e:	dd0b      	ble.n	800ae58 <scalbn+0x80>
 800ae40:	ec45 4b11 	vmov	d1, r4, r5
 800ae44:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800aeb0 <scalbn+0xd8>
 800ae48:	f000 f83c 	bl	800aec4 <copysign>
 800ae4c:	a318      	add	r3, pc, #96	; (adr r3, 800aeb0 <scalbn+0xd8>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	ec51 0b10 	vmov	r0, r1, d0
 800ae56:	e7da      	b.n	800ae0e <scalbn+0x36>
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	dd08      	ble.n	800ae6e <scalbn+0x96>
 800ae5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae68:	ec45 4b10 	vmov	d0, r4, r5
 800ae6c:	bd70      	pop	{r4, r5, r6, pc}
 800ae6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae72:	da0d      	bge.n	800ae90 <scalbn+0xb8>
 800ae74:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae78:	429e      	cmp	r6, r3
 800ae7a:	ec45 4b11 	vmov	d1, r4, r5
 800ae7e:	dce1      	bgt.n	800ae44 <scalbn+0x6c>
 800ae80:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800aea8 <scalbn+0xd0>
 800ae84:	f000 f81e 	bl	800aec4 <copysign>
 800ae88:	a307      	add	r3, pc, #28	; (adr r3, 800aea8 <scalbn+0xd0>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	e7e0      	b.n	800ae52 <scalbn+0x7a>
 800ae90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae94:	3236      	adds	r2, #54	; 0x36
 800ae96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae9e:	4620      	mov	r0, r4
 800aea0:	4629      	mov	r1, r5
 800aea2:	2200      	movs	r2, #0
 800aea4:	4b06      	ldr	r3, [pc, #24]	; (800aec0 <scalbn+0xe8>)
 800aea6:	e7b2      	b.n	800ae0e <scalbn+0x36>
 800aea8:	c2f8f359 	.word	0xc2f8f359
 800aeac:	01a56e1f 	.word	0x01a56e1f
 800aeb0:	8800759c 	.word	0x8800759c
 800aeb4:	7e37e43c 	.word	0x7e37e43c
 800aeb8:	43500000 	.word	0x43500000
 800aebc:	ffff3cb0 	.word	0xffff3cb0
 800aec0:	3c900000 	.word	0x3c900000

0800aec4 <copysign>:
 800aec4:	ec51 0b10 	vmov	r0, r1, d0
 800aec8:	ee11 0a90 	vmov	r0, s3
 800aecc:	ee10 2a10 	vmov	r2, s0
 800aed0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800aed8:	ea41 0300 	orr.w	r3, r1, r0
 800aedc:	ec43 2b10 	vmov	d0, r2, r3
 800aee0:	4770      	bx	lr
	...

0800aee4 <_init>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	bf00      	nop
 800aee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeea:	bc08      	pop	{r3}
 800aeec:	469e      	mov	lr, r3
 800aeee:	4770      	bx	lr

0800aef0 <_fini>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	bf00      	nop
 800aef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef6:	bc08      	pop	{r3}
 800aef8:	469e      	mov	lr, r3
 800aefa:	4770      	bx	lr
