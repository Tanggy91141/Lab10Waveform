
Lab10Waveform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005efc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d0  080066d0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d8  080066d8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080066e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000088  08006764  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006764  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e26f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eb8  00000000  00000000  0002e323  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  000301e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  000310e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001672e  00000000  00000000  00031ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a6e3  00000000  00000000  00048616  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000913e0  00000000  00000000  00052cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e40d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a4  00000000  00000000  000e4154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006084 	.word	0x08006084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08006084 	.word	0x08006084

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b972 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	4688      	mov	r8, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14b      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	d967      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0720 	rsb	r7, r2, #32
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c32:	4095      	lsls	r5, r2
 8000c34:	ea47 0803 	orr.w	r8, r7, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c44:	fa1f fc85 	uxth.w	ip, r5
 8000c48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c50:	fb07 f10c 	mul.w	r1, r7, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5e:	f080 811b 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8118 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c68:	3f02      	subs	r7, #2
 8000c6a:	442b      	add	r3, r5
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c94:	3802      	subs	r0, #2
 8000c96:	442c      	add	r4, r5
 8000c98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cac:	4639      	mov	r1, r7
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xbe>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80eb 	beq.w	8000e92 <__udivmoddi4+0x286>
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f783 	clz	r7, r3
 8000cce:	2f00      	cmp	r7, #0
 8000cd0:	d147      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd0>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80fa 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000cea:	e9c6 4800 	strd	r4, r8, [r6]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa0>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xe8>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 808f 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfe:	1b49      	subs	r1, r1, r5
 8000d00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d04:	fa1f f885 	uxth.w	r8, r5
 8000d08:	2701      	movs	r7, #1
 8000d0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb08 f10c 	mul.w	r1, r8, ip
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d20:	18eb      	adds	r3, r5, r3
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1a59      	subs	r1, r3, r1
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x14c>
 8000d48:	192c      	adds	r4, r5, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x14a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80b6 	bhi.w	8000ec2 <__udivmoddi4+0x2b6>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e79f      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d62:	f1c7 0c20 	rsb	ip, r7, #32
 8000d66:	40bb      	lsls	r3, r7
 8000d68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d70:	fa01 f407 	lsl.w	r4, r1, r7
 8000d74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d80:	4325      	orrs	r5, r4
 8000d82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d86:	0c2c      	lsrs	r4, r5, #16
 8000d88:	fb08 3319 	mls	r3, r8, r9, r3
 8000d8c:	fa1f fa8e 	uxth.w	sl, lr
 8000d90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d94:	fb09 f40a 	mul.w	r4, r9, sl
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1e 0303 	adds.w	r3, lr, r3
 8000da8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dac:	f080 8087 	bcs.w	8000ebe <__udivmoddi4+0x2b2>
 8000db0:	429c      	cmp	r4, r3
 8000db2:	f240 8084 	bls.w	8000ebe <__udivmoddi4+0x2b2>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4473      	add	r3, lr
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	b2ad      	uxth	r5, r5
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd0:	45a2      	cmp	sl, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	d26b      	bcs.n	8000eb6 <__udivmoddi4+0x2aa>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d969      	bls.n	8000eb6 <__udivmoddi4+0x2aa>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4474      	add	r4, lr
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	fba0 8902 	umull	r8, r9, r0, r2
 8000dee:	eba4 040a 	sub.w	r4, r4, sl
 8000df2:	454c      	cmp	r4, r9
 8000df4:	46c2      	mov	sl, r8
 8000df6:	464b      	mov	r3, r9
 8000df8:	d354      	bcc.n	8000ea4 <__udivmoddi4+0x298>
 8000dfa:	d051      	beq.n	8000ea0 <__udivmoddi4+0x294>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d069      	beq.n	8000ed4 <__udivmoddi4+0x2c8>
 8000e00:	ebb1 050a 	subs.w	r5, r1, sl
 8000e04:	eb64 0403 	sbc.w	r4, r4, r3
 8000e08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	40fc      	lsrs	r4, r7
 8000e10:	ea4c 0505 	orr.w	r5, ip, r5
 8000e14:	e9c6 5400 	strd	r5, r4, [r6]
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e747      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f703 	lsr.w	r7, r0, r3
 8000e24:	4095      	lsls	r5, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e32:	4338      	orrs	r0, r7
 8000e34:	0c01      	lsrs	r1, r0, #16
 8000e36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3a:	fa1f f885 	uxth.w	r8, r5
 8000e3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb07 f308 	mul.w	r3, r7, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x256>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e58:	d22f      	bcs.n	8000eba <__udivmoddi4+0x2ae>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d92d      	bls.n	8000eba <__udivmoddi4+0x2ae>
 8000e5e:	3f02      	subs	r7, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1acb      	subs	r3, r1, r3
 8000e64:	b281      	uxth	r1, r0
 8000e66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb00 f308 	mul.w	r3, r0, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x27e>
 8000e7a:	1869      	adds	r1, r5, r1
 8000e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e80:	d217      	bcs.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d915      	bls.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4429      	add	r1, r5
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e90:	e73b      	b.n	8000d0a <__udivmoddi4+0xfe>
 8000e92:	4637      	mov	r7, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e709      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e98:	4607      	mov	r7, r0
 8000e9a:	e6e7      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000ea0:	4541      	cmp	r1, r8
 8000ea2:	d2ab      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eac:	3801      	subs	r0, #1
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e7a4      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb2:	4660      	mov	r0, ip
 8000eb4:	e7e9      	b.n	8000e8a <__udivmoddi4+0x27e>
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	e795      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000eba:	4667      	mov	r7, ip
 8000ebc:	e7d1      	b.n	8000e62 <__udivmoddi4+0x256>
 8000ebe:	4681      	mov	r9, r0
 8000ec0:	e77c      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	442c      	add	r4, r5
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0x14c>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	442b      	add	r3, r5
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	e708      	b.n	8000ce6 <__udivmoddi4+0xda>
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0xa0>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f001 fa2f 	bl	8002348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 fc6b 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 fe15 	bl	8001b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef2:	f000 fdf3 	bl	8001adc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ef6:	f000 fdc7 	bl	8001a88 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000efa:	f000 fccb 	bl	8001894 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000efe:	f000 fd1b 	bl	8001938 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000f02:	f000 fd51 	bl	80019a8 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f06:	f000 fd9b 	bl	8001a40 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f0a:	48c5      	ldr	r0, [pc, #788]	; (8001220 <main+0x340>)
 8000f0c:	f003 fac1 	bl	8004492 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f10:	48c4      	ldr	r0, [pc, #784]	; (8001224 <main+0x344>)
 8000f12:	f003 fae2 	bl	80044da <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000f16:	2201      	movs	r2, #1
 8000f18:	49c3      	ldr	r1, [pc, #780]	; (8001228 <main+0x348>)
 8000f1a:	48c4      	ldr	r0, [pc, #784]	; (800122c <main+0x34c>)
 8000f1c:	f001 faca 	bl	80024b4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	48c2      	ldr	r0, [pc, #776]	; (8001230 <main+0x350>)
 8000f28:	f002 fc8a 	bl	8003840 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		static uint64_t timestamp = 0;
		if (micros() - timestamp >= 100) //10kHz     //Hz
 8000f2c:	f000 fe96 	bl	8001c5c <micros>
 8000f30:	460a      	mov	r2, r1
 8000f32:	4601      	mov	r1, r0
 8000f34:	4bbf      	ldr	r3, [pc, #764]	; (8001234 <main+0x354>)
 8000f36:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4614      	mov	r4, r2
 8000f3e:	ebb3 030b 	subs.w	r3, r3, fp
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	bf08      	it	eq
 8000f4a:	2b64      	cmpeq	r3, #100	; 0x64
 8000f4c:	d306      	bcc.n	8000f5c <main+0x7c>
		{
			timestamp = micros();
 8000f4e:	f000 fe85 	bl	8001c5c <micros>
 8000f52:	4603      	mov	r3, r0
 8000f54:	460c      	mov	r4, r1
 8000f56:	4ab7      	ldr	r2, [pc, #732]	; (8001234 <main+0x354>)
 8000f58:	e9c2 3400 	strd	r3, r4, [r2]
//			}
		}



		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	49b6      	ldr	r1, [pc, #728]	; (8001238 <main+0x358>)
 8000f60:	48b6      	ldr	r0, [pc, #728]	; (800123c <main+0x35c>)
 8000f62:	f003 fe03 	bl	8004b6c <HAL_UART_Receive_IT>

		inputchar = UARTRecieveIT();		//Focus on this character
 8000f66:	f000 fe93 	bl	8001c90 <UARTRecieveIT>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4bb4      	ldr	r3, [pc, #720]	; (8001240 <main+0x360>)
 8000f70:	801a      	strh	r2, [r3, #0]
		if(inputchar!=-1)
 8000f72:	4bb3      	ldr	r3, [pc, #716]	; (8001240 <main+0x360>)
 8000f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d012      	beq.n	8000fa4 <main+0xc4>
		{
			sprintf(TxDataBuffer, "\r\nYou press:[%c]\r\n\r\n", inputchar);
 8000f7e:	4bb0      	ldr	r3, [pc, #704]	; (8001240 <main+0x360>)
 8000f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f84:	461a      	mov	r2, r3
 8000f86:	49af      	ldr	r1, [pc, #700]	; (8001244 <main+0x364>)
 8000f88:	48af      	ldr	r0, [pc, #700]	; (8001248 <main+0x368>)
 8000f8a:	f004 fc7f 	bl	800588c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f8e:	48ae      	ldr	r0, [pc, #696]	; (8001248 <main+0x368>)
 8000f90:	f7ff f926 	bl	80001e0 <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	49aa      	ldr	r1, [pc, #680]	; (8001248 <main+0x368>)
 8000f9e:	48a7      	ldr	r0, [pc, #668]	; (800123c <main+0x35c>)
 8000fa0:	f003 fd4b 	bl	8004a3a <HAL_UART_Transmit>
		}



		switch (state)
 8000fa4:	4ba9      	ldr	r3, [pc, #676]	; (800124c <main+0x36c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	3b0a      	subs	r3, #10
 8000faa:	2b32      	cmp	r3, #50	; 0x32
 8000fac:	d8be      	bhi.n	8000f2c <main+0x4c>
 8000fae:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <main+0xd4>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08001081 	.word	0x08001081
 8000fb8:	08000f2d 	.word	0x08000f2d
 8000fbc:	08000f2d 	.word	0x08000f2d
 8000fc0:	08000f2d 	.word	0x08000f2d
 8000fc4:	08000f2d 	.word	0x08000f2d
 8000fc8:	08000f2d 	.word	0x08000f2d
 8000fcc:	08000f2d 	.word	0x08000f2d
 8000fd0:	08000f2d 	.word	0x08000f2d
 8000fd4:	08000f2d 	.word	0x08000f2d
 8000fd8:	08000f2d 	.word	0x08000f2d
 8000fdc:	0800108d 	.word	0x0800108d
 8000fe0:	08000f2d 	.word	0x08000f2d
 8000fe4:	08000f2d 	.word	0x08000f2d
 8000fe8:	08000f2d 	.word	0x08000f2d
 8000fec:	08000f2d 	.word	0x08000f2d
 8000ff0:	08000f2d 	.word	0x08000f2d
 8000ff4:	08000f2d 	.word	0x08000f2d
 8000ff8:	08000f2d 	.word	0x08000f2d
 8000ffc:	08000f2d 	.word	0x08000f2d
 8001000:	08000f2d 	.word	0x08000f2d
 8001004:	08001301 	.word	0x08001301
 8001008:	08000f2d 	.word	0x08000f2d
 800100c:	08000f2d 	.word	0x08000f2d
 8001010:	08000f2d 	.word	0x08000f2d
 8001014:	08000f2d 	.word	0x08000f2d
 8001018:	08000f2d 	.word	0x08000f2d
 800101c:	08000f2d 	.word	0x08000f2d
 8001020:	08000f2d 	.word	0x08000f2d
 8001024:	08000f2d 	.word	0x08000f2d
 8001028:	08000f2d 	.word	0x08000f2d
 800102c:	0800130d 	.word	0x0800130d
 8001030:	08000f2d 	.word	0x08000f2d
 8001034:	08000f2d 	.word	0x08000f2d
 8001038:	08000f2d 	.word	0x08000f2d
 800103c:	08000f2d 	.word	0x08000f2d
 8001040:	08000f2d 	.word	0x08000f2d
 8001044:	08000f2d 	.word	0x08000f2d
 8001048:	08000f2d 	.word	0x08000f2d
 800104c:	08000f2d 	.word	0x08000f2d
 8001050:	08000f2d 	.word	0x08000f2d
 8001054:	08001559 	.word	0x08001559
 8001058:	08000f2d 	.word	0x08000f2d
 800105c:	08000f2d 	.word	0x08000f2d
 8001060:	08000f2d 	.word	0x08000f2d
 8001064:	08000f2d 	.word	0x08000f2d
 8001068:	08000f2d 	.word	0x08000f2d
 800106c:	08000f2d 	.word	0x08000f2d
 8001070:	08000f2d 	.word	0x08000f2d
 8001074:	08000f2d 	.word	0x08000f2d
 8001078:	08000f2d 	.word	0x08000f2d
 800107c:	08001565 	.word	0x08001565
		{
		case printMenu_Saw:
			Print_Menu_Saw();
 8001080:	f000 fe50 	bl	8001d24 <Print_Menu_Saw>
			state = Saw_WaitInput;
 8001084:	4b71      	ldr	r3, [pc, #452]	; (800124c <main+0x36c>)
 8001086:	2214      	movs	r2, #20
 8001088:	701a      	strb	r2, [r3, #0]
			break;
 800108a:	e382      	b.n	8001792 <main+0x8b2>
		case Saw_WaitInput:
			switch (inputchar)
 800108c:	4b6c      	ldr	r3, [pc, #432]	; (8001240 <main+0x360>)
 800108e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001092:	2b72      	cmp	r3, #114	; 0x72
 8001094:	f000 8109 	beq.w	80012aa <main+0x3ca>
 8001098:	2b72      	cmp	r3, #114	; 0x72
 800109a:	dc0d      	bgt.n	80010b8 <main+0x1d8>
 800109c:	2b66      	cmp	r3, #102	; 0x66
 800109e:	d04b      	beq.n	8001138 <main+0x258>
 80010a0:	2b66      	cmp	r3, #102	; 0x66
 80010a2:	dc04      	bgt.n	80010ae <main+0x1ce>
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	f000 8126 	beq.w	80012f8 <main+0x418>
 80010ac:	e11e      	b.n	80012ec <main+0x40c>
 80010ae:	2b69      	cmp	r3, #105	; 0x69
 80010b0:	d013      	beq.n	80010da <main+0x1fa>
 80010b2:	2b71      	cmp	r3, #113	; 0x71
 80010b4:	d015      	beq.n	80010e2 <main+0x202>
 80010b6:	e119      	b.n	80012ec <main+0x40c>
 80010b8:	2b76      	cmp	r3, #118	; 0x76
 80010ba:	f000 8088 	beq.w	80011ce <main+0x2ee>
 80010be:	2b76      	cmp	r3, #118	; 0x76
 80010c0:	dc05      	bgt.n	80010ce <main+0x1ee>
 80010c2:	2b73      	cmp	r3, #115	; 0x73
 80010c4:	d011      	beq.n	80010ea <main+0x20a>
 80010c6:	2b75      	cmp	r3, #117	; 0x75
 80010c8:	f000 8118 	beq.w	80012fc <main+0x41c>
 80010cc:	e10e      	b.n	80012ec <main+0x40c>
 80010ce:	2b77      	cmp	r3, #119	; 0x77
 80010d0:	f000 80c6 	beq.w	8001260 <main+0x380>
 80010d4:	2b78      	cmp	r3, #120	; 0x78
 80010d6:	d055      	beq.n	8001184 <main+0x2a4>
 80010d8:	e108      	b.n	80012ec <main+0x40c>
				case -1 :
					break;

				//Mode
				case 'i':
					state = printMenu_Sin;
 80010da:	4b5c      	ldr	r3, [pc, #368]	; (800124c <main+0x36c>)
 80010dc:	221e      	movs	r2, #30
 80010de:	701a      	strb	r2, [r3, #0]
					break;
 80010e0:	e10d      	b.n	80012fe <main+0x41e>
				case 'q':
					state = printMenu_Squ;
 80010e2:	4b5a      	ldr	r3, [pc, #360]	; (800124c <main+0x36c>)
 80010e4:	2232      	movs	r2, #50	; 0x32
 80010e6:	701a      	strb	r2, [r3, #0]
					break;
 80010e8:	e109      	b.n	80012fe <main+0x41e>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 80010ea:	4b59      	ldr	r3, [pc, #356]	; (8001250 <main+0x370>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010f4:	eef4 7a47 	vcmp.f32	s15, s14
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	d103      	bne.n	8001106 <main+0x226>
 80010fe:	4b54      	ldr	r3, [pc, #336]	; (8001250 <main+0x370>)
 8001100:	4a54      	ldr	r2, [pc, #336]	; (8001254 <main+0x374>)
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e012      	b.n	800112c <main+0x24c>
					else {Freq = Freq + 0.1 ;}
 8001106:	4b52      	ldr	r3, [pc, #328]	; (8001250 <main+0x370>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa24 	bl	8000558 <__aeabi_f2d>
 8001110:	a33f      	add	r3, pc, #252	; (adr r3, 8001210 <main+0x330>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff f8c1 	bl	800029c <__adddf3>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	f7ff fd0b 	bl	8000b3c <__aeabi_d2f>
 8001126:	4602      	mov	r2, r0
 8001128:	4b49      	ldr	r3, [pc, #292]	; (8001250 <main+0x370>)
 800112a:	601a      	str	r2, [r3, #0]
					Print_fq();
 800112c:	f000 fe5c 	bl	8001de8 <Print_fq>
					state = printMenu_Saw;
 8001130:	4b46      	ldr	r3, [pc, #280]	; (800124c <main+0x36c>)
 8001132:	220a      	movs	r2, #10
 8001134:	701a      	strb	r2, [r3, #0]
					break;
 8001136:	e0e2      	b.n	80012fe <main+0x41e>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <main+0x370>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d104      	bne.n	8001152 <main+0x272>
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <main+0x370>)
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e012      	b.n	8001178 <main+0x298>
					else {Freq = Freq - 0.1 ;}
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <main+0x370>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9fe 	bl	8000558 <__aeabi_f2d>
 800115c:	a32c      	add	r3, pc, #176	; (adr r3, 8001210 <main+0x330>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff f899 	bl	8000298 <__aeabi_dsub>
 8001166:	4603      	mov	r3, r0
 8001168:	460c      	mov	r4, r1
 800116a:	4618      	mov	r0, r3
 800116c:	4621      	mov	r1, r4
 800116e:	f7ff fce5 	bl	8000b3c <__aeabi_d2f>
 8001172:	4602      	mov	r2, r0
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <main+0x370>)
 8001176:	601a      	str	r2, [r3, #0]
					Print_fq();
 8001178:	f000 fe36 	bl	8001de8 <Print_fq>
					state = printMenu_Saw;
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <main+0x36c>)
 800117e:	220a      	movs	r2, #10
 8001180:	701a      	strb	r2, [r3, #0]
					break;
 8001182:	e0bc      	b.n	80012fe <main+0x41e>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <main+0x378>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9e5 	bl	8000558 <__aeabi_f2d>
 800118e:	a322      	add	r3, pc, #136	; (adr r3, 8001218 <main+0x338>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fca0 	bl	8000ad8 <__aeabi_dcmpeq>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <main+0x2c6>
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <main+0x378>)
 80011a0:	4a2e      	ldr	r2, [pc, #184]	; (800125c <main+0x37c>)
 80011a2:	601a      	str	r2, [r3, #0]
					else {L_Volt = L_Volt + 0.1 ;}
					break;
 80011a4:	e0ab      	b.n	80012fe <main+0x41e>
					else {L_Volt = L_Volt + 0.1 ;}
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <main+0x378>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9d4 	bl	8000558 <__aeabi_f2d>
 80011b0:	a317      	add	r3, pc, #92	; (adr r3, 8001210 <main+0x330>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff f871 	bl	800029c <__adddf3>
 80011ba:	4603      	mov	r3, r0
 80011bc:	460c      	mov	r4, r1
 80011be:	4618      	mov	r0, r3
 80011c0:	4621      	mov	r1, r4
 80011c2:	f7ff fcbb 	bl	8000b3c <__aeabi_d2f>
 80011c6:	4602      	mov	r2, r0
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <main+0x378>)
 80011ca:	601a      	str	r2, [r3, #0]
					break;
 80011cc:	e097      	b.n	80012fe <main+0x41e>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <main+0x378>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d104      	bne.n	80011e8 <main+0x308>
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <main+0x378>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
					else {L_Volt = L_Volt - 0.1 ;}
					break;
 80011e6:	e08a      	b.n	80012fe <main+0x41e>
					else {L_Volt = L_Volt - 0.1 ;}
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <main+0x378>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	a307      	add	r3, pc, #28	; (adr r3, 8001210 <main+0x330>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f84e 	bl	8000298 <__aeabi_dsub>
 80011fc:	4603      	mov	r3, r0
 80011fe:	460c      	mov	r4, r1
 8001200:	4618      	mov	r0, r3
 8001202:	4621      	mov	r1, r4
 8001204:	f7ff fc9a 	bl	8000b3c <__aeabi_d2f>
 8001208:	4602      	mov	r2, r0
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <main+0x378>)
 800120c:	601a      	str	r2, [r3, #0]
					break;
 800120e:	e076      	b.n	80012fe <main+0x41e>
 8001210:	9999999a 	.word	0x9999999a
 8001214:	3fb99999 	.word	0x3fb99999
 8001218:	66666666 	.word	0x66666666
 800121c:	400a6666 	.word	0x400a6666
 8001220:	20000130 	.word	0x20000130
 8001224:	20000210 	.word	0x20000210
 8001228:	200000a4 	.word	0x200000a4
 800122c:	200001c8 	.word	0x200001c8
 8001230:	40020000 	.word	0x40020000
 8001234:	20000118 	.word	0x20000118
 8001238:	200000d8 	.word	0x200000d8
 800123c:	200002b0 	.word	0x200002b0
 8001240:	200000b4 	.word	0x200000b4
 8001244:	0800609c 	.word	0x0800609c
 8001248:	200000b8 	.word	0x200000b8
 800124c:	20000010 	.word	0x20000010
 8001250:	20000000 	.word	0x20000000
 8001254:	41200000 	.word	0x41200000
 8001258:	200000b0 	.word	0x200000b0
 800125c:	40533333 	.word	0x40533333

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 8001260:	4bb5      	ldr	r3, [pc, #724]	; (8001538 <main+0x658>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f977 	bl	8000558 <__aeabi_f2d>
 800126a:	a3af      	add	r3, pc, #700	; (adr r3, 8001528 <main+0x648>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <main+0x3a2>
 800127a:	4baf      	ldr	r3, [pc, #700]	; (8001538 <main+0x658>)
 800127c:	4aaf      	ldr	r2, [pc, #700]	; (800153c <main+0x65c>)
 800127e:	601a      	str	r2, [r3, #0]
					else {H_Volt = H_Volt + 0.1 ;}
					break;
 8001280:	e03d      	b.n	80012fe <main+0x41e>
					else {H_Volt = H_Volt + 0.1 ;}
 8001282:	4bad      	ldr	r3, [pc, #692]	; (8001538 <main+0x658>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f966 	bl	8000558 <__aeabi_f2d>
 800128c:	a3a8      	add	r3, pc, #672	; (adr r3, 8001530 <main+0x650>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff f803 	bl	800029c <__adddf3>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	4618      	mov	r0, r3
 800129c:	4621      	mov	r1, r4
 800129e:	f7ff fc4d 	bl	8000b3c <__aeabi_d2f>
 80012a2:	4602      	mov	r2, r0
 80012a4:	4ba4      	ldr	r3, [pc, #656]	; (8001538 <main+0x658>)
 80012a6:	601a      	str	r2, [r3, #0]
					break;
 80012a8:	e029      	b.n	80012fe <main+0x41e>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 80012aa:	4ba3      	ldr	r3, [pc, #652]	; (8001538 <main+0x658>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	d104      	bne.n	80012c4 <main+0x3e4>
 80012ba:	4b9f      	ldr	r3, [pc, #636]	; (8001538 <main+0x658>)
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
					else {H_Volt = H_Volt - 0.1 ;}
					break;
 80012c2:	e01c      	b.n	80012fe <main+0x41e>
					else {H_Volt = H_Volt - 0.1 ;}
 80012c4:	4b9c      	ldr	r3, [pc, #624]	; (8001538 <main+0x658>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f945 	bl	8000558 <__aeabi_f2d>
 80012ce:	a398      	add	r3, pc, #608	; (adr r3, 8001530 <main+0x650>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7fe ffe0 	bl	8000298 <__aeabi_dsub>
 80012d8:	4603      	mov	r3, r0
 80012da:	460c      	mov	r4, r1
 80012dc:	4618      	mov	r0, r3
 80012de:	4621      	mov	r1, r4
 80012e0:	f7ff fc2c 	bl	8000b3c <__aeabi_d2f>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b94      	ldr	r3, [pc, #592]	; (8001538 <main+0x658>)
 80012e8:	601a      	str	r2, [r3, #0]
					break;
 80012ea:	e008      	b.n	80012fe <main+0x41e>
				case 'u':
					break;

				//Error
				default:
					Print_Error();
 80012ec:	f000 fdd2 	bl	8001e94 <Print_Error>
					state = printMenu_Saw;
 80012f0:	4b93      	ldr	r3, [pc, #588]	; (8001540 <main+0x660>)
 80012f2:	220a      	movs	r2, #10
 80012f4:	701a      	strb	r2, [r3, #0]
					break;
 80012f6:	e002      	b.n	80012fe <main+0x41e>
					break;
 80012f8:	bf00      	nop
 80012fa:	e24a      	b.n	8001792 <main+0x8b2>
					break;
 80012fc:	bf00      	nop
			}
			break;
 80012fe:	e248      	b.n	8001792 <main+0x8b2>

		case printMenu_Sin:
			Print_Menu_Sin();
 8001300:	f000 fd30 	bl	8001d64 <Print_Menu_Sin>
			state = Sin_WaitInput;
 8001304:	4b8e      	ldr	r3, [pc, #568]	; (8001540 <main+0x660>)
 8001306:	2228      	movs	r2, #40	; 0x28
 8001308:	701a      	strb	r2, [r3, #0]
			break;
 800130a:	e242      	b.n	8001792 <main+0x8b2>
		case Sin_WaitInput:
			switch (inputchar)
 800130c:	4b8d      	ldr	r3, [pc, #564]	; (8001544 <main+0x664>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	2b72      	cmp	r3, #114	; 0x72
 8001314:	f000 80de 	beq.w	80014d4 <main+0x5f4>
 8001318:	2b72      	cmp	r3, #114	; 0x72
 800131a:	dc0d      	bgt.n	8001338 <main+0x458>
 800131c:	2b61      	cmp	r3, #97	; 0x61
 800131e:	d019      	beq.n	8001354 <main+0x474>
 8001320:	2b61      	cmp	r3, #97	; 0x61
 8001322:	dc04      	bgt.n	800132e <main+0x44e>
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	f000 8114 	beq.w	8001554 <main+0x674>
 800132c:	e0f3      	b.n	8001516 <main+0x636>
 800132e:	2b66      	cmp	r3, #102	; 0x66
 8001330:	d03f      	beq.n	80013b2 <main+0x4d2>
 8001332:	2b71      	cmp	r3, #113	; 0x71
 8001334:	d012      	beq.n	800135c <main+0x47c>
 8001336:	e0ee      	b.n	8001516 <main+0x636>
 8001338:	2b76      	cmp	r3, #118	; 0x76
 800133a:	f000 8085 	beq.w	8001448 <main+0x568>
 800133e:	2b76      	cmp	r3, #118	; 0x76
 8001340:	dc02      	bgt.n	8001348 <main+0x468>
 8001342:	2b73      	cmp	r3, #115	; 0x73
 8001344:	d00e      	beq.n	8001364 <main+0x484>
 8001346:	e0e6      	b.n	8001516 <main+0x636>
 8001348:	2b77      	cmp	r3, #119	; 0x77
 800134a:	f000 809e 	beq.w	800148a <main+0x5aa>
 800134e:	2b78      	cmp	r3, #120	; 0x78
 8001350:	d055      	beq.n	80013fe <main+0x51e>
 8001352:	e0e0      	b.n	8001516 <main+0x636>
				case -1 :
					break;

				//Mode
				case 'a':
					state = printMenu_Saw;
 8001354:	4b7a      	ldr	r3, [pc, #488]	; (8001540 <main+0x660>)
 8001356:	220a      	movs	r2, #10
 8001358:	701a      	strb	r2, [r3, #0]
					break;
 800135a:	e0fc      	b.n	8001556 <main+0x676>
				case 'q':
					state = printMenu_Squ;
 800135c:	4b78      	ldr	r3, [pc, #480]	; (8001540 <main+0x660>)
 800135e:	2232      	movs	r2, #50	; 0x32
 8001360:	701a      	strb	r2, [r3, #0]
					break;
 8001362:	e0f8      	b.n	8001556 <main+0x676>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 8001364:	4b78      	ldr	r3, [pc, #480]	; (8001548 <main+0x668>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800136e:	eef4 7a47 	vcmp.f32	s15, s14
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d103      	bne.n	8001380 <main+0x4a0>
 8001378:	4b73      	ldr	r3, [pc, #460]	; (8001548 <main+0x668>)
 800137a:	4a74      	ldr	r2, [pc, #464]	; (800154c <main+0x66c>)
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e012      	b.n	80013a6 <main+0x4c6>
					else {Freq = Freq + 0.1 ;}
 8001380:	4b71      	ldr	r3, [pc, #452]	; (8001548 <main+0x668>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8e7 	bl	8000558 <__aeabi_f2d>
 800138a:	a369      	add	r3, pc, #420	; (adr r3, 8001530 <main+0x650>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7fe ff84 	bl	800029c <__adddf3>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4618      	mov	r0, r3
 800139a:	4621      	mov	r1, r4
 800139c:	f7ff fbce 	bl	8000b3c <__aeabi_d2f>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b69      	ldr	r3, [pc, #420]	; (8001548 <main+0x668>)
 80013a4:	601a      	str	r2, [r3, #0]
					Print_fq();
 80013a6:	f000 fd1f 	bl	8001de8 <Print_fq>
					state = printMenu_Sin;
 80013aa:	4b65      	ldr	r3, [pc, #404]	; (8001540 <main+0x660>)
 80013ac:	221e      	movs	r2, #30
 80013ae:	701a      	strb	r2, [r3, #0]
					break;
 80013b0:	e0d1      	b.n	8001556 <main+0x676>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 80013b2:	4b65      	ldr	r3, [pc, #404]	; (8001548 <main+0x668>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	d104      	bne.n	80013cc <main+0x4ec>
 80013c2:	4b61      	ldr	r3, [pc, #388]	; (8001548 <main+0x668>)
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e012      	b.n	80013f2 <main+0x512>
					else {Freq = Freq - 0.1 ;}
 80013cc:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <main+0x668>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8c1 	bl	8000558 <__aeabi_f2d>
 80013d6:	a356      	add	r3, pc, #344	; (adr r3, 8001530 <main+0x650>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7fe ff5c 	bl	8000298 <__aeabi_dsub>
 80013e0:	4603      	mov	r3, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	4618      	mov	r0, r3
 80013e6:	4621      	mov	r1, r4
 80013e8:	f7ff fba8 	bl	8000b3c <__aeabi_d2f>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b56      	ldr	r3, [pc, #344]	; (8001548 <main+0x668>)
 80013f0:	601a      	str	r2, [r3, #0]
					Print_fq();
 80013f2:	f000 fcf9 	bl	8001de8 <Print_fq>
					state = printMenu_Sin;
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <main+0x660>)
 80013f8:	221e      	movs	r2, #30
 80013fa:	701a      	strb	r2, [r3, #0]
					break;
 80013fc:	e0ab      	b.n	8001556 <main+0x676>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 80013fe:	4b54      	ldr	r3, [pc, #336]	; (8001550 <main+0x670>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8a8 	bl	8000558 <__aeabi_f2d>
 8001408:	a347      	add	r3, pc, #284	; (adr r3, 8001528 <main+0x648>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff fb63 	bl	8000ad8 <__aeabi_dcmpeq>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <main+0x540>
 8001418:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <main+0x670>)
 800141a:	4a48      	ldr	r2, [pc, #288]	; (800153c <main+0x65c>)
 800141c:	601a      	str	r2, [r3, #0]
					else {L_Volt = L_Volt + 0.1 ;}
					break;
 800141e:	e09a      	b.n	8001556 <main+0x676>
					else {L_Volt = L_Volt + 0.1 ;}
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <main+0x670>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f897 	bl	8000558 <__aeabi_f2d>
 800142a:	a341      	add	r3, pc, #260	; (adr r3, 8001530 <main+0x650>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7fe ff34 	bl	800029c <__adddf3>
 8001434:	4603      	mov	r3, r0
 8001436:	460c      	mov	r4, r1
 8001438:	4618      	mov	r0, r3
 800143a:	4621      	mov	r1, r4
 800143c:	f7ff fb7e 	bl	8000b3c <__aeabi_d2f>
 8001440:	4602      	mov	r2, r0
 8001442:	4b43      	ldr	r3, [pc, #268]	; (8001550 <main+0x670>)
 8001444:	601a      	str	r2, [r3, #0]
					break;
 8001446:	e086      	b.n	8001556 <main+0x676>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 8001448:	4b41      	ldr	r3, [pc, #260]	; (8001550 <main+0x670>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	d104      	bne.n	8001462 <main+0x582>
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <main+0x670>)
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
					else {L_Volt = L_Volt - 0.1 ;}
					break;
 8001460:	e079      	b.n	8001556 <main+0x676>
					else {L_Volt = L_Volt - 0.1 ;}
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <main+0x670>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f876 	bl	8000558 <__aeabi_f2d>
 800146c:	a330      	add	r3, pc, #192	; (adr r3, 8001530 <main+0x650>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7fe ff11 	bl	8000298 <__aeabi_dsub>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	f7ff fb5d 	bl	8000b3c <__aeabi_d2f>
 8001482:	4602      	mov	r2, r0
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <main+0x670>)
 8001486:	601a      	str	r2, [r3, #0]
					break;
 8001488:	e065      	b.n	8001556 <main+0x676>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <main+0x658>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f862 	bl	8000558 <__aeabi_f2d>
 8001494:	a324      	add	r3, pc, #144	; (adr r3, 8001528 <main+0x648>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7ff fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <main+0x5cc>
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <main+0x658>)
 80014a6:	4a25      	ldr	r2, [pc, #148]	; (800153c <main+0x65c>)
 80014a8:	601a      	str	r2, [r3, #0]
					else {H_Volt = H_Volt + 0.1 ;}
					break;
 80014aa:	e054      	b.n	8001556 <main+0x676>
					else {H_Volt = H_Volt + 0.1 ;}
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <main+0x658>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f851 	bl	8000558 <__aeabi_f2d>
 80014b6:	a31e      	add	r3, pc, #120	; (adr r3, 8001530 <main+0x650>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7fe feee 	bl	800029c <__adddf3>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	4618      	mov	r0, r3
 80014c6:	4621      	mov	r1, r4
 80014c8:	f7ff fb38 	bl	8000b3c <__aeabi_d2f>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <main+0x658>)
 80014d0:	601a      	str	r2, [r3, #0]
					break;
 80014d2:	e040      	b.n	8001556 <main+0x676>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <main+0x658>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d104      	bne.n	80014ee <main+0x60e>
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <main+0x658>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
					else {H_Volt = H_Volt - 0.1 ;}
					break;
 80014ec:	e033      	b.n	8001556 <main+0x676>
					else {H_Volt = H_Volt - 0.1 ;}
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <main+0x658>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f830 	bl	8000558 <__aeabi_f2d>
 80014f8:	a30d      	add	r3, pc, #52	; (adr r3, 8001530 <main+0x650>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7fe fecb 	bl	8000298 <__aeabi_dsub>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb17 	bl	8000b3c <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <main+0x658>)
 8001512:	601a      	str	r2, [r3, #0]
					break;
 8001514:	e01f      	b.n	8001556 <main+0x676>
				//case '':
					//break;

				//Error
				default:
					Print_Error();
 8001516:	f000 fcbd 	bl	8001e94 <Print_Error>
					state = printMenu_Sin;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <main+0x660>)
 800151c:	221e      	movs	r2, #30
 800151e:	701a      	strb	r2, [r3, #0]
					break;
 8001520:	e019      	b.n	8001556 <main+0x676>
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	66666666 	.word	0x66666666
 800152c:	400a6666 	.word	0x400a6666
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fb99999 	.word	0x3fb99999
 8001538:	2000000c 	.word	0x2000000c
 800153c:	40533333 	.word	0x40533333
 8001540:	20000010 	.word	0x20000010
 8001544:	200000b4 	.word	0x200000b4
 8001548:	20000000 	.word	0x20000000
 800154c:	41200000 	.word	0x41200000
 8001550:	200000b0 	.word	0x200000b0
					break;
 8001554:	bf00      	nop
			}
			break;
 8001556:	e11c      	b.n	8001792 <main+0x8b2>

		case printMenu_Squ:
			Print_Menu_Squ();
 8001558:	f000 fc24 	bl	8001da4 <Print_Menu_Squ>
			state = Squ_WaitInput;
 800155c:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <main+0x8c8>)
 800155e:	223c      	movs	r2, #60	; 0x3c
 8001560:	701a      	strb	r2, [r3, #0]
			break;
 8001562:	e116      	b.n	8001792 <main+0x8b2>
		case Squ_WaitInput:
			switch (inputchar)
 8001564:	4b91      	ldr	r3, [pc, #580]	; (80017ac <main+0x8cc>)
 8001566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156a:	2b6c      	cmp	r3, #108	; 0x6c
 800156c:	f000 810b 	beq.w	8001786 <main+0x8a6>
 8001570:	2b6c      	cmp	r3, #108	; 0x6c
 8001572:	dc10      	bgt.n	8001596 <main+0x6b6>
 8001574:	2b66      	cmp	r3, #102	; 0x66
 8001576:	d04e      	beq.n	8001616 <main+0x736>
 8001578:	2b66      	cmp	r3, #102	; 0x66
 800157a:	dc06      	bgt.n	800158a <main+0x6aa>
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	f000 8103 	beq.w	800178a <main+0x8aa>
 8001584:	2b61      	cmp	r3, #97	; 0x61
 8001586:	d017      	beq.n	80015b8 <main+0x6d8>
 8001588:	e0f7      	b.n	800177a <main+0x89a>
 800158a:	2b69      	cmp	r3, #105	; 0x69
 800158c:	d018      	beq.n	80015c0 <main+0x6e0>
 800158e:	2b6a      	cmp	r3, #106	; 0x6a
 8001590:	f000 80fd 	beq.w	800178e <main+0x8ae>
 8001594:	e0f1      	b.n	800177a <main+0x89a>
 8001596:	2b76      	cmp	r3, #118	; 0x76
 8001598:	f000 8088 	beq.w	80016ac <main+0x7cc>
 800159c:	2b76      	cmp	r3, #118	; 0x76
 800159e:	dc05      	bgt.n	80015ac <main+0x6cc>
 80015a0:	2b72      	cmp	r3, #114	; 0x72
 80015a2:	f000 80c9 	beq.w	8001738 <main+0x858>
 80015a6:	2b73      	cmp	r3, #115	; 0x73
 80015a8:	d00e      	beq.n	80015c8 <main+0x6e8>
 80015aa:	e0e6      	b.n	800177a <main+0x89a>
 80015ac:	2b77      	cmp	r3, #119	; 0x77
 80015ae:	f000 809e 	beq.w	80016ee <main+0x80e>
 80015b2:	2b78      	cmp	r3, #120	; 0x78
 80015b4:	d055      	beq.n	8001662 <main+0x782>
 80015b6:	e0e0      	b.n	800177a <main+0x89a>
				case -1 :
					break;

				//Mode
				case 'a':
					state = printMenu_Saw;
 80015b8:	4b7b      	ldr	r3, [pc, #492]	; (80017a8 <main+0x8c8>)
 80015ba:	220a      	movs	r2, #10
 80015bc:	701a      	strb	r2, [r3, #0]
					break;
 80015be:	e0e7      	b.n	8001790 <main+0x8b0>
				case 'i':
					state = printMenu_Sin;
 80015c0:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <main+0x8c8>)
 80015c2:	221e      	movs	r2, #30
 80015c4:	701a      	strb	r2, [r3, #0]
					break;
 80015c6:	e0e3      	b.n	8001790 <main+0x8b0>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 80015c8:	4b79      	ldr	r3, [pc, #484]	; (80017b0 <main+0x8d0>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015d2:	eef4 7a47 	vcmp.f32	s15, s14
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d103      	bne.n	80015e4 <main+0x704>
 80015dc:	4b74      	ldr	r3, [pc, #464]	; (80017b0 <main+0x8d0>)
 80015de:	4a75      	ldr	r2, [pc, #468]	; (80017b4 <main+0x8d4>)
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e012      	b.n	800160a <main+0x72a>
					else {Freq = Freq + 0.1 ;}
 80015e4:	4b72      	ldr	r3, [pc, #456]	; (80017b0 <main+0x8d0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffb5 	bl	8000558 <__aeabi_f2d>
 80015ee:	a36a      	add	r3, pc, #424	; (adr r3, 8001798 <main+0x8b8>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7fe fe52 	bl	800029c <__adddf3>
 80015f8:	4603      	mov	r3, r0
 80015fa:	460c      	mov	r4, r1
 80015fc:	4618      	mov	r0, r3
 80015fe:	4621      	mov	r1, r4
 8001600:	f7ff fa9c 	bl	8000b3c <__aeabi_d2f>
 8001604:	4602      	mov	r2, r0
 8001606:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <main+0x8d0>)
 8001608:	601a      	str	r2, [r3, #0]
					Print_fq();
 800160a:	f000 fbed 	bl	8001de8 <Print_fq>
					state = printMenu_Squ;
 800160e:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <main+0x8c8>)
 8001610:	2232      	movs	r2, #50	; 0x32
 8001612:	701a      	strb	r2, [r3, #0]
					break;
 8001614:	e0bc      	b.n	8001790 <main+0x8b0>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 8001616:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <main+0x8d0>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d104      	bne.n	8001630 <main+0x750>
 8001626:	4b62      	ldr	r3, [pc, #392]	; (80017b0 <main+0x8d0>)
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e012      	b.n	8001656 <main+0x776>
					else {Freq = Freq - 0.1 ;}
 8001630:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <main+0x8d0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff8f 	bl	8000558 <__aeabi_f2d>
 800163a:	a357      	add	r3, pc, #348	; (adr r3, 8001798 <main+0x8b8>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe fe2a 	bl	8000298 <__aeabi_dsub>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	4618      	mov	r0, r3
 800164a:	4621      	mov	r1, r4
 800164c:	f7ff fa76 	bl	8000b3c <__aeabi_d2f>
 8001650:	4602      	mov	r2, r0
 8001652:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <main+0x8d0>)
 8001654:	601a      	str	r2, [r3, #0]
					Print_fq();
 8001656:	f000 fbc7 	bl	8001de8 <Print_fq>
					state = printMenu_Squ;
 800165a:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <main+0x8c8>)
 800165c:	2232      	movs	r2, #50	; 0x32
 800165e:	701a      	strb	r2, [r3, #0]
					break;
 8001660:	e096      	b.n	8001790 <main+0x8b0>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001662:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <main+0x8d8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff76 	bl	8000558 <__aeabi_f2d>
 800166c:	a34c      	add	r3, pc, #304	; (adr r3, 80017a0 <main+0x8c0>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7ff fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <main+0x7a4>
 800167c:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <main+0x8d8>)
 800167e:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <main+0x8dc>)
 8001680:	601a      	str	r2, [r3, #0]
					else {L_Volt = L_Volt + 0.1 ;}
					break;
 8001682:	e085      	b.n	8001790 <main+0x8b0>
					else {L_Volt = L_Volt + 0.1 ;}
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <main+0x8d8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff65 	bl	8000558 <__aeabi_f2d>
 800168e:	a342      	add	r3, pc, #264	; (adr r3, 8001798 <main+0x8b8>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe fe02 	bl	800029c <__adddf3>
 8001698:	4603      	mov	r3, r0
 800169a:	460c      	mov	r4, r1
 800169c:	4618      	mov	r0, r3
 800169e:	4621      	mov	r1, r4
 80016a0:	f7ff fa4c 	bl	8000b3c <__aeabi_d2f>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <main+0x8d8>)
 80016a8:	601a      	str	r2, [r3, #0]
					break;
 80016aa:	e071      	b.n	8001790 <main+0x8b0>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 80016ac:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <main+0x8d8>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	d104      	bne.n	80016c6 <main+0x7e6>
 80016bc:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <main+0x8d8>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
					else {L_Volt = L_Volt - 0.1 ;}
					break;
 80016c4:	e064      	b.n	8001790 <main+0x8b0>
					else {L_Volt = L_Volt - 0.1 ;}
 80016c6:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <main+0x8d8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff44 	bl	8000558 <__aeabi_f2d>
 80016d0:	a331      	add	r3, pc, #196	; (adr r3, 8001798 <main+0x8b8>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7fe fddf 	bl	8000298 <__aeabi_dsub>
 80016da:	4603      	mov	r3, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	4618      	mov	r0, r3
 80016e0:	4621      	mov	r1, r4
 80016e2:	f7ff fa2b 	bl	8000b3c <__aeabi_d2f>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <main+0x8d8>)
 80016ea:	601a      	str	r2, [r3, #0]
					break;
 80016ec:	e050      	b.n	8001790 <main+0x8b0>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <main+0x8e0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff30 	bl	8000558 <__aeabi_f2d>
 80016f8:	a329      	add	r3, pc, #164	; (adr r3, 80017a0 <main+0x8c0>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7ff f9eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <main+0x830>
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <main+0x8e0>)
 800170a:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <main+0x8dc>)
 800170c:	601a      	str	r2, [r3, #0]
					else {H_Volt = H_Volt + 0.1 ;}
					break;
 800170e:	e03f      	b.n	8001790 <main+0x8b0>
					else {H_Volt = H_Volt + 0.1 ;}
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <main+0x8e0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff1f 	bl	8000558 <__aeabi_f2d>
 800171a:	a31f      	add	r3, pc, #124	; (adr r3, 8001798 <main+0x8b8>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe fdbc 	bl	800029c <__adddf3>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	4618      	mov	r0, r3
 800172a:	4621      	mov	r1, r4
 800172c:	f7ff fa06 	bl	8000b3c <__aeabi_d2f>
 8001730:	4602      	mov	r2, r0
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <main+0x8e0>)
 8001734:	601a      	str	r2, [r3, #0]
					break;
 8001736:	e02b      	b.n	8001790 <main+0x8b0>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <main+0x8e0>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d104      	bne.n	8001752 <main+0x872>
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <main+0x8e0>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
					else {H_Volt = H_Volt - 0.1 ;}
					break;
 8001750:	e01e      	b.n	8001790 <main+0x8b0>
					else {H_Volt = H_Volt - 0.1 ;}
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <main+0x8e0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fefe 	bl	8000558 <__aeabi_f2d>
 800175c:	a30e      	add	r3, pc, #56	; (adr r3, 8001798 <main+0x8b8>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe fd99 	bl	8000298 <__aeabi_dsub>
 8001766:	4603      	mov	r3, r0
 8001768:	460c      	mov	r4, r1
 800176a:	4618      	mov	r0, r3
 800176c:	4621      	mov	r1, r4
 800176e:	f7ff f9e5 	bl	8000b3c <__aeabi_d2f>
 8001772:	4602      	mov	r2, r0
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <main+0x8e0>)
 8001776:	601a      	str	r2, [r3, #0]
					break;
 8001778:	e00a      	b.n	8001790 <main+0x8b0>
				case 'l':
					break;

				//Error
				default:
					Print_Error();
 800177a:	f000 fb8b 	bl	8001e94 <Print_Error>
					state = printMenu_Squ;
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <main+0x8c8>)
 8001780:	2232      	movs	r2, #50	; 0x32
 8001782:	701a      	strb	r2, [r3, #0]
					break;
 8001784:	e004      	b.n	8001790 <main+0x8b0>
					break;
 8001786:	bf00      	nop
 8001788:	e002      	b.n	8001790 <main+0x8b0>
					break;
 800178a:	bf00      	nop
 800178c:	e000      	b.n	8001790 <main+0x8b0>
					break;
 800178e:	bf00      	nop
			}
			break;
 8001790:	bf00      	nop
	{
 8001792:	f7ff bbcb 	b.w	8000f2c <main+0x4c>
 8001796:	bf00      	nop
 8001798:	9999999a 	.word	0x9999999a
 800179c:	3fb99999 	.word	0x3fb99999
 80017a0:	66666666 	.word	0x66666666
 80017a4:	400a6666 	.word	0x400a6666
 80017a8:	20000010 	.word	0x20000010
 80017ac:	200000b4 	.word	0x200000b4
 80017b0:	20000000 	.word	0x20000000
 80017b4:	41200000 	.word	0x41200000
 80017b8:	200000b0 	.word	0x200000b0
 80017bc:	40533333 	.word	0x40533333
 80017c0:	2000000c 	.word	0x2000000c

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b094      	sub	sp, #80	; 0x50
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2230      	movs	r2, #48	; 0x30
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f851 	bl	800587a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <SystemClock_Config+0xc8>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a26      	ldr	r2, [pc, #152]	; (800188c <SystemClock_Config+0xc8>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <SystemClock_Config+0xc8>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <SystemClock_Config+0xcc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a20      	ldr	r2, [pc, #128]	; (8001890 <SystemClock_Config+0xcc>)
 800180e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <SystemClock_Config+0xcc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001820:	2302      	movs	r3, #2
 8001822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001824:	2301      	movs	r3, #1
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001828:	2310      	movs	r3, #16
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182c:	2302      	movs	r3, #2
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001834:	2308      	movs	r3, #8
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001838:	2364      	movs	r3, #100	; 0x64
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800183c:	2302      	movs	r3, #2
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001840:	2304      	movs	r3, #4
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4618      	mov	r0, r3
 800184a:	f002 f813 	bl	8003874 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001854:	f000 fb3e 	bl	8001ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185c:	2302      	movs	r3, #2
 800185e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2103      	movs	r1, #3
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fa6d 	bl	8003d54 <HAL_RCC_ClockConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001880:	f000 fb28 	bl	8001ed4 <Error_Handler>
  }
}
 8001884:	bf00      	nop
 8001886:	3750      	adds	r7, #80	; 0x50
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000

08001894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <MX_ADC1_Init+0xa0>)
 80018aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018bc:	2201      	movs	r2, #1
 80018be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_ADC1_Init+0x9c>)
 80018fa:	f000 fd97 	bl	800242c <HAL_ADC_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001904:	f000 fae6 	bl	8001ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_ADC1_Init+0x9c>)
 800191a:	f000 febd 	bl	8002698 <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001924:	f000 fad6 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200001c8 	.word	0x200001c8
 8001934:	40012000 	.word	0x40012000

08001938 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_SPI3_Init+0x68>)
 800193e:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <MX_SPI3_Init+0x6c>)
 8001940:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_SPI3_Init+0x68>)
 8001944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001948:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_SPI3_Init+0x68>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_SPI3_Init+0x68>)
 8001952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001956:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_SPI3_Init+0x68>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_SPI3_Init+0x68>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_SPI3_Init+0x68>)
 8001966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_SPI3_Init+0x68>)
 800196e:	2208      	movs	r2, #8
 8001970:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_SPI3_Init+0x68>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_SPI3_Init+0x68>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_SPI3_Init+0x68>)
 8001980:	2200      	movs	r2, #0
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_SPI3_Init+0x68>)
 8001986:	220a      	movs	r2, #10
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_SPI3_Init+0x68>)
 800198c:	f002 fbd4 	bl	8004138 <HAL_SPI_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001996:	f000 fa9d 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000170 	.word	0x20000170
 80019a4:	40003c00 	.word	0x40003c00

080019a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	463b      	mov	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_TIM3_Init+0x90>)
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <MX_TIM3_Init+0x94>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_TIM3_Init+0x90>)
 80019cc:	2263      	movs	r2, #99	; 0x63
 80019ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_TIM3_Init+0x90>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_TIM3_Init+0x90>)
 80019d8:	2264      	movs	r2, #100	; 0x64
 80019da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_TIM3_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <MX_TIM3_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <MX_TIM3_Init+0x90>)
 80019ea:	f002 fd27 	bl	800443c <HAL_TIM_Base_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80019f4:	f000 fa6e 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <MX_TIM3_Init+0x90>)
 8001a06:	f002 fd8c 	bl	8004522 <HAL_TIM_ConfigClockSource>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001a10:	f000 fa60 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a14:	2320      	movs	r3, #32
 8001a16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_TIM3_Init+0x90>)
 8001a22:	f002 ff4f 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001a2c:	f000 fa52 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000130 	.word	0x20000130
 8001a3c:	40000400 	.word	0x40000400

08001a40 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_TIM11_Init+0x40>)
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <MX_TIM11_Init+0x44>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <MX_TIM11_Init+0x40>)
 8001a4c:	2263      	movs	r2, #99	; 0x63
 8001a4e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_TIM11_Init+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_TIM11_Init+0x40>)
 8001a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_TIM11_Init+0x40>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_TIM11_Init+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_TIM11_Init+0x40>)
 8001a6c:	f002 fce6 	bl	800443c <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001a76:	f000 fa2d 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000210 	.word	0x20000210
 8001a84:	40014800 	.word	0x40014800

08001a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_USART2_UART_Init+0x50>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f002 ff6e 	bl	80049a0 <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aca:	f000 fa03 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002b0 	.word	0x200002b0
 8001ad8:	40004400 	.word	0x40004400

08001adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_DMA_Init+0x3c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <MX_DMA_Init+0x3c>)
 8001aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_DMA_Init+0x3c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2038      	movs	r0, #56	; 0x38
 8001b04:	f001 f953 	bl	8002dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b08:	2038      	movs	r0, #56	; 0x38
 8001b0a:	f001 f96c 	bl	8002de6 <HAL_NVIC_EnableIRQ>

}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a43      	ldr	r2, [pc, #268]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b3d      	ldr	r3, [pc, #244]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a3c      	ldr	r2, [pc, #240]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a35      	ldr	r2, [pc, #212]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a2e      	ldr	r2, [pc, #184]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2120      	movs	r1, #32
 8001ba6:	4829      	ldr	r0, [pc, #164]	; (8001c4c <MX_GPIO_Init+0x130>)
 8001ba8:	f001 fe4a 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb2:	4827      	ldr	r0, [pc, #156]	; (8001c50 <MX_GPIO_Init+0x134>)
 8001bb4:	f001 fe44 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	4825      	ldr	r0, [pc, #148]	; (8001c54 <MX_GPIO_Init+0x138>)
 8001bbe:	f001 fe3f 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc8:	4820      	ldr	r0, [pc, #128]	; (8001c4c <MX_GPIO_Init+0x130>)
 8001bca:	f001 fe39 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <MX_GPIO_Init+0x13c>)
 8001bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	481c      	ldr	r0, [pc, #112]	; (8001c54 <MX_GPIO_Init+0x138>)
 8001be4:	f001 fcaa 	bl	800353c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001be8:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4812      	ldr	r0, [pc, #72]	; (8001c4c <MX_GPIO_Init+0x130>)
 8001c02:	f001 fc9b 	bl	800353c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <MX_GPIO_Init+0x134>)
 8001c20:	f001 fc8c 	bl	800353c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4806      	ldr	r0, [pc, #24]	; (8001c54 <MX_GPIO_Init+0x138>)
 8001c3c:	f001 fc7e 	bl	800353c <HAL_GPIO_Init>

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020400 	.word	0x40020400
 8001c54:	40020800 	.word	0x40020800
 8001c58:	10210000 	.word	0x10210000

08001c5c <micros>:
		_micro += 65535;
	}
}

inline uint64_t micros()
{
 8001c5c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001c60:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <micros+0x2c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <micros+0x30>)
 8001c70:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001c74:	eb1b 0301 	adds.w	r3, fp, r1
 8001c78:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4621      	mov	r1, r4
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001c86:	4770      	bx	lr
 8001c88:	20000210 	.word	0x20000210
 8001c8c:	200000a8 	.word	0x200000a8

08001c90 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data = -1 ;
 8001c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9a:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <UARTRecieveIT+0x58>)
 8001c9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <UARTRecieveIT+0x58>)
 8001ca4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <UARTRecieveIT+0x5c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d010      	beq.n	8001cd6 <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <UARTRecieveIT+0x5c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <UARTRecieveIT+0x60>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <UARTRecieveIT+0x5c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <UARTRecieveIT+0x58>)
 8001cc6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ccc:	fb02 f201 	mul.w	r2, r2, r1
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	4a06      	ldr	r2, [pc, #24]	; (8001cec <UARTRecieveIT+0x5c>)
 8001cd4:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200002b0 	.word	0x200002b0
 8001cec:	20000120 	.word	0x20000120
 8001cf0:	200000d8 	.word	0x200000d8

08001cf4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <HAL_UART_RxCpltCallback+0x28>)
 8001cfe:	f7fe fa6f 	bl	80001e0 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	4904      	ldr	r1, [pc, #16]	; (8001d1c <HAL_UART_RxCpltCallback+0x28>)
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <HAL_UART_RxCpltCallback+0x2c>)
 8001d0e:	f002 fe94 	bl	8004a3a <HAL_UART_Transmit>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200000b8 	.word	0x200000b8
 8001d20:	200002b0 	.word	0x200002b0

08001d24 <Print_Menu_Saw>:

//////////////////////////////////////////Print

void Print_Menu_Saw()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0fa      	sub	sp, #488	; 0x1e8
 8001d28:	af00      	add	r7, sp, #0
	  char Menu[]="Sawtooth Wave Menu\r\n\r\n"
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <Print_Menu_Saw+0x38>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4611      	mov	r1, r2
 8001d32:	f240 13e1 	movw	r3, #481	; 0x1e1
 8001d36:	461a      	mov	r2, r3
 8001d38:	f003 fd94 	bl	8005864 <memcpy>

			  "Parameter_specific\r\n"
			  "__press [u] for slopeUp/slopeDown\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fa4e 	bl	80001e0 <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	1d39      	adds	r1, r7, #4
 8001d4a:	2364      	movs	r3, #100	; 0x64
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <Print_Menu_Saw+0x3c>)
 8001d4e:	f002 fe74 	bl	8004a3a <HAL_UART_Transmit>
}
 8001d52:	bf00      	nop
 8001d54:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	080060b4 	.word	0x080060b4
 8001d60:	200002b0 	.word	0x200002b0

08001d64 <Print_Menu_Sin>:

void Print_Menu_Sin()
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0ea      	sub	sp, #424	; 0x1a8
 8001d68:	af00      	add	r7, sp, #0
	  char Menu[]="Sine Wave Menu\r\n\r\n"
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <Print_Menu_Sin+0x38>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4611      	mov	r1, r2
 8001d72:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001d76:	461a      	mov	r2, r3
 8001d78:	f003 fd74 	bl	8005864 <memcpy>
			  "Parameter_High Volt (0-3.3V)\r\n"
			  "__press [w] for High Volt + 0.1V\r\n"
			  "__press [r] for High Volt - 0.1V\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fa2e 	bl	80001e0 <strlen>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	1d39      	adds	r1, r7, #4
 8001d8a:	2364      	movs	r3, #100	; 0x64
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <Print_Menu_Sin+0x3c>)
 8001d8e:	f002 fe54 	bl	8004a3a <HAL_UART_Transmit>
}
 8001d92:	bf00      	nop
 8001d94:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	08006298 	.word	0x08006298
 8001da0:	200002b0 	.word	0x200002b0

08001da4 <Print_Menu_Squ>:

void Print_Menu_Squ()
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001daa:	af00      	add	r7, sp, #0
	  char Menu[]="Square Wave Menu\r\n\r\n"
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <Print_Menu_Squ+0x3c>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	4611      	mov	r1, r2
 8001db4:	f240 2309 	movw	r3, #521	; 0x209
 8001db8:	461a      	mov	r2, r3
 8001dba:	f003 fd53 	bl	8005864 <memcpy>
			  "Parameter_specific (0-100%)\r\n"
			  "__press [j] for duty cycle + 10%\r\n"
			  "__press [l] for duty cycle - 10%\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fa0d 	bl	80001e0 <strlen>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	1d39      	adds	r1, r7, #4
 8001dcc:	2364      	movs	r3, #100	; 0x64
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <Print_Menu_Squ+0x40>)
 8001dd0:	f002 fe33 	bl	8004a3a <HAL_UART_Transmit>
}
 8001dd4:	bf00      	nop
 8001dd6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	0800643c 	.word	0x0800643c
 8001de4:	200002b0 	.word	0x200002b0

08001de8 <Print_fq>:

void Print_fq()
{
 8001de8:	b598      	push	{r3, r4, r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	  Period = (1.0/Freq)*1000.0 ;		//millisecond
 8001dec:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <Print_fq+0x8c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbb1 	bl	8000558 <__aeabi_f2d>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4623      	mov	r3, r4
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	491d      	ldr	r1, [pc, #116]	; (8001e78 <Print_fq+0x90>)
 8001e04:	f7fe fd2a 	bl	800085c <__aeabi_ddiv>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	4621      	mov	r1, r4
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <Print_fq+0x94>)
 8001e16:	f7fe fbf7 	bl	8000608 <__aeabi_dmul>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	4621      	mov	r1, r4
 8001e22:	f7fe fe8b 	bl	8000b3c <__aeabi_d2f>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <Print_fq+0x98>)
 8001e2a:	601a      	str	r2, [r3, #0]
	  Half_Period = Period/2.0 ;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <Print_fq+0x98>)
 8001e2e:	ed93 7a00 	vldr	s14, [r3]
 8001e32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <Print_fq+0x9c>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]

      //char fq[]= ("frequency of LED is: %d \r\n", Freq);
	  sprintf(fq, "frequency of LED is: %d \r\n", Freq);
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <Print_fq+0x8c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb87 	bl	8000558 <__aeabi_f2d>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4623      	mov	r3, r4
 8001e52:	490d      	ldr	r1, [pc, #52]	; (8001e88 <Print_fq+0xa0>)
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <Print_fq+0xa4>)
 8001e56:	f003 fd19 	bl	800588c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)fq, strlen(fq),100);
 8001e5a:	480c      	ldr	r0, [pc, #48]	; (8001e8c <Print_fq+0xa4>)
 8001e5c:	f7fe f9c0 	bl	80001e0 <strlen>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	2364      	movs	r3, #100	; 0x64
 8001e66:	4909      	ldr	r1, [pc, #36]	; (8001e8c <Print_fq+0xa4>)
 8001e68:	4809      	ldr	r0, [pc, #36]	; (8001e90 <Print_fq+0xa8>)
 8001e6a:	f002 fde6 	bl	8004a3a <HAL_UART_Transmit>

}
 8001e6e:	bf00      	nop
 8001e70:	bd98      	pop	{r3, r4, r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000
 8001e78:	3ff00000 	.word	0x3ff00000
 8001e7c:	408f4000 	.word	0x408f4000
 8001e80:	20000004 	.word	0x20000004
 8001e84:	20000008 	.word	0x20000008
 8001e88:	08006648 	.word	0x08006648
 8001e8c:	200000f8 	.word	0x200000f8
 8001e90:	200002b0 	.word	0x200002b0

08001e94 <Print_Error>:

void Print_Error()
{
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
	  char Eror[]="Error : Out of choice\r\n";
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <Print_Error+0x38>)
 8001e9c:	463c      	mov	r4, r7
 8001e9e:	461d      	mov	r5, r3
 8001ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ea8:	e884 0003 	stmia.w	r4, {r0, r1}
	  HAL_UART_Transmit(&huart2, (uint8_t*)Eror, strlen(Eror),100);
 8001eac:	463b      	mov	r3, r7
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe f996 	bl	80001e0 <strlen>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4639      	mov	r1, r7
 8001eba:	2364      	movs	r3, #100	; 0x64
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <Print_Error+0x3c>)
 8001ebe:	f002 fdbc 	bl	8004a3a <HAL_UART_Transmit>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	08006664 	.word	0x08006664
 8001ed0:	200002b0 	.word	0x200002b0

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001eda:	e7fe      	b.n	8001eda <Error_Handler+0x6>

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_MspInit+0x4c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f1a:	2007      	movs	r0, #7
 8001f1c:	f000 ff3c 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <HAL_ADC_MspInit+0xdc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d157      	bne.n	8001ffe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_ADC_MspInit+0xe0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f86:	2301      	movs	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	481d      	ldr	r0, [pc, #116]	; (8002010 <HAL_ADC_MspInit+0xe4>)
 8001f9a:	f001 facf 	bl	800353c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_ADC_MspInit+0xec>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fe2:	480c      	ldr	r0, [pc, #48]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001fe4:	f000 ff1a 	bl	8002e1c <HAL_DMA_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001fee:	f7ff ff71 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_ADC_MspInit+0xe8>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40012000 	.word	0x40012000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	20000250 	.word	0x20000250
 8002018:	40026410 	.word	0x40026410

0800201c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_SPI_MspInit+0x94>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d133      	bne.n	80020a6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_SPI_MspInit+0x98>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <HAL_SPI_MspInit+0x98>)
 8002048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_SPI_MspInit+0x98>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_SPI_MspInit+0x98>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_SPI_MspInit+0x98>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_SPI_MspInit+0x98>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002076:	2338      	movs	r3, #56	; 0x38
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002086:	2306      	movs	r3, #6
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4809      	ldr	r0, [pc, #36]	; (80020b8 <HAL_SPI_MspInit+0x9c>)
 8002092:	f001 fa53 	bl	800353c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	2033      	movs	r0, #51	; 0x33
 800209c:	f000 fe87 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80020a0:	2033      	movs	r0, #51	; 0x33
 80020a2:	f000 fea0 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40003c00 	.word	0x40003c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020400 	.word	0x40020400

080020bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a15      	ldr	r2, [pc, #84]	; (8002120 <HAL_TIM_Base_MspInit+0x64>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10e      	bne.n	80020ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_TIM_Base_MspInit+0x68>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <HAL_TIM_Base_MspInit+0x68>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_TIM_Base_MspInit+0x68>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80020ea:	e012      	b.n	8002112 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_TIM_Base_MspInit+0x6c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10d      	bne.n	8002112 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_TIM_Base_MspInit+0x68>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_TIM_Base_MspInit+0x68>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_TIM_Base_MspInit+0x68>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40000400 	.word	0x40000400
 8002124:	40023800 	.word	0x40023800
 8002128:	40014800 	.word	0x40014800

0800212c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_UART_MspInit+0x94>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d133      	bne.n	80021b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_UART_MspInit+0x98>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_UART_MspInit+0x98>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_UART_MspInit+0x98>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_UART_MspInit+0x98>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <HAL_UART_MspInit+0x98>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_UART_MspInit+0x98>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002186:	230c      	movs	r3, #12
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002196:	2307      	movs	r3, #7
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4809      	ldr	r0, [pc, #36]	; (80021c8 <HAL_UART_MspInit+0x9c>)
 80021a2:	f001 f9cb 	bl	800353c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	2026      	movs	r0, #38	; 0x26
 80021ac:	f000 fdff 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021b0:	2026      	movs	r0, #38	; 0x26
 80021b2:	f000 fe18 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40004400 	.word	0x40004400
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <NMI_Handler+0x4>

080021d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <HardFault_Handler+0x4>

080021d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <MemManage_Handler+0x4>

080021de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <BusFault_Handler+0x4>

080021e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <UsageFault_Handler+0x4>

080021ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002218:	f000 f8e8 	bl	80023ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <USART2_IRQHandler+0x10>)
 8002226:	f002 fcf7 	bl	8004c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200002b0 	.word	0x200002b0

08002234 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <SPI3_IRQHandler+0x10>)
 800223a:	f001 ffe1 	bl	8004200 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000170 	.word	0x20000170

08002248 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <DMA2_Stream0_IRQHandler+0x10>)
 800224e:	f000 ff0d 	bl	800306c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000250 	.word	0x20000250

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f003 fac0 	bl	8005810 <__errno>
 8002290:	4602      	mov	r2, r0
 8002292:	230c      	movs	r3, #12
 8002294:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20020000 	.word	0x20020000
 80022bc:	00000400 	.word	0x00000400
 80022c0:	20000124 	.word	0x20000124
 80022c4:	200002f8 	.word	0x200002f8

080022c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <SystemInit+0x28>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <SystemInit+0x28>)
 80022d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SystemInit+0x28>)
 80022de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022e2:	609a      	str	r2, [r3, #8]
#endif
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800232c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022fa:	e003      	b.n	8002304 <LoopCopyDataInit>

080022fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002300:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002302:	3104      	adds	r1, #4

08002304 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002304:	480b      	ldr	r0, [pc, #44]	; (8002334 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002308:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800230a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800230c:	d3f6      	bcc.n	80022fc <CopyDataInit>
  ldr  r2, =_sbss
 800230e:	4a0b      	ldr	r2, [pc, #44]	; (800233c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002310:	e002      	b.n	8002318 <LoopFillZerobss>

08002312 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002312:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002314:	f842 3b04 	str.w	r3, [r2], #4

08002318 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800231a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800231c:	d3f9      	bcc.n	8002312 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800231e:	f7ff ffd3 	bl	80022c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002322:	f003 fa7b 	bl	800581c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002326:	f7fe fddb 	bl	8000ee0 <main>
  bx  lr    
 800232a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800232c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002330:	080066e0 	.word	0x080066e0
  ldr  r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002338:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800233c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002340:	200002f8 	.word	0x200002f8

08002344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002344:	e7fe      	b.n	8002344 <ADC_IRQHandler>
	...

08002348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800234c:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <HAL_Init+0x40>)
 8002352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_Init+0x40>)
 800235e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a07      	ldr	r2, [pc, #28]	; (8002388 <HAL_Init+0x40>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002370:	2003      	movs	r0, #3
 8002372:	f000 fd11 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002376:	2000      	movs	r0, #0
 8002378:	f000 f808 	bl	800238c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800237c:	f7ff fdae 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023c00 	.word	0x40023c00

0800238c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_InitTick+0x54>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_InitTick+0x58>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fd29 	bl	8002e02 <HAL_SYSTICK_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00e      	b.n	80023d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b0f      	cmp	r3, #15
 80023be:	d80a      	bhi.n	80023d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c0:	2200      	movs	r2, #0
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f000 fcf1 	bl	8002dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <HAL_InitTick+0x5c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000014 	.word	0x20000014
 80023e4:	2000001c 	.word	0x2000001c
 80023e8:	20000018 	.word	0x20000018

080023ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_IncTick+0x20>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x24>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_IncTick+0x24>)
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	2000001c 	.word	0x2000001c
 8002410:	200002f0 	.word	0x200002f0

08002414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return uwTick;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_GetTick+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200002f0 	.word	0x200002f0

0800242c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e033      	b.n	80024aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fd6e 	bl	8001f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d118      	bne.n	800249c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002472:	f023 0302 	bic.w	r3, r3, #2
 8002476:	f043 0202 	orr.w	r2, r3, #2
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa3c 	bl	80028fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
 800249a:	e001      	b.n	80024a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Start_DMA+0x1e>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0b1      	b.n	8002636 <HAL_ADC_Start_DMA+0x182>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d018      	beq.n	800251a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024f8:	4b51      	ldr	r3, [pc, #324]	; (8002640 <HAL_ADC_Start_DMA+0x18c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a51      	ldr	r2, [pc, #324]	; (8002644 <HAL_ADC_Start_DMA+0x190>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	0c9a      	lsrs	r2, r3, #18
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800250c:	e002      	b.n	8002514 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	3b01      	subs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f9      	bne.n	800250e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	f040 8085 	bne.w	8002634 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002554:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002568:	d106      	bne.n	8002578 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f023 0206 	bic.w	r2, r3, #6
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
 8002576:	e002      	b.n	800257e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_ADC_Start_DMA+0x194>)
 8002588:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	4a2f      	ldr	r2, [pc, #188]	; (800264c <HAL_ADC_Start_DMA+0x198>)
 8002590:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <HAL_ADC_Start_DMA+0x19c>)
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	4a2d      	ldr	r2, [pc, #180]	; (8002654 <HAL_ADC_Start_DMA+0x1a0>)
 80025a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	334c      	adds	r3, #76	; 0x4c
 80025d6:	4619      	mov	r1, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f000 fccc 	bl	8002f78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11c      	bne.n	8002634 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	e013      	b.n	8002634 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_ADC_Start_DMA+0x1a4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_ADC_Start_DMA+0x180>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002632:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000014 	.word	0x20000014
 8002644:	431bde83 	.word	0x431bde83
 8002648:	40012300 	.word	0x40012300
 800264c:	08002af5 	.word	0x08002af5
 8002650:	08002baf 	.word	0x08002baf
 8002654:	08002bcb 	.word	0x08002bcb
 8002658:	40012000 	.word	0x40012000

0800265c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x1c>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e113      	b.n	80028dc <HAL_ADC_ConfigChannel+0x244>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b09      	cmp	r3, #9
 80026c2:	d925      	bls.n	8002710 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	3b1e      	subs	r3, #30
 80026da:	2207      	movs	r2, #7
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68d9      	ldr	r1, [r3, #12]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	4603      	mov	r3, r0
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4403      	add	r3, r0
 8002702:	3b1e      	subs	r3, #30
 8002704:	409a      	lsls	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	e022      	b.n	8002756 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6919      	ldr	r1, [r3, #16]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	2207      	movs	r2, #7
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	400a      	ands	r2, r1
 8002732:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	4603      	mov	r3, r0
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4403      	add	r3, r0
 800274c:	409a      	lsls	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d824      	bhi.n	80027a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	3b05      	subs	r3, #5
 8002770:	221f      	movs	r2, #31
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	400a      	ands	r2, r1
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	3b05      	subs	r3, #5
 800279a:	fa00 f203 	lsl.w	r2, r0, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	635a      	str	r2, [r3, #52]	; 0x34
 80027a6:	e04c      	b.n	8002842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b0c      	cmp	r3, #12
 80027ae:	d824      	bhi.n	80027fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	3b23      	subs	r3, #35	; 0x23
 80027c2:	221f      	movs	r2, #31
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	3b23      	subs	r3, #35	; 0x23
 80027ec:	fa00 f203 	lsl.w	r2, r0, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
 80027f8:	e023      	b.n	8002842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	3b41      	subs	r3, #65	; 0x41
 800280c:	221f      	movs	r2, #31
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	400a      	ands	r2, r1
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	3b41      	subs	r3, #65	; 0x41
 8002836:	fa00 f203 	lsl.w	r2, r0, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002842:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_ADC_ConfigChannel+0x250>)
 8002844:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a28      	ldr	r2, [pc, #160]	; (80028ec <HAL_ADC_ConfigChannel+0x254>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10f      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x1d8>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b12      	cmp	r3, #18
 8002856:	d10b      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <HAL_ADC_ConfigChannel+0x254>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d12b      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x23a>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_ADC_ConfigChannel+0x258>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <HAL_ADC_ConfigChannel+0x1f4>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b11      	cmp	r3, #17
 800288a:	d122      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_ADC_ConfigChannel+0x258>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d111      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_ADC_ConfigChannel+0x25c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_ADC_ConfigChannel+0x260>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	0c9a      	lsrs	r2, r3, #18
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028c4:	e002      	b.n	80028cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f9      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40012300 	.word	0x40012300
 80028ec:	40012000 	.word	0x40012000
 80028f0:	10000012 	.word	0x10000012
 80028f4:	20000014 	.word	0x20000014
 80028f8:	431bde83 	.word	0x431bde83

080028fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002904:	4b79      	ldr	r3, [pc, #484]	; (8002aec <ADC_Init+0x1f0>)
 8002906:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002930:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	021a      	lsls	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <ADC_Init+0x1f4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e00f      	b.n	80029fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0202 	bic.w	r2, r2, #2
 8002a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7e1b      	ldrb	r3, [r3, #24]
 8002a14:	005a      	lsls	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01b      	beq.n	8002a60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	3b01      	subs	r3, #1
 8002a54:	035a      	lsls	r2, r3, #13
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e007      	b.n	8002a70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	051a      	lsls	r2, r3, #20
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ab2:	025a      	lsls	r2, r3, #9
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	029a      	lsls	r2, r3, #10
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40012300 	.word	0x40012300
 8002af0:	0f000001 	.word	0x0f000001

08002af4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d13c      	bne.n	8002b88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d12b      	bne.n	8002b80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d127      	bne.n	8002b80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d119      	bne.n	8002b80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0220 	bic.w	r2, r2, #32
 8002b5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff fd6b 	bl	800265c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b86:	e00e      	b.n	8002ba6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff fd75 	bl	8002684 <HAL_ADC_ErrorCallback>
}
 8002b9a:	e004      	b.n	8002ba6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fd57 	bl	8002670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff fd4a 	bl	8002684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <__NVIC_EnableIRQ+0x38>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	; (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f7ff ff8e 	bl	8002c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff29 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff3e 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff8e 	bl	8002cec <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5d 	bl	8002c98 <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff31 	bl	8002c5c <__NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffa2 	bl	8002d54 <SysTick_Config>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff faf4 	bl	8002414 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e099      	b.n	8002f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	e00f      	b.n	8002e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5a:	f7ff fadb 	bl	8002414 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d908      	bls.n	8002e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e078      	b.n	8002f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e8      	bne.n	8002e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_DMA_Init+0x158>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d107      	bne.n	8002ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0307 	bic.w	r3, r3, #7
 8002efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d117      	bne.n	8002f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fa91 	bl	8003448 <DMA_CheckFifoParam>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e016      	b.n	8002f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa48 	bl	80033dc <DMA_CalcBaseAndBitshift>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	223f      	movs	r2, #63	; 0x3f
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	f010803f 	.word	0xf010803f

08002f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_DMA_Start_IT+0x26>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e040      	b.n	8003020 <HAL_DMA_Start_IT+0xa8>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d12f      	bne.n	8003012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f9da 	bl	8003380 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	223f      	movs	r2, #63	; 0x3f
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0216 	orr.w	r2, r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e005      	b.n	800301e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d004      	beq.n	8003046 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e00c      	b.n	8003060 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2205      	movs	r2, #5
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003078:	4b92      	ldr	r3, [pc, #584]	; (80032c4 <HAL_DMA_IRQHandler+0x258>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a92      	ldr	r2, [pc, #584]	; (80032c8 <HAL_DMA_IRQHandler+0x25c>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	2208      	movs	r2, #8
 8003098:	409a      	lsls	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01a      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0204 	bic.w	r2, r2, #4
 80030be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	2208      	movs	r2, #8
 80030c6:	409a      	lsls	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030dc:	2201      	movs	r2, #1
 80030de:	409a      	lsls	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d012      	beq.n	800310e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	2201      	movs	r2, #1
 80030fc:	409a      	lsls	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	2204      	movs	r2, #4
 8003114:	409a      	lsls	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00b      	beq.n	8003144 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	2204      	movs	r2, #4
 8003132:	409a      	lsls	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	f043 0204 	orr.w	r2, r3, #4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	2210      	movs	r2, #16
 800314a:	409a      	lsls	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d043      	beq.n	80031dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03c      	beq.n	80031dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	2210      	movs	r2, #16
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d018      	beq.n	80031ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d108      	bne.n	800319c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d024      	beq.n	80031dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
 800319a:	e01f      	b.n	80031dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01b      	beq.n	80031dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
 80031ac:	e016      	b.n	80031dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0208 	bic.w	r2, r2, #8
 80031ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	2220      	movs	r2, #32
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 808e 	beq.w	800330a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8086 	beq.w	800330a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	2220      	movs	r2, #32
 8003204:	409a      	lsls	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b05      	cmp	r3, #5
 8003214:	d136      	bne.n	8003284 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0216 	bic.w	r2, r2, #22
 8003224:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003234:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_DMA_IRQHandler+0x1da>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0208 	bic.w	r2, r2, #8
 8003254:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	223f      	movs	r2, #63	; 0x3f
 800325c:	409a      	lsls	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003276:	2b00      	cmp	r3, #0
 8003278:	d07d      	beq.n	8003376 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
        }
        return;
 8003282:	e078      	b.n	8003376 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01c      	beq.n	80032cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d030      	beq.n	800330a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
 80032b0:	e02b      	b.n	800330a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d027      	beq.n	800330a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
 80032c2:	e022      	b.n	800330a <HAL_DMA_IRQHandler+0x29e>
 80032c4:	20000014 	.word	0x20000014
 80032c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0210 	bic.w	r2, r2, #16
 80032e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	2b00      	cmp	r3, #0
 8003310:	d032      	beq.n	8003378 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d022      	beq.n	8003364 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2205      	movs	r2, #5
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3301      	adds	r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	429a      	cmp	r2, r3
 8003340:	d307      	bcc.n	8003352 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f2      	bne.n	8003336 <HAL_DMA_IRQHandler+0x2ca>
 8003350:	e000      	b.n	8003354 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003352:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	e000      	b.n	8003378 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003376:	bf00      	nop
    }
  }
}
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop

08003380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800339c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d108      	bne.n	80033c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033be:	e007      	b.n	80033d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	3b10      	subs	r3, #16
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <DMA_CalcBaseAndBitshift+0x64>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <DMA_CalcBaseAndBitshift+0x68>)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b03      	cmp	r3, #3
 8003408:	d909      	bls.n	800341e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	1d1a      	adds	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	659a      	str	r2, [r3, #88]	; 0x58
 800341c:	e007      	b.n	800342e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	aaaaaaab 	.word	0xaaaaaaab
 8003444:	08006694 	.word	0x08006694

08003448 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11f      	bne.n	80034a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d855      	bhi.n	8003514 <DMA_CheckFifoParam+0xcc>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <DMA_CheckFifoParam+0x28>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	08003481 	.word	0x08003481
 8003474:	08003493 	.word	0x08003493
 8003478:	08003481 	.word	0x08003481
 800347c:	08003515 	.word	0x08003515
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d045      	beq.n	8003518 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003490:	e042      	b.n	8003518 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800349a:	d13f      	bne.n	800351c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a0:	e03c      	b.n	800351c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034aa:	d121      	bne.n	80034f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d836      	bhi.n	8003520 <DMA_CheckFifoParam+0xd8>
 80034b2:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <DMA_CheckFifoParam+0x70>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034cf 	.word	0x080034cf
 80034c0:	080034c9 	.word	0x080034c9
 80034c4:	080034e1 	.word	0x080034e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      break;
 80034cc:	e02f      	b.n	800352e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d024      	beq.n	8003524 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034de:	e021      	b.n	8003524 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034e8:	d11e      	bne.n	8003528 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034ee:	e01b      	b.n	8003528 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d902      	bls.n	80034fc <DMA_CheckFifoParam+0xb4>
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d003      	beq.n	8003502 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034fa:	e018      	b.n	800352e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003500:	e015      	b.n	800352e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00e      	beq.n	800352c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
      break;
 8003512:	e00b      	b.n	800352c <DMA_CheckFifoParam+0xe4>
      break;
 8003514:	bf00      	nop
 8003516:	e00a      	b.n	800352e <DMA_CheckFifoParam+0xe6>
      break;
 8003518:	bf00      	nop
 800351a:	e008      	b.n	800352e <DMA_CheckFifoParam+0xe6>
      break;
 800351c:	bf00      	nop
 800351e:	e006      	b.n	800352e <DMA_CheckFifoParam+0xe6>
      break;
 8003520:	bf00      	nop
 8003522:	e004      	b.n	800352e <DMA_CheckFifoParam+0xe6>
      break;
 8003524:	bf00      	nop
 8003526:	e002      	b.n	800352e <DMA_CheckFifoParam+0xe6>
      break;   
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <DMA_CheckFifoParam+0xe6>
      break;
 800352c:	bf00      	nop
    }
  } 
  
  return status; 
 800352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	; 0x24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	e159      	b.n	800380c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003558:	2201      	movs	r2, #1
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	f040 8148 	bne.w	8003806 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d00b      	beq.n	8003596 <HAL_GPIO_Init+0x5a>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800358a:	2b11      	cmp	r3, #17
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b12      	cmp	r3, #18
 8003594:	d130      	bne.n	80035f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 0201 	and.w	r2, r3, #1
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0xfc>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b12      	cmp	r3, #18
 8003636:	d123      	bne.n	8003680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	08da      	lsrs	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3208      	adds	r2, #8
 8003640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	220f      	movs	r2, #15
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	08da      	lsrs	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3208      	adds	r2, #8
 800367a:	69b9      	ldr	r1, [r7, #24]
 800367c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2203      	movs	r2, #3
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0203 	and.w	r2, r3, #3
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a2 	beq.w	8003806 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	4b56      	ldr	r3, [pc, #344]	; (8003820 <HAL_GPIO_Init+0x2e4>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	4a55      	ldr	r2, [pc, #340]	; (8003820 <HAL_GPIO_Init+0x2e4>)
 80036cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d0:	6453      	str	r3, [r2, #68]	; 0x44
 80036d2:	4b53      	ldr	r3, [pc, #332]	; (8003820 <HAL_GPIO_Init+0x2e4>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036de:	4a51      	ldr	r2, [pc, #324]	; (8003824 <HAL_GPIO_Init+0x2e8>)
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	3302      	adds	r3, #2
 80036e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	220f      	movs	r2, #15
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a48      	ldr	r2, [pc, #288]	; (8003828 <HAL_GPIO_Init+0x2ec>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d019      	beq.n	800373e <HAL_GPIO_Init+0x202>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a47      	ldr	r2, [pc, #284]	; (800382c <HAL_GPIO_Init+0x2f0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_GPIO_Init+0x1fe>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a46      	ldr	r2, [pc, #280]	; (8003830 <HAL_GPIO_Init+0x2f4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00d      	beq.n	8003736 <HAL_GPIO_Init+0x1fa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a45      	ldr	r2, [pc, #276]	; (8003834 <HAL_GPIO_Init+0x2f8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <HAL_GPIO_Init+0x1f6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a44      	ldr	r2, [pc, #272]	; (8003838 <HAL_GPIO_Init+0x2fc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <HAL_GPIO_Init+0x1f2>
 800372a:	2304      	movs	r3, #4
 800372c:	e008      	b.n	8003740 <HAL_GPIO_Init+0x204>
 800372e:	2307      	movs	r3, #7
 8003730:	e006      	b.n	8003740 <HAL_GPIO_Init+0x204>
 8003732:	2303      	movs	r3, #3
 8003734:	e004      	b.n	8003740 <HAL_GPIO_Init+0x204>
 8003736:	2302      	movs	r3, #2
 8003738:	e002      	b.n	8003740 <HAL_GPIO_Init+0x204>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x204>
 800373e:	2300      	movs	r3, #0
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	f002 0203 	and.w	r2, r2, #3
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	4093      	lsls	r3, r2
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003750:	4934      	ldr	r1, [pc, #208]	; (8003824 <HAL_GPIO_Init+0x2e8>)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_GPIO_Init+0x300>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003782:	4a2e      	ldr	r2, [pc, #184]	; (800383c <HAL_GPIO_Init+0x300>)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_GPIO_Init+0x300>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_GPIO_Init+0x300>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_GPIO_Init+0x300>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d6:	4a19      	ldr	r2, [pc, #100]	; (800383c <HAL_GPIO_Init+0x300>)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <HAL_GPIO_Init+0x300>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003800:	4a0e      	ldr	r2, [pc, #56]	; (800383c <HAL_GPIO_Init+0x300>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b0f      	cmp	r3, #15
 8003810:	f67f aea2 	bls.w	8003558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003814:	bf00      	nop
 8003816:	3724      	adds	r7, #36	; 0x24
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40023800 	.word	0x40023800
 8003824:	40013800 	.word	0x40013800
 8003828:	40020000 	.word	0x40020000
 800382c:	40020400 	.word	0x40020400
 8003830:	40020800 	.word	0x40020800
 8003834:	40020c00 	.word	0x40020c00
 8003838:	40021000 	.word	0x40021000
 800383c:	40013c00 	.word	0x40013c00

08003840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
 800384c:	4613      	mov	r3, r2
 800384e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003850:	787b      	ldrb	r3, [r7, #1]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800385c:	e003      	b.n	8003866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800385e:	887b      	ldrh	r3, [r7, #2]
 8003860:	041a      	lsls	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	619a      	str	r2, [r3, #24]
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e25b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003892:	4ba3      	ldr	r3, [pc, #652]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4ba0      	ldr	r3, [pc, #640]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d112      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038aa:	4b9d      	ldr	r3, [pc, #628]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	4b99      	ldr	r3, [pc, #612]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05b      	beq.n	800397c <HAL_RCC_OscConfig+0x108>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d157      	bne.n	800397c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e236      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x74>
 80038da:	4b91      	ldr	r3, [pc, #580]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a90      	ldr	r2, [pc, #576]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4b8b      	ldr	r3, [pc, #556]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a8a      	ldr	r2, [pc, #552]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a87      	ldr	r2, [pc, #540]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 800390c:	4b84      	ldr	r3, [pc, #528]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a83      	ldr	r2, [pc, #524]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a80      	ldr	r2, [pc, #512]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe fd72 	bl	8002414 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003934:	f7fe fd6e 	bl	8002414 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e1fb      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xc0>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fd5e 	bl	8002414 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800395c:	f7fe fd5a 	bl	8002414 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1e7      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0xe8>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d063      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b62      	ldr	r3, [pc, #392]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11c      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1bb      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b56      	ldr	r3, [pc, #344]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4952      	ldr	r1, [pc, #328]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	e03a      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e4:	4b4f      	ldr	r3, [pc, #316]	; (8003b24 <HAL_RCC_OscConfig+0x2b0>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fe fd13 	bl	8002414 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fe fd0f 	bl	8002414 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e19c      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	4b46      	ldr	r3, [pc, #280]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4940      	ldr	r1, [pc, #256]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <HAL_RCC_OscConfig+0x2b0>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fcf2 	bl	8002414 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fe fcee 	bl	8002414 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e17b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d030      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_RCC_OscConfig+0x2b4>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe fcd2 	bl	8002414 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe fcce 	bl	8002414 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e15b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x200>
 8003a92:	e015      	b.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCC_OscConfig+0x2b4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fcbb 	bl	8002414 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fe fcb7 	bl	8002414 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e144      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a0 	beq.w	8003c0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d121      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe fc7d 	bl	8002414 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e011      	b.n	8003b42 <HAL_RCC_OscConfig+0x2ce>
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	42470000 	.word	0x42470000
 8003b28:	42470e80 	.word	0x42470e80
 8003b2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fe fc70 	bl	8002414 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0fd      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <HAL_RCC_OscConfig+0x4d4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2f0>
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a7c      	ldr	r2, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
 8003b62:	e01c      	b.n	8003b9e <HAL_RCC_OscConfig+0x32a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x312>
 8003b6c:	4b77      	ldr	r3, [pc, #476]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	4b74      	ldr	r3, [pc, #464]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	4a73      	ldr	r2, [pc, #460]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x32a>
 8003b86:	4b71      	ldr	r3, [pc, #452]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a70      	ldr	r2, [pc, #448]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	4b6e      	ldr	r3, [pc, #440]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a6d      	ldr	r2, [pc, #436]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fc35 	bl	8002414 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe fc31 	bl	8002414 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0bc      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCC_OscConfig+0x33a>
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fc1f 	bl	8002414 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe fc1b 	bl	8002414 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0a6      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ee      	bne.n	8003bda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4b52      	ldr	r3, [pc, #328]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8092 	beq.w	8003d3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d05c      	beq.n	8003cde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d141      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fe fbef 	bl	8002414 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe fbeb 	bl	8002414 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e078      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4c:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	019b      	lsls	r3, r3, #6
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	4933      	ldr	r1, [pc, #204]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c82:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fe fbc4 	bl	8002414 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fe fbc0 	bl	8002414 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04d      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x41c>
 8003cae:	e045      	b.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fbad 	bl	8002414 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe fba9 	bl	8002414 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e036      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x44a>
 8003cdc:	e02e      	b.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e029      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d115      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d12:	4013      	ands	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10d      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	42470060 	.word	0x42470060

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0cc      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90c      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d044      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e067      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4934      	ldr	r1, [pc, #208]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fe fae6 	bl	8002414 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fe fae2 	bl	8002414 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e04f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d20c      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 f821 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003ede:	4601      	mov	r1, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	5cd3      	ldrb	r3, [r2, r3]
 8003eee:	fa21 f303 	lsr.w	r3, r1, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fa46 	bl	800238c <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00
 8003f10:	40023800 	.word	0x40023800
 8003f14:	0800667c 	.word	0x0800667c
 8003f18:	20000014 	.word	0x20000014
 8003f1c:	20000018 	.word	0x20000018

08003f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f36:	4b63      	ldr	r3, [pc, #396]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d007      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x32>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d008      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x38>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 80b4 	bne.w	80040b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f4e:	60bb      	str	r3, [r7, #8]
       break;
 8003f50:	e0b3      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f52:	4b5e      	ldr	r3, [pc, #376]	; (80040cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f54:	60bb      	str	r3, [r7, #8]
      break;
 8003f56:	e0b0      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f58:	4b5a      	ldr	r3, [pc, #360]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f62:	4b58      	ldr	r3, [pc, #352]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d04a      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b55      	ldr	r3, [pc, #340]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	f04f 0400 	mov.w	r4, #0
 8003f78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	ea03 0501 	and.w	r5, r3, r1
 8003f84:	ea04 0602 	and.w	r6, r4, r2
 8003f88:	4629      	mov	r1, r5
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	f04f 0400 	mov.w	r4, #0
 8003f94:	0154      	lsls	r4, r2, #5
 8003f96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f9a:	014b      	lsls	r3, r1, #5
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	1b49      	subs	r1, r1, r5
 8003fa2:	eb62 0206 	sbc.w	r2, r2, r6
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	f04f 0400 	mov.w	r4, #0
 8003fae:	0194      	lsls	r4, r2, #6
 8003fb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fb4:	018b      	lsls	r3, r1, #6
 8003fb6:	1a5b      	subs	r3, r3, r1
 8003fb8:	eb64 0402 	sbc.w	r4, r4, r2
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	00e2      	lsls	r2, r4, #3
 8003fc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fca:	00d9      	lsls	r1, r3, #3
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4614      	mov	r4, r2
 8003fd0:	195b      	adds	r3, r3, r5
 8003fd2:	eb44 0406 	adc.w	r4, r4, r6
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	0262      	lsls	r2, r4, #9
 8003fe0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fe4:	0259      	lsls	r1, r3, #9
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4614      	mov	r4, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	4621      	mov	r1, r4
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f04f 0400 	mov.w	r4, #0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	f7fc fdf0 	bl	8000bdc <__aeabi_uldivmod>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	e049      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004004:	4b2f      	ldr	r3, [pc, #188]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	f04f 0400 	mov.w	r4, #0
 800400e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	ea03 0501 	and.w	r5, r3, r1
 800401a:	ea04 0602 	and.w	r6, r4, r2
 800401e:	4629      	mov	r1, r5
 8004020:	4632      	mov	r2, r6
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	f04f 0400 	mov.w	r4, #0
 800402a:	0154      	lsls	r4, r2, #5
 800402c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004030:	014b      	lsls	r3, r1, #5
 8004032:	4619      	mov	r1, r3
 8004034:	4622      	mov	r2, r4
 8004036:	1b49      	subs	r1, r1, r5
 8004038:	eb62 0206 	sbc.w	r2, r2, r6
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	f04f 0400 	mov.w	r4, #0
 8004044:	0194      	lsls	r4, r2, #6
 8004046:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800404a:	018b      	lsls	r3, r1, #6
 800404c:	1a5b      	subs	r3, r3, r1
 800404e:	eb64 0402 	sbc.w	r4, r4, r2
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	00e2      	lsls	r2, r4, #3
 800405c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004060:	00d9      	lsls	r1, r3, #3
 8004062:	460b      	mov	r3, r1
 8004064:	4614      	mov	r4, r2
 8004066:	195b      	adds	r3, r3, r5
 8004068:	eb44 0406 	adc.w	r4, r4, r6
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	02a2      	lsls	r2, r4, #10
 8004076:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800407a:	0299      	lsls	r1, r3, #10
 800407c:	460b      	mov	r3, r1
 800407e:	4614      	mov	r4, r2
 8004080:	4618      	mov	r0, r3
 8004082:	4621      	mov	r1, r4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	461a      	mov	r2, r3
 800408c:	4623      	mov	r3, r4
 800408e:	f7fc fda5 	bl	8000bdc <__aeabi_uldivmod>
 8004092:	4603      	mov	r3, r0
 8004094:	460c      	mov	r4, r1
 8004096:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	60bb      	str	r3, [r7, #8]
      break;
 80040b2:	e002      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040b6:	60bb      	str	r3, [r7, #8]
      break;
 80040b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ba:	68bb      	ldr	r3, [r7, #8]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	007a1200 	.word	0x007a1200

080040d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000014 	.word	0x20000014

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040ec:	f7ff fff0 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80040f0:	4601      	mov	r1, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4a03      	ldr	r2, [pc, #12]	; (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	0800668c 	.word	0x0800668c

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004114:	f7ff ffdc 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004118:	4601      	mov	r1, r0
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0b5b      	lsrs	r3, r3, #13
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4a03      	ldr	r2, [pc, #12]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004126:	5cd3      	ldrb	r3, [r2, r3]
 8004128:	fa21 f303 	lsr.w	r3, r1, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	0800668c 	.word	0x0800668c

08004138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e056      	b.n	80041f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fd ff59 	bl	800201c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004180:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	ea42 0103 	orr.w	r1, r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	0c1b      	lsrs	r3, r3, #16
 80041c8:	f003 0104 	and.w	r1, r3, #4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10f      	bne.n	8004244 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
    return;
 8004242:	e0d8      	b.n	80043f6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	085b      	lsrs	r3, r3, #1
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_SPI_IRQHandler+0x66>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	09db      	lsrs	r3, r3, #7
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
    return;
 8004264:	e0c7      	b.n	80043f6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10c      	bne.n	800428c <HAL_SPI_IRQHandler+0x8c>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	099b      	lsrs	r3, r3, #6
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80b5 	beq.w	80043f6 <HAL_SPI_IRQHandler+0x1f6>
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80ae 	beq.w	80043f6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d023      	beq.n	80042ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d011      	beq.n	80042d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f043 0204 	orr.w	r2, r3, #4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	e00b      	b.n	80042ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
        return;
 80042ec:	e083      	b.n	80043f6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d014      	beq.n	8004324 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f043 0201 	orr.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00c      	beq.n	800434a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	f043 0208 	orr.w	r2, r3, #8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	2b00      	cmp	r3, #0
 8004350:	d050      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004360:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <HAL_SPI_IRQHandler+0x17e>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d034      	beq.n	80043e8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0203 	bic.w	r2, r2, #3
 800438c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d011      	beq.n	80043ba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_SPI_IRQHandler+0x1fc>)
 800439c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fe40 	bl	8003028 <HAL_DMA_Abort_IT>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d016      	beq.n	80043f0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c6:	4a0d      	ldr	r2, [pc, #52]	; (80043fc <HAL_SPI_IRQHandler+0x1fc>)
 80043c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fe2a 	bl	8003028 <HAL_DMA_Abort_IT>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80043e6:	e003      	b.n	80043f0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f809 	bl	8004400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043ee:	e000      	b.n	80043f2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80043f0:	bf00      	nop
    return;
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
  }
}
 80043f6:	3720      	adds	r7, #32
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	08004415 	.word	0x08004415

08004400 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff ffe6 	bl	8004400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e01d      	b.n	800448a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fd fe2a 	bl	80020bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f000 f908 	bl	8004690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d007      	beq.n	80044c4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b06      	cmp	r3, #6
 8004502:	d007      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_TIM_ConfigClockSource+0x18>
 8004536:	2302      	movs	r3, #2
 8004538:	e0a6      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x166>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004558:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004560:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d067      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x120>
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d80b      	bhi.n	800458e <HAL_TIM_ConfigClockSource+0x6c>
 8004576:	2b10      	cmp	r3, #16
 8004578:	d073      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x140>
 800457a:	2b10      	cmp	r3, #16
 800457c:	d802      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x62>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d06f      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004582:	e078      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004584:	2b20      	cmp	r3, #32
 8004586:	d06c      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x140>
 8004588:	2b30      	cmp	r3, #48	; 0x30
 800458a:	d06a      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800458c:	e073      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800458e:	2b70      	cmp	r3, #112	; 0x70
 8004590:	d00d      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x8c>
 8004592:	2b70      	cmp	r3, #112	; 0x70
 8004594:	d804      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x7e>
 8004596:	2b50      	cmp	r3, #80	; 0x50
 8004598:	d033      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0xe0>
 800459a:	2b60      	cmp	r3, #96	; 0x60
 800459c:	d041      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800459e:	e06a      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a4:	d066      	beq.n	8004674 <HAL_TIM_ConfigClockSource+0x152>
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d017      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0xba>
      break;
 80045ac:	e063      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6899      	ldr	r1, [r3, #8]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f000 f961 	bl	8004884 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	609a      	str	r2, [r3, #8]
      break;
 80045da:	e04c      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6899      	ldr	r1, [r3, #8]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f000 f94a 	bl	8004884 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045fe:	609a      	str	r2, [r3, #8]
      break;
 8004600:	e039      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6859      	ldr	r1, [r3, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	461a      	mov	r2, r3
 8004610:	f000 f8be 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2150      	movs	r1, #80	; 0x50
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f917 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 8004620:	e029      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	461a      	mov	r2, r3
 8004630:	f000 f8dd 	bl	80047ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2160      	movs	r1, #96	; 0x60
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f907 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 8004640:	e019      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	461a      	mov	r2, r3
 8004650:	f000 f89e 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2140      	movs	r1, #64	; 0x40
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f8f7 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 8004660:	e009      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f000 f8ee 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 8004672:	e000      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004674:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a34      	ldr	r2, [pc, #208]	; (8004774 <TIM_Base_SetConfig+0xe4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00f      	beq.n	80046c8 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a31      	ldr	r2, [pc, #196]	; (8004778 <TIM_Base_SetConfig+0xe8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0x38>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a30      	ldr	r2, [pc, #192]	; (800477c <TIM_Base_SetConfig+0xec>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x38>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a2f      	ldr	r2, [pc, #188]	; (8004780 <TIM_Base_SetConfig+0xf0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a25      	ldr	r2, [pc, #148]	; (8004774 <TIM_Base_SetConfig+0xe4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01b      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d017      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a22      	ldr	r2, [pc, #136]	; (8004778 <TIM_Base_SetConfig+0xe8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a21      	ldr	r2, [pc, #132]	; (800477c <TIM_Base_SetConfig+0xec>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a20      	ldr	r2, [pc, #128]	; (8004780 <TIM_Base_SetConfig+0xf0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <TIM_Base_SetConfig+0xf4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <TIM_Base_SetConfig+0xf8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_Base_SetConfig+0x8a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1d      	ldr	r2, [pc, #116]	; (800478c <TIM_Base_SetConfig+0xfc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <TIM_Base_SetConfig+0xe4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d103      	bne.n	8004760 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	615a      	str	r2, [r3, #20]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40014000 	.word	0x40014000
 8004788:	40014400 	.word	0x40014400
 800478c:	40014800 	.word	0x40014800

08004790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f023 0201 	bic.w	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 030a 	bic.w	r3, r3, #10
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f023 0210 	bic.w	r2, r3, #16
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	031b      	lsls	r3, r3, #12
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800482a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	f043 0307 	orr.w	r3, r3, #7
 8004870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800489e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	021a      	lsls	r2, r3, #8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	609a      	str	r2, [r3, #8]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d8:	2302      	movs	r3, #2
 80048da:	e050      	b.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1c      	ldr	r2, [pc, #112]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d013      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a16      	ldr	r2, [pc, #88]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a15      	ldr	r2, [pc, #84]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a13      	ldr	r2, [pc, #76]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10c      	bne.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4313      	orrs	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40010000 	.word	0x40010000
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40014000 	.word	0x40014000

080049a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e03f      	b.n	8004a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd fbb0 	bl	800212c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fb97 	bl	8005118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b088      	sub	sp, #32
 8004a3e:	af02      	add	r7, sp, #8
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	f040 8083 	bne.w	8004b62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Transmit+0x2e>
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e07b      	b.n	8004b64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Transmit+0x40>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e074      	b.n	8004b64 <HAL_UART_Transmit+0x12a>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2221      	movs	r2, #33	; 0x21
 8004a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a90:	f7fd fcc0 	bl	8002414 <HAL_GetTick>
 8004a94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004aaa:	e042      	b.n	8004b32 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d122      	bne.n	8004b0a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2180      	movs	r1, #128	; 0x80
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f9b6 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e042      	b.n	8004b64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	3302      	adds	r3, #2
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	e017      	b.n	8004b32 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	e013      	b.n	8004b32 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f993 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e01f      	b.n	8004b64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	60ba      	str	r2, [r7, #8]
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1b7      	bne.n	8004aac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f97a 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e006      	b.n	8004b64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d140      	bne.n	8004c08 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_UART_Receive_IT+0x26>
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e039      	b.n	8004c0a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_UART_Receive_IT+0x38>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e032      	b.n	8004c0a <HAL_UART_Receive_IT+0x9e>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2222      	movs	r2, #34	; 0x22
 8004bc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0220 	orr.w	r2, r2, #32
 8004c02:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10d      	bne.n	8004c6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_UART_IRQHandler+0x52>
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f9d6 	bl	8005014 <UART_Receive_IT>
      return;
 8004c68:	e0d1      	b.n	8004e0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80b0 	beq.w	8004dd2 <HAL_UART_IRQHandler+0x1ba>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <HAL_UART_IRQHandler+0x70>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80a5 	beq.w	8004dd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x90>
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_UART_IRQHandler+0xb0>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	f043 0202 	orr.w	r2, r3, #2
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_UART_IRQHandler+0xd0>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00f      	beq.n	8004d12 <HAL_UART_IRQHandler+0xfa>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <HAL_UART_IRQHandler+0xee>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	f043 0208 	orr.w	r2, r3, #8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d078      	beq.n	8004e0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_UART_IRQHandler+0x11c>
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f970 	bl	8005014 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	bf0c      	ite	eq
 8004d42:	2301      	moveq	r3, #1
 8004d44:	2300      	movne	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <HAL_UART_IRQHandler+0x144>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d031      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8b9 	bl	8004ed4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d123      	bne.n	8004db8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d013      	beq.n	8004db0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <HAL_UART_IRQHandler+0x1fc>)
 8004d8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fe f947 	bl	8003028 <HAL_DMA_Abort_IT>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d016      	beq.n	8004dce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004daa:	4610      	mov	r0, r2
 8004dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dae:	e00e      	b.n	8004dce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f83b 	bl	8004e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db6:	e00a      	b.n	8004dce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f837 	bl	8004e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbe:	e006      	b.n	8004dce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f833 	bl	8004e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004dcc:	e01e      	b.n	8004e0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dce:	bf00      	nop
    return;
 8004dd0:	e01c      	b.n	8004e0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_UART_IRQHandler+0x1d6>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8a6 	bl	8004f38 <UART_Transmit_IT>
    return;
 8004dec:	e00f      	b.n	8004e0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_UART_IRQHandler+0x1f6>
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8ee 	bl	8004fe4 <UART_EndTransmit_IT>
    return;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004e0c:	bf00      	nop
  }
}
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	08004f11 	.word	0x08004f11

08004e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e50:	e02c      	b.n	8004eac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d028      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e60:	f7fd fad8 	bl	8002414 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d21d      	bcs.n	8004eac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e00f      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d0c3      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff ff7e 	bl	8004e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b21      	cmp	r3, #33	; 0x21
 8004f4a:	d144      	bne.n	8004fd6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d11a      	bne.n	8004f8c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	1c9a      	adds	r2, r3, #2
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	621a      	str	r2, [r3, #32]
 8004f7e:	e00e      	b.n	8004f9e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]
 8004f8a:	e008      	b.n	8004f9e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6211      	str	r1, [r2, #32]
 8004f96:	781a      	ldrb	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4619      	mov	r1, r3
 8004fac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff07 	bl	8004e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b22      	cmp	r3, #34	; 0x22
 8005026:	d171      	bne.n	800510c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d123      	bne.n	800507a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10e      	bne.n	800505e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	1c9a      	adds	r2, r3, #2
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
 800505c:	e029      	b.n	80050b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	b29b      	uxth	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
 8005078:	e01b      	b.n	80050b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6858      	ldr	r0, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6291      	str	r1, [r2, #40]	; 0x28
 8005092:	b2c2      	uxtb	r2, r0
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e00c      	b.n	80050b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	1c58      	adds	r0, r3, #1
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	6288      	str	r0, [r1, #40]	; 0x28
 80050aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4619      	mov	r1, r3
 80050c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d120      	bne.n	8005108 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0220 	bic.w	r2, r2, #32
 80050d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc fdf8 	bl	8001cf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e002      	b.n	800510e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800515a:	f023 030c 	bic.w	r3, r3, #12
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	430b      	orrs	r3, r1
 8005166:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005186:	f040 818b 	bne.w	80054a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4ac1      	ldr	r2, [pc, #772]	; (8005494 <UART_SetConfig+0x37c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d005      	beq.n	80051a0 <UART_SetConfig+0x88>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4abf      	ldr	r2, [pc, #764]	; (8005498 <UART_SetConfig+0x380>)
 800519a:	4293      	cmp	r3, r2
 800519c:	f040 80bd 	bne.w	800531a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051a0:	f7fe ffb6 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 80051a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	461d      	mov	r5, r3
 80051aa:	f04f 0600 	mov.w	r6, #0
 80051ae:	46a8      	mov	r8, r5
 80051b0:	46b1      	mov	r9, r6
 80051b2:	eb18 0308 	adds.w	r3, r8, r8
 80051b6:	eb49 0409 	adc.w	r4, r9, r9
 80051ba:	4698      	mov	r8, r3
 80051bc:	46a1      	mov	r9, r4
 80051be:	eb18 0805 	adds.w	r8, r8, r5
 80051c2:	eb49 0906 	adc.w	r9, r9, r6
 80051c6:	f04f 0100 	mov.w	r1, #0
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051da:	4688      	mov	r8, r1
 80051dc:	4691      	mov	r9, r2
 80051de:	eb18 0005 	adds.w	r0, r8, r5
 80051e2:	eb49 0106 	adc.w	r1, r9, r6
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	461d      	mov	r5, r3
 80051ec:	f04f 0600 	mov.w	r6, #0
 80051f0:	196b      	adds	r3, r5, r5
 80051f2:	eb46 0406 	adc.w	r4, r6, r6
 80051f6:	461a      	mov	r2, r3
 80051f8:	4623      	mov	r3, r4
 80051fa:	f7fb fcef 	bl	8000bdc <__aeabi_uldivmod>
 80051fe:	4603      	mov	r3, r0
 8005200:	460c      	mov	r4, r1
 8005202:	461a      	mov	r2, r3
 8005204:	4ba5      	ldr	r3, [pc, #660]	; (800549c <UART_SetConfig+0x384>)
 8005206:	fba3 2302 	umull	r2, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	461d      	mov	r5, r3
 8005214:	f04f 0600 	mov.w	r6, #0
 8005218:	46a9      	mov	r9, r5
 800521a:	46b2      	mov	sl, r6
 800521c:	eb19 0309 	adds.w	r3, r9, r9
 8005220:	eb4a 040a 	adc.w	r4, sl, sl
 8005224:	4699      	mov	r9, r3
 8005226:	46a2      	mov	sl, r4
 8005228:	eb19 0905 	adds.w	r9, r9, r5
 800522c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800523c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005240:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005244:	4689      	mov	r9, r1
 8005246:	4692      	mov	sl, r2
 8005248:	eb19 0005 	adds.w	r0, r9, r5
 800524c:	eb4a 0106 	adc.w	r1, sl, r6
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	461d      	mov	r5, r3
 8005256:	f04f 0600 	mov.w	r6, #0
 800525a:	196b      	adds	r3, r5, r5
 800525c:	eb46 0406 	adc.w	r4, r6, r6
 8005260:	461a      	mov	r2, r3
 8005262:	4623      	mov	r3, r4
 8005264:	f7fb fcba 	bl	8000bdc <__aeabi_uldivmod>
 8005268:	4603      	mov	r3, r0
 800526a:	460c      	mov	r4, r1
 800526c:	461a      	mov	r2, r3
 800526e:	4b8b      	ldr	r3, [pc, #556]	; (800549c <UART_SetConfig+0x384>)
 8005270:	fba3 1302 	umull	r1, r3, r3, r2
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	3332      	adds	r3, #50	; 0x32
 8005282:	4a86      	ldr	r2, [pc, #536]	; (800549c <UART_SetConfig+0x384>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005290:	4498      	add	r8, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	461d      	mov	r5, r3
 8005296:	f04f 0600 	mov.w	r6, #0
 800529a:	46a9      	mov	r9, r5
 800529c:	46b2      	mov	sl, r6
 800529e:	eb19 0309 	adds.w	r3, r9, r9
 80052a2:	eb4a 040a 	adc.w	r4, sl, sl
 80052a6:	4699      	mov	r9, r3
 80052a8:	46a2      	mov	sl, r4
 80052aa:	eb19 0905 	adds.w	r9, r9, r5
 80052ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80052b2:	f04f 0100 	mov.w	r1, #0
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052c6:	4689      	mov	r9, r1
 80052c8:	4692      	mov	sl, r2
 80052ca:	eb19 0005 	adds.w	r0, r9, r5
 80052ce:	eb4a 0106 	adc.w	r1, sl, r6
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	461d      	mov	r5, r3
 80052d8:	f04f 0600 	mov.w	r6, #0
 80052dc:	196b      	adds	r3, r5, r5
 80052de:	eb46 0406 	adc.w	r4, r6, r6
 80052e2:	461a      	mov	r2, r3
 80052e4:	4623      	mov	r3, r4
 80052e6:	f7fb fc79 	bl	8000bdc <__aeabi_uldivmod>
 80052ea:	4603      	mov	r3, r0
 80052ec:	460c      	mov	r4, r1
 80052ee:	461a      	mov	r2, r3
 80052f0:	4b6a      	ldr	r3, [pc, #424]	; (800549c <UART_SetConfig+0x384>)
 80052f2:	fba3 1302 	umull	r1, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2164      	movs	r1, #100	; 0x64
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	3332      	adds	r3, #50	; 0x32
 8005304:	4a65      	ldr	r2, [pc, #404]	; (800549c <UART_SetConfig+0x384>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	f003 0207 	and.w	r2, r3, #7
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4442      	add	r2, r8
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	e26f      	b.n	80057fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800531a:	f7fe fee5 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 800531e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	461d      	mov	r5, r3
 8005324:	f04f 0600 	mov.w	r6, #0
 8005328:	46a8      	mov	r8, r5
 800532a:	46b1      	mov	r9, r6
 800532c:	eb18 0308 	adds.w	r3, r8, r8
 8005330:	eb49 0409 	adc.w	r4, r9, r9
 8005334:	4698      	mov	r8, r3
 8005336:	46a1      	mov	r9, r4
 8005338:	eb18 0805 	adds.w	r8, r8, r5
 800533c:	eb49 0906 	adc.w	r9, r9, r6
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800534c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005350:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005354:	4688      	mov	r8, r1
 8005356:	4691      	mov	r9, r2
 8005358:	eb18 0005 	adds.w	r0, r8, r5
 800535c:	eb49 0106 	adc.w	r1, r9, r6
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	461d      	mov	r5, r3
 8005366:	f04f 0600 	mov.w	r6, #0
 800536a:	196b      	adds	r3, r5, r5
 800536c:	eb46 0406 	adc.w	r4, r6, r6
 8005370:	461a      	mov	r2, r3
 8005372:	4623      	mov	r3, r4
 8005374:	f7fb fc32 	bl	8000bdc <__aeabi_uldivmod>
 8005378:	4603      	mov	r3, r0
 800537a:	460c      	mov	r4, r1
 800537c:	461a      	mov	r2, r3
 800537e:	4b47      	ldr	r3, [pc, #284]	; (800549c <UART_SetConfig+0x384>)
 8005380:	fba3 2302 	umull	r2, r3, r3, r2
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	461d      	mov	r5, r3
 800538e:	f04f 0600 	mov.w	r6, #0
 8005392:	46a9      	mov	r9, r5
 8005394:	46b2      	mov	sl, r6
 8005396:	eb19 0309 	adds.w	r3, r9, r9
 800539a:	eb4a 040a 	adc.w	r4, sl, sl
 800539e:	4699      	mov	r9, r3
 80053a0:	46a2      	mov	sl, r4
 80053a2:	eb19 0905 	adds.w	r9, r9, r5
 80053a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80053aa:	f04f 0100 	mov.w	r1, #0
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053be:	4689      	mov	r9, r1
 80053c0:	4692      	mov	sl, r2
 80053c2:	eb19 0005 	adds.w	r0, r9, r5
 80053c6:	eb4a 0106 	adc.w	r1, sl, r6
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	461d      	mov	r5, r3
 80053d0:	f04f 0600 	mov.w	r6, #0
 80053d4:	196b      	adds	r3, r5, r5
 80053d6:	eb46 0406 	adc.w	r4, r6, r6
 80053da:	461a      	mov	r2, r3
 80053dc:	4623      	mov	r3, r4
 80053de:	f7fb fbfd 	bl	8000bdc <__aeabi_uldivmod>
 80053e2:	4603      	mov	r3, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	461a      	mov	r2, r3
 80053e8:	4b2c      	ldr	r3, [pc, #176]	; (800549c <UART_SetConfig+0x384>)
 80053ea:	fba3 1302 	umull	r1, r3, r3, r2
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	2164      	movs	r1, #100	; 0x64
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	3332      	adds	r3, #50	; 0x32
 80053fc:	4a27      	ldr	r2, [pc, #156]	; (800549c <UART_SetConfig+0x384>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800540a:	4498      	add	r8, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	461d      	mov	r5, r3
 8005410:	f04f 0600 	mov.w	r6, #0
 8005414:	46a9      	mov	r9, r5
 8005416:	46b2      	mov	sl, r6
 8005418:	eb19 0309 	adds.w	r3, r9, r9
 800541c:	eb4a 040a 	adc.w	r4, sl, sl
 8005420:	4699      	mov	r9, r3
 8005422:	46a2      	mov	sl, r4
 8005424:	eb19 0905 	adds.w	r9, r9, r5
 8005428:	eb4a 0a06 	adc.w	sl, sl, r6
 800542c:	f04f 0100 	mov.w	r1, #0
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005438:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800543c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005440:	4689      	mov	r9, r1
 8005442:	4692      	mov	sl, r2
 8005444:	eb19 0005 	adds.w	r0, r9, r5
 8005448:	eb4a 0106 	adc.w	r1, sl, r6
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	461d      	mov	r5, r3
 8005452:	f04f 0600 	mov.w	r6, #0
 8005456:	196b      	adds	r3, r5, r5
 8005458:	eb46 0406 	adc.w	r4, r6, r6
 800545c:	461a      	mov	r2, r3
 800545e:	4623      	mov	r3, r4
 8005460:	f7fb fbbc 	bl	8000bdc <__aeabi_uldivmod>
 8005464:	4603      	mov	r3, r0
 8005466:	460c      	mov	r4, r1
 8005468:	461a      	mov	r2, r3
 800546a:	4b0c      	ldr	r3, [pc, #48]	; (800549c <UART_SetConfig+0x384>)
 800546c:	fba3 1302 	umull	r1, r3, r3, r2
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	2164      	movs	r1, #100	; 0x64
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	3332      	adds	r3, #50	; 0x32
 800547e:	4a07      	ldr	r2, [pc, #28]	; (800549c <UART_SetConfig+0x384>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	f003 0207 	and.w	r2, r3, #7
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4442      	add	r2, r8
 8005490:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005492:	e1b2      	b.n	80057fa <UART_SetConfig+0x6e2>
 8005494:	40011000 	.word	0x40011000
 8005498:	40011400 	.word	0x40011400
 800549c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4ad7      	ldr	r2, [pc, #860]	; (8005804 <UART_SetConfig+0x6ec>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d005      	beq.n	80054b6 <UART_SetConfig+0x39e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4ad6      	ldr	r2, [pc, #856]	; (8005808 <UART_SetConfig+0x6f0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	f040 80d1 	bne.w	8005658 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b6:	f7fe fe2b 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 80054ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	469a      	mov	sl, r3
 80054c0:	f04f 0b00 	mov.w	fp, #0
 80054c4:	46d0      	mov	r8, sl
 80054c6:	46d9      	mov	r9, fp
 80054c8:	eb18 0308 	adds.w	r3, r8, r8
 80054cc:	eb49 0409 	adc.w	r4, r9, r9
 80054d0:	4698      	mov	r8, r3
 80054d2:	46a1      	mov	r9, r4
 80054d4:	eb18 080a 	adds.w	r8, r8, sl
 80054d8:	eb49 090b 	adc.w	r9, r9, fp
 80054dc:	f04f 0100 	mov.w	r1, #0
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054f0:	4688      	mov	r8, r1
 80054f2:	4691      	mov	r9, r2
 80054f4:	eb1a 0508 	adds.w	r5, sl, r8
 80054f8:	eb4b 0609 	adc.w	r6, fp, r9
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4619      	mov	r1, r3
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	f04f 0400 	mov.w	r4, #0
 800550e:	0094      	lsls	r4, r2, #2
 8005510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005514:	008b      	lsls	r3, r1, #2
 8005516:	461a      	mov	r2, r3
 8005518:	4623      	mov	r3, r4
 800551a:	4628      	mov	r0, r5
 800551c:	4631      	mov	r1, r6
 800551e:	f7fb fb5d 	bl	8000bdc <__aeabi_uldivmod>
 8005522:	4603      	mov	r3, r0
 8005524:	460c      	mov	r4, r1
 8005526:	461a      	mov	r2, r3
 8005528:	4bb8      	ldr	r3, [pc, #736]	; (800580c <UART_SetConfig+0x6f4>)
 800552a:	fba3 2302 	umull	r2, r3, r3, r2
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	469b      	mov	fp, r3
 8005538:	f04f 0c00 	mov.w	ip, #0
 800553c:	46d9      	mov	r9, fp
 800553e:	46e2      	mov	sl, ip
 8005540:	eb19 0309 	adds.w	r3, r9, r9
 8005544:	eb4a 040a 	adc.w	r4, sl, sl
 8005548:	4699      	mov	r9, r3
 800554a:	46a2      	mov	sl, r4
 800554c:	eb19 090b 	adds.w	r9, r9, fp
 8005550:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005554:	f04f 0100 	mov.w	r1, #0
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005560:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005564:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005568:	4689      	mov	r9, r1
 800556a:	4692      	mov	sl, r2
 800556c:	eb1b 0509 	adds.w	r5, fp, r9
 8005570:	eb4c 060a 	adc.w	r6, ip, sl
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4619      	mov	r1, r3
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	f04f 0400 	mov.w	r4, #0
 8005586:	0094      	lsls	r4, r2, #2
 8005588:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800558c:	008b      	lsls	r3, r1, #2
 800558e:	461a      	mov	r2, r3
 8005590:	4623      	mov	r3, r4
 8005592:	4628      	mov	r0, r5
 8005594:	4631      	mov	r1, r6
 8005596:	f7fb fb21 	bl	8000bdc <__aeabi_uldivmod>
 800559a:	4603      	mov	r3, r0
 800559c:	460c      	mov	r4, r1
 800559e:	461a      	mov	r2, r3
 80055a0:	4b9a      	ldr	r3, [pc, #616]	; (800580c <UART_SetConfig+0x6f4>)
 80055a2:	fba3 1302 	umull	r1, r3, r3, r2
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	2164      	movs	r1, #100	; 0x64
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	3332      	adds	r3, #50	; 0x32
 80055b4:	4a95      	ldr	r2, [pc, #596]	; (800580c <UART_SetConfig+0x6f4>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c0:	4498      	add	r8, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	469b      	mov	fp, r3
 80055c6:	f04f 0c00 	mov.w	ip, #0
 80055ca:	46d9      	mov	r9, fp
 80055cc:	46e2      	mov	sl, ip
 80055ce:	eb19 0309 	adds.w	r3, r9, r9
 80055d2:	eb4a 040a 	adc.w	r4, sl, sl
 80055d6:	4699      	mov	r9, r3
 80055d8:	46a2      	mov	sl, r4
 80055da:	eb19 090b 	adds.w	r9, r9, fp
 80055de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055e2:	f04f 0100 	mov.w	r1, #0
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055f6:	4689      	mov	r9, r1
 80055f8:	4692      	mov	sl, r2
 80055fa:	eb1b 0509 	adds.w	r5, fp, r9
 80055fe:	eb4c 060a 	adc.w	r6, ip, sl
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	4619      	mov	r1, r3
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	f04f 0400 	mov.w	r4, #0
 8005614:	0094      	lsls	r4, r2, #2
 8005616:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800561a:	008b      	lsls	r3, r1, #2
 800561c:	461a      	mov	r2, r3
 800561e:	4623      	mov	r3, r4
 8005620:	4628      	mov	r0, r5
 8005622:	4631      	mov	r1, r6
 8005624:	f7fb fada 	bl	8000bdc <__aeabi_uldivmod>
 8005628:	4603      	mov	r3, r0
 800562a:	460c      	mov	r4, r1
 800562c:	461a      	mov	r2, r3
 800562e:	4b77      	ldr	r3, [pc, #476]	; (800580c <UART_SetConfig+0x6f4>)
 8005630:	fba3 1302 	umull	r1, r3, r3, r2
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	2164      	movs	r1, #100	; 0x64
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	3332      	adds	r3, #50	; 0x32
 8005642:	4a72      	ldr	r2, [pc, #456]	; (800580c <UART_SetConfig+0x6f4>)
 8005644:	fba2 2303 	umull	r2, r3, r2, r3
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	f003 020f 	and.w	r2, r3, #15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4442      	add	r2, r8
 8005654:	609a      	str	r2, [r3, #8]
 8005656:	e0d0      	b.n	80057fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7fe fd46 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 800565c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	469a      	mov	sl, r3
 8005662:	f04f 0b00 	mov.w	fp, #0
 8005666:	46d0      	mov	r8, sl
 8005668:	46d9      	mov	r9, fp
 800566a:	eb18 0308 	adds.w	r3, r8, r8
 800566e:	eb49 0409 	adc.w	r4, r9, r9
 8005672:	4698      	mov	r8, r3
 8005674:	46a1      	mov	r9, r4
 8005676:	eb18 080a 	adds.w	r8, r8, sl
 800567a:	eb49 090b 	adc.w	r9, r9, fp
 800567e:	f04f 0100 	mov.w	r1, #0
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800568a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800568e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005692:	4688      	mov	r8, r1
 8005694:	4691      	mov	r9, r2
 8005696:	eb1a 0508 	adds.w	r5, sl, r8
 800569a:	eb4b 0609 	adc.w	r6, fp, r9
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4619      	mov	r1, r3
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	f04f 0400 	mov.w	r4, #0
 80056b0:	0094      	lsls	r4, r2, #2
 80056b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056b6:	008b      	lsls	r3, r1, #2
 80056b8:	461a      	mov	r2, r3
 80056ba:	4623      	mov	r3, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	4631      	mov	r1, r6
 80056c0:	f7fb fa8c 	bl	8000bdc <__aeabi_uldivmod>
 80056c4:	4603      	mov	r3, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	461a      	mov	r2, r3
 80056ca:	4b50      	ldr	r3, [pc, #320]	; (800580c <UART_SetConfig+0x6f4>)
 80056cc:	fba3 2302 	umull	r2, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	469b      	mov	fp, r3
 80056da:	f04f 0c00 	mov.w	ip, #0
 80056de:	46d9      	mov	r9, fp
 80056e0:	46e2      	mov	sl, ip
 80056e2:	eb19 0309 	adds.w	r3, r9, r9
 80056e6:	eb4a 040a 	adc.w	r4, sl, sl
 80056ea:	4699      	mov	r9, r3
 80056ec:	46a2      	mov	sl, r4
 80056ee:	eb19 090b 	adds.w	r9, r9, fp
 80056f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005702:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005706:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800570a:	4689      	mov	r9, r1
 800570c:	4692      	mov	sl, r2
 800570e:	eb1b 0509 	adds.w	r5, fp, r9
 8005712:	eb4c 060a 	adc.w	r6, ip, sl
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4619      	mov	r1, r3
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	f04f 0400 	mov.w	r4, #0
 8005728:	0094      	lsls	r4, r2, #2
 800572a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800572e:	008b      	lsls	r3, r1, #2
 8005730:	461a      	mov	r2, r3
 8005732:	4623      	mov	r3, r4
 8005734:	4628      	mov	r0, r5
 8005736:	4631      	mov	r1, r6
 8005738:	f7fb fa50 	bl	8000bdc <__aeabi_uldivmod>
 800573c:	4603      	mov	r3, r0
 800573e:	460c      	mov	r4, r1
 8005740:	461a      	mov	r2, r3
 8005742:	4b32      	ldr	r3, [pc, #200]	; (800580c <UART_SetConfig+0x6f4>)
 8005744:	fba3 1302 	umull	r1, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	2164      	movs	r1, #100	; 0x64
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	3332      	adds	r3, #50	; 0x32
 8005756:	4a2d      	ldr	r2, [pc, #180]	; (800580c <UART_SetConfig+0x6f4>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005762:	4498      	add	r8, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	469b      	mov	fp, r3
 8005768:	f04f 0c00 	mov.w	ip, #0
 800576c:	46d9      	mov	r9, fp
 800576e:	46e2      	mov	sl, ip
 8005770:	eb19 0309 	adds.w	r3, r9, r9
 8005774:	eb4a 040a 	adc.w	r4, sl, sl
 8005778:	4699      	mov	r9, r3
 800577a:	46a2      	mov	sl, r4
 800577c:	eb19 090b 	adds.w	r9, r9, fp
 8005780:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005790:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005794:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005798:	4689      	mov	r9, r1
 800579a:	4692      	mov	sl, r2
 800579c:	eb1b 0509 	adds.w	r5, fp, r9
 80057a0:	eb4c 060a 	adc.w	r6, ip, sl
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4619      	mov	r1, r3
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	f04f 0400 	mov.w	r4, #0
 80057b6:	0094      	lsls	r4, r2, #2
 80057b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057bc:	008b      	lsls	r3, r1, #2
 80057be:	461a      	mov	r2, r3
 80057c0:	4623      	mov	r3, r4
 80057c2:	4628      	mov	r0, r5
 80057c4:	4631      	mov	r1, r6
 80057c6:	f7fb fa09 	bl	8000bdc <__aeabi_uldivmod>
 80057ca:	4603      	mov	r3, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	461a      	mov	r2, r3
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <UART_SetConfig+0x6f4>)
 80057d2:	fba3 1302 	umull	r1, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2164      	movs	r1, #100	; 0x64
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	3332      	adds	r3, #50	; 0x32
 80057e4:	4a09      	ldr	r2, [pc, #36]	; (800580c <UART_SetConfig+0x6f4>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4442      	add	r2, r8
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	e7ff      	b.n	80057fa <UART_SetConfig+0x6e2>
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005804:	40011000 	.word	0x40011000
 8005808:	40011400 	.word	0x40011400
 800580c:	51eb851f 	.word	0x51eb851f

08005810 <__errno>:
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <__errno+0x8>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20000020 	.word	0x20000020

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4e0d      	ldr	r6, [pc, #52]	; (8005854 <__libc_init_array+0x38>)
 8005820:	4c0d      	ldr	r4, [pc, #52]	; (8005858 <__libc_init_array+0x3c>)
 8005822:	1ba4      	subs	r4, r4, r6
 8005824:	10a4      	asrs	r4, r4, #2
 8005826:	2500      	movs	r5, #0
 8005828:	42a5      	cmp	r5, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	4e0b      	ldr	r6, [pc, #44]	; (800585c <__libc_init_array+0x40>)
 800582e:	4c0c      	ldr	r4, [pc, #48]	; (8005860 <__libc_init_array+0x44>)
 8005830:	f000 fc28 	bl	8006084 <_init>
 8005834:	1ba4      	subs	r4, r4, r6
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	2500      	movs	r5, #0
 800583a:	42a5      	cmp	r5, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005844:	4798      	blx	r3
 8005846:	3501      	adds	r5, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800584e:	4798      	blx	r3
 8005850:	3501      	adds	r5, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	080066d8 	.word	0x080066d8
 8005858:	080066d8 	.word	0x080066d8
 800585c:	080066d8 	.word	0x080066d8
 8005860:	080066dc 	.word	0x080066dc

08005864 <memcpy>:
 8005864:	b510      	push	{r4, lr}
 8005866:	1e43      	subs	r3, r0, #1
 8005868:	440a      	add	r2, r1
 800586a:	4291      	cmp	r1, r2
 800586c:	d100      	bne.n	8005870 <memcpy+0xc>
 800586e:	bd10      	pop	{r4, pc}
 8005870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005878:	e7f7      	b.n	800586a <memcpy+0x6>

0800587a <memset>:
 800587a:	4402      	add	r2, r0
 800587c:	4603      	mov	r3, r0
 800587e:	4293      	cmp	r3, r2
 8005880:	d100      	bne.n	8005884 <memset+0xa>
 8005882:	4770      	bx	lr
 8005884:	f803 1b01 	strb.w	r1, [r3], #1
 8005888:	e7f9      	b.n	800587e <memset+0x4>
	...

0800588c <siprintf>:
 800588c:	b40e      	push	{r1, r2, r3}
 800588e:	b500      	push	{lr}
 8005890:	b09c      	sub	sp, #112	; 0x70
 8005892:	ab1d      	add	r3, sp, #116	; 0x74
 8005894:	9002      	str	r0, [sp, #8]
 8005896:	9006      	str	r0, [sp, #24]
 8005898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800589c:	4809      	ldr	r0, [pc, #36]	; (80058c4 <siprintf+0x38>)
 800589e:	9107      	str	r1, [sp, #28]
 80058a0:	9104      	str	r1, [sp, #16]
 80058a2:	4909      	ldr	r1, [pc, #36]	; (80058c8 <siprintf+0x3c>)
 80058a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a8:	9105      	str	r1, [sp, #20]
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	a902      	add	r1, sp, #8
 80058b0:	f000 f866 	bl	8005980 <_svfiprintf_r>
 80058b4:	9b02      	ldr	r3, [sp, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	b01c      	add	sp, #112	; 0x70
 80058bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c0:	b003      	add	sp, #12
 80058c2:	4770      	bx	lr
 80058c4:	20000020 	.word	0x20000020
 80058c8:	ffff0208 	.word	0xffff0208

080058cc <__ssputs_r>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	688e      	ldr	r6, [r1, #8]
 80058d2:	429e      	cmp	r6, r3
 80058d4:	4682      	mov	sl, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	4690      	mov	r8, r2
 80058da:	4699      	mov	r9, r3
 80058dc:	d837      	bhi.n	800594e <__ssputs_r+0x82>
 80058de:	898a      	ldrh	r2, [r1, #12]
 80058e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058e4:	d031      	beq.n	800594a <__ssputs_r+0x7e>
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	6909      	ldr	r1, [r1, #16]
 80058ea:	1a6f      	subs	r7, r5, r1
 80058ec:	6965      	ldr	r5, [r4, #20]
 80058ee:	2302      	movs	r3, #2
 80058f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80058f8:	f109 0301 	add.w	r3, r9, #1
 80058fc:	443b      	add	r3, r7
 80058fe:	429d      	cmp	r5, r3
 8005900:	bf38      	it	cc
 8005902:	461d      	movcc	r5, r3
 8005904:	0553      	lsls	r3, r2, #21
 8005906:	d530      	bpl.n	800596a <__ssputs_r+0x9e>
 8005908:	4629      	mov	r1, r5
 800590a:	f000 fb21 	bl	8005f50 <_malloc_r>
 800590e:	4606      	mov	r6, r0
 8005910:	b950      	cbnz	r0, 8005928 <__ssputs_r+0x5c>
 8005912:	230c      	movs	r3, #12
 8005914:	f8ca 3000 	str.w	r3, [sl]
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	f04f 30ff 	mov.w	r0, #4294967295
 8005924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005928:	463a      	mov	r2, r7
 800592a:	6921      	ldr	r1, [r4, #16]
 800592c:	f7ff ff9a 	bl	8005864 <memcpy>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	6126      	str	r6, [r4, #16]
 800593e:	6165      	str	r5, [r4, #20]
 8005940:	443e      	add	r6, r7
 8005942:	1bed      	subs	r5, r5, r7
 8005944:	6026      	str	r6, [r4, #0]
 8005946:	60a5      	str	r5, [r4, #8]
 8005948:	464e      	mov	r6, r9
 800594a:	454e      	cmp	r6, r9
 800594c:	d900      	bls.n	8005950 <__ssputs_r+0x84>
 800594e:	464e      	mov	r6, r9
 8005950:	4632      	mov	r2, r6
 8005952:	4641      	mov	r1, r8
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	f000 fa93 	bl	8005e80 <memmove>
 800595a:	68a3      	ldr	r3, [r4, #8]
 800595c:	1b9b      	subs	r3, r3, r6
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	441e      	add	r6, r3
 8005964:	6026      	str	r6, [r4, #0]
 8005966:	2000      	movs	r0, #0
 8005968:	e7dc      	b.n	8005924 <__ssputs_r+0x58>
 800596a:	462a      	mov	r2, r5
 800596c:	f000 fb4a 	bl	8006004 <_realloc_r>
 8005970:	4606      	mov	r6, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d1e2      	bne.n	800593c <__ssputs_r+0x70>
 8005976:	6921      	ldr	r1, [r4, #16]
 8005978:	4650      	mov	r0, sl
 800597a:	f000 fa9b 	bl	8005eb4 <_free_r>
 800597e:	e7c8      	b.n	8005912 <__ssputs_r+0x46>

08005980 <_svfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	461d      	mov	r5, r3
 8005986:	898b      	ldrh	r3, [r1, #12]
 8005988:	061f      	lsls	r7, r3, #24
 800598a:	b09d      	sub	sp, #116	; 0x74
 800598c:	4680      	mov	r8, r0
 800598e:	460c      	mov	r4, r1
 8005990:	4616      	mov	r6, r2
 8005992:	d50f      	bpl.n	80059b4 <_svfiprintf_r+0x34>
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	b96b      	cbnz	r3, 80059b4 <_svfiprintf_r+0x34>
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	f000 fad9 	bl	8005f50 <_malloc_r>
 800599e:	6020      	str	r0, [r4, #0]
 80059a0:	6120      	str	r0, [r4, #16]
 80059a2:	b928      	cbnz	r0, 80059b0 <_svfiprintf_r+0x30>
 80059a4:	230c      	movs	r3, #12
 80059a6:	f8c8 3000 	str.w	r3, [r8]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	e0c8      	b.n	8005b42 <_svfiprintf_r+0x1c2>
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	6163      	str	r3, [r4, #20]
 80059b4:	2300      	movs	r3, #0
 80059b6:	9309      	str	r3, [sp, #36]	; 0x24
 80059b8:	2320      	movs	r3, #32
 80059ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059be:	2330      	movs	r3, #48	; 0x30
 80059c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059c4:	9503      	str	r5, [sp, #12]
 80059c6:	f04f 0b01 	mov.w	fp, #1
 80059ca:	4637      	mov	r7, r6
 80059cc:	463d      	mov	r5, r7
 80059ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059d2:	b10b      	cbz	r3, 80059d8 <_svfiprintf_r+0x58>
 80059d4:	2b25      	cmp	r3, #37	; 0x25
 80059d6:	d13e      	bne.n	8005a56 <_svfiprintf_r+0xd6>
 80059d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80059dc:	d00b      	beq.n	80059f6 <_svfiprintf_r+0x76>
 80059de:	4653      	mov	r3, sl
 80059e0:	4632      	mov	r2, r6
 80059e2:	4621      	mov	r1, r4
 80059e4:	4640      	mov	r0, r8
 80059e6:	f7ff ff71 	bl	80058cc <__ssputs_r>
 80059ea:	3001      	adds	r0, #1
 80059ec:	f000 80a4 	beq.w	8005b38 <_svfiprintf_r+0x1b8>
 80059f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f2:	4453      	add	r3, sl
 80059f4:	9309      	str	r3, [sp, #36]	; 0x24
 80059f6:	783b      	ldrb	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 809d 	beq.w	8005b38 <_svfiprintf_r+0x1b8>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295
 8005a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	9307      	str	r3, [sp, #28]
 8005a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a10:	931a      	str	r3, [sp, #104]	; 0x68
 8005a12:	462f      	mov	r7, r5
 8005a14:	2205      	movs	r2, #5
 8005a16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a1a:	4850      	ldr	r0, [pc, #320]	; (8005b5c <_svfiprintf_r+0x1dc>)
 8005a1c:	f7fa fbe8 	bl	80001f0 <memchr>
 8005a20:	9b04      	ldr	r3, [sp, #16]
 8005a22:	b9d0      	cbnz	r0, 8005a5a <_svfiprintf_r+0xda>
 8005a24:	06d9      	lsls	r1, r3, #27
 8005a26:	bf44      	itt	mi
 8005a28:	2220      	movmi	r2, #32
 8005a2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a2e:	071a      	lsls	r2, r3, #28
 8005a30:	bf44      	itt	mi
 8005a32:	222b      	movmi	r2, #43	; 0x2b
 8005a34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a38:	782a      	ldrb	r2, [r5, #0]
 8005a3a:	2a2a      	cmp	r2, #42	; 0x2a
 8005a3c:	d015      	beq.n	8005a6a <_svfiprintf_r+0xea>
 8005a3e:	9a07      	ldr	r2, [sp, #28]
 8005a40:	462f      	mov	r7, r5
 8005a42:	2000      	movs	r0, #0
 8005a44:	250a      	movs	r5, #10
 8005a46:	4639      	mov	r1, r7
 8005a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a4c:	3b30      	subs	r3, #48	; 0x30
 8005a4e:	2b09      	cmp	r3, #9
 8005a50:	d94d      	bls.n	8005aee <_svfiprintf_r+0x16e>
 8005a52:	b1b8      	cbz	r0, 8005a84 <_svfiprintf_r+0x104>
 8005a54:	e00f      	b.n	8005a76 <_svfiprintf_r+0xf6>
 8005a56:	462f      	mov	r7, r5
 8005a58:	e7b8      	b.n	80059cc <_svfiprintf_r+0x4c>
 8005a5a:	4a40      	ldr	r2, [pc, #256]	; (8005b5c <_svfiprintf_r+0x1dc>)
 8005a5c:	1a80      	subs	r0, r0, r2
 8005a5e:	fa0b f000 	lsl.w	r0, fp, r0
 8005a62:	4318      	orrs	r0, r3
 8005a64:	9004      	str	r0, [sp, #16]
 8005a66:	463d      	mov	r5, r7
 8005a68:	e7d3      	b.n	8005a12 <_svfiprintf_r+0x92>
 8005a6a:	9a03      	ldr	r2, [sp, #12]
 8005a6c:	1d11      	adds	r1, r2, #4
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	9103      	str	r1, [sp, #12]
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	db01      	blt.n	8005a7a <_svfiprintf_r+0xfa>
 8005a76:	9207      	str	r2, [sp, #28]
 8005a78:	e004      	b.n	8005a84 <_svfiprintf_r+0x104>
 8005a7a:	4252      	negs	r2, r2
 8005a7c:	f043 0302 	orr.w	r3, r3, #2
 8005a80:	9207      	str	r2, [sp, #28]
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	783b      	ldrb	r3, [r7, #0]
 8005a86:	2b2e      	cmp	r3, #46	; 0x2e
 8005a88:	d10c      	bne.n	8005aa4 <_svfiprintf_r+0x124>
 8005a8a:	787b      	ldrb	r3, [r7, #1]
 8005a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8e:	d133      	bne.n	8005af8 <_svfiprintf_r+0x178>
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	9203      	str	r2, [sp, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfb8      	it	lt
 8005a9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aa0:	3702      	adds	r7, #2
 8005aa2:	9305      	str	r3, [sp, #20]
 8005aa4:	4d2e      	ldr	r5, [pc, #184]	; (8005b60 <_svfiprintf_r+0x1e0>)
 8005aa6:	7839      	ldrb	r1, [r7, #0]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fa fba0 	bl	80001f0 <memchr>
 8005ab0:	b138      	cbz	r0, 8005ac2 <_svfiprintf_r+0x142>
 8005ab2:	2340      	movs	r3, #64	; 0x40
 8005ab4:	1b40      	subs	r0, r0, r5
 8005ab6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aba:	9b04      	ldr	r3, [sp, #16]
 8005abc:	4303      	orrs	r3, r0
 8005abe:	3701      	adds	r7, #1
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	7839      	ldrb	r1, [r7, #0]
 8005ac4:	4827      	ldr	r0, [pc, #156]	; (8005b64 <_svfiprintf_r+0x1e4>)
 8005ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aca:	2206      	movs	r2, #6
 8005acc:	1c7e      	adds	r6, r7, #1
 8005ace:	f7fa fb8f 	bl	80001f0 <memchr>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d038      	beq.n	8005b48 <_svfiprintf_r+0x1c8>
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <_svfiprintf_r+0x1e8>)
 8005ad8:	bb13      	cbnz	r3, 8005b20 <_svfiprintf_r+0x1a0>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	3307      	adds	r3, #7
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	444b      	add	r3, r9
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	e76d      	b.n	80059ca <_svfiprintf_r+0x4a>
 8005aee:	fb05 3202 	mla	r2, r5, r2, r3
 8005af2:	2001      	movs	r0, #1
 8005af4:	460f      	mov	r7, r1
 8005af6:	e7a6      	b.n	8005a46 <_svfiprintf_r+0xc6>
 8005af8:	2300      	movs	r3, #0
 8005afa:	3701      	adds	r7, #1
 8005afc:	9305      	str	r3, [sp, #20]
 8005afe:	4619      	mov	r1, r3
 8005b00:	250a      	movs	r5, #10
 8005b02:	4638      	mov	r0, r7
 8005b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b08:	3a30      	subs	r2, #48	; 0x30
 8005b0a:	2a09      	cmp	r2, #9
 8005b0c:	d903      	bls.n	8005b16 <_svfiprintf_r+0x196>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0c8      	beq.n	8005aa4 <_svfiprintf_r+0x124>
 8005b12:	9105      	str	r1, [sp, #20]
 8005b14:	e7c6      	b.n	8005aa4 <_svfiprintf_r+0x124>
 8005b16:	fb05 2101 	mla	r1, r5, r1, r2
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	e7f0      	b.n	8005b02 <_svfiprintf_r+0x182>
 8005b20:	ab03      	add	r3, sp, #12
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4622      	mov	r2, r4
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005b28:	a904      	add	r1, sp, #16
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f3af 8000 	nop.w
 8005b30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b34:	4681      	mov	r9, r0
 8005b36:	d1d6      	bne.n	8005ae6 <_svfiprintf_r+0x166>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	065b      	lsls	r3, r3, #25
 8005b3c:	f53f af35 	bmi.w	80059aa <_svfiprintf_r+0x2a>
 8005b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b42:	b01d      	add	sp, #116	; 0x74
 8005b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	ab03      	add	r3, sp, #12
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005b50:	a904      	add	r1, sp, #16
 8005b52:	4640      	mov	r0, r8
 8005b54:	f000 f882 	bl	8005c5c <_printf_i>
 8005b58:	e7ea      	b.n	8005b30 <_svfiprintf_r+0x1b0>
 8005b5a:	bf00      	nop
 8005b5c:	0800669c 	.word	0x0800669c
 8005b60:	080066a2 	.word	0x080066a2
 8005b64:	080066a6 	.word	0x080066a6
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	080058cd 	.word	0x080058cd

08005b70 <_printf_common>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	4691      	mov	r9, r2
 8005b76:	461f      	mov	r7, r3
 8005b78:	688a      	ldr	r2, [r1, #8]
 8005b7a:	690b      	ldr	r3, [r1, #16]
 8005b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	bfb8      	it	lt
 8005b84:	4613      	movlt	r3, r2
 8005b86:	f8c9 3000 	str.w	r3, [r9]
 8005b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b8e:	4606      	mov	r6, r0
 8005b90:	460c      	mov	r4, r1
 8005b92:	b112      	cbz	r2, 8005b9a <_printf_common+0x2a>
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c9 3000 	str.w	r3, [r9]
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	0699      	lsls	r1, r3, #26
 8005b9e:	bf42      	ittt	mi
 8005ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ba4:	3302      	addmi	r3, #2
 8005ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8005baa:	6825      	ldr	r5, [r4, #0]
 8005bac:	f015 0506 	ands.w	r5, r5, #6
 8005bb0:	d107      	bne.n	8005bc2 <_printf_common+0x52>
 8005bb2:	f104 0a19 	add.w	sl, r4, #25
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	42ab      	cmp	r3, r5
 8005bc0:	dc28      	bgt.n	8005c14 <_printf_common+0xa4>
 8005bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	3300      	adds	r3, #0
 8005bca:	bf18      	it	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	0692      	lsls	r2, r2, #26
 8005bd0:	d42d      	bmi.n	8005c2e <_printf_common+0xbe>
 8005bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	4630      	mov	r0, r6
 8005bda:	47c0      	blx	r8
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d020      	beq.n	8005c22 <_printf_common+0xb2>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	68e5      	ldr	r5, [r4, #12]
 8005be4:	f8d9 2000 	ldr.w	r2, [r9]
 8005be8:	f003 0306 	and.w	r3, r3, #6
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	bf08      	it	eq
 8005bf0:	1aad      	subeq	r5, r5, r2
 8005bf2:	68a3      	ldr	r3, [r4, #8]
 8005bf4:	6922      	ldr	r2, [r4, #16]
 8005bf6:	bf0c      	ite	eq
 8005bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bfc:	2500      	movne	r5, #0
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	bfc4      	itt	gt
 8005c02:	1a9b      	subgt	r3, r3, r2
 8005c04:	18ed      	addgt	r5, r5, r3
 8005c06:	f04f 0900 	mov.w	r9, #0
 8005c0a:	341a      	adds	r4, #26
 8005c0c:	454d      	cmp	r5, r9
 8005c0e:	d11a      	bne.n	8005c46 <_printf_common+0xd6>
 8005c10:	2000      	movs	r0, #0
 8005c12:	e008      	b.n	8005c26 <_printf_common+0xb6>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4652      	mov	r2, sl
 8005c18:	4639      	mov	r1, r7
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	47c0      	blx	r8
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d103      	bne.n	8005c2a <_printf_common+0xba>
 8005c22:	f04f 30ff 	mov.w	r0, #4294967295
 8005c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2a:	3501      	adds	r5, #1
 8005c2c:	e7c3      	b.n	8005bb6 <_printf_common+0x46>
 8005c2e:	18e1      	adds	r1, r4, r3
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	2030      	movs	r0, #48	; 0x30
 8005c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c38:	4422      	add	r2, r4
 8005c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c42:	3302      	adds	r3, #2
 8005c44:	e7c5      	b.n	8005bd2 <_printf_common+0x62>
 8005c46:	2301      	movs	r3, #1
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	47c0      	blx	r8
 8005c50:	3001      	adds	r0, #1
 8005c52:	d0e6      	beq.n	8005c22 <_printf_common+0xb2>
 8005c54:	f109 0901 	add.w	r9, r9, #1
 8005c58:	e7d8      	b.n	8005c0c <_printf_common+0x9c>
	...

08005c5c <_printf_i>:
 8005c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c64:	460c      	mov	r4, r1
 8005c66:	7e09      	ldrb	r1, [r1, #24]
 8005c68:	b085      	sub	sp, #20
 8005c6a:	296e      	cmp	r1, #110	; 0x6e
 8005c6c:	4617      	mov	r7, r2
 8005c6e:	4606      	mov	r6, r0
 8005c70:	4698      	mov	r8, r3
 8005c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c74:	f000 80b3 	beq.w	8005dde <_printf_i+0x182>
 8005c78:	d822      	bhi.n	8005cc0 <_printf_i+0x64>
 8005c7a:	2963      	cmp	r1, #99	; 0x63
 8005c7c:	d036      	beq.n	8005cec <_printf_i+0x90>
 8005c7e:	d80a      	bhi.n	8005c96 <_printf_i+0x3a>
 8005c80:	2900      	cmp	r1, #0
 8005c82:	f000 80b9 	beq.w	8005df8 <_printf_i+0x19c>
 8005c86:	2958      	cmp	r1, #88	; 0x58
 8005c88:	f000 8083 	beq.w	8005d92 <_printf_i+0x136>
 8005c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c94:	e032      	b.n	8005cfc <_printf_i+0xa0>
 8005c96:	2964      	cmp	r1, #100	; 0x64
 8005c98:	d001      	beq.n	8005c9e <_printf_i+0x42>
 8005c9a:	2969      	cmp	r1, #105	; 0x69
 8005c9c:	d1f6      	bne.n	8005c8c <_printf_i+0x30>
 8005c9e:	6820      	ldr	r0, [r4, #0]
 8005ca0:	6813      	ldr	r3, [r2, #0]
 8005ca2:	0605      	lsls	r5, r0, #24
 8005ca4:	f103 0104 	add.w	r1, r3, #4
 8005ca8:	d52a      	bpl.n	8005d00 <_printf_i+0xa4>
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da03      	bge.n	8005cba <_printf_i+0x5e>
 8005cb2:	222d      	movs	r2, #45	; 0x2d
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cba:	486f      	ldr	r0, [pc, #444]	; (8005e78 <_printf_i+0x21c>)
 8005cbc:	220a      	movs	r2, #10
 8005cbe:	e039      	b.n	8005d34 <_printf_i+0xd8>
 8005cc0:	2973      	cmp	r1, #115	; 0x73
 8005cc2:	f000 809d 	beq.w	8005e00 <_printf_i+0x1a4>
 8005cc6:	d808      	bhi.n	8005cda <_printf_i+0x7e>
 8005cc8:	296f      	cmp	r1, #111	; 0x6f
 8005cca:	d020      	beq.n	8005d0e <_printf_i+0xb2>
 8005ccc:	2970      	cmp	r1, #112	; 0x70
 8005cce:	d1dd      	bne.n	8005c8c <_printf_i+0x30>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	f043 0320 	orr.w	r3, r3, #32
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	e003      	b.n	8005ce2 <_printf_i+0x86>
 8005cda:	2975      	cmp	r1, #117	; 0x75
 8005cdc:	d017      	beq.n	8005d0e <_printf_i+0xb2>
 8005cde:	2978      	cmp	r1, #120	; 0x78
 8005ce0:	d1d4      	bne.n	8005c8c <_printf_i+0x30>
 8005ce2:	2378      	movs	r3, #120	; 0x78
 8005ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ce8:	4864      	ldr	r0, [pc, #400]	; (8005e7c <_printf_i+0x220>)
 8005cea:	e055      	b.n	8005d98 <_printf_i+0x13c>
 8005cec:	6813      	ldr	r3, [r2, #0]
 8005cee:	1d19      	adds	r1, r3, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6011      	str	r1, [r2, #0]
 8005cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e08c      	b.n	8005e1a <_printf_i+0x1be>
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6011      	str	r1, [r2, #0]
 8005d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d08:	bf18      	it	ne
 8005d0a:	b21b      	sxthne	r3, r3
 8005d0c:	e7cf      	b.n	8005cae <_printf_i+0x52>
 8005d0e:	6813      	ldr	r3, [r2, #0]
 8005d10:	6825      	ldr	r5, [r4, #0]
 8005d12:	1d18      	adds	r0, r3, #4
 8005d14:	6010      	str	r0, [r2, #0]
 8005d16:	0628      	lsls	r0, r5, #24
 8005d18:	d501      	bpl.n	8005d1e <_printf_i+0xc2>
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	e002      	b.n	8005d24 <_printf_i+0xc8>
 8005d1e:	0668      	lsls	r0, r5, #25
 8005d20:	d5fb      	bpl.n	8005d1a <_printf_i+0xbe>
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	4854      	ldr	r0, [pc, #336]	; (8005e78 <_printf_i+0x21c>)
 8005d26:	296f      	cmp	r1, #111	; 0x6f
 8005d28:	bf14      	ite	ne
 8005d2a:	220a      	movne	r2, #10
 8005d2c:	2208      	moveq	r2, #8
 8005d2e:	2100      	movs	r1, #0
 8005d30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d34:	6865      	ldr	r5, [r4, #4]
 8005d36:	60a5      	str	r5, [r4, #8]
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	f2c0 8095 	blt.w	8005e68 <_printf_i+0x20c>
 8005d3e:	6821      	ldr	r1, [r4, #0]
 8005d40:	f021 0104 	bic.w	r1, r1, #4
 8005d44:	6021      	str	r1, [r4, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d13d      	bne.n	8005dc6 <_printf_i+0x16a>
 8005d4a:	2d00      	cmp	r5, #0
 8005d4c:	f040 808e 	bne.w	8005e6c <_printf_i+0x210>
 8005d50:	4665      	mov	r5, ip
 8005d52:	2a08      	cmp	r2, #8
 8005d54:	d10b      	bne.n	8005d6e <_printf_i+0x112>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	07db      	lsls	r3, r3, #31
 8005d5a:	d508      	bpl.n	8005d6e <_printf_i+0x112>
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	6862      	ldr	r2, [r4, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	bfde      	ittt	le
 8005d64:	2330      	movle	r3, #48	; 0x30
 8005d66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d6e:	ebac 0305 	sub.w	r3, ip, r5
 8005d72:	6123      	str	r3, [r4, #16]
 8005d74:	f8cd 8000 	str.w	r8, [sp]
 8005d78:	463b      	mov	r3, r7
 8005d7a:	aa03      	add	r2, sp, #12
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff fef6 	bl	8005b70 <_printf_common>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d14d      	bne.n	8005e24 <_printf_i+0x1c8>
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	b005      	add	sp, #20
 8005d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d92:	4839      	ldr	r0, [pc, #228]	; (8005e78 <_printf_i+0x21c>)
 8005d94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d98:	6813      	ldr	r3, [r2, #0]
 8005d9a:	6821      	ldr	r1, [r4, #0]
 8005d9c:	1d1d      	adds	r5, r3, #4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6015      	str	r5, [r2, #0]
 8005da2:	060a      	lsls	r2, r1, #24
 8005da4:	d50b      	bpl.n	8005dbe <_printf_i+0x162>
 8005da6:	07ca      	lsls	r2, r1, #31
 8005da8:	bf44      	itt	mi
 8005daa:	f041 0120 	orrmi.w	r1, r1, #32
 8005dae:	6021      	strmi	r1, [r4, #0]
 8005db0:	b91b      	cbnz	r3, 8005dba <_printf_i+0x15e>
 8005db2:	6822      	ldr	r2, [r4, #0]
 8005db4:	f022 0220 	bic.w	r2, r2, #32
 8005db8:	6022      	str	r2, [r4, #0]
 8005dba:	2210      	movs	r2, #16
 8005dbc:	e7b7      	b.n	8005d2e <_printf_i+0xd2>
 8005dbe:	064d      	lsls	r5, r1, #25
 8005dc0:	bf48      	it	mi
 8005dc2:	b29b      	uxthmi	r3, r3
 8005dc4:	e7ef      	b.n	8005da6 <_printf_i+0x14a>
 8005dc6:	4665      	mov	r5, ip
 8005dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8005dd0:	5cc3      	ldrb	r3, [r0, r3]
 8005dd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	d1f5      	bne.n	8005dc8 <_printf_i+0x16c>
 8005ddc:	e7b9      	b.n	8005d52 <_printf_i+0xf6>
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	6825      	ldr	r5, [r4, #0]
 8005de2:	6961      	ldr	r1, [r4, #20]
 8005de4:	1d18      	adds	r0, r3, #4
 8005de6:	6010      	str	r0, [r2, #0]
 8005de8:	0628      	lsls	r0, r5, #24
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	d501      	bpl.n	8005df2 <_printf_i+0x196>
 8005dee:	6019      	str	r1, [r3, #0]
 8005df0:	e002      	b.n	8005df8 <_printf_i+0x19c>
 8005df2:	066a      	lsls	r2, r5, #25
 8005df4:	d5fb      	bpl.n	8005dee <_printf_i+0x192>
 8005df6:	8019      	strh	r1, [r3, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	4665      	mov	r5, ip
 8005dfe:	e7b9      	b.n	8005d74 <_printf_i+0x118>
 8005e00:	6813      	ldr	r3, [r2, #0]
 8005e02:	1d19      	adds	r1, r3, #4
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	681d      	ldr	r5, [r3, #0]
 8005e08:	6862      	ldr	r2, [r4, #4]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f7fa f9ef 	bl	80001f0 <memchr>
 8005e12:	b108      	cbz	r0, 8005e18 <_printf_i+0x1bc>
 8005e14:	1b40      	subs	r0, r0, r5
 8005e16:	6060      	str	r0, [r4, #4]
 8005e18:	6863      	ldr	r3, [r4, #4]
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e22:	e7a7      	b.n	8005d74 <_printf_i+0x118>
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	462a      	mov	r2, r5
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	47c0      	blx	r8
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0aa      	beq.n	8005d88 <_printf_i+0x12c>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	079b      	lsls	r3, r3, #30
 8005e36:	d413      	bmi.n	8005e60 <_printf_i+0x204>
 8005e38:	68e0      	ldr	r0, [r4, #12]
 8005e3a:	9b03      	ldr	r3, [sp, #12]
 8005e3c:	4298      	cmp	r0, r3
 8005e3e:	bfb8      	it	lt
 8005e40:	4618      	movlt	r0, r3
 8005e42:	e7a3      	b.n	8005d8c <_printf_i+0x130>
 8005e44:	2301      	movs	r3, #1
 8005e46:	464a      	mov	r2, r9
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	47c0      	blx	r8
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d09a      	beq.n	8005d88 <_printf_i+0x12c>
 8005e52:	3501      	adds	r5, #1
 8005e54:	68e3      	ldr	r3, [r4, #12]
 8005e56:	9a03      	ldr	r2, [sp, #12]
 8005e58:	1a9b      	subs	r3, r3, r2
 8005e5a:	42ab      	cmp	r3, r5
 8005e5c:	dcf2      	bgt.n	8005e44 <_printf_i+0x1e8>
 8005e5e:	e7eb      	b.n	8005e38 <_printf_i+0x1dc>
 8005e60:	2500      	movs	r5, #0
 8005e62:	f104 0919 	add.w	r9, r4, #25
 8005e66:	e7f5      	b.n	8005e54 <_printf_i+0x1f8>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ac      	bne.n	8005dc6 <_printf_i+0x16a>
 8005e6c:	7803      	ldrb	r3, [r0, #0]
 8005e6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e76:	e76c      	b.n	8005d52 <_printf_i+0xf6>
 8005e78:	080066ad 	.word	0x080066ad
 8005e7c:	080066be 	.word	0x080066be

08005e80 <memmove>:
 8005e80:	4288      	cmp	r0, r1
 8005e82:	b510      	push	{r4, lr}
 8005e84:	eb01 0302 	add.w	r3, r1, r2
 8005e88:	d807      	bhi.n	8005e9a <memmove+0x1a>
 8005e8a:	1e42      	subs	r2, r0, #1
 8005e8c:	4299      	cmp	r1, r3
 8005e8e:	d00a      	beq.n	8005ea6 <memmove+0x26>
 8005e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e94:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e98:	e7f8      	b.n	8005e8c <memmove+0xc>
 8005e9a:	4283      	cmp	r3, r0
 8005e9c:	d9f5      	bls.n	8005e8a <memmove+0xa>
 8005e9e:	1881      	adds	r1, r0, r2
 8005ea0:	1ad2      	subs	r2, r2, r3
 8005ea2:	42d3      	cmn	r3, r2
 8005ea4:	d100      	bne.n	8005ea8 <memmove+0x28>
 8005ea6:	bd10      	pop	{r4, pc}
 8005ea8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005eb0:	e7f7      	b.n	8005ea2 <memmove+0x22>
	...

08005eb4 <_free_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	d045      	beq.n	8005f48 <_free_r+0x94>
 8005ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec0:	1f0c      	subs	r4, r1, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfb8      	it	lt
 8005ec6:	18e4      	addlt	r4, r4, r3
 8005ec8:	f000 f8d2 	bl	8006070 <__malloc_lock>
 8005ecc:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <_free_r+0x98>)
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	b933      	cbnz	r3, 8005ee2 <_free_r+0x2e>
 8005ed4:	6063      	str	r3, [r4, #4]
 8005ed6:	6014      	str	r4, [r2, #0]
 8005ed8:	4628      	mov	r0, r5
 8005eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ede:	f000 b8c8 	b.w	8006072 <__malloc_unlock>
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	d90c      	bls.n	8005f00 <_free_r+0x4c>
 8005ee6:	6821      	ldr	r1, [r4, #0]
 8005ee8:	1862      	adds	r2, r4, r1
 8005eea:	4293      	cmp	r3, r2
 8005eec:	bf04      	itt	eq
 8005eee:	681a      	ldreq	r2, [r3, #0]
 8005ef0:	685b      	ldreq	r3, [r3, #4]
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	bf04      	itt	eq
 8005ef6:	1852      	addeq	r2, r2, r1
 8005ef8:	6022      	streq	r2, [r4, #0]
 8005efa:	6004      	str	r4, [r0, #0]
 8005efc:	e7ec      	b.n	8005ed8 <_free_r+0x24>
 8005efe:	4613      	mov	r3, r2
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	b10a      	cbz	r2, 8005f08 <_free_r+0x54>
 8005f04:	42a2      	cmp	r2, r4
 8005f06:	d9fa      	bls.n	8005efe <_free_r+0x4a>
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	1858      	adds	r0, r3, r1
 8005f0c:	42a0      	cmp	r0, r4
 8005f0e:	d10b      	bne.n	8005f28 <_free_r+0x74>
 8005f10:	6820      	ldr	r0, [r4, #0]
 8005f12:	4401      	add	r1, r0
 8005f14:	1858      	adds	r0, r3, r1
 8005f16:	4282      	cmp	r2, r0
 8005f18:	6019      	str	r1, [r3, #0]
 8005f1a:	d1dd      	bne.n	8005ed8 <_free_r+0x24>
 8005f1c:	6810      	ldr	r0, [r2, #0]
 8005f1e:	6852      	ldr	r2, [r2, #4]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	4401      	add	r1, r0
 8005f24:	6019      	str	r1, [r3, #0]
 8005f26:	e7d7      	b.n	8005ed8 <_free_r+0x24>
 8005f28:	d902      	bls.n	8005f30 <_free_r+0x7c>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	602b      	str	r3, [r5, #0]
 8005f2e:	e7d3      	b.n	8005ed8 <_free_r+0x24>
 8005f30:	6820      	ldr	r0, [r4, #0]
 8005f32:	1821      	adds	r1, r4, r0
 8005f34:	428a      	cmp	r2, r1
 8005f36:	bf04      	itt	eq
 8005f38:	6811      	ldreq	r1, [r2, #0]
 8005f3a:	6852      	ldreq	r2, [r2, #4]
 8005f3c:	6062      	str	r2, [r4, #4]
 8005f3e:	bf04      	itt	eq
 8005f40:	1809      	addeq	r1, r1, r0
 8005f42:	6021      	streq	r1, [r4, #0]
 8005f44:	605c      	str	r4, [r3, #4]
 8005f46:	e7c7      	b.n	8005ed8 <_free_r+0x24>
 8005f48:	bd38      	pop	{r3, r4, r5, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000128 	.word	0x20000128

08005f50 <_malloc_r>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	1ccd      	adds	r5, r1, #3
 8005f54:	f025 0503 	bic.w	r5, r5, #3
 8005f58:	3508      	adds	r5, #8
 8005f5a:	2d0c      	cmp	r5, #12
 8005f5c:	bf38      	it	cc
 8005f5e:	250c      	movcc	r5, #12
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	4606      	mov	r6, r0
 8005f64:	db01      	blt.n	8005f6a <_malloc_r+0x1a>
 8005f66:	42a9      	cmp	r1, r5
 8005f68:	d903      	bls.n	8005f72 <_malloc_r+0x22>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	6033      	str	r3, [r6, #0]
 8005f6e:	2000      	movs	r0, #0
 8005f70:	bd70      	pop	{r4, r5, r6, pc}
 8005f72:	f000 f87d 	bl	8006070 <__malloc_lock>
 8005f76:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <_malloc_r+0xac>)
 8005f78:	6814      	ldr	r4, [r2, #0]
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	b991      	cbnz	r1, 8005fa4 <_malloc_r+0x54>
 8005f7e:	4c20      	ldr	r4, [pc, #128]	; (8006000 <_malloc_r+0xb0>)
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	b91b      	cbnz	r3, 8005f8c <_malloc_r+0x3c>
 8005f84:	4630      	mov	r0, r6
 8005f86:	f000 f863 	bl	8006050 <_sbrk_r>
 8005f8a:	6020      	str	r0, [r4, #0]
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f000 f85e 	bl	8006050 <_sbrk_r>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d124      	bne.n	8005fe2 <_malloc_r+0x92>
 8005f98:	230c      	movs	r3, #12
 8005f9a:	6033      	str	r3, [r6, #0]
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f868 	bl	8006072 <__malloc_unlock>
 8005fa2:	e7e4      	b.n	8005f6e <_malloc_r+0x1e>
 8005fa4:	680b      	ldr	r3, [r1, #0]
 8005fa6:	1b5b      	subs	r3, r3, r5
 8005fa8:	d418      	bmi.n	8005fdc <_malloc_r+0x8c>
 8005faa:	2b0b      	cmp	r3, #11
 8005fac:	d90f      	bls.n	8005fce <_malloc_r+0x7e>
 8005fae:	600b      	str	r3, [r1, #0]
 8005fb0:	50cd      	str	r5, [r1, r3]
 8005fb2:	18cc      	adds	r4, r1, r3
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 f85c 	bl	8006072 <__malloc_unlock>
 8005fba:	f104 000b 	add.w	r0, r4, #11
 8005fbe:	1d23      	adds	r3, r4, #4
 8005fc0:	f020 0007 	bic.w	r0, r0, #7
 8005fc4:	1ac3      	subs	r3, r0, r3
 8005fc6:	d0d3      	beq.n	8005f70 <_malloc_r+0x20>
 8005fc8:	425a      	negs	r2, r3
 8005fca:	50e2      	str	r2, [r4, r3]
 8005fcc:	e7d0      	b.n	8005f70 <_malloc_r+0x20>
 8005fce:	428c      	cmp	r4, r1
 8005fd0:	684b      	ldr	r3, [r1, #4]
 8005fd2:	bf16      	itet	ne
 8005fd4:	6063      	strne	r3, [r4, #4]
 8005fd6:	6013      	streq	r3, [r2, #0]
 8005fd8:	460c      	movne	r4, r1
 8005fda:	e7eb      	b.n	8005fb4 <_malloc_r+0x64>
 8005fdc:	460c      	mov	r4, r1
 8005fde:	6849      	ldr	r1, [r1, #4]
 8005fe0:	e7cc      	b.n	8005f7c <_malloc_r+0x2c>
 8005fe2:	1cc4      	adds	r4, r0, #3
 8005fe4:	f024 0403 	bic.w	r4, r4, #3
 8005fe8:	42a0      	cmp	r0, r4
 8005fea:	d005      	beq.n	8005ff8 <_malloc_r+0xa8>
 8005fec:	1a21      	subs	r1, r4, r0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f000 f82e 	bl	8006050 <_sbrk_r>
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d0cf      	beq.n	8005f98 <_malloc_r+0x48>
 8005ff8:	6025      	str	r5, [r4, #0]
 8005ffa:	e7db      	b.n	8005fb4 <_malloc_r+0x64>
 8005ffc:	20000128 	.word	0x20000128
 8006000:	2000012c 	.word	0x2000012c

08006004 <_realloc_r>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	4607      	mov	r7, r0
 8006008:	4614      	mov	r4, r2
 800600a:	460e      	mov	r6, r1
 800600c:	b921      	cbnz	r1, 8006018 <_realloc_r+0x14>
 800600e:	4611      	mov	r1, r2
 8006010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006014:	f7ff bf9c 	b.w	8005f50 <_malloc_r>
 8006018:	b922      	cbnz	r2, 8006024 <_realloc_r+0x20>
 800601a:	f7ff ff4b 	bl	8005eb4 <_free_r>
 800601e:	4625      	mov	r5, r4
 8006020:	4628      	mov	r0, r5
 8006022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006024:	f000 f826 	bl	8006074 <_malloc_usable_size_r>
 8006028:	42a0      	cmp	r0, r4
 800602a:	d20f      	bcs.n	800604c <_realloc_r+0x48>
 800602c:	4621      	mov	r1, r4
 800602e:	4638      	mov	r0, r7
 8006030:	f7ff ff8e 	bl	8005f50 <_malloc_r>
 8006034:	4605      	mov	r5, r0
 8006036:	2800      	cmp	r0, #0
 8006038:	d0f2      	beq.n	8006020 <_realloc_r+0x1c>
 800603a:	4631      	mov	r1, r6
 800603c:	4622      	mov	r2, r4
 800603e:	f7ff fc11 	bl	8005864 <memcpy>
 8006042:	4631      	mov	r1, r6
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff ff35 	bl	8005eb4 <_free_r>
 800604a:	e7e9      	b.n	8006020 <_realloc_r+0x1c>
 800604c:	4635      	mov	r5, r6
 800604e:	e7e7      	b.n	8006020 <_realloc_r+0x1c>

08006050 <_sbrk_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4c06      	ldr	r4, [pc, #24]	; (800606c <_sbrk_r+0x1c>)
 8006054:	2300      	movs	r3, #0
 8006056:	4605      	mov	r5, r0
 8006058:	4608      	mov	r0, r1
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	f7fc f8fe 	bl	800225c <_sbrk>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_sbrk_r+0x1a>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	b103      	cbz	r3, 800606a <_sbrk_r+0x1a>
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	200002f4 	.word	0x200002f4

08006070 <__malloc_lock>:
 8006070:	4770      	bx	lr

08006072 <__malloc_unlock>:
 8006072:	4770      	bx	lr

08006074 <_malloc_usable_size_r>:
 8006074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006078:	1f18      	subs	r0, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	bfbc      	itt	lt
 800607e:	580b      	ldrlt	r3, [r1, r0]
 8006080:	18c0      	addlt	r0, r0, r3
 8006082:	4770      	bx	lr

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
