
Lab10Waveform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b00  0800aeb0  0800aeb0  0001aeb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b0  0800b9b0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9b0  0800b9b0  0001b9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9b8  0800b9b8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b8  0800b9b8  0001b9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b9c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001f8  0800bbb4  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800bbb4  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb0e  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f3b  00000000  00000000  0002ed32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00030c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00031b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017541  00000000  00000000  000329a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a949  00000000  00000000  00049ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094254  00000000  00000000  00054832  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f50  00000000  00000000  000e8b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae94 	.word	0x0800ae94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800ae94 	.word	0x0800ae94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f001 fda9 	bl	8002af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 ff67 	bl	8001e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f001 f911 	bl	80021cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000faa:	f001 f8ef 	bl	800218c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fae:	f001 f8c3 	bl	8002138 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fb2:	f000 ffc7 	bl	8001f44 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000fb6:	f001 f817 	bl	8001fe8 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000fba:	f001 f84d 	bl	8002058 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000fbe:	f001 f897 	bl	80020f0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000fc2:	48a5      	ldr	r0, [pc, #660]	; (8001258 <main+0x2c0>)
 8000fc4:	f004 f829 	bl	800501a <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000fc8:	48a4      	ldr	r0, [pc, #656]	; (800125c <main+0x2c4>)
 8000fca:	f004 f84a 	bl	8005062 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	49a3      	ldr	r1, [pc, #652]	; (8001260 <main+0x2c8>)
 8000fd2:	48a4      	ldr	r0, [pc, #656]	; (8001264 <main+0x2cc>)
 8000fd4:	f001 fe44 	bl	8002c60 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fde:	48a2      	ldr	r0, [pc, #648]	; (8001268 <main+0x2d0>)
 8000fe0:	f003 f81c 	bl	800401c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	49a1      	ldr	r1, [pc, #644]	; (800126c <main+0x2d4>)
 8000fe8:	48a1      	ldr	r0, [pc, #644]	; (8001270 <main+0x2d8>)
 8000fea:	f004 fb83 	bl	80056f4 <HAL_UART_Receive_IT>

		inputchar = UARTRecieveIT();		//Focus on this character
 8000fee:	f001 f9e3 	bl	80023b8 <UARTRecieveIT>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b9f      	ldr	r3, [pc, #636]	; (8001274 <main+0x2dc>)
 8000ff8:	801a      	strh	r2, [r3, #0]
		if(inputchar!=-1)
 8000ffa:	4b9e      	ldr	r3, [pc, #632]	; (8001274 <main+0x2dc>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d012      	beq.n	800102c <main+0x94>
		{
			sprintf(TxDataBuffer, "\r\nYou press:[%c]\r\n\r\n", inputchar);
 8001006:	4b9b      	ldr	r3, [pc, #620]	; (8001274 <main+0x2dc>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	461a      	mov	r2, r3
 800100e:	499a      	ldr	r1, [pc, #616]	; (8001278 <main+0x2e0>)
 8001010:	489a      	ldr	r0, [pc, #616]	; (800127c <main+0x2e4>)
 8001012:	f006 f843 	bl	800709c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001016:	4899      	ldr	r0, [pc, #612]	; (800127c <main+0x2e4>)
 8001018:	f7ff f8e2 	bl	80001e0 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	b29a      	uxth	r2, r3
 8001020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001024:	4995      	ldr	r1, [pc, #596]	; (800127c <main+0x2e4>)
 8001026:	4892      	ldr	r0, [pc, #584]	; (8001270 <main+0x2d8>)
 8001028:	f004 facb 	bl	80055c2 <HAL_UART_Transmit>
		}

		static uint64_t timestamp = 0;
		if (micros() - timestamp >= 1000)
 800102c:	f001 f9aa 	bl	8002384 <micros>
 8001030:	460a      	mov	r2, r1
 8001032:	4601      	mov	r1, r0
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <main+0x2e8>)
 8001036:	e9d3 8900 	ldrd	r8, r9, [r3]
 800103a:	460b      	mov	r3, r1
 800103c:	4614      	mov	r4, r2
 800103e:	ebb3 0308 	subs.w	r3, r3, r8
 8001042:	eb64 0409 	sbc.w	r4, r4, r9
 8001046:	f240 31e7 	movw	r1, #999	; 0x3e7
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	42a2      	cmp	r2, r4
 8001050:	bf08      	it	eq
 8001052:	4299      	cmpeq	r1, r3
 8001054:	f080 829a 	bcs.w	800158c <main+0x5f4>
		{
			timestamp = micros();
 8001058:	f001 f994 	bl	8002384 <micros>
 800105c:	4603      	mov	r3, r0
 800105e:	460c      	mov	r4, r1
 8001060:	4a87      	ldr	r2, [pc, #540]	; (8001280 <main+0x2e8>)
 8001062:	e9c2 3400 	strd	r3, r4, [r2]

			if (Mode == 1)
 8001066:	4b87      	ldr	r3, [pc, #540]	; (8001284 <main+0x2ec>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f040 8118 	bne.w	80012a0 <main+0x308>
			{
				if ((Slope == 1) && (Time <= (1/Freq)))
 8001070:	4b85      	ldr	r3, [pc, #532]	; (8001288 <main+0x2f0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d16f      	bne.n	8001158 <main+0x1c0>
 8001078:	4b84      	ldr	r3, [pc, #528]	; (800128c <main+0x2f4>)
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001086:	4b82      	ldr	r3, [pc, #520]	; (8001290 <main+0x2f8>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	db60      	blt.n	8001158 <main+0x1c0>
				{
					dataOut = (((H_Volt*(4096.0/3.3))-( L_Volt*(4096.0/3.3)))/(1/Freq))*Time + (L_Volt *(4096.0/3.3));
 8001096:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <main+0x2fc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa5c 	bl	8000558 <__aeabi_f2d>
 80010a0:	a36b      	add	r3, pc, #428	; (adr r3, 8001250 <main+0x2b8>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff faaf 	bl	8000608 <__aeabi_dmul>
 80010aa:	4603      	mov	r3, r0
 80010ac:	460c      	mov	r4, r1
 80010ae:	4625      	mov	r5, r4
 80010b0:	461c      	mov	r4, r3
 80010b2:	4b79      	ldr	r3, [pc, #484]	; (8001298 <main+0x300>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa4e 	bl	8000558 <__aeabi_f2d>
 80010bc:	a364      	add	r3, pc, #400	; (adr r3, 8001250 <main+0x2b8>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff faa1 	bl	8000608 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4620      	mov	r0, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	f7ff f8e3 	bl	8000298 <__aeabi_dsub>
 80010d2:	4603      	mov	r3, r0
 80010d4:	460c      	mov	r4, r1
 80010d6:	4625      	mov	r5, r4
 80010d8:	461c      	mov	r4, r3
 80010da:	4b6c      	ldr	r3, [pc, #432]	; (800128c <main+0x2f4>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010e8:	ee16 0a90 	vmov	r0, s13
 80010ec:	f7ff fa34 	bl	8000558 <__aeabi_f2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff fbb0 	bl	800085c <__aeabi_ddiv>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	4625      	mov	r5, r4
 8001102:	461c      	mov	r4, r3
 8001104:	4b62      	ldr	r3, [pc, #392]	; (8001290 <main+0x2f8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa25 	bl	8000558 <__aeabi_f2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff fa77 	bl	8000608 <__aeabi_dmul>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4625      	mov	r5, r4
 8001120:	461c      	mov	r4, r3
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <main+0x300>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fa16 	bl	8000558 <__aeabi_f2d>
 800112c:	a348      	add	r3, pc, #288	; (adr r3, 8001250 <main+0x2b8>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff fa69 	bl	8000608 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4620      	mov	r0, r4
 800113c:	4629      	mov	r1, r5
 800113e:	f7ff f8ad 	bl	800029c <__adddf3>
 8001142:	4603      	mov	r3, r0
 8001144:	460c      	mov	r4, r1
 8001146:	4618      	mov	r0, r3
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fd35 	bl	8000bb8 <__aeabi_d2uiz>
 800114e:	4603      	mov	r3, r0
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <main+0x304>)
 8001154:	801a      	strh	r2, [r3, #0]
 8001156:	e203      	b.n	8001560 <main+0x5c8>
				}

				else if ((Slope == 0) && (Time <= (1/Freq)))
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <main+0x2f0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d16f      	bne.n	8001240 <main+0x2a8>
 8001160:	4b4a      	ldr	r3, [pc, #296]	; (800128c <main+0x2f4>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800116a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800116e:	4b48      	ldr	r3, [pc, #288]	; (8001290 <main+0x2f8>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	db60      	blt.n	8001240 <main+0x2a8>
				{
					dataOut = (((L_Volt*(4096.0/3.3))-( H_Volt*(4096.0/3.3)))/(1/Freq))*Time + (H_Volt *(4096.0/3.3));
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <main+0x300>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9e8 	bl	8000558 <__aeabi_f2d>
 8001188:	a331      	add	r3, pc, #196	; (adr r3, 8001250 <main+0x2b8>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa3b 	bl	8000608 <__aeabi_dmul>
 8001192:	4603      	mov	r3, r0
 8001194:	460c      	mov	r4, r1
 8001196:	4625      	mov	r5, r4
 8001198:	461c      	mov	r4, r3
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <main+0x2fc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9da 	bl	8000558 <__aeabi_f2d>
 80011a4:	a32a      	add	r3, pc, #168	; (adr r3, 8001250 <main+0x2b8>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff fa2d 	bl	8000608 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f86f 	bl	8000298 <__aeabi_dsub>
 80011ba:	4603      	mov	r3, r0
 80011bc:	460c      	mov	r4, r1
 80011be:	4625      	mov	r5, r4
 80011c0:	461c      	mov	r4, r3
 80011c2:	4b32      	ldr	r3, [pc, #200]	; (800128c <main+0x2f4>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011d0:	ee16 0a90 	vmov	r0, s13
 80011d4:	f7ff f9c0 	bl	8000558 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff fb3c 	bl	800085c <__aeabi_ddiv>
 80011e4:	4603      	mov	r3, r0
 80011e6:	460c      	mov	r4, r1
 80011e8:	4625      	mov	r5, r4
 80011ea:	461c      	mov	r4, r3
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <main+0x2f8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f9b1 	bl	8000558 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff fa03 	bl	8000608 <__aeabi_dmul>
 8001202:	4603      	mov	r3, r0
 8001204:	460c      	mov	r4, r1
 8001206:	4625      	mov	r5, r4
 8001208:	461c      	mov	r4, r3
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <main+0x2fc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9a2 	bl	8000558 <__aeabi_f2d>
 8001214:	a30e      	add	r3, pc, #56	; (adr r3, 8001250 <main+0x2b8>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f9f5 	bl	8000608 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7ff f839 	bl	800029c <__adddf3>
 800122a:	4603      	mov	r3, r0
 800122c:	460c      	mov	r4, r1
 800122e:	4618      	mov	r0, r3
 8001230:	4621      	mov	r1, r4
 8001232:	f7ff fcc1 	bl	8000bb8 <__aeabi_d2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <main+0x304>)
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	e18f      	b.n	8001560 <main+0x5c8>
				}

				else
				{
					Time = 0.0;
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <main+0x2f8>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e18a      	b.n	8001560 <main+0x5c8>
 800124a:	bf00      	nop
 800124c:	f3af 8000 	nop.w
 8001250:	364d9365 	.word	0x364d9365
 8001254:	409364d9 	.word	0x409364d9
 8001258:	200002f8 	.word	0x200002f8
 800125c:	200003d8 	.word	0x200003d8
 8001260:	20000214 	.word	0x20000214
 8001264:	20000390 	.word	0x20000390
 8001268:	40020000 	.word	0x40020000
 800126c:	20000260 	.word	0x20000260
 8001270:	20000478 	.word	0x20000478
 8001274:	2000023c 	.word	0x2000023c
 8001278:	0800aeb0 	.word	0x0800aeb0
 800127c:	20000240 	.word	0x20000240
 8001280:	200002e0 	.word	0x200002e0
 8001284:	20000014 	.word	0x20000014
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000004 	.word	0x20000004
 8001290:	20000224 	.word	0x20000224
 8001294:	20000008 	.word	0x20000008
 8001298:	2000022c 	.word	0x2000022c
 800129c:	20000220 	.word	0x20000220
				}
			}

			else if (Mode == 2)
 80012a0:	4ba1      	ldr	r3, [pc, #644]	; (8001528 <main+0x590>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	f040 80bf 	bne.w	8001428 <main+0x490>
			{
				rad = rad + 0.01;
 80012aa:	4ba0      	ldr	r3, [pc, #640]	; (800152c <main+0x594>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f952 	bl	8000558 <__aeabi_f2d>
 80012b4:	a396      	add	r3, pc, #600	; (adr r3, 8001510 <main+0x578>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7fe ffef 	bl	800029c <__adddf3>
 80012be:	4603      	mov	r3, r0
 80012c0:	460c      	mov	r4, r1
 80012c2:	4618      	mov	r0, r3
 80012c4:	4621      	mov	r1, r4
 80012c6:	f7ff fc97 	bl	8000bf8 <__aeabi_d2f>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b97      	ldr	r3, [pc, #604]	; (800152c <main+0x594>)
 80012ce:	601a      	str	r2, [r3, #0]
				amp =((H_Volt*(4096.0/3.3))-(L_Volt*(4096.0/3.3)))/2;
 80012d0:	4b97      	ldr	r3, [pc, #604]	; (8001530 <main+0x598>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f93f 	bl	8000558 <__aeabi_f2d>
 80012da:	a38f      	add	r3, pc, #572	; (adr r3, 8001518 <main+0x580>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff f992 	bl	8000608 <__aeabi_dmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	4625      	mov	r5, r4
 80012ea:	461c      	mov	r4, r3
 80012ec:	4b91      	ldr	r3, [pc, #580]	; (8001534 <main+0x59c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f931 	bl	8000558 <__aeabi_f2d>
 80012f6:	a388      	add	r3, pc, #544	; (adr r3, 8001518 <main+0x580>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	f7ff f984 	bl	8000608 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4620      	mov	r0, r4
 8001306:	4629      	mov	r1, r5
 8001308:	f7fe ffc6 	bl	8000298 <__aeabi_dsub>
 800130c:	4603      	mov	r3, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4618      	mov	r0, r3
 8001312:	4621      	mov	r1, r4
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131c:	f7ff fa9e 	bl	800085c <__aeabi_ddiv>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4618      	mov	r0, r3
 8001326:	4621      	mov	r1, r4
 8001328:	f7ff fc66 	bl	8000bf8 <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	4b82      	ldr	r3, [pc, #520]	; (8001538 <main+0x5a0>)
 8001330:	601a      	str	r2, [r3, #0]
				offset =((H_Volt*(4096.0/3.3))+(L_Volt*(4096.0/3.3)))/2;
 8001332:	4b7f      	ldr	r3, [pc, #508]	; (8001530 <main+0x598>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f90e 	bl	8000558 <__aeabi_f2d>
 800133c:	a376      	add	r3, pc, #472	; (adr r3, 8001518 <main+0x580>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f961 	bl	8000608 <__aeabi_dmul>
 8001346:	4603      	mov	r3, r0
 8001348:	460c      	mov	r4, r1
 800134a:	4625      	mov	r5, r4
 800134c:	461c      	mov	r4, r3
 800134e:	4b79      	ldr	r3, [pc, #484]	; (8001534 <main+0x59c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f900 	bl	8000558 <__aeabi_f2d>
 8001358:	a36f      	add	r3, pc, #444	; (adr r3, 8001518 <main+0x580>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f953 	bl	8000608 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4620      	mov	r0, r4
 8001368:	4629      	mov	r1, r5
 800136a:	f7fe ff97 	bl	800029c <__adddf3>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	4618      	mov	r0, r3
 8001374:	4621      	mov	r1, r4
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137e:	f7ff fa6d 	bl	800085c <__aeabi_ddiv>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	f7ff fc35 	bl	8000bf8 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <main+0x5a4>)
 8001392:	601a      	str	r2, [r3, #0]
				dataOut = (amp)*sin(2*M_PI*Freq*rad)+( offset);
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <main+0x5a0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8dd 	bl	8000558 <__aeabi_f2d>
 800139e:	4604      	mov	r4, r0
 80013a0:	460d      	mov	r5, r1
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <main+0x5a8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8d6 	bl	8000558 <__aeabi_f2d>
 80013ac:	a35c      	add	r3, pc, #368	; (adr r3, 8001520 <main+0x588>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f929 	bl	8000608 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4690      	mov	r8, r2
 80013bc:	4699      	mov	r9, r3
 80013be:	4b5b      	ldr	r3, [pc, #364]	; (800152c <main+0x594>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8c8 	bl	8000558 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4640      	mov	r0, r8
 80013ce:	4649      	mov	r1, r9
 80013d0:	f7ff f91a 	bl	8000608 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	ec43 2b17 	vmov	d7, r2, r3
 80013dc:	eeb0 0a47 	vmov.f32	s0, s14
 80013e0:	eef0 0a67 	vmov.f32	s1, s15
 80013e4:	f008 fd44 	bl	8009e70 <sin>
 80013e8:	ec53 2b10 	vmov	r2, r3, d0
 80013ec:	4620      	mov	r0, r4
 80013ee:	4629      	mov	r1, r5
 80013f0:	f7ff f90a 	bl	8000608 <__aeabi_dmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	4625      	mov	r5, r4
 80013fa:	461c      	mov	r4, r3
 80013fc:	4b4f      	ldr	r3, [pc, #316]	; (800153c <main+0x5a4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8a9 	bl	8000558 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7fe ff45 	bl	800029c <__adddf3>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	4618      	mov	r0, r3
 8001418:	4621      	mov	r1, r4
 800141a:	f7ff fbcd 	bl	8000bb8 <__aeabi_d2uiz>
 800141e:	4603      	mov	r3, r0
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <main+0x5ac>)
 8001424:	801a      	strh	r2, [r3, #0]
 8001426:	e09b      	b.n	8001560 <main+0x5c8>
			}

			else if (Mode == 3)
 8001428:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <main+0x590>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b03      	cmp	r3, #3
 800142e:	f040 8097 	bne.w	8001560 <main+0x5c8>
			{
				Period_H = duty/(Freq*100.0);
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <main+0x5b0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f87c 	bl	8000534 <__aeabi_i2d>
 800143c:	4604      	mov	r4, r0
 800143e:	460d      	mov	r5, r1
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <main+0x5a8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f887 	bl	8000558 <__aeabi_f2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b3f      	ldr	r3, [pc, #252]	; (800154c <main+0x5b4>)
 8001450:	f7ff f8da 	bl	8000608 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7ff f9fe 	bl	800085c <__aeabi_ddiv>
 8001460:	4603      	mov	r3, r0
 8001462:	460c      	mov	r4, r1
 8001464:	4618      	mov	r0, r3
 8001466:	4621      	mov	r1, r4
 8001468:	f7ff fbc6 	bl	8000bf8 <__aeabi_d2f>
 800146c:	4602      	mov	r2, r0
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <main+0x5b8>)
 8001470:	601a      	str	r2, [r3, #0]
				if(Time <= Period_H)
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <main+0x5bc>)
 8001474:	ed93 7a00 	vldr	s14, [r3]
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <main+0x5b8>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d814      	bhi.n	80014b2 <main+0x51a>
				{
					dataOut = H_Volt*(4096.0/3.3);
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <main+0x598>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f863 	bl	8000558 <__aeabi_f2d>
 8001492:	a321      	add	r3, pc, #132	; (adr r3, 8001518 <main+0x580>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f8b6 	bl	8000608 <__aeabi_dmul>
 800149c:	4603      	mov	r3, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	4618      	mov	r0, r3
 80014a2:	4621      	mov	r1, r4
 80014a4:	f7ff fb88 	bl	8000bb8 <__aeabi_d2uiz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <main+0x5ac>)
 80014ae:	801a      	strh	r2, [r3, #0]
 80014b0:	e056      	b.n	8001560 <main+0x5c8>
				}
				else if ((Time > Period_H) && (Time <= (1/Freq)))
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <main+0x5bc>)
 80014b4:	ed93 7a00 	vldr	s14, [r3]
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <main+0x5b8>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	dd47      	ble.n	8001558 <main+0x5c0>
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <main+0x5a8>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <main+0x5bc>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	db38      	blt.n	8001558 <main+0x5c0>
				{
					dataOut = L_Volt*(4096.0/3.3);
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <main+0x59c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f834 	bl	8000558 <__aeabi_f2d>
 80014f0:	a309      	add	r3, pc, #36	; (adr r3, 8001518 <main+0x580>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f887 	bl	8000608 <__aeabi_dmul>
 80014fa:	4603      	mov	r3, r0
 80014fc:	460c      	mov	r4, r1
 80014fe:	4618      	mov	r0, r3
 8001500:	4621      	mov	r1, r4
 8001502:	f7ff fb59 	bl	8000bb8 <__aeabi_d2uiz>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <main+0x5ac>)
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	e027      	b.n	8001560 <main+0x5c8>
 8001510:	47ae147b 	.word	0x47ae147b
 8001514:	3f847ae1 	.word	0x3f847ae1
 8001518:	364d9365 	.word	0x364d9365
 800151c:	409364d9 	.word	0x409364d9
 8001520:	54442d18 	.word	0x54442d18
 8001524:	401921fb 	.word	0x401921fb
 8001528:	20000014 	.word	0x20000014
 800152c:	20000234 	.word	0x20000234
 8001530:	20000008 	.word	0x20000008
 8001534:	2000022c 	.word	0x2000022c
 8001538:	20000230 	.word	0x20000230
 800153c:	20000238 	.word	0x20000238
 8001540:	20000004 	.word	0x20000004
 8001544:	20000220 	.word	0x20000220
 8001548:	20000010 	.word	0x20000010
 800154c:	40590000 	.word	0x40590000
 8001550:	20000228 	.word	0x20000228
 8001554:	20000224 	.word	0x20000224
				}
				else
				{
					Time = 0.0;
 8001558:	4bbb      	ldr	r3, [pc, #748]	; (8001848 <main+0x8b0>)
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
				}
			}


			if (hspi3.State == HAL_SPI_STATE_READY
 8001560:	4bba      	ldr	r3, [pc, #744]	; (800184c <main+0x8b4>)
 8001562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d10f      	bne.n	800158c <main+0x5f4>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 800156c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001570:	48b7      	ldr	r0, [pc, #732]	; (8001850 <main+0x8b8>)
 8001572:	f002 fd3b 	bl	8003fec <HAL_GPIO_ReadPin>
 8001576:	4603      	mov	r3, r0
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <main+0x5f4>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 800157c:	4bb5      	ldr	r3, [pc, #724]	; (8001854 <main+0x8bc>)
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	4bb5      	ldr	r3, [pc, #724]	; (8001858 <main+0x8c0>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f000 fec0 	bl	800230c <MCP4922SetOutput>




		///////////////////////////State
		switch (state)
 800158c:	4bb3      	ldr	r3, [pc, #716]	; (800185c <main+0x8c4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b0a      	subs	r3, #10
 8001592:	2b32      	cmp	r3, #50	; 0x32
 8001594:	f63f ad26 	bhi.w	8000fe4 <main+0x4c>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <main+0x608>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	0800166d 	.word	0x0800166d
 80015a4:	08000fe5 	.word	0x08000fe5
 80015a8:	08000fe5 	.word	0x08000fe5
 80015ac:	08000fe5 	.word	0x08000fe5
 80015b0:	08000fe5 	.word	0x08000fe5
 80015b4:	08000fe5 	.word	0x08000fe5
 80015b8:	08000fe5 	.word	0x08000fe5
 80015bc:	08000fe5 	.word	0x08000fe5
 80015c0:	08000fe5 	.word	0x08000fe5
 80015c4:	08000fe5 	.word	0x08000fe5
 80015c8:	0800168b 	.word	0x0800168b
 80015cc:	08000fe5 	.word	0x08000fe5
 80015d0:	08000fe5 	.word	0x08000fe5
 80015d4:	08000fe5 	.word	0x08000fe5
 80015d8:	08000fe5 	.word	0x08000fe5
 80015dc:	08000fe5 	.word	0x08000fe5
 80015e0:	08000fe5 	.word	0x08000fe5
 80015e4:	08000fe5 	.word	0x08000fe5
 80015e8:	08000fe5 	.word	0x08000fe5
 80015ec:	08000fe5 	.word	0x08000fe5
 80015f0:	08001921 	.word	0x08001921
 80015f4:	08000fe5 	.word	0x08000fe5
 80015f8:	08000fe5 	.word	0x08000fe5
 80015fc:	08000fe5 	.word	0x08000fe5
 8001600:	08000fe5 	.word	0x08000fe5
 8001604:	08000fe5 	.word	0x08000fe5
 8001608:	08000fe5 	.word	0x08000fe5
 800160c:	08000fe5 	.word	0x08000fe5
 8001610:	08000fe5 	.word	0x08000fe5
 8001614:	08000fe5 	.word	0x08000fe5
 8001618:	0800193b 	.word	0x0800193b
 800161c:	08000fe5 	.word	0x08000fe5
 8001620:	08000fe5 	.word	0x08000fe5
 8001624:	08000fe5 	.word	0x08000fe5
 8001628:	08000fe5 	.word	0x08000fe5
 800162c:	08000fe5 	.word	0x08000fe5
 8001630:	08000fe5 	.word	0x08000fe5
 8001634:	08000fe5 	.word	0x08000fe5
 8001638:	08000fe5 	.word	0x08000fe5
 800163c:	08000fe5 	.word	0x08000fe5
 8001640:	08001b9b 	.word	0x08001b9b
 8001644:	08000fe5 	.word	0x08000fe5
 8001648:	08000fe5 	.word	0x08000fe5
 800164c:	08000fe5 	.word	0x08000fe5
 8001650:	08000fe5 	.word	0x08000fe5
 8001654:	08000fe5 	.word	0x08000fe5
 8001658:	08000fe5 	.word	0x08000fe5
 800165c:	08000fe5 	.word	0x08000fe5
 8001660:	08000fe5 	.word	0x08000fe5
 8001664:	08000fe5 	.word	0x08000fe5
 8001668:	08001bb9 	.word	0x08001bb9
		{
		case printMenu_Saw:
			Mode = 1;
 800166c:	4b7c      	ldr	r3, [pc, #496]	; (8001860 <main+0x8c8>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
			Print_fq();
 8001672:	f000 ff4d 	bl	8002510 <Print_fq>
			Print_Volt();
 8001676:	f000 ffd1 	bl	800261c <Print_Volt>
			Print_Slope();
 800167a:	f000 ff8d 	bl	8002598 <Print_Slope>
			Print_Menu_Saw();
 800167e:	f000 fee5 	bl	800244c <Print_Menu_Saw>
			state = Saw_WaitInput;
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <main+0x8c4>)
 8001684:	2214      	movs	r2, #20
 8001686:	701a      	strb	r2, [r3, #0]
			break;
 8001688:	e3ed      	b.n	8001e66 <main+0xece>
		case Saw_WaitInput:
			switch (inputchar)
 800168a:	4b76      	ldr	r3, [pc, #472]	; (8001864 <main+0x8cc>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	2b72      	cmp	r3, #114	; 0x72
 8001692:	f000 810a 	beq.w	80018aa <main+0x912>
 8001696:	2b72      	cmp	r3, #114	; 0x72
 8001698:	dc0d      	bgt.n	80016b6 <main+0x71e>
 800169a:	2b66      	cmp	r3, #102	; 0x66
 800169c:	d049      	beq.n	8001732 <main+0x79a>
 800169e:	2b66      	cmp	r3, #102	; 0x66
 80016a0:	dc04      	bgt.n	80016ac <main+0x714>
 80016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a6:	f000 8139 	beq.w	800191c <main+0x984>
 80016aa:	e131      	b.n	8001910 <main+0x978>
 80016ac:	2b69      	cmp	r3, #105	; 0x69
 80016ae:	d013      	beq.n	80016d8 <main+0x740>
 80016b0:	2b71      	cmp	r3, #113	; 0x71
 80016b2:	d015      	beq.n	80016e0 <main+0x748>
 80016b4:	e12c      	b.n	8001910 <main+0x978>
 80016b6:	2b76      	cmp	r3, #118	; 0x76
 80016b8:	f000 8087 	beq.w	80017ca <main+0x832>
 80016bc:	2b76      	cmp	r3, #118	; 0x76
 80016be:	dc05      	bgt.n	80016cc <main+0x734>
 80016c0:	2b73      	cmp	r3, #115	; 0x73
 80016c2:	d011      	beq.n	80016e8 <main+0x750>
 80016c4:	2b75      	cmp	r3, #117	; 0x75
 80016c6:	f000 8114 	beq.w	80018f2 <main+0x95a>
 80016ca:	e121      	b.n	8001910 <main+0x978>
 80016cc:	2b77      	cmp	r3, #119	; 0x77
 80016ce:	f000 80a0 	beq.w	8001812 <main+0x87a>
 80016d2:	2b78      	cmp	r3, #120	; 0x78
 80016d4:	d051      	beq.n	800177a <main+0x7e2>
 80016d6:	e11b      	b.n	8001910 <main+0x978>
				case -1 :
					break;

				//Mode
				case 'i':
					state = printMenu_Sin;
 80016d8:	4b60      	ldr	r3, [pc, #384]	; (800185c <main+0x8c4>)
 80016da:	221e      	movs	r2, #30
 80016dc:	701a      	strb	r2, [r3, #0]
					break;
 80016de:	e11e      	b.n	800191e <main+0x986>
				case 'q':
					state = printMenu_Squ;
 80016e0:	4b5e      	ldr	r3, [pc, #376]	; (800185c <main+0x8c4>)
 80016e2:	2232      	movs	r2, #50	; 0x32
 80016e4:	701a      	strb	r2, [r3, #0]
					break;
 80016e6:	e11a      	b.n	800191e <main+0x986>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 80016e8:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <main+0x8d0>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016f2:	eef4 7a47 	vcmp.f32	s15, s14
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	d103      	bne.n	8001704 <main+0x76c>
 80016fc:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <main+0x8d0>)
 80016fe:	4a5b      	ldr	r2, [pc, #364]	; (800186c <main+0x8d4>)
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e012      	b.n	800172a <main+0x792>
					else {Freq = Freq + 0.1 ;}
 8001704:	4b58      	ldr	r3, [pc, #352]	; (8001868 <main+0x8d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff25 	bl	8000558 <__aeabi_f2d>
 800170e:	a34a      	add	r3, pc, #296	; (adr r3, 8001838 <main+0x8a0>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fdc2 	bl	800029c <__adddf3>
 8001718:	4603      	mov	r3, r0
 800171a:	460c      	mov	r4, r1
 800171c:	4618      	mov	r0, r3
 800171e:	4621      	mov	r1, r4
 8001720:	f7ff fa6a 	bl	8000bf8 <__aeabi_d2f>
 8001724:	4602      	mov	r2, r0
 8001726:	4b50      	ldr	r3, [pc, #320]	; (8001868 <main+0x8d0>)
 8001728:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <main+0x8c4>)
 800172c:	220a      	movs	r2, #10
 800172e:	701a      	strb	r2, [r3, #0]
					break;
 8001730:	e0f5      	b.n	800191e <main+0x986>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 8001732:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <main+0x8d0>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eef5 7a40 	vcmp.f32	s15, #0.0
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d104      	bne.n	800174c <main+0x7b4>
 8001742:	4b49      	ldr	r3, [pc, #292]	; (8001868 <main+0x8d0>)
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e012      	b.n	8001772 <main+0x7da>
					else {Freq = Freq - 0.1 ;}
 800174c:	4b46      	ldr	r3, [pc, #280]	; (8001868 <main+0x8d0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff01 	bl	8000558 <__aeabi_f2d>
 8001756:	a338      	add	r3, pc, #224	; (adr r3, 8001838 <main+0x8a0>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe fd9c 	bl	8000298 <__aeabi_dsub>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	4618      	mov	r0, r3
 8001766:	4621      	mov	r1, r4
 8001768:	f7ff fa46 	bl	8000bf8 <__aeabi_d2f>
 800176c:	4602      	mov	r2, r0
 800176e:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <main+0x8d0>)
 8001770:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <main+0x8c4>)
 8001774:	220a      	movs	r2, #10
 8001776:	701a      	strb	r2, [r3, #0]
					break;
 8001778:	e0d1      	b.n	800191e <main+0x986>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 800177a:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <main+0x8d8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe feea 	bl	8000558 <__aeabi_f2d>
 8001784:	a32e      	add	r3, pc, #184	; (adr r3, 8001840 <main+0x8a8>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7ff f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <main+0x804>
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <main+0x8d8>)
 8001796:	4a37      	ldr	r2, [pc, #220]	; (8001874 <main+0x8dc>)
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e012      	b.n	80017c2 <main+0x82a>
					else {L_Volt = L_Volt + 0.1 ;}
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <main+0x8d8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fed9 	bl	8000558 <__aeabi_f2d>
 80017a6:	a324      	add	r3, pc, #144	; (adr r3, 8001838 <main+0x8a0>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fd76 	bl	800029c <__adddf3>
 80017b0:	4603      	mov	r3, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	4618      	mov	r0, r3
 80017b6:	4621      	mov	r1, r4
 80017b8:	f7ff fa1e 	bl	8000bf8 <__aeabi_d2f>
 80017bc:	4602      	mov	r2, r0
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <main+0x8d8>)
 80017c0:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <main+0x8c4>)
 80017c4:	220a      	movs	r2, #10
 80017c6:	701a      	strb	r2, [r3, #0]
					break;
 80017c8:	e0a9      	b.n	800191e <main+0x986>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <main+0x8d8>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d104      	bne.n	80017e4 <main+0x84c>
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <main+0x8d8>)
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e012      	b.n	800180a <main+0x872>
					else {L_Volt = L_Volt - 0.1 ;}
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <main+0x8d8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe feb5 	bl	8000558 <__aeabi_f2d>
 80017ee:	a312      	add	r3, pc, #72	; (adr r3, 8001838 <main+0x8a0>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe fd50 	bl	8000298 <__aeabi_dsub>
 80017f8:	4603      	mov	r3, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	4618      	mov	r0, r3
 80017fe:	4621      	mov	r1, r4
 8001800:	f7ff f9fa 	bl	8000bf8 <__aeabi_d2f>
 8001804:	4602      	mov	r2, r0
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <main+0x8d8>)
 8001808:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <main+0x8c4>)
 800180c:	220a      	movs	r2, #10
 800180e:	701a      	strb	r2, [r3, #0]
					break;
 8001810:	e085      	b.n	800191e <main+0x986>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <main+0x8e0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe9e 	bl	8000558 <__aeabi_f2d>
 800181c:	a308      	add	r3, pc, #32	; (adr r3, 8001840 <main+0x8a8>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7ff f959 	bl	8000ad8 <__aeabi_dcmpeq>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d027      	beq.n	800187c <main+0x8e4>
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <main+0x8e0>)
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <main+0x8dc>)
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e036      	b.n	80018a2 <main+0x90a>
 8001834:	f3af 8000 	nop.w
 8001838:	9999999a 	.word	0x9999999a
 800183c:	3fb99999 	.word	0x3fb99999
 8001840:	66666666 	.word	0x66666666
 8001844:	400a6666 	.word	0x400a6666
 8001848:	20000224 	.word	0x20000224
 800184c:	20000338 	.word	0x20000338
 8001850:	40020400 	.word	0x40020400
 8001854:	20000000 	.word	0x20000000
 8001858:	20000220 	.word	0x20000220
 800185c:	20000015 	.word	0x20000015
 8001860:	20000014 	.word	0x20000014
 8001864:	2000023c 	.word	0x2000023c
 8001868:	20000004 	.word	0x20000004
 800186c:	41200000 	.word	0x41200000
 8001870:	2000022c 	.word	0x2000022c
 8001874:	40533333 	.word	0x40533333
 8001878:	20000008 	.word	0x20000008
					else {H_Volt = H_Volt + 0.1 ;}
 800187c:	4bae      	ldr	r3, [pc, #696]	; (8001b38 <main+0xba0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe69 	bl	8000558 <__aeabi_f2d>
 8001886:	a3a8      	add	r3, pc, #672	; (adr r3, 8001b28 <main+0xb90>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe fd06 	bl	800029c <__adddf3>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	4618      	mov	r0, r3
 8001896:	4621      	mov	r1, r4
 8001898:	f7ff f9ae 	bl	8000bf8 <__aeabi_d2f>
 800189c:	4602      	mov	r2, r0
 800189e:	4ba6      	ldr	r3, [pc, #664]	; (8001b38 <main+0xba0>)
 80018a0:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 80018a2:	4ba6      	ldr	r3, [pc, #664]	; (8001b3c <main+0xba4>)
 80018a4:	220a      	movs	r2, #10
 80018a6:	701a      	strb	r2, [r3, #0]
					break;
 80018a8:	e039      	b.n	800191e <main+0x986>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 80018aa:	4ba3      	ldr	r3, [pc, #652]	; (8001b38 <main+0xba0>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d104      	bne.n	80018c4 <main+0x92c>
 80018ba:	4b9f      	ldr	r3, [pc, #636]	; (8001b38 <main+0xba0>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e012      	b.n	80018ea <main+0x952>
					else {H_Volt = H_Volt - 0.1 ;}
 80018c4:	4b9c      	ldr	r3, [pc, #624]	; (8001b38 <main+0xba0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe45 	bl	8000558 <__aeabi_f2d>
 80018ce:	a396      	add	r3, pc, #600	; (adr r3, 8001b28 <main+0xb90>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fce0 	bl	8000298 <__aeabi_dsub>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	4618      	mov	r0, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	f7ff f98a 	bl	8000bf8 <__aeabi_d2f>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b94      	ldr	r3, [pc, #592]	; (8001b38 <main+0xba0>)
 80018e8:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 80018ea:	4b94      	ldr	r3, [pc, #592]	; (8001b3c <main+0xba4>)
 80018ec:	220a      	movs	r2, #10
 80018ee:	701a      	strb	r2, [r3, #0]
					break;
 80018f0:	e015      	b.n	800191e <main+0x986>

				//Specific
				case 'u':
					if (Slope == 1) {Slope = 0;}
 80018f2:	4b93      	ldr	r3, [pc, #588]	; (8001b40 <main+0xba8>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d103      	bne.n	8001902 <main+0x96a>
 80018fa:	4b91      	ldr	r3, [pc, #580]	; (8001b40 <main+0xba8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e002      	b.n	8001908 <main+0x970>
					else {Slope = 1;}
 8001902:	4b8f      	ldr	r3, [pc, #572]	; (8001b40 <main+0xba8>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
					state = printMenu_Saw;
 8001908:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <main+0xba4>)
 800190a:	220a      	movs	r2, #10
 800190c:	701a      	strb	r2, [r3, #0]
					break;
 800190e:	e006      	b.n	800191e <main+0x986>

				//Error
				default:
					Print_Error();
 8001910:	f000 fe22 	bl	8002558 <Print_Error>
					state = printMenu_Saw;
 8001914:	4b89      	ldr	r3, [pc, #548]	; (8001b3c <main+0xba4>)
 8001916:	220a      	movs	r2, #10
 8001918:	701a      	strb	r2, [r3, #0]
					break;
 800191a:	e000      	b.n	800191e <main+0x986>
					break;
 800191c:	bf00      	nop
			}
			break;
 800191e:	e2a2      	b.n	8001e66 <main+0xece>

		case printMenu_Sin:
			Mode = 2;
 8001920:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <main+0xbac>)
 8001922:	2202      	movs	r2, #2
 8001924:	701a      	strb	r2, [r3, #0]
			Print_fq();
 8001926:	f000 fdf3 	bl	8002510 <Print_fq>
			Print_Volt();
 800192a:	f000 fe77 	bl	800261c <Print_Volt>
			Print_Menu_Sin();
 800192e:	f000 fdad 	bl	800248c <Print_Menu_Sin>
			state = Sin_WaitInput;
 8001932:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <main+0xba4>)
 8001934:	2228      	movs	r2, #40	; 0x28
 8001936:	701a      	strb	r2, [r3, #0]
			break;
 8001938:	e295      	b.n	8001e66 <main+0xece>
		case Sin_WaitInput:
			switch (inputchar)
 800193a:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <main+0xbb0>)
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	2b72      	cmp	r3, #114	; 0x72
 8001942:	f000 80e3 	beq.w	8001b0c <main+0xb74>
 8001946:	2b72      	cmp	r3, #114	; 0x72
 8001948:	dc0d      	bgt.n	8001966 <main+0x9ce>
 800194a:	2b61      	cmp	r3, #97	; 0x61
 800194c:	d019      	beq.n	8001982 <main+0x9ea>
 800194e:	2b61      	cmp	r3, #97	; 0x61
 8001950:	dc04      	bgt.n	800195c <main+0x9c4>
 8001952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001956:	f000 811e 	beq.w	8001b96 <main+0xbfe>
 800195a:	e116      	b.n	8001b8a <main+0xbf2>
 800195c:	2b66      	cmp	r3, #102	; 0x66
 800195e:	d03d      	beq.n	80019dc <main+0xa44>
 8001960:	2b71      	cmp	r3, #113	; 0x71
 8001962:	d012      	beq.n	800198a <main+0x9f2>
 8001964:	e111      	b.n	8001b8a <main+0xbf2>
 8001966:	2b76      	cmp	r3, #118	; 0x76
 8001968:	f000 8084 	beq.w	8001a74 <main+0xadc>
 800196c:	2b76      	cmp	r3, #118	; 0x76
 800196e:	dc02      	bgt.n	8001976 <main+0x9de>
 8001970:	2b73      	cmp	r3, #115	; 0x73
 8001972:	d00e      	beq.n	8001992 <main+0x9fa>
 8001974:	e109      	b.n	8001b8a <main+0xbf2>
 8001976:	2b77      	cmp	r3, #119	; 0x77
 8001978:	f000 80a0 	beq.w	8001abc <main+0xb24>
 800197c:	2b78      	cmp	r3, #120	; 0x78
 800197e:	d051      	beq.n	8001a24 <main+0xa8c>
 8001980:	e103      	b.n	8001b8a <main+0xbf2>
				case -1 :
					break;

				//Mode
				case 'a':
					state = printMenu_Saw;
 8001982:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <main+0xba4>)
 8001984:	220a      	movs	r2, #10
 8001986:	701a      	strb	r2, [r3, #0]
					break;
 8001988:	e106      	b.n	8001b98 <main+0xc00>
				case 'q':
					state = printMenu_Squ;
 800198a:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <main+0xba4>)
 800198c:	2232      	movs	r2, #50	; 0x32
 800198e:	701a      	strb	r2, [r3, #0]
					break;
 8001990:	e102      	b.n	8001b98 <main+0xc00>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 8001992:	4b6e      	ldr	r3, [pc, #440]	; (8001b4c <main+0xbb4>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800199c:	eef4 7a47 	vcmp.f32	s15, s14
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	d103      	bne.n	80019ae <main+0xa16>
 80019a6:	4b69      	ldr	r3, [pc, #420]	; (8001b4c <main+0xbb4>)
 80019a8:	4a69      	ldr	r2, [pc, #420]	; (8001b50 <main+0xbb8>)
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e012      	b.n	80019d4 <main+0xa3c>
					else {Freq = Freq + 0.1 ;}
 80019ae:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <main+0xbb4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	a35b      	add	r3, pc, #364	; (adr r3, 8001b28 <main+0xb90>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fc6d 	bl	800029c <__adddf3>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff f915 	bl	8000bf8 <__aeabi_d2f>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b5e      	ldr	r3, [pc, #376]	; (8001b4c <main+0xbb4>)
 80019d2:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 80019d4:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <main+0xba4>)
 80019d6:	221e      	movs	r2, #30
 80019d8:	701a      	strb	r2, [r3, #0]
					break;
 80019da:	e0dd      	b.n	8001b98 <main+0xc00>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 80019dc:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <main+0xbb4>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d104      	bne.n	80019f6 <main+0xa5e>
 80019ec:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <main+0xbb4>)
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e012      	b.n	8001a1c <main+0xa84>
					else {Freq = Freq - 0.1 ;}
 80019f6:	4b55      	ldr	r3, [pc, #340]	; (8001b4c <main+0xbb4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdac 	bl	8000558 <__aeabi_f2d>
 8001a00:	a349      	add	r3, pc, #292	; (adr r3, 8001b28 <main+0xb90>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fc47 	bl	8000298 <__aeabi_dsub>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	4618      	mov	r0, r3
 8001a10:	4621      	mov	r1, r4
 8001a12:	f7ff f8f1 	bl	8000bf8 <__aeabi_d2f>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <main+0xbb4>)
 8001a1a:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001a1c:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <main+0xba4>)
 8001a1e:	221e      	movs	r2, #30
 8001a20:	701a      	strb	r2, [r3, #0]
					break;
 8001a22:	e0b9      	b.n	8001b98 <main+0xc00>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001a24:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <main+0xbbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd95 	bl	8000558 <__aeabi_f2d>
 8001a2e:	a340      	add	r3, pc, #256	; (adr r3, 8001b30 <main+0xb98>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7ff f850 	bl	8000ad8 <__aeabi_dcmpeq>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <main+0xaae>
 8001a3e:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <main+0xbbc>)
 8001a40:	4a45      	ldr	r2, [pc, #276]	; (8001b58 <main+0xbc0>)
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e012      	b.n	8001a6c <main+0xad4>
					else {L_Volt = L_Volt + 0.1 ;}
 8001a46:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <main+0xbbc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd84 	bl	8000558 <__aeabi_f2d>
 8001a50:	a335      	add	r3, pc, #212	; (adr r3, 8001b28 <main+0xb90>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fc21 	bl	800029c <__adddf3>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460c      	mov	r4, r1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4621      	mov	r1, r4
 8001a62:	f7ff f8c9 	bl	8000bf8 <__aeabi_d2f>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <main+0xbbc>)
 8001a6a:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <main+0xba4>)
 8001a6e:	221e      	movs	r2, #30
 8001a70:	701a      	strb	r2, [r3, #0]
					break;
 8001a72:	e091      	b.n	8001b98 <main+0xc00>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <main+0xbbc>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	d104      	bne.n	8001a8e <main+0xaf6>
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <main+0xbbc>)
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e012      	b.n	8001ab4 <main+0xb1c>
					else {L_Volt = L_Volt - 0.1 ;}
 8001a8e:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <main+0xbbc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd60 	bl	8000558 <__aeabi_f2d>
 8001a98:	a323      	add	r3, pc, #140	; (adr r3, 8001b28 <main+0xb90>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fbfb 	bl	8000298 <__aeabi_dsub>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	f7ff f8a5 	bl	8000bf8 <__aeabi_d2f>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <main+0xbbc>)
 8001ab2:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <main+0xba4>)
 8001ab6:	221e      	movs	r2, #30
 8001ab8:	701a      	strb	r2, [r3, #0]
					break;
 8001aba:	e06d      	b.n	8001b98 <main+0xc00>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <main+0xba0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd49 	bl	8000558 <__aeabi_f2d>
 8001ac6:	a31a      	add	r3, pc, #104	; (adr r3, 8001b30 <main+0xb98>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7ff f804 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <main+0xb46>
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <main+0xba0>)
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <main+0xbc0>)
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e012      	b.n	8001b04 <main+0xb6c>
					else {H_Volt = H_Volt + 0.1 ;}
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <main+0xba0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd38 	bl	8000558 <__aeabi_f2d>
 8001ae8:	a30f      	add	r3, pc, #60	; (adr r3, 8001b28 <main+0xb90>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fbd5 	bl	800029c <__adddf3>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	4618      	mov	r0, r3
 8001af8:	4621      	mov	r1, r4
 8001afa:	f7ff f87d 	bl	8000bf8 <__aeabi_d2f>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <main+0xba0>)
 8001b02:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <main+0xba4>)
 8001b06:	221e      	movs	r2, #30
 8001b08:	701a      	strb	r2, [r3, #0]
					break;
 8001b0a:	e045      	b.n	8001b98 <main+0xc00>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <main+0xba0>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d11f      	bne.n	8001b5c <main+0xbc4>
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <main+0xba0>)
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e02d      	b.n	8001b82 <main+0xbea>
 8001b26:	bf00      	nop
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fb99999 	.word	0x3fb99999
 8001b30:	66666666 	.word	0x66666666
 8001b34:	400a6666 	.word	0x400a6666
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	20000015 	.word	0x20000015
 8001b40:	2000000c 	.word	0x2000000c
 8001b44:	20000014 	.word	0x20000014
 8001b48:	2000023c 	.word	0x2000023c
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	41200000 	.word	0x41200000
 8001b54:	2000022c 	.word	0x2000022c
 8001b58:	40533333 	.word	0x40533333
					else {H_Volt = H_Volt - 0.1 ;}
 8001b5c:	4bb0      	ldr	r3, [pc, #704]	; (8001e20 <main+0xe88>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcf9 	bl	8000558 <__aeabi_f2d>
 8001b66:	a3aa      	add	r3, pc, #680	; (adr r3, 8001e10 <main+0xe78>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fb94 	bl	8000298 <__aeabi_dsub>
 8001b70:	4603      	mov	r3, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	4618      	mov	r0, r3
 8001b76:	4621      	mov	r1, r4
 8001b78:	f7ff f83e 	bl	8000bf8 <__aeabi_d2f>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4ba8      	ldr	r3, [pc, #672]	; (8001e20 <main+0xe88>)
 8001b80:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001b82:	4ba8      	ldr	r3, [pc, #672]	; (8001e24 <main+0xe8c>)
 8001b84:	221e      	movs	r2, #30
 8001b86:	701a      	strb	r2, [r3, #0]
					break;
 8001b88:	e006      	b.n	8001b98 <main+0xc00>
				//case '':
					//break;

				//Error
				default:
					Print_Error();
 8001b8a:	f000 fce5 	bl	8002558 <Print_Error>
					state = printMenu_Sin;
 8001b8e:	4ba5      	ldr	r3, [pc, #660]	; (8001e24 <main+0xe8c>)
 8001b90:	221e      	movs	r2, #30
 8001b92:	701a      	strb	r2, [r3, #0]
					break;
 8001b94:	e000      	b.n	8001b98 <main+0xc00>
					break;
 8001b96:	bf00      	nop
			}
			break;
 8001b98:	e165      	b.n	8001e66 <main+0xece>

		case printMenu_Squ:
			Mode = 3;
 8001b9a:	4ba3      	ldr	r3, [pc, #652]	; (8001e28 <main+0xe90>)
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	701a      	strb	r2, [r3, #0]
			Print_fq();
 8001ba0:	f000 fcb6 	bl	8002510 <Print_fq>
			Print_Volt();
 8001ba4:	f000 fd3a 	bl	800261c <Print_Volt>
			Print_Duty();
 8001ba8:	f000 fd30 	bl	800260c <Print_Duty>
			Print_Menu_Squ();
 8001bac:	f000 fc8e 	bl	80024cc <Print_Menu_Squ>
			state = Squ_WaitInput;
 8001bb0:	4b9c      	ldr	r3, [pc, #624]	; (8001e24 <main+0xe8c>)
 8001bb2:	223c      	movs	r2, #60	; 0x3c
 8001bb4:	701a      	strb	r2, [r3, #0]
			break;
 8001bb6:	e156      	b.n	8001e66 <main+0xece>
		case Squ_WaitInput:
			switch (inputchar)
 8001bb8:	4b9c      	ldr	r3, [pc, #624]	; (8001e2c <main+0xe94>)
 8001bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbe:	2b6c      	cmp	r3, #108	; 0x6c
 8001bc0:	f000 811e 	beq.w	8001e00 <main+0xe68>
 8001bc4:	2b6c      	cmp	r3, #108	; 0x6c
 8001bc6:	dc10      	bgt.n	8001bea <main+0xc52>
 8001bc8:	2b66      	cmp	r3, #102	; 0x66
 8001bca:	d04c      	beq.n	8001c66 <main+0xcce>
 8001bcc:	2b66      	cmp	r3, #102	; 0x66
 8001bce:	dc06      	bgt.n	8001bde <main+0xc46>
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	f000 8145 	beq.w	8001e62 <main+0xeca>
 8001bd8:	2b61      	cmp	r3, #97	; 0x61
 8001bda:	d017      	beq.n	8001c0c <main+0xc74>
 8001bdc:	e13b      	b.n	8001e56 <main+0xebe>
 8001bde:	2b69      	cmp	r3, #105	; 0x69
 8001be0:	d018      	beq.n	8001c14 <main+0xc7c>
 8001be2:	2b6a      	cmp	r3, #106	; 0x6a
 8001be4:	f000 80fb 	beq.w	8001dde <main+0xe46>
 8001be8:	e135      	b.n	8001e56 <main+0xebe>
 8001bea:	2b76      	cmp	r3, #118	; 0x76
 8001bec:	f000 8087 	beq.w	8001cfe <main+0xd66>
 8001bf0:	2b76      	cmp	r3, #118	; 0x76
 8001bf2:	dc05      	bgt.n	8001c00 <main+0xc68>
 8001bf4:	2b72      	cmp	r3, #114	; 0x72
 8001bf6:	f000 80ce 	beq.w	8001d96 <main+0xdfe>
 8001bfa:	2b73      	cmp	r3, #115	; 0x73
 8001bfc:	d00e      	beq.n	8001c1c <main+0xc84>
 8001bfe:	e12a      	b.n	8001e56 <main+0xebe>
 8001c00:	2b77      	cmp	r3, #119	; 0x77
 8001c02:	f000 80a0 	beq.w	8001d46 <main+0xdae>
 8001c06:	2b78      	cmp	r3, #120	; 0x78
 8001c08:	d051      	beq.n	8001cae <main+0xd16>
 8001c0a:	e124      	b.n	8001e56 <main+0xebe>
				case -1 :
					break;

				//Mode
				case 'a':
					state = printMenu_Saw;
 8001c0c:	4b85      	ldr	r3, [pc, #532]	; (8001e24 <main+0xe8c>)
 8001c0e:	220a      	movs	r2, #10
 8001c10:	701a      	strb	r2, [r3, #0]
					break;
 8001c12:	e127      	b.n	8001e64 <main+0xecc>
				case 'i':
					state = printMenu_Sin;
 8001c14:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <main+0xe8c>)
 8001c16:	221e      	movs	r2, #30
 8001c18:	701a      	strb	r2, [r3, #0]
					break;
 8001c1a:	e123      	b.n	8001e64 <main+0xecc>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 8001c1c:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <main+0xe98>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c26:	eef4 7a47 	vcmp.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d103      	bne.n	8001c38 <main+0xca0>
 8001c30:	4b7f      	ldr	r3, [pc, #508]	; (8001e30 <main+0xe98>)
 8001c32:	4a80      	ldr	r2, [pc, #512]	; (8001e34 <main+0xe9c>)
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e012      	b.n	8001c5e <main+0xcc6>
					else {Freq = Freq + 0.1 ;}
 8001c38:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <main+0xe98>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc8b 	bl	8000558 <__aeabi_f2d>
 8001c42:	a373      	add	r3, pc, #460	; (adr r3, 8001e10 <main+0xe78>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fb28 	bl	800029c <__adddf3>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	460c      	mov	r4, r1
 8001c50:	4618      	mov	r0, r3
 8001c52:	4621      	mov	r1, r4
 8001c54:	f7fe ffd0 	bl	8000bf8 <__aeabi_d2f>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <main+0xe98>)
 8001c5c:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001c5e:	4b71      	ldr	r3, [pc, #452]	; (8001e24 <main+0xe8c>)
 8001c60:	2232      	movs	r2, #50	; 0x32
 8001c62:	701a      	strb	r2, [r3, #0]
					break;
 8001c64:	e0fe      	b.n	8001e64 <main+0xecc>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 8001c66:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <main+0xe98>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	d104      	bne.n	8001c80 <main+0xce8>
 8001c76:	4b6e      	ldr	r3, [pc, #440]	; (8001e30 <main+0xe98>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e012      	b.n	8001ca6 <main+0xd0e>
					else {Freq = Freq - 0.1 ;}
 8001c80:	4b6b      	ldr	r3, [pc, #428]	; (8001e30 <main+0xe98>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc67 	bl	8000558 <__aeabi_f2d>
 8001c8a:	a361      	add	r3, pc, #388	; (adr r3, 8001e10 <main+0xe78>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	f7fe fb02 	bl	8000298 <__aeabi_dsub>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	4618      	mov	r0, r3
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	f7fe ffac 	bl	8000bf8 <__aeabi_d2f>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <main+0xe98>)
 8001ca4:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <main+0xe8c>)
 8001ca8:	2232      	movs	r2, #50	; 0x32
 8001caa:	701a      	strb	r2, [r3, #0]
					break;
 8001cac:	e0da      	b.n	8001e64 <main+0xecc>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001cae:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <main+0xea0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc50 	bl	8000558 <__aeabi_f2d>
 8001cb8:	a357      	add	r3, pc, #348	; (adr r3, 8001e18 <main+0xe80>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <main+0xd38>
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <main+0xea0>)
 8001cca:	4a5c      	ldr	r2, [pc, #368]	; (8001e3c <main+0xea4>)
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e012      	b.n	8001cf6 <main+0xd5e>
					else {L_Volt = L_Volt + 0.1 ;}
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <main+0xea0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc3f 	bl	8000558 <__aeabi_f2d>
 8001cda:	a34d      	add	r3, pc, #308	; (adr r3, 8001e10 <main+0xe78>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fadc 	bl	800029c <__adddf3>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4621      	mov	r1, r4
 8001cec:	f7fe ff84 	bl	8000bf8 <__aeabi_d2f>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <main+0xea0>)
 8001cf4:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <main+0xe8c>)
 8001cf8:	2232      	movs	r2, #50	; 0x32
 8001cfa:	701a      	strb	r2, [r3, #0]
					break;
 8001cfc:	e0b2      	b.n	8001e64 <main+0xecc>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 8001cfe:	4b4e      	ldr	r3, [pc, #312]	; (8001e38 <main+0xea0>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d104      	bne.n	8001d18 <main+0xd80>
 8001d0e:	4b4a      	ldr	r3, [pc, #296]	; (8001e38 <main+0xea0>)
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e012      	b.n	8001d3e <main+0xda6>
					else {L_Volt = L_Volt - 0.1 ;}
 8001d18:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <main+0xea0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc1b 	bl	8000558 <__aeabi_f2d>
 8001d22:	a33b      	add	r3, pc, #236	; (adr r3, 8001e10 <main+0xe78>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fab6 	bl	8000298 <__aeabi_dsub>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	4618      	mov	r0, r3
 8001d32:	4621      	mov	r1, r4
 8001d34:	f7fe ff60 	bl	8000bf8 <__aeabi_d2f>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <main+0xea0>)
 8001d3c:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001d3e:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <main+0xe8c>)
 8001d40:	2232      	movs	r2, #50	; 0x32
 8001d42:	701a      	strb	r2, [r3, #0]
					break;
 8001d44:	e08e      	b.n	8001e64 <main+0xecc>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <main+0xe88>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fc04 	bl	8000558 <__aeabi_f2d>
 8001d50:	a331      	add	r3, pc, #196	; (adr r3, 8001e18 <main+0xe80>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe febf 	bl	8000ad8 <__aeabi_dcmpeq>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <main+0xdd0>
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <main+0xe88>)
 8001d62:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <main+0xea4>)
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e012      	b.n	8001d8e <main+0xdf6>
					else {H_Volt = H_Volt + 0.1 ;}
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <main+0xe88>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbf3 	bl	8000558 <__aeabi_f2d>
 8001d72:	a327      	add	r3, pc, #156	; (adr r3, 8001e10 <main+0xe78>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fa90 	bl	800029c <__adddf3>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	4618      	mov	r0, r3
 8001d82:	4621      	mov	r1, r4
 8001d84:	f7fe ff38 	bl	8000bf8 <__aeabi_d2f>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <main+0xe88>)
 8001d8c:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <main+0xe8c>)
 8001d90:	2232      	movs	r2, #50	; 0x32
 8001d92:	701a      	strb	r2, [r3, #0]
					break;
 8001d94:	e066      	b.n	8001e64 <main+0xecc>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <main+0xe88>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	d104      	bne.n	8001db0 <main+0xe18>
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <main+0xe88>)
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e012      	b.n	8001dd6 <main+0xe3e>
					else {H_Volt = H_Volt - 0.1 ;}
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <main+0xe88>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbcf 	bl	8000558 <__aeabi_f2d>
 8001dba:	a315      	add	r3, pc, #84	; (adr r3, 8001e10 <main+0xe78>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fa6a 	bl	8000298 <__aeabi_dsub>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4621      	mov	r1, r4
 8001dcc:	f7fe ff14 	bl	8000bf8 <__aeabi_d2f>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <main+0xe88>)
 8001dd4:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <main+0xe8c>)
 8001dd8:	2232      	movs	r2, #50	; 0x32
 8001dda:	701a      	strb	r2, [r3, #0]
					break;
 8001ddc:	e042      	b.n	8001e64 <main+0xecc>

				//Specific
				case 'j':
					if (duty == 100) {duty = 100;}
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <main+0xea8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d103      	bne.n	8001dee <main+0xe56>
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <main+0xea8>)
 8001de8:	2264      	movs	r2, #100	; 0x64
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e004      	b.n	8001df8 <main+0xe60>
					else {duty = duty + 10 ;}
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <main+0xea8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	330a      	adds	r3, #10
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <main+0xea8>)
 8001df6:	6013      	str	r3, [r2, #0]
					state = printMenu_Squ;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <main+0xe8c>)
 8001dfa:	2232      	movs	r2, #50	; 0x32
 8001dfc:	701a      	strb	r2, [r3, #0]
					break;
 8001dfe:	e031      	b.n	8001e64 <main+0xecc>
				case 'l':
					if (duty == 0) {duty = 0;}
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <main+0xea8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11d      	bne.n	8001e44 <main+0xeac>
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <main+0xea8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e01e      	b.n	8001e4e <main+0xeb6>
 8001e10:	9999999a 	.word	0x9999999a
 8001e14:	3fb99999 	.word	0x3fb99999
 8001e18:	66666666 	.word	0x66666666
 8001e1c:	400a6666 	.word	0x400a6666
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000015 	.word	0x20000015
 8001e28:	20000014 	.word	0x20000014
 8001e2c:	2000023c 	.word	0x2000023c
 8001e30:	20000004 	.word	0x20000004
 8001e34:	41200000 	.word	0x41200000
 8001e38:	2000022c 	.word	0x2000022c
 8001e3c:	40533333 	.word	0x40533333
 8001e40:	20000010 	.word	0x20000010
					else {duty = duty - 10 ;}
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <main+0xed4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3b0a      	subs	r3, #10
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <main+0xed4>)
 8001e4c:	6013      	str	r3, [r2, #0]
					state = printMenu_Squ;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <main+0xed8>)
 8001e50:	2232      	movs	r2, #50	; 0x32
 8001e52:	701a      	strb	r2, [r3, #0]
					break;
 8001e54:	e006      	b.n	8001e64 <main+0xecc>

				//Error
				default:
					Print_Error();
 8001e56:	f000 fb7f 	bl	8002558 <Print_Error>
					state = printMenu_Squ;
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <main+0xed8>)
 8001e5c:	2232      	movs	r2, #50	; 0x32
 8001e5e:	701a      	strb	r2, [r3, #0]
					break;
 8001e60:	e000      	b.n	8001e64 <main+0xecc>
					break;
 8001e62:	bf00      	nop
			}
			break;
 8001e64:	bf00      	nop
	{
 8001e66:	f7ff b8bd 	b.w	8000fe4 <main+0x4c>
 8001e6a:	bf00      	nop
 8001e6c:	20000010 	.word	0x20000010
 8001e70:	20000015 	.word	0x20000015

08001e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b094      	sub	sp, #80	; 0x50
 8001e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7a:	f107 0320 	add.w	r3, r7, #32
 8001e7e:	2230      	movs	r2, #48	; 0x30
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 fabd 	bl	8006402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <SystemClock_Config+0xc8>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <SystemClock_Config+0xc8>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <SystemClock_Config+0xc8>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <SystemClock_Config+0xcc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <SystemClock_Config+0xcc>)
 8001ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <SystemClock_Config+0xcc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed8:	2310      	movs	r3, #16
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001edc:	2302      	movs	r3, #2
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ee8:	2364      	movs	r3, #100	; 0x64
 8001eea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eec:	2302      	movs	r3, #2
 8001eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef4:	f107 0320 	add.w	r3, r7, #32
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 f8a9 	bl	8004050 <HAL_RCC_OscConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f04:	f000 fbbc 	bl	8002680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f08:	230f      	movs	r3, #15
 8001f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2103      	movs	r1, #3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 fb03 	bl	8004530 <HAL_RCC_ClockConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f30:	f000 fba6 	bl	8002680 <Error_Handler>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3750      	adds	r7, #80	; 0x50
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000

08001f44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f58:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <MX_ADC1_Init+0xa0>)
 8001f5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001faa:	f000 fe15 	bl	8002bd8 <HAL_ADC_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001fb4:	f000 fb64 	bl	8002680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_ADC1_Init+0x9c>)
 8001fca:	f000 ff3b 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001fd4:	f000 fb54 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000390 	.word	0x20000390
 8001fe4:	40012000 	.word	0x40012000

08001fe8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_SPI3_Init+0x68>)
 8001fee:	4a19      	ldr	r2, [pc, #100]	; (8002054 <MX_SPI3_Init+0x6c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <MX_SPI3_Init+0x68>)
 8001ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_SPI3_Init+0x68>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_SPI3_Init+0x68>)
 8002002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002006:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_SPI3_Init+0x68>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_SPI3_Init+0x68>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_SPI3_Init+0x68>)
 8002016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_SPI3_Init+0x68>)
 800201e:	2208      	movs	r2, #8
 8002020:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_SPI3_Init+0x68>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_SPI3_Init+0x68>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_SPI3_Init+0x68>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_SPI3_Init+0x68>)
 8002036:	220a      	movs	r2, #10
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_SPI3_Init+0x68>)
 800203c:	f002 fc6a 	bl	8004914 <HAL_SPI_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002046:	f000 fb1b 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000338 	.word	0x20000338
 8002054:	40003c00 	.word	0x40003c00

08002058 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_TIM3_Init+0x90>)
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <MX_TIM3_Init+0x94>)
 8002078:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MX_TIM3_Init+0x90>)
 800207c:	2263      	movs	r2, #99	; 0x63
 800207e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <MX_TIM3_Init+0x90>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_TIM3_Init+0x90>)
 8002088:	2264      	movs	r2, #100	; 0x64
 800208a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_TIM3_Init+0x90>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_TIM3_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002098:	4813      	ldr	r0, [pc, #76]	; (80020e8 <MX_TIM3_Init+0x90>)
 800209a:	f002 ff93 	bl	8004fc4 <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80020a4:	f000 faec 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <MX_TIM3_Init+0x90>)
 80020b6:	f002 fff8 	bl	80050aa <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80020c0:	f000 fade 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020c4:	2320      	movs	r3, #32
 80020c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_TIM3_Init+0x90>)
 80020d2:	f003 f9bb 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80020dc:	f000 fad0 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200002f8 	.word	0x200002f8
 80020ec:	40000400 	.word	0x40000400

080020f0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <MX_TIM11_Init+0x40>)
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <MX_TIM11_Init+0x44>)
 80020f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <MX_TIM11_Init+0x40>)
 80020fc:	2263      	movs	r2, #99	; 0x63
 80020fe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <MX_TIM11_Init+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_TIM11_Init+0x40>)
 8002108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800210c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <MX_TIM11_Init+0x40>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_TIM11_Init+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_TIM11_Init+0x40>)
 800211c:	f002 ff52 	bl	8004fc4 <HAL_TIM_Base_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002126:	f000 faab 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200003d8 	.word	0x200003d8
 8002134:	40014800 	.word	0x40014800

08002138 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <MX_USART2_UART_Init+0x50>)
 8002140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_USART2_UART_Init+0x4c>)
 8002170:	f003 f9da 	bl	8005528 <HAL_UART_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800217a:	f000 fa81 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000478 	.word	0x20000478
 8002188:	40004400 	.word	0x40004400

0800218c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_DMA_Init+0x3c>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <MX_DMA_Init+0x3c>)
 800219c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_DMA_Init+0x3c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	2038      	movs	r0, #56	; 0x38
 80021b4:	f001 f9d1 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021b8:	2038      	movs	r0, #56	; 0x38
 80021ba:	f001 f9ea 	bl	8003592 <HAL_NVIC_EnableIRQ>

}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <MX_GPIO_Init+0x12c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a43      	ldr	r2, [pc, #268]	; (80022f8 <MX_GPIO_Init+0x12c>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <MX_GPIO_Init+0x12c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <MX_GPIO_Init+0x12c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a3c      	ldr	r2, [pc, #240]	; (80022f8 <MX_GPIO_Init+0x12c>)
 8002208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <MX_GPIO_Init+0x12c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <MX_GPIO_Init+0x12c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a35      	ldr	r2, [pc, #212]	; (80022f8 <MX_GPIO_Init+0x12c>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <MX_GPIO_Init+0x12c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <MX_GPIO_Init+0x12c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <MX_GPIO_Init+0x12c>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <MX_GPIO_Init+0x12c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	2120      	movs	r1, #32
 8002256:	4829      	ldr	r0, [pc, #164]	; (80022fc <MX_GPIO_Init+0x130>)
 8002258:	f001 fee0 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002262:	4827      	ldr	r0, [pc, #156]	; (8002300 <MX_GPIO_Init+0x134>)
 8002264:	f001 feda 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002268:	2201      	movs	r2, #1
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	4825      	ldr	r0, [pc, #148]	; (8002304 <MX_GPIO_Init+0x138>)
 800226e:	f001 fed5 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002278:	4820      	ldr	r0, [pc, #128]	; (80022fc <MX_GPIO_Init+0x130>)
 800227a:	f001 fecf 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800227e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <MX_GPIO_Init+0x13c>)
 8002286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	481c      	ldr	r0, [pc, #112]	; (8002304 <MX_GPIO_Init+0x138>)
 8002294:	f001 fd28 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002298:	f44f 7308 	mov.w	r3, #544	; 0x220
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229e:	2301      	movs	r3, #1
 80022a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4812      	ldr	r0, [pc, #72]	; (80022fc <MX_GPIO_Init+0x130>)
 80022b2:	f001 fd19 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80022b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022bc:	2301      	movs	r3, #1
 80022be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	480c      	ldr	r0, [pc, #48]	; (8002300 <MX_GPIO_Init+0x134>)
 80022d0:	f001 fd0a 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <MX_GPIO_Init+0x138>)
 80022ec:	f001 fcfc 	bl	8003ce8 <HAL_GPIO_Init>

}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	10210000 	.word	0x10210000

0800230c <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 800231c:	88bb      	ldrh	r3, [r7, #4]
 800231e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	031b      	lsls	r3, r3, #12
 8002326:	b29b      	uxth	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002332:	4807      	ldr	r0, [pc, #28]	; (8002350 <MCP4922SetOutput+0x44>)
 8002334:	f001 fe72 	bl	800401c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	2201      	movs	r2, #1
 800233e:	4619      	mov	r1, r3
 8002340:	4804      	ldr	r0, [pc, #16]	; (8002354 <MCP4922SetOutput+0x48>)
 8002342:	f002 fb4b 	bl	80049dc <HAL_SPI_Transmit_IT>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40020400 	.word	0x40020400
 8002354:	20000338 	.word	0x20000338

08002358 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a06      	ldr	r2, [pc, #24]	; (800237c <HAL_SPI_TxCpltCallback+0x24>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d105      	bne.n	8002374 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236e:	4804      	ldr	r0, [pc, #16]	; (8002380 <HAL_SPI_TxCpltCallback+0x28>)
 8002370:	f001 fe54 	bl	800401c <HAL_GPIO_WritePin>
	}
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000338 	.word	0x20000338
 8002380:	40020400 	.word	0x40020400

08002384 <micros>:
		_micro += 65535;
	}
}

inline uint64_t micros()
{
 8002384:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002388:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <micros+0x2c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <micros+0x30>)
 8002398:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800239c:	eb1b 0301 	adds.w	r3, fp, r1
 80023a0:	eb4c 0402 	adc.w	r4, ip, r2
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	4621      	mov	r1, r4
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80023ae:	4770      	bx	lr
 80023b0:	200003d8 	.word	0x200003d8
 80023b4:	20000218 	.word	0x20000218

080023b8 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data = -1 ;
 80023be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c2:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <UARTRecieveIT+0x58>)
 80023c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <UARTRecieveIT+0x58>)
 80023cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <UARTRecieveIT+0x5c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d010      	beq.n	80023fe <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <UARTRecieveIT+0x5c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <UARTRecieveIT+0x60>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <UARTRecieveIT+0x5c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4a08      	ldr	r2, [pc, #32]	; (8002410 <UARTRecieveIT+0x58>)
 80023ee:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80023f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80023f4:	fb02 f201 	mul.w	r2, r2, r1
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	4a06      	ldr	r2, [pc, #24]	; (8002414 <UARTRecieveIT+0x5c>)
 80023fc:	6013      	str	r3, [r2, #0]
	}
	return data;
 80023fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000478 	.word	0x20000478
 8002414:	200002e8 	.word	0x200002e8
 8002418:	20000260 	.word	0x20000260

0800241c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <HAL_UART_RxCpltCallback+0x28>)
 8002426:	f7fd fedb 	bl	80001e0 <strlen>
 800242a:	4603      	mov	r3, r0
 800242c:	b29a      	uxth	r2, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002432:	4904      	ldr	r1, [pc, #16]	; (8002444 <HAL_UART_RxCpltCallback+0x28>)
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <HAL_UART_RxCpltCallback+0x2c>)
 8002436:	f003 f8c4 	bl	80055c2 <HAL_UART_Transmit>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000240 	.word	0x20000240
 8002448:	20000478 	.word	0x20000478

0800244c <Print_Menu_Saw>:

//////////////////////////////////////////Print

void Print_Menu_Saw()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0fc      	sub	sp, #496	; 0x1f0
 8002450:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Sawtooth Wave Menu---  \r\n\r\n"
 8002452:	463b      	mov	r3, r7
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <Print_Menu_Saw+0x38>)
 8002456:	4618      	mov	r0, r3
 8002458:	4611      	mov	r1, r2
 800245a:	f240 13ed 	movw	r3, #493	; 0x1ed
 800245e:	461a      	mov	r2, r3
 8002460:	f003 ffc4 	bl	80063ec <memcpy>

			  "Parameter_specific\r\n"
			  "__press [u] for slopeUp/slopeDown\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 8002464:	463b      	mov	r3, r7
 8002466:	4618      	mov	r0, r3
 8002468:	f7fd feba 	bl	80001e0 <strlen>
 800246c:	4603      	mov	r3, r0
 800246e:	b29a      	uxth	r2, r3
 8002470:	4639      	mov	r1, r7
 8002472:	2364      	movs	r3, #100	; 0x64
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <Print_Menu_Saw+0x3c>)
 8002476:	f003 f8a4 	bl	80055c2 <HAL_UART_Transmit>
}
 800247a:	bf00      	nop
 800247c:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	0800aec8 	.word	0x0800aec8
 8002488:	20000478 	.word	0x20000478

0800248c <Print_Menu_Sin>:

void Print_Menu_Sin()
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0ec      	sub	sp, #432	; 0x1b0
 8002490:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Sine Wave Menu---  \r\n\r\n"
 8002492:	463b      	mov	r3, r7
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <Print_Menu_Sin+0x38>)
 8002496:	4618      	mov	r0, r3
 8002498:	4611      	mov	r1, r2
 800249a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800249e:	461a      	mov	r2, r3
 80024a0:	f003 ffa4 	bl	80063ec <memcpy>
			  "Parameter_High Volt (0-3.3V)\r\n"
			  "__press [w] for High Volt + 0.1V\r\n"
			  "__press [r] for High Volt - 0.1V\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 80024a4:	463b      	mov	r3, r7
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd fe9a 	bl	80001e0 <strlen>
 80024ac:	4603      	mov	r3, r0
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4639      	mov	r1, r7
 80024b2:	2364      	movs	r3, #100	; 0x64
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <Print_Menu_Sin+0x3c>)
 80024b6:	f003 f884 	bl	80055c2 <HAL_UART_Transmit>
}
 80024ba:	bf00      	nop
 80024bc:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	0800b0b8 	.word	0x0800b0b8
 80024c8:	20000478 	.word	0x20000478

080024cc <Print_Menu_Squ>:

void Print_Menu_Squ()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80024d2:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Square Wave Menu---  \r\n\r\n"
 80024d4:	463b      	mov	r3, r7
 80024d6:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <Print_Menu_Squ+0x3c>)
 80024d8:	4618      	mov	r0, r3
 80024da:	4611      	mov	r1, r2
 80024dc:	f240 2315 	movw	r3, #533	; 0x215
 80024e0:	461a      	mov	r2, r3
 80024e2:	f003 ff83 	bl	80063ec <memcpy>
			  "Parameter_specific (0-100%)\r\n"
			  "__press [j] for duty cycle + 10%\r\n"
			  "__press [l] for duty cycle - 10%\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 80024e6:	463b      	mov	r3, r7
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd fe79 	bl	80001e0 <strlen>
 80024ee:	4603      	mov	r3, r0
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4639      	mov	r1, r7
 80024f4:	2364      	movs	r3, #100	; 0x64
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <Print_Menu_Squ+0x40>)
 80024f8:	f003 f863 	bl	80055c2 <HAL_UART_Transmit>
}
 80024fc:	bf00      	nop
 80024fe:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	0800b268 	.word	0x0800b268
 800250c:	20000478 	.word	0x20000478

08002510 <Print_fq>:

void Print_fq()
{
 8002510:	b598      	push	{r3, r4, r7, lr}
 8002512:	af00      	add	r7, sp, #0
//	  Period = (1.0/Freq)*1000.0 ;		//millisecond
//	  Half_Period = Period/2.0 ;

      //char fq[]= ("frequency of LED is: %d \r\n", Freq);
	  sprintf(fq, "frequency of LED is: %.1f \r\n", Freq);
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <Print_fq+0x38>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f81d 	bl	8000558 <__aeabi_f2d>
 800251e:	4603      	mov	r3, r0
 8002520:	460c      	mov	r4, r1
 8002522:	461a      	mov	r2, r3
 8002524:	4623      	mov	r3, r4
 8002526:	4909      	ldr	r1, [pc, #36]	; (800254c <Print_fq+0x3c>)
 8002528:	4809      	ldr	r0, [pc, #36]	; (8002550 <Print_fq+0x40>)
 800252a:	f004 fdb7 	bl	800709c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)fq, strlen(fq),100);
 800252e:	4808      	ldr	r0, [pc, #32]	; (8002550 <Print_fq+0x40>)
 8002530:	f7fd fe56 	bl	80001e0 <strlen>
 8002534:	4603      	mov	r3, r0
 8002536:	b29a      	uxth	r2, r3
 8002538:	2364      	movs	r3, #100	; 0x64
 800253a:	4905      	ldr	r1, [pc, #20]	; (8002550 <Print_fq+0x40>)
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <Print_fq+0x44>)
 800253e:	f003 f840 	bl	80055c2 <HAL_UART_Transmit>

}
 8002542:	bf00      	nop
 8002544:	bd98      	pop	{r3, r4, r7, pc}
 8002546:	bf00      	nop
 8002548:	20000004 	.word	0x20000004
 800254c:	0800b480 	.word	0x0800b480
 8002550:	20000280 	.word	0x20000280
 8002554:	20000478 	.word	0x20000478

08002558 <Print_Error>:

void Print_Error()
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
	  char Eror[]="Error : Out of choice\r\n";
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <Print_Error+0x38>)
 8002560:	463c      	mov	r4, r7
 8002562:	461d      	mov	r5, r3
 8002564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002568:	e895 0003 	ldmia.w	r5, {r0, r1}
 800256c:	e884 0003 	stmia.w	r4, {r0, r1}
	  HAL_UART_Transmit(&huart2, (uint8_t*)Eror, strlen(Eror),100);
 8002570:	463b      	mov	r3, r7
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fe34 	bl	80001e0 <strlen>
 8002578:	4603      	mov	r3, r0
 800257a:	b29a      	uxth	r2, r3
 800257c:	4639      	mov	r1, r7
 800257e:	2364      	movs	r3, #100	; 0x64
 8002580:	4804      	ldr	r0, [pc, #16]	; (8002594 <Print_Error+0x3c>)
 8002582:	f003 f81e 	bl	80055c2 <HAL_UART_Transmit>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bdb0      	pop	{r4, r5, r7, pc}
 800258e:	bf00      	nop
 8002590:	0800b4a0 	.word	0x0800b4a0
 8002594:	20000478 	.word	0x20000478

08002598 <Print_Slope>:

void Print_Slope()
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
	if (Slope == 1)
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <Print_Slope+0x64>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d116      	bne.n	80025d4 <Print_Slope+0x3c>
	{
		char D[]="Slope Up\r\n";
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <Print_Slope+0x68>)
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ae:	c303      	stmia	r3!, {r0, r1}
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	3302      	adds	r3, #2
 80025b4:	0c12      	lsrs	r2, r2, #16
 80025b6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd fe0f 	bl	80001e0 <strlen>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	f107 0114 	add.w	r1, r7, #20
 80025ca:	2364      	movs	r3, #100	; 0x64
 80025cc:	480d      	ldr	r0, [pc, #52]	; (8002604 <Print_Slope+0x6c>)
 80025ce:	f002 fff8 	bl	80055c2 <HAL_UART_Transmit>
	{
		char D[]="Slope Down\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
	}

}
 80025d2:	e00f      	b.n	80025f4 <Print_Slope+0x5c>
		char D[]="Slope Down\r\n";
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <Print_Slope+0x70>)
 80025d6:	1d3c      	adds	r4, r7, #4
 80025d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025da:	c407      	stmia	r4!, {r0, r1, r2}
 80025dc:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd fdfd 	bl	80001e0 <strlen>
 80025e6:	4603      	mov	r3, r0
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	1d39      	adds	r1, r7, #4
 80025ec:	2364      	movs	r3, #100	; 0x64
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <Print_Slope+0x6c>)
 80025f0:	f002 ffe7 	bl	80055c2 <HAL_UART_Transmit>
}
 80025f4:	bf00      	nop
 80025f6:	3724      	adds	r7, #36	; 0x24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	0800b4b8 	.word	0x0800b4b8
 8002604:	20000478 	.word	0x20000478
 8002608:	0800b4c4 	.word	0x0800b4c4

0800260c <Print_Duty>:

void Print_Duty()
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
//	  sprintf(Duty, "Duty cycle is: %d \r\n",duty);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)duty, strlen(duty),100);
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <Print_Volt>:

void Print_Volt()
{
 800261c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261e:	b083      	sub	sp, #12
 8002620:	af02      	add	r7, sp, #8
	  sprintf(Volt, "Low Volt is: %.1f \r\n"
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <Print_Volt+0x50>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff96 	bl	8000558 <__aeabi_f2d>
 800262c:	4605      	mov	r5, r0
 800262e:	460e      	mov	r6, r1
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <Print_Volt+0x54>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd ff8f 	bl	8000558 <__aeabi_f2d>
 800263a:	4603      	mov	r3, r0
 800263c:	460c      	mov	r4, r1
 800263e:	e9cd 3400 	strd	r3, r4, [sp]
 8002642:	462a      	mov	r2, r5
 8002644:	4633      	mov	r3, r6
 8002646:	490b      	ldr	r1, [pc, #44]	; (8002674 <Print_Volt+0x58>)
 8002648:	480b      	ldr	r0, [pc, #44]	; (8002678 <Print_Volt+0x5c>)
 800264a:	f004 fd27 	bl	800709c <siprintf>
			  	  	"High Volt is: %.1f \r\n", L_Volt,H_Volt);
	  HAL_UART_Transmit(&huart2, (uint8_t*)Volt, strlen(Volt),100);
 800264e:	480a      	ldr	r0, [pc, #40]	; (8002678 <Print_Volt+0x5c>)
 8002650:	f7fd fdc6 	bl	80001e0 <strlen>
 8002654:	4603      	mov	r3, r0
 8002656:	b29a      	uxth	r2, r3
 8002658:	2364      	movs	r3, #100	; 0x64
 800265a:	4907      	ldr	r1, [pc, #28]	; (8002678 <Print_Volt+0x5c>)
 800265c:	4807      	ldr	r0, [pc, #28]	; (800267c <Print_Volt+0x60>)
 800265e:	f002 ffb0 	bl	80055c2 <HAL_UART_Transmit>
}
 8002662:	bf00      	nop
 8002664:	3704      	adds	r7, #4
 8002666:	46bd      	mov	sp, r7
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800266a:	bf00      	nop
 800266c:	2000022c 	.word	0x2000022c
 8002670:	20000008 	.word	0x20000008
 8002674:	0800b4d4 	.word	0x0800b4d4
 8002678:	200002a0 	.word	0x200002a0
 800267c:	20000478 	.word	0x20000478

08002680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002686:	e7fe      	b.n	8002686 <Error_Handler+0x6>

08002688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_MspInit+0x4c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_MspInit+0x4c>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_MspInit+0x4c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_MspInit+0x4c>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <HAL_MspInit+0x4c>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_MspInit+0x4c>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026c6:	2007      	movs	r0, #7
 80026c8:	f000 ff3c 	bl	8003544 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <HAL_ADC_MspInit+0xdc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d157      	bne.n	80027aa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_ADC_MspInit+0xe0>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <HAL_ADC_MspInit+0xe0>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_ADC_MspInit+0xe0>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_ADC_MspInit+0xe0>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <HAL_ADC_MspInit+0xe0>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_ADC_MspInit+0xe0>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002736:	2303      	movs	r3, #3
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	481d      	ldr	r0, [pc, #116]	; (80027bc <HAL_ADC_MspInit+0xe4>)
 8002746:	f001 facf 	bl	8003ce8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_ADC_MspInit+0xec>)
 800274e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002768:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 800276c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002770:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002778:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 800277c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002780:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800278e:	480c      	ldr	r0, [pc, #48]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002790:	f000 ff1a 	bl	80035c8 <HAL_DMA_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800279a:	f7ff ff71 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_ADC_MspInit+0xe8>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40012000 	.word	0x40012000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	20000418 	.word	0x20000418
 80027c4:	40026410 	.word	0x40026410

080027c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	; (800285c <HAL_SPI_MspInit+0x94>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d133      	bne.n	8002852 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_SPI_MspInit+0x98>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_SPI_MspInit+0x98>)
 80027f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_SPI_MspInit+0x98>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_SPI_MspInit+0x98>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_SPI_MspInit+0x98>)
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_SPI_MspInit+0x98>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002822:	2338      	movs	r3, #56	; 0x38
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282e:	2303      	movs	r3, #3
 8002830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002832:	2306      	movs	r3, #6
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	4809      	ldr	r0, [pc, #36]	; (8002864 <HAL_SPI_MspInit+0x9c>)
 800283e:	f001 fa53 	bl	8003ce8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2033      	movs	r0, #51	; 0x33
 8002848:	f000 fe87 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800284c:	2033      	movs	r0, #51	; 0x33
 800284e:	f000 fea0 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40003c00 	.word	0x40003c00
 8002860:	40023800 	.word	0x40023800
 8002864:	40020400 	.word	0x40020400

08002868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_TIM_Base_MspInit+0x64>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_TIM_Base_MspInit+0x68>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_TIM_Base_MspInit+0x68>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_TIM_Base_MspInit+0x68>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002896:	e012      	b.n	80028be <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_TIM_Base_MspInit+0x6c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10d      	bne.n	80028be <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_TIM_Base_MspInit+0x68>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_TIM_Base_MspInit+0x68>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_TIM_Base_MspInit+0x68>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40014800 	.word	0x40014800

080028d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_UART_MspInit+0x94>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d133      	bne.n	8002962 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <HAL_UART_MspInit+0x98>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_UART_MspInit+0x98>)
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_UART_MspInit+0x98>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_UART_MspInit+0x98>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_UART_MspInit+0x98>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_UART_MspInit+0x98>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002932:	230c      	movs	r3, #12
 8002934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002942:	2307      	movs	r3, #7
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	4809      	ldr	r0, [pc, #36]	; (8002974 <HAL_UART_MspInit+0x9c>)
 800294e:	f001 f9cb 	bl	8003ce8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	2026      	movs	r0, #38	; 0x26
 8002958:	f000 fdff 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800295c:	2026      	movs	r0, #38	; 0x26
 800295e:	f000 fe18 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40004400 	.word	0x40004400
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800297c:	e7fe      	b.n	800297c <NMI_Handler+0x4>

0800297e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <HardFault_Handler+0x4>

08002984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <MemManage_Handler+0x4>

0800298a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <BusFault_Handler+0x4>

08002990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <UsageFault_Handler+0x4>

08002996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c4:	f000 f8e8 	bl	8002b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}

080029cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <USART2_IRQHandler+0x10>)
 80029d2:	f002 fee5 	bl	80057a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000478 	.word	0x20000478

080029e0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <SPI3_IRQHandler+0x10>)
 80029e6:	f002 f87b 	bl	8004ae0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000338 	.word	0x20000338

080029f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <DMA2_Stream0_IRQHandler+0x10>)
 80029fa:	f000 ff0d 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000418 	.word	0x20000418

08002a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <_sbrk+0x5c>)
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <_sbrk+0x60>)
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <_sbrk+0x64>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <_sbrk+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d207      	bcs.n	8002a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a38:	f003 fcae 	bl	8006398 <__errno>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	230c      	movs	r3, #12
 8002a40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	e009      	b.n	8002a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <_sbrk+0x64>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <_sbrk+0x64>)
 8002a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20020000 	.word	0x20020000
 8002a68:	00000400 	.word	0x00000400
 8002a6c:	200002ec 	.word	0x200002ec
 8002a70:	200004c0 	.word	0x200004c0

08002a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <SystemInit+0x28>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <SystemInit+0x28>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SystemInit+0x28>)
 8002a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002aa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002aa6:	e003      	b.n	8002ab0 <LoopCopyDataInit>

08002aa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002aaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002aac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002aae:	3104      	adds	r1, #4

08002ab0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ab0:	480b      	ldr	r0, [pc, #44]	; (8002ae0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ab4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ab6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ab8:	d3f6      	bcc.n	8002aa8 <CopyDataInit>
  ldr  r2, =_sbss
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002abc:	e002      	b.n	8002ac4 <LoopFillZerobss>

08002abe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002abe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ac0:	f842 3b04 	str.w	r3, [r2], #4

08002ac4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ac6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ac8:	d3f9      	bcc.n	8002abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002aca:	f7ff ffd3 	bl	8002a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ace:	f003 fc69 	bl	80063a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ad2:	f7fe fa61 	bl	8000f98 <main>
  bx  lr    
 8002ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ad8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002adc:	0800b9c0 	.word	0x0800b9c0
  ldr  r0, =_sdata
 8002ae0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ae4:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002ae8:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8002aec:	200004c0 	.word	0x200004c0

08002af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af0:	e7fe      	b.n	8002af0 <ADC_IRQHandler>
	...

08002af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <HAL_Init+0x40>)
 8002afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_Init+0x40>)
 8002b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_Init+0x40>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	f000 fd11 	bl	8003544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f000 f808 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b28:	f7ff fdae 	bl	8002688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023c00 	.word	0x40023c00

08002b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x54>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_InitTick+0x58>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fd29 	bl	80035ae <HAL_SYSTICK_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00e      	b.n	8002b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d80a      	bhi.n	8002b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f000 fcf1 	bl	800355a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <HAL_InitTick+0x5c>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000018 	.word	0x20000018
 8002b90:	20000020 	.word	0x20000020
 8002b94:	2000001c 	.word	0x2000001c

08002b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x20>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x24>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_IncTick+0x24>)
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000020 	.word	0x20000020
 8002bbc:	200004b8 	.word	0x200004b8

08002bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_GetTick+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	200004b8 	.word	0x200004b8

08002bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e033      	b.n	8002c56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fd6e 	bl	80026d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c1e:	f023 0302 	bic.w	r3, r3, #2
 8002c22:	f043 0202 	orr.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa3c 	bl	80030a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
 8002c46:	e001      	b.n	8002c4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Start_DMA+0x1e>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0b1      	b.n	8002de2 <HAL_ADC_Start_DMA+0x182>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d018      	beq.n	8002cc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca4:	4b51      	ldr	r3, [pc, #324]	; (8002dec <HAL_ADC_Start_DMA+0x18c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a51      	ldr	r2, [pc, #324]	; (8002df0 <HAL_ADC_Start_DMA+0x190>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0c9a      	lsrs	r2, r3, #18
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002cb8:	e002      	b.n	8002cc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f9      	bne.n	8002cba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	f040 8085 	bne.w	8002de0 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d14:	d106      	bne.n	8002d24 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f023 0206 	bic.w	r2, r3, #6
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
 8002d22:	e002      	b.n	8002d2a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d32:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_ADC_Start_DMA+0x194>)
 8002d34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	4a2f      	ldr	r2, [pc, #188]	; (8002df8 <HAL_ADC_Start_DMA+0x198>)
 8002d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	4a2e      	ldr	r2, [pc, #184]	; (8002dfc <HAL_ADC_Start_DMA+0x19c>)
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	4a2d      	ldr	r2, [pc, #180]	; (8002e00 <HAL_ADC_Start_DMA+0x1a0>)
 8002d4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	334c      	adds	r3, #76	; 0x4c
 8002d82:	4619      	mov	r1, r3
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f000 fccc 	bl	8003724 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d11c      	bne.n	8002de0 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	e013      	b.n	8002de0 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <HAL_ADC_Start_DMA+0x1a4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10e      	bne.n	8002de0 <HAL_ADC_Start_DMA+0x180>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d107      	bne.n	8002de0 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dde:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000018 	.word	0x20000018
 8002df0:	431bde83 	.word	0x431bde83
 8002df4:	40012300 	.word	0x40012300
 8002df8:	080032a1 	.word	0x080032a1
 8002dfc:	0800335b 	.word	0x0800335b
 8002e00:	08003377 	.word	0x08003377
 8002e04:	40012000 	.word	0x40012000

08002e08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x1c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e113      	b.n	8003088 <HAL_ADC_ConfigChannel+0x244>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d925      	bls.n	8002ebc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68d9      	ldr	r1, [r3, #12]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	3b1e      	subs	r3, #30
 8002e86:	2207      	movs	r2, #7
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	400a      	ands	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68d9      	ldr	r1, [r3, #12]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4403      	add	r3, r0
 8002eae:	3b1e      	subs	r3, #30
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	e022      	b.n	8002f02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	400a      	ands	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4403      	add	r3, r0
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d824      	bhi.n	8002f54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b05      	subs	r3, #5
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b05      	subs	r3, #5
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
 8002f52:	e04c      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d824      	bhi.n	8002fa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b23      	subs	r3, #35	; 0x23
 8002f6e:	221f      	movs	r2, #31
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43da      	mvns	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3b23      	subs	r3, #35	; 0x23
 8002f98:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa4:	e023      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b41      	subs	r3, #65	; 0x41
 8002fb8:	221f      	movs	r2, #31
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	3b41      	subs	r3, #65	; 0x41
 8002fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fee:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_ADC_ConfigChannel+0x250>)
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a28      	ldr	r2, [pc, #160]	; (8003098 <HAL_ADC_ConfigChannel+0x254>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10f      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1d8>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b12      	cmp	r3, #18
 8003002:	d10b      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_ADC_ConfigChannel+0x254>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d12b      	bne.n	800307e <HAL_ADC_ConfigChannel+0x23a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <HAL_ADC_ConfigChannel+0x258>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x1f4>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b11      	cmp	r3, #17
 8003036:	d122      	bne.n	800307e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <HAL_ADC_ConfigChannel+0x258>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d111      	bne.n	800307e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_ADC_ConfigChannel+0x25c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <HAL_ADC_ConfigChannel+0x260>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	0c9a      	lsrs	r2, r3, #18
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003070:	e002      	b.n	8003078 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	3b01      	subs	r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f9      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40012300 	.word	0x40012300
 8003098:	40012000 	.word	0x40012000
 800309c:	10000012 	.word	0x10000012
 80030a0:	20000018 	.word	0x20000018
 80030a4:	431bde83 	.word	0x431bde83

080030a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b0:	4b79      	ldr	r3, [pc, #484]	; (8003298 <ADC_Init+0x1f0>)
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	021a      	lsls	r2, r3, #8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6899      	ldr	r1, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	4a58      	ldr	r2, [pc, #352]	; (800329c <ADC_Init+0x1f4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800314e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6899      	ldr	r1, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e00f      	b.n	80031a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0202 	bic.w	r2, r2, #2
 80031b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7e1b      	ldrb	r3, [r3, #24]
 80031c0:	005a      	lsls	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	3b01      	subs	r3, #1
 8003200:	035a      	lsls	r2, r3, #13
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	e007      	b.n	800321c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800321a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	3b01      	subs	r3, #1
 8003238:	051a      	lsls	r2, r3, #20
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6899      	ldr	r1, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800325e:	025a      	lsls	r2, r3, #9
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	029a      	lsls	r2, r3, #10
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40012300 	.word	0x40012300
 800329c:	0f000001 	.word	0x0f000001

080032a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d13c      	bne.n	8003334 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d12b      	bne.n	800332c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d127      	bne.n	800332c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d006      	beq.n	80032f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d119      	bne.n	800332c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0220 	bic.w	r2, r2, #32
 8003306:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fd6b 	bl	8002e08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003332:	e00e      	b.n	8003352 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff fd75 	bl	8002e30 <HAL_ADC_ErrorCallback>
}
 8003346:	e004      	b.n	8003352 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff fd57 	bl	8002e1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2240      	movs	r2, #64	; 0x40
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff fd4a 	bl	8002e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db0b      	blt.n	8003432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <__NVIC_EnableIRQ+0x38>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2001      	movs	r0, #1
 800342a:	fa00 f202 	lsl.w	r2, r0, r2
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000e100 	.word	0xe000e100

08003444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	2b00      	cmp	r3, #0
 8003456:	db0a      	blt.n	800346e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	490c      	ldr	r1, [pc, #48]	; (8003490 <__NVIC_SetPriority+0x4c>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	440b      	add	r3, r1
 8003468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800346c:	e00a      	b.n	8003484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <__NVIC_SetPriority+0x50>)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	3b04      	subs	r3, #4
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	440b      	add	r3, r1
 8003482:	761a      	strb	r2, [r3, #24]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000e100 	.word	0xe000e100
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f1c3 0307 	rsb	r3, r3, #7
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	bf28      	it	cs
 80034b6:	2304      	movcs	r3, #4
 80034b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3304      	adds	r3, #4
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d902      	bls.n	80034c8 <NVIC_EncodePriority+0x30>
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3b03      	subs	r3, #3
 80034c6:	e000      	b.n	80034ca <NVIC_EncodePriority+0x32>
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	401a      	ands	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43d9      	mvns	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	4313      	orrs	r3, r2
         );
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003510:	d301      	bcc.n	8003516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003512:	2301      	movs	r3, #1
 8003514:	e00f      	b.n	8003536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <SysTick_Config+0x40>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351e:	210f      	movs	r1, #15
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	f7ff ff8e 	bl	8003444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <SysTick_Config+0x40>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <SysTick_Config+0x40>)
 8003530:	2207      	movs	r2, #7
 8003532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	e000e010 	.word	0xe000e010

08003544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff29 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff ff3e 	bl	80033ec <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff8e 	bl	8003498 <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5d 	bl	8003444 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff31 	bl	8003408 <__NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffa2 	bl	8003500 <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff faf4 	bl	8002bc0 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e099      	b.n	8003718 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003604:	e00f      	b.n	8003626 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003606:	f7ff fadb 	bl	8002bc0 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b05      	cmp	r3, #5
 8003612:	d908      	bls.n	8003626 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e078      	b.n	8003718 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e8      	bne.n	8003606 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_DMA_Init+0x158>)
 8003640:	4013      	ands	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003652:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b04      	cmp	r3, #4
 800367e:	d107      	bne.n	8003690 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	4313      	orrs	r3, r2
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0307 	bic.w	r3, r3, #7
 80036a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d117      	bne.n	80036ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa91 	bl	8003bf4 <DMA_CheckFifoParam>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2240      	movs	r2, #64	; 0x40
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036e6:	2301      	movs	r3, #1
 80036e8:	e016      	b.n	8003718 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa48 	bl	8003b88 <DMA_CalcBaseAndBitshift>
 80036f8:	4603      	mov	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	223f      	movs	r2, #63	; 0x3f
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	f010803f 	.word	0xf010803f

08003724 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_DMA_Start_IT+0x26>
 8003746:	2302      	movs	r3, #2
 8003748:	e040      	b.n	80037cc <HAL_DMA_Start_IT+0xa8>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d12f      	bne.n	80037be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2202      	movs	r2, #2
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f9da 	bl	8003b2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	223f      	movs	r2, #63	; 0x3f
 800377e:	409a      	lsls	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0216 	orr.w	r2, r2, #22
 8003792:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0208 	orr.w	r2, r2, #8
 80037aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e005      	b.n	80037ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e00c      	b.n	800380c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2205      	movs	r2, #5
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003824:	4b92      	ldr	r3, [pc, #584]	; (8003a70 <HAL_DMA_IRQHandler+0x258>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a92      	ldr	r2, [pc, #584]	; (8003a74 <HAL_DMA_IRQHandler+0x25c>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0a9b      	lsrs	r3, r3, #10
 8003830:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	2208      	movs	r2, #8
 8003844:	409a      	lsls	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	2208      	movs	r2, #8
 8003872:	409a      	lsls	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f043 0202 	orr.w	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	2204      	movs	r2, #4
 80038c0:	409a      	lsls	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2204      	movs	r2, #4
 80038de:	409a      	lsls	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f043 0204 	orr.w	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	2210      	movs	r2, #16
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d043      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03c      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2210      	movs	r2, #16
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d018      	beq.n	800395a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d024      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
 8003946:	e01f      	b.n	8003988 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01b      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
 8003958:	e016      	b.n	8003988 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0208 	bic.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	2220      	movs	r2, #32
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 808e 	beq.w	8003ab6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8086 	beq.w	8003ab6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	2220      	movs	r2, #32
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d136      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0216 	bic.w	r2, r2, #22
 80039d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x1da>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0208 	bic.w	r2, r2, #8
 8003a00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	223f      	movs	r2, #63	; 0x3f
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d07d      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
        }
        return;
 8003a2e:	e078      	b.n	8003b22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01c      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d108      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d030      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
 8003a5c:	e02b      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d027      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	4798      	blx	r3
 8003a6e:	e022      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
 8003a70:	20000018 	.word	0x20000018
 8003a74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0210 	bic.w	r2, r2, #16
 8003a94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d032      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d022      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2205      	movs	r2, #5
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d307      	bcc.n	8003afe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f2      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0x2ca>
 8003afc:	e000      	b.n	8003b00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003afe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b22:	bf00      	nop
    }
  }
}
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop

08003b2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d108      	bne.n	8003b6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b6a:	e007      	b.n	8003b7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	3b10      	subs	r3, #16
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <DMA_CalcBaseAndBitshift+0x64>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d909      	bls.n	8003bca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	1d1a      	adds	r2, r3, #4
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	659a      	str	r2, [r3, #88]	; 0x58
 8003bc8:	e007      	b.n	8003bda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	aaaaaaab 	.word	0xaaaaaaab
 8003bf0:	0800b518 	.word	0x0800b518

08003bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d11f      	bne.n	8003c4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d855      	bhi.n	8003cc0 <DMA_CheckFifoParam+0xcc>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <DMA_CheckFifoParam+0x28>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c2d 	.word	0x08003c2d
 8003c20:	08003c3f 	.word	0x08003c3f
 8003c24:	08003c2d 	.word	0x08003c2d
 8003c28:	08003cc1 	.word	0x08003cc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d045      	beq.n	8003cc4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3c:	e042      	b.n	8003cc4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c46:	d13f      	bne.n	8003cc8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4c:	e03c      	b.n	8003cc8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	d121      	bne.n	8003c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d836      	bhi.n	8003ccc <DMA_CheckFifoParam+0xd8>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <DMA_CheckFifoParam+0x70>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c7b 	.word	0x08003c7b
 8003c6c:	08003c75 	.word	0x08003c75
 8003c70:	08003c8d 	.word	0x08003c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      break;
 8003c78:	e02f      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d024      	beq.n	8003cd0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8a:	e021      	b.n	8003cd0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c94:	d11e      	bne.n	8003cd4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c9a:	e01b      	b.n	8003cd4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d902      	bls.n	8003ca8 <DMA_CheckFifoParam+0xb4>
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d003      	beq.n	8003cae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ca6:	e018      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cac:	e015      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00e      	beq.n	8003cd8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbe:	e00b      	b.n	8003cd8 <DMA_CheckFifoParam+0xe4>
      break;
 8003cc0:	bf00      	nop
 8003cc2:	e00a      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      break;
 8003cc4:	bf00      	nop
 8003cc6:	e008      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      break;
 8003cc8:	bf00      	nop
 8003cca:	e006      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      break;
 8003ccc:	bf00      	nop
 8003cce:	e004      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      break;
 8003cd0:	bf00      	nop
 8003cd2:	e002      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      break;   
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
      break;
 8003cd8:	bf00      	nop
    }
  } 
  
  return status; 
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e159      	b.n	8003fb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d04:	2201      	movs	r2, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	f040 8148 	bne.w	8003fb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d00b      	beq.n	8003d42 <HAL_GPIO_Init+0x5a>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d007      	beq.n	8003d42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d36:	2b11      	cmp	r3, #17
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b12      	cmp	r3, #18
 8003d40:	d130      	bne.n	8003da4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4013      	ands	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d78:	2201      	movs	r2, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 0201 	and.w	r2, r3, #1
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0xfc>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b12      	cmp	r3, #18
 8003de2:	d123      	bne.n	8003e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	08da      	lsrs	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3208      	adds	r2, #8
 8003e26:	69b9      	ldr	r1, [r7, #24]
 8003e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0203 	and.w	r2, r3, #3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80a2 	beq.w	8003fb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	4b56      	ldr	r3, [pc, #344]	; (8003fcc <HAL_GPIO_Init+0x2e4>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	4a55      	ldr	r2, [pc, #340]	; (8003fcc <HAL_GPIO_Init+0x2e4>)
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7e:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_GPIO_Init+0x2e4>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e8a:	4a51      	ldr	r2, [pc, #324]	; (8003fd0 <HAL_GPIO_Init+0x2e8>)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a48      	ldr	r2, [pc, #288]	; (8003fd4 <HAL_GPIO_Init+0x2ec>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d019      	beq.n	8003eea <HAL_GPIO_Init+0x202>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a47      	ldr	r2, [pc, #284]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_GPIO_Init+0x1fe>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a46      	ldr	r2, [pc, #280]	; (8003fdc <HAL_GPIO_Init+0x2f4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_GPIO_Init+0x1fa>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a45      	ldr	r2, [pc, #276]	; (8003fe0 <HAL_GPIO_Init+0x2f8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <HAL_GPIO_Init+0x1f6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a44      	ldr	r2, [pc, #272]	; (8003fe4 <HAL_GPIO_Init+0x2fc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_GPIO_Init+0x1f2>
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e008      	b.n	8003eec <HAL_GPIO_Init+0x204>
 8003eda:	2307      	movs	r3, #7
 8003edc:	e006      	b.n	8003eec <HAL_GPIO_Init+0x204>
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e004      	b.n	8003eec <HAL_GPIO_Init+0x204>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e002      	b.n	8003eec <HAL_GPIO_Init+0x204>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_GPIO_Init+0x204>
 8003eea:	2300      	movs	r3, #0
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	f002 0203 	and.w	r2, r2, #3
 8003ef2:	0092      	lsls	r2, r2, #2
 8003ef4:	4093      	lsls	r3, r2
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003efc:	4934      	ldr	r1, [pc, #208]	; (8003fd0 <HAL_GPIO_Init+0x2e8>)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	3302      	adds	r3, #2
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f0a:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f2e:	4a2e      	ldr	r2, [pc, #184]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f34:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f58:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f82:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f88:	4b17      	ldr	r3, [pc, #92]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fac:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	f67f aea2 	bls.w	8003d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3724      	adds	r7, #36	; 0x24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40020000 	.word	0x40020000
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020800 	.word	0x40020800
 8003fe0:	40020c00 	.word	0x40020c00
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40013c00 	.word	0x40013c00

08003fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e001      	b.n	800400e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800402c:	787b      	ldrb	r3, [r7, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004038:	e003      	b.n	8004042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	041a      	lsls	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	619a      	str	r2, [r3, #24]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e25b      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d075      	beq.n	800415a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800406e:	4ba3      	ldr	r3, [pc, #652]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b04      	cmp	r3, #4
 8004078:	d00c      	beq.n	8004094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407a:	4ba0      	ldr	r3, [pc, #640]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004082:	2b08      	cmp	r3, #8
 8004084:	d112      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4b9d      	ldr	r3, [pc, #628]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004092:	d10b      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	4b99      	ldr	r3, [pc, #612]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05b      	beq.n	8004158 <HAL_RCC_OscConfig+0x108>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d157      	bne.n	8004158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e236      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x74>
 80040b6:	4b91      	ldr	r3, [pc, #580]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a90      	ldr	r2, [pc, #576]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e01d      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x98>
 80040ce:	4b8b      	ldr	r3, [pc, #556]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a8a      	ldr	r2, [pc, #552]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b88      	ldr	r3, [pc, #544]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a87      	ldr	r2, [pc, #540]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040e8:	4b84      	ldr	r3, [pc, #528]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a83      	ldr	r2, [pc, #524]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b81      	ldr	r3, [pc, #516]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a80      	ldr	r2, [pc, #512]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fe fd5a 	bl	8002bc0 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004110:	f7fe fd56 	bl	8002bc0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e1fb      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b76      	ldr	r3, [pc, #472]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0xc0>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fe fd46 	bl	8002bc0 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004138:	f7fe fd42 	bl	8002bc0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1e7      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	4b6c      	ldr	r3, [pc, #432]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0xe8>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d063      	beq.n	800422e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004166:	4b65      	ldr	r3, [pc, #404]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b62      	ldr	r3, [pc, #392]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800417a:	2b08      	cmp	r3, #8
 800417c:	d11c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417e:	4b5f      	ldr	r3, [pc, #380]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418a:	4b5c      	ldr	r3, [pc, #368]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_RCC_OscConfig+0x152>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e1bb      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a2:	4b56      	ldr	r3, [pc, #344]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4952      	ldr	r1, [pc, #328]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	e03a      	b.n	800422e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c0:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <HAL_RCC_OscConfig+0x2b0>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fe fcfb 	bl	8002bc0 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ce:	f7fe fcf7 	bl	8002bc0 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e19c      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e0:	4b46      	ldr	r3, [pc, #280]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ec:	4b43      	ldr	r3, [pc, #268]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4940      	ldr	r1, [pc, #256]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]
 8004200:	e015      	b.n	800422e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004202:	4b3f      	ldr	r3, [pc, #252]	; (8004300 <HAL_RCC_OscConfig+0x2b0>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe fcda 	bl	8002bc0 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004210:	f7fe fcd6 	bl	8002bc0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e17b      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004222:	4b36      	ldr	r3, [pc, #216]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d030      	beq.n	800429c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004242:	4b30      	ldr	r3, [pc, #192]	; (8004304 <HAL_RCC_OscConfig+0x2b4>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fe fcba 	bl	8002bc0 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004250:	f7fe fcb6 	bl	8002bc0 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e15b      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x200>
 800426e:	e015      	b.n	800429c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x2b4>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004276:	f7fe fca3 	bl	8002bc0 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427e:	f7fe fc9f 	bl	8002bc0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e144      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004290:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80a0 	beq.w	80043ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a0e      	ldr	r2, [pc, #56]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_OscConfig+0x2b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d121      	bne.n	800432a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <HAL_RCC_OscConfig+0x2b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a07      	ldr	r2, [pc, #28]	; (8004308 <HAL_RCC_OscConfig+0x2b8>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f2:	f7fe fc65 	bl	8002bc0 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	e011      	b.n	800431e <HAL_RCC_OscConfig+0x2ce>
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800
 8004300:	42470000 	.word	0x42470000
 8004304:	42470e80 	.word	0x42470e80
 8004308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430c:	f7fe fc58 	bl	8002bc0 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0fd      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431e:	4b81      	ldr	r3, [pc, #516]	; (8004524 <HAL_RCC_OscConfig+0x4d4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d106      	bne.n	8004340 <HAL_RCC_OscConfig+0x2f0>
 8004332:	4b7d      	ldr	r3, [pc, #500]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a7c      	ldr	r2, [pc, #496]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	e01c      	b.n	800437a <HAL_RCC_OscConfig+0x32a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b05      	cmp	r3, #5
 8004346:	d10c      	bne.n	8004362 <HAL_RCC_OscConfig+0x312>
 8004348:	4b77      	ldr	r3, [pc, #476]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a76      	ldr	r2, [pc, #472]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	4b74      	ldr	r3, [pc, #464]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a73      	ldr	r2, [pc, #460]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
 8004360:	e00b      	b.n	800437a <HAL_RCC_OscConfig+0x32a>
 8004362:	4b71      	ldr	r3, [pc, #452]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a70      	ldr	r2, [pc, #448]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
 800436e:	4b6e      	ldr	r3, [pc, #440]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a6d      	ldr	r2, [pc, #436]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fe fc1d 	bl	8002bc0 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fe fc19 	bl	8002bc0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0bc      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	4b61      	ldr	r3, [pc, #388]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ee      	beq.n	800438a <HAL_RCC_OscConfig+0x33a>
 80043ac:	e014      	b.n	80043d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ae:	f7fe fc07 	bl	8002bc0 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fe fc03 	bl	8002bc0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0a6      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043cc:	4b56      	ldr	r3, [pc, #344]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ee      	bne.n	80043b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043de:	4b52      	ldr	r3, [pc, #328]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a51      	ldr	r2, [pc, #324]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 80043e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8092 	beq.w	8004518 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f4:	4b4c      	ldr	r3, [pc, #304]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d05c      	beq.n	80044ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d141      	bne.n	800448c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004408:	4b48      	ldr	r3, [pc, #288]	; (800452c <HAL_RCC_OscConfig+0x4dc>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fe fbd7 	bl	8002bc0 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004416:	f7fe fbd3 	bl	8002bc0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e078      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004428:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	019b      	lsls	r3, r3, #6
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	3b01      	subs	r3, #1
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	061b      	lsls	r3, r3, #24
 8004458:	4933      	ldr	r1, [pc, #204]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800445e:	4b33      	ldr	r3, [pc, #204]	; (800452c <HAL_RCC_OscConfig+0x4dc>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fe fbac 	bl	8002bc0 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446c:	f7fe fba8 	bl	8002bc0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e04d      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447e:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x41c>
 800448a:	e045      	b.n	8004518 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448c:	4b27      	ldr	r3, [pc, #156]	; (800452c <HAL_RCC_OscConfig+0x4dc>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004492:	f7fe fb95 	bl	8002bc0 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449a:	f7fe fb91 	bl	8002bc0 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e036      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ac:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f0      	bne.n	800449a <HAL_RCC_OscConfig+0x44a>
 80044b8:	e02e      	b.n	8004518 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e029      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044c6:	4b18      	ldr	r3, [pc, #96]	; (8004528 <HAL_RCC_OscConfig+0x4d8>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d11c      	bne.n	8004514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d115      	bne.n	8004514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ee:	4013      	ands	r3, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10d      	bne.n	8004514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d106      	bne.n	8004514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40007000 	.word	0x40007000
 8004528:	40023800 	.word	0x40023800
 800452c:	42470060 	.word	0x42470060

08004530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0cc      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4b68      	ldr	r3, [pc, #416]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d90c      	bls.n	800456c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b65      	ldr	r3, [pc, #404]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b63      	ldr	r3, [pc, #396]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0b8      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004584:	4b59      	ldr	r3, [pc, #356]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a58      	ldr	r2, [pc, #352]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800458e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800459c:	4b53      	ldr	r3, [pc, #332]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a52      	ldr	r2, [pc, #328]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	4b50      	ldr	r3, [pc, #320]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	494d      	ldr	r1, [pc, #308]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d044      	beq.n	8004650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	4b47      	ldr	r3, [pc, #284]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d119      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e07f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d003      	beq.n	80045ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ee:	4b3f      	ldr	r3, [pc, #252]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e06f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fe:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e067      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460e:	4b37      	ldr	r3, [pc, #220]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4934      	ldr	r1, [pc, #208]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004620:	f7fe face 	bl	8002bc0 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	e00a      	b.n	800463e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004628:	f7fe faca 	bl	8002bc0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e04f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 020c 	and.w	r2, r3, #12
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	429a      	cmp	r2, r3
 800464e:	d1eb      	bne.n	8004628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004650:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d20c      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e032      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4916      	ldr	r1, [pc, #88]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	490e      	ldr	r1, [pc, #56]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046b6:	f000 f821 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80046ba:	4601      	mov	r1, r0
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	5cd3      	ldrb	r3, [r2, r3]
 80046ca:	fa21 f303 	lsr.w	r3, r1, r3
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0x1c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fa2e 	bl	8002b38 <HAL_InitTick>

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023c00 	.word	0x40023c00
 80046ec:	40023800 	.word	0x40023800
 80046f0:	0800b500 	.word	0x0800b500
 80046f4:	20000018 	.word	0x20000018
 80046f8:	2000001c 	.word	0x2000001c

080046fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	2300      	movs	r3, #0
 800470c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004712:	4b63      	ldr	r3, [pc, #396]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b04      	cmp	r3, #4
 800471c:	d007      	beq.n	800472e <HAL_RCC_GetSysClockFreq+0x32>
 800471e:	2b08      	cmp	r3, #8
 8004720:	d008      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x38>
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 80b4 	bne.w	8004890 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004728:	4b5e      	ldr	r3, [pc, #376]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800472a:	60bb      	str	r3, [r7, #8]
       break;
 800472c:	e0b3      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472e:	4b5e      	ldr	r3, [pc, #376]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004730:	60bb      	str	r3, [r7, #8]
      break;
 8004732:	e0b0      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004734:	4b5a      	ldr	r3, [pc, #360]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473e:	4b58      	ldr	r3, [pc, #352]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d04a      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474a:	4b55      	ldr	r3, [pc, #340]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	099b      	lsrs	r3, r3, #6
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	ea03 0501 	and.w	r5, r3, r1
 8004760:	ea04 0602 	and.w	r6, r4, r2
 8004764:	4629      	mov	r1, r5
 8004766:	4632      	mov	r2, r6
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	f04f 0400 	mov.w	r4, #0
 8004770:	0154      	lsls	r4, r2, #5
 8004772:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004776:	014b      	lsls	r3, r1, #5
 8004778:	4619      	mov	r1, r3
 800477a:	4622      	mov	r2, r4
 800477c:	1b49      	subs	r1, r1, r5
 800477e:	eb62 0206 	sbc.w	r2, r2, r6
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	0194      	lsls	r4, r2, #6
 800478c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004790:	018b      	lsls	r3, r1, #6
 8004792:	1a5b      	subs	r3, r3, r1
 8004794:	eb64 0402 	sbc.w	r4, r4, r2
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	00e2      	lsls	r2, r4, #3
 80047a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047a6:	00d9      	lsls	r1, r3, #3
 80047a8:	460b      	mov	r3, r1
 80047aa:	4614      	mov	r4, r2
 80047ac:	195b      	adds	r3, r3, r5
 80047ae:	eb44 0406 	adc.w	r4, r4, r6
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	0262      	lsls	r2, r4, #9
 80047bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047c0:	0259      	lsls	r1, r3, #9
 80047c2:	460b      	mov	r3, r1
 80047c4:	4614      	mov	r4, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	4621      	mov	r1, r4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	461a      	mov	r2, r3
 80047d2:	4623      	mov	r3, r4
 80047d4:	f7fc fa60 	bl	8000c98 <__aeabi_uldivmod>
 80047d8:	4603      	mov	r3, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e049      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e0:	4b2f      	ldr	r3, [pc, #188]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	099b      	lsrs	r3, r3, #6
 80047e6:	f04f 0400 	mov.w	r4, #0
 80047ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	ea03 0501 	and.w	r5, r3, r1
 80047f6:	ea04 0602 	and.w	r6, r4, r2
 80047fa:	4629      	mov	r1, r5
 80047fc:	4632      	mov	r2, r6
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	0154      	lsls	r4, r2, #5
 8004808:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800480c:	014b      	lsls	r3, r1, #5
 800480e:	4619      	mov	r1, r3
 8004810:	4622      	mov	r2, r4
 8004812:	1b49      	subs	r1, r1, r5
 8004814:	eb62 0206 	sbc.w	r2, r2, r6
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	f04f 0400 	mov.w	r4, #0
 8004820:	0194      	lsls	r4, r2, #6
 8004822:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004826:	018b      	lsls	r3, r1, #6
 8004828:	1a5b      	subs	r3, r3, r1
 800482a:	eb64 0402 	sbc.w	r4, r4, r2
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	00e2      	lsls	r2, r4, #3
 8004838:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800483c:	00d9      	lsls	r1, r3, #3
 800483e:	460b      	mov	r3, r1
 8004840:	4614      	mov	r4, r2
 8004842:	195b      	adds	r3, r3, r5
 8004844:	eb44 0406 	adc.w	r4, r4, r6
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	02a2      	lsls	r2, r4, #10
 8004852:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004856:	0299      	lsls	r1, r3, #10
 8004858:	460b      	mov	r3, r1
 800485a:	4614      	mov	r4, r2
 800485c:	4618      	mov	r0, r3
 800485e:	4621      	mov	r1, r4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f04f 0400 	mov.w	r4, #0
 8004866:	461a      	mov	r2, r3
 8004868:	4623      	mov	r3, r4
 800486a:	f7fc fa15 	bl	8000c98 <__aeabi_uldivmod>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	3301      	adds	r3, #1
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	60bb      	str	r3, [r7, #8]
      break;
 800488e:	e002      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004892:	60bb      	str	r3, [r7, #8]
      break;
 8004894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004896:	68bb      	ldr	r3, [r7, #8]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	00f42400 	.word	0x00f42400
 80048a8:	007a1200 	.word	0x007a1200

080048ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000018 	.word	0x20000018

080048c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048c8:	f7ff fff0 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048cc:	4601      	mov	r1, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0a9b      	lsrs	r3, r3, #10
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4a03      	ldr	r2, [pc, #12]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	0800b510 	.word	0x0800b510

080048ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048f0:	f7ff ffdc 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048f4:	4601      	mov	r1, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK2Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0b5b      	lsrs	r3, r3, #13
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4a03      	ldr	r2, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	0800b510 	.word	0x0800b510

08004914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e056      	b.n	80049d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fd ff41 	bl	80027c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	ea42 0103 	orr.w	r1, r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	0c1b      	lsrs	r3, r3, #16
 80049a4:	f003 0104 	and.w	r1, r3, #4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_SPI_Transmit_IT+0x20>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e067      	b.n	8004acc <HAL_SPI_Transmit_IT+0xf0>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_Transmit_IT+0x34>
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a14:	e055      	b.n	8004ac2 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d002      	beq.n	8004a28 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
 8004a24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a26:	e04c      	b.n	8004ac2 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
 8004a40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	88fa      	ldrh	r2, [r7, #6]
 8004a46:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <HAL_SPI_Transmit_IT+0xfc>)
 8004a6c:	645a      	str	r2, [r3, #68]	; 0x44
 8004a6e:	e002      	b.n	8004a76 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a1a      	ldr	r2, [pc, #104]	; (8004adc <HAL_SPI_Transmit_IT+0x100>)
 8004a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7e:	d107      	bne.n	8004a90 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004a9e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b40      	cmp	r3, #64	; 0x40
 8004aac:	d008      	beq.n	8004ac0 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e000      	b.n	8004ac2 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004ac0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	08004d63 	.word	0x08004d63
 8004adc:	08004d1d 	.word	0x08004d1d

08004ae0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	099b      	lsrs	r3, r3, #6
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
    return;
 8004b22:	e0d8      	b.n	8004cd6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_SPI_IRQHandler+0x66>
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	09db      	lsrs	r3, r3, #7
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
    return;
 8004b44:	e0c7      	b.n	8004cd6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <HAL_SPI_IRQHandler+0x8c>
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	099b      	lsrs	r3, r3, #6
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 80b5 	beq.w	8004cd6 <HAL_SPI_IRQHandler+0x1f6>
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80ae 	beq.w	8004cd6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d023      	beq.n	8004bce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d011      	beq.n	8004bb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	f043 0204 	orr.w	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	e00b      	b.n	8004bce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	693b      	ldr	r3, [r7, #16]
        return;
 8004bcc:	e083      	b.n	8004cd6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d014      	beq.n	8004c04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0201 	orr.w	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00c      	beq.n	8004c2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f043 0208 	orr.w	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d050      	beq.n	8004cd4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <HAL_SPI_IRQHandler+0x17e>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d034      	beq.n	8004cc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0203 	bic.w	r2, r2, #3
 8004c6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d011      	beq.n	8004c9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <HAL_SPI_IRQHandler+0x1fc>)
 8004c7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fda6 	bl	80037d4 <HAL_DMA_Abort_IT>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca6:	4a0d      	ldr	r2, [pc, #52]	; (8004cdc <HAL_SPI_IRQHandler+0x1fc>)
 8004ca8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fd90 	bl	80037d4 <HAL_DMA_Abort_IT>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004cc6:	e003      	b.n	8004cd0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f809 	bl	8004ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cce:	e000      	b.n	8004cd2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004cd0:	bf00      	nop
    return;
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
  }
}
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	08004cf5 	.word	0x08004cf5

08004ce0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff ffe6 	bl	8004ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f8d3 	bl	8004f00 <SPI_CloseTx_ISR>
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f8b1 	bl	8004f00 <SPI_CloseTx_ISR>
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db6:	e04c      	b.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d048      	beq.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004dc0:	f7fd fefe 	bl	8002bc0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d902      	bls.n	8004dd6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d13d      	bne.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dee:	d111      	bne.n	8004e14 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df8:	d004      	beq.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e02:	d107      	bne.n	8004e14 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1c:	d10f      	bne.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e00f      	b.n	8004e72 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	bf0c      	ite	eq
 8004e62:	2301      	moveq	r3, #1
 8004e64:	2300      	movne	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d1a3      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e88:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <SPI_EndRxTxTransaction+0x7c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1b      	ldr	r2, [pc, #108]	; (8004efc <SPI_EndRxTxTransaction+0x80>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	0d5b      	lsrs	r3, r3, #21
 8004e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e98:	fb02 f303 	mul.w	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea6:	d112      	bne.n	8004ece <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2180      	movs	r1, #128	; 0x80
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f7ff ff77 	bl	8004da6 <SPI_WaitFlagStateUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d016      	beq.n	8004eec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e00f      	b.n	8004eee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d0f2      	beq.n	8004ece <SPI_EndRxTxTransaction+0x52>
 8004ee8:	e000      	b.n	8004eec <SPI_EndRxTxTransaction+0x70>
        break;
 8004eea:	bf00      	nop
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000018 	.word	0x20000018
 8004efc:	165e9f81 	.word	0x165e9f81

08004f00 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004f08:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <SPI_CloseTx_ISR+0xbc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <SPI_CloseTx_ISR+0xc0>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	0a5b      	lsrs	r3, r3, #9
 8004f14:	2264      	movs	r2, #100	; 0x64
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f1c:	f7fd fe50 	bl	8002bc0 <HAL_GetTick>
 8004f20:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f34:	e009      	b.n	8004f4a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0eb      	beq.n	8004f22 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f58:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	2164      	movs	r1, #100	; 0x64
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff ff8c 	bl	8004e7c <SPI_EndRxTxTransaction>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fe9b 	bl	8004ce0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004faa:	e002      	b.n	8004fb2 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fd f9d3 	bl	8002358 <HAL_SPI_TxCpltCallback>
}
 8004fb2:	bf00      	nop
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000018 	.word	0x20000018
 8004fc0:	057619f1 	.word	0x057619f1

08004fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e01d      	b.n	8005012 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fd fc3c 	bl	8002868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 f908 	bl	8005218 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b06      	cmp	r3, #6
 800503a:	d007      	beq.n	800504c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b06      	cmp	r3, #6
 800508a:	d007      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_ConfigClockSource+0x18>
 80050be:	2302      	movs	r3, #2
 80050c0:	e0a6      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x166>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d067      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x120>
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d80b      	bhi.n	8005116 <HAL_TIM_ConfigClockSource+0x6c>
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d073      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x140>
 8005102:	2b10      	cmp	r3, #16
 8005104:	d802      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x62>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d06f      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800510a:	e078      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800510c:	2b20      	cmp	r3, #32
 800510e:	d06c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x140>
 8005110:	2b30      	cmp	r3, #48	; 0x30
 8005112:	d06a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005114:	e073      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005116:	2b70      	cmp	r3, #112	; 0x70
 8005118:	d00d      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x8c>
 800511a:	2b70      	cmp	r3, #112	; 0x70
 800511c:	d804      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x7e>
 800511e:	2b50      	cmp	r3, #80	; 0x50
 8005120:	d033      	beq.n	800518a <HAL_TIM_ConfigClockSource+0xe0>
 8005122:	2b60      	cmp	r3, #96	; 0x60
 8005124:	d041      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005126:	e06a      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d066      	beq.n	80051fc <HAL_TIM_ConfigClockSource+0x152>
 800512e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005132:	d017      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005134:	e063      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 f961 	bl	800540c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005158:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	609a      	str	r2, [r3, #8]
      break;
 8005162:	e04c      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 f94a 	bl	800540c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005186:	609a      	str	r2, [r3, #8]
      break;
 8005188:	e039      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 f8be 	bl	8005318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2150      	movs	r1, #80	; 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f917 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e029      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 f8dd 	bl	8005376 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2160      	movs	r1, #96	; 0x60
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f907 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e019      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 f89e 	bl	8005318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f8f7 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 80051e8:	e009      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 f8ee 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 80051fa:	e000      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a34      	ldr	r2, [pc, #208]	; (80052fc <TIM_Base_SetConfig+0xe4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00f      	beq.n	8005250 <TIM_Base_SetConfig+0x38>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d00b      	beq.n	8005250 <TIM_Base_SetConfig+0x38>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a31      	ldr	r2, [pc, #196]	; (8005300 <TIM_Base_SetConfig+0xe8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d007      	beq.n	8005250 <TIM_Base_SetConfig+0x38>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a30      	ldr	r2, [pc, #192]	; (8005304 <TIM_Base_SetConfig+0xec>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_Base_SetConfig+0x38>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a2f      	ldr	r2, [pc, #188]	; (8005308 <TIM_Base_SetConfig+0xf0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d108      	bne.n	8005262 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a25      	ldr	r2, [pc, #148]	; (80052fc <TIM_Base_SetConfig+0xe4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01b      	beq.n	80052a2 <TIM_Base_SetConfig+0x8a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005270:	d017      	beq.n	80052a2 <TIM_Base_SetConfig+0x8a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a22      	ldr	r2, [pc, #136]	; (8005300 <TIM_Base_SetConfig+0xe8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <TIM_Base_SetConfig+0x8a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a21      	ldr	r2, [pc, #132]	; (8005304 <TIM_Base_SetConfig+0xec>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00f      	beq.n	80052a2 <TIM_Base_SetConfig+0x8a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a20      	ldr	r2, [pc, #128]	; (8005308 <TIM_Base_SetConfig+0xf0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00b      	beq.n	80052a2 <TIM_Base_SetConfig+0x8a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <TIM_Base_SetConfig+0xf4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d007      	beq.n	80052a2 <TIM_Base_SetConfig+0x8a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1e      	ldr	r2, [pc, #120]	; (8005310 <TIM_Base_SetConfig+0xf8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d003      	beq.n	80052a2 <TIM_Base_SetConfig+0x8a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <TIM_Base_SetConfig+0xfc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d108      	bne.n	80052b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a08      	ldr	r2, [pc, #32]	; (80052fc <TIM_Base_SetConfig+0xe4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d103      	bne.n	80052e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	615a      	str	r2, [r3, #20]
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800
 8005308:	40000c00 	.word	0x40000c00
 800530c:	40014000 	.word	0x40014000
 8005310:	40014400 	.word	0x40014400
 8005314:	40014800 	.word	0x40014800

08005318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0201 	bic.w	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f023 030a 	bic.w	r3, r3, #10
 8005354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005376:	b480      	push	{r7}
 8005378:	b087      	sub	sp, #28
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0210 	bic.w	r2, r3, #16
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f043 0307 	orr.w	r3, r3, #7
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	021a      	lsls	r2, r3, #8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	431a      	orrs	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4313      	orrs	r3, r2
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	609a      	str	r2, [r3, #8]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005460:	2302      	movs	r3, #2
 8005462:	e050      	b.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d013      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a16      	ldr	r2, [pc, #88]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a15      	ldr	r2, [pc, #84]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a13      	ldr	r2, [pc, #76]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10c      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40014000 	.word	0x40014000

08005528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e03f      	b.n	80055ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fd f9c2 	bl	80028d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2224      	movs	r2, #36	; 0x24
 8005558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fb97 	bl	8005ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b088      	sub	sp, #32
 80055c6:	af02      	add	r7, sp, #8
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	603b      	str	r3, [r7, #0]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b20      	cmp	r3, #32
 80055e0:	f040 8083 	bne.w	80056ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_Transmit+0x2e>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e07b      	b.n	80056ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Transmit+0x40>
 80055fe:	2302      	movs	r3, #2
 8005600:	e074      	b.n	80056ec <HAL_UART_Transmit+0x12a>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2221      	movs	r2, #33	; 0x21
 8005614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005618:	f7fd fad2 	bl	8002bc0 <HAL_GetTick>
 800561c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005632:	e042      	b.n	80056ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564a:	d122      	bne.n	8005692 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2200      	movs	r2, #0
 8005654:	2180      	movs	r1, #128	; 0x80
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f9b6 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e042      	b.n	80056ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005678:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	3302      	adds	r3, #2
 8005686:	60bb      	str	r3, [r7, #8]
 8005688:	e017      	b.n	80056ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	3301      	adds	r3, #1
 800568e:	60bb      	str	r3, [r7, #8]
 8005690:	e013      	b.n	80056ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2200      	movs	r2, #0
 800569a:	2180      	movs	r1, #128	; 0x80
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f993 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e01f      	b.n	80056ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	60ba      	str	r2, [r7, #8]
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1b7      	bne.n	8005634 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f97a 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e006      	b.n	80056ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b20      	cmp	r3, #32
 800570c:	d140      	bne.n	8005790 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_UART_Receive_IT+0x26>
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e039      	b.n	8005792 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_UART_Receive_IT+0x38>
 8005728:	2302      	movs	r3, #2
 800572a:	e032      	b.n	8005792 <HAL_UART_Receive_IT+0x9e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2222      	movs	r2, #34	; 0x22
 8005750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800576a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695a      	ldr	r2, [r3, #20]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0220 	orr.w	r2, r2, #32
 800578a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	e000      	b.n	8005792 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_UART_IRQHandler+0x52>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9d6 	bl	8005b9c <UART_Receive_IT>
      return;
 80057f0:	e0d1      	b.n	8005996 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80b0 	beq.w	800595a <HAL_UART_IRQHandler+0x1ba>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_UART_IRQHandler+0x70>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80a5 	beq.w	800595a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <HAL_UART_IRQHandler+0x90>
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	f043 0201 	orr.w	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_UART_IRQHandler+0xb0>
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	f043 0202 	orr.w	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_UART_IRQHandler+0xd0>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005868:	f043 0204 	orr.w	r2, r3, #4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00f      	beq.n	800589a <HAL_UART_IRQHandler+0xfa>
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <HAL_UART_IRQHandler+0xee>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005892:	f043 0208 	orr.w	r2, r3, #8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d078      	beq.n	8005994 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <HAL_UART_IRQHandler+0x11c>
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f970 	bl	8005b9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <HAL_UART_IRQHandler+0x144>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d031      	beq.n	8005948 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f8b9 	bl	8005a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d123      	bne.n	8005940 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005906:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005914:	4a21      	ldr	r2, [pc, #132]	; (800599c <HAL_UART_IRQHandler+0x1fc>)
 8005916:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	4618      	mov	r0, r3
 800591e:	f7fd ff59 	bl	80037d4 <HAL_DMA_Abort_IT>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d016      	beq.n	8005956 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005932:	4610      	mov	r0, r2
 8005934:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005936:	e00e      	b.n	8005956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f83b 	bl	80059b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593e:	e00a      	b.n	8005956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f837 	bl	80059b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005946:	e006      	b.n	8005956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f833 	bl	80059b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005954:	e01e      	b.n	8005994 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005956:	bf00      	nop
    return;
 8005958:	e01c      	b.n	8005994 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_UART_IRQHandler+0x1d6>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8a6 	bl	8005ac0 <UART_Transmit_IT>
    return;
 8005974:	e00f      	b.n	8005996 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_UART_IRQHandler+0x1f6>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8ee 	bl	8005b6c <UART_EndTransmit_IT>
    return;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005994:	bf00      	nop
  }
}
 8005996:	3720      	adds	r7, #32
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	08005a99 	.word	0x08005a99

080059a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d8:	e02c      	b.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d028      	beq.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059e8:	f7fd f8ea 	bl	8002bc0 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d21d      	bcs.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e00f      	b.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d0c3      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f7ff ff7e 	bl	80059b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b21      	cmp	r3, #33	; 0x21
 8005ad2:	d144      	bne.n	8005b5e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005adc:	d11a      	bne.n	8005b14 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]
 8005b06:	e00e      	b.n	8005b26 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]
 8005b12:	e008      	b.n	8005b26 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	1c59      	adds	r1, r3, #1
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6211      	str	r1, [r2, #32]
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4619      	mov	r1, r3
 8005b34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10f      	bne.n	8005b5a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e000      	b.n	8005b60 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b5e:	2302      	movs	r3, #2
  }
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff ff07 	bl	80059a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b22      	cmp	r3, #34	; 0x22
 8005bae:	d171      	bne.n	8005c94 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb8:	d123      	bne.n	8005c02 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10e      	bne.n	8005be6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	1c9a      	adds	r2, r3, #2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	629a      	str	r2, [r3, #40]	; 0x28
 8005be4:	e029      	b.n	8005c3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005c00:	e01b      	b.n	8005c3a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6858      	ldr	r0, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	1c59      	adds	r1, r3, #1
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6291      	str	r1, [r2, #40]	; 0x28
 8005c1a:	b2c2      	uxtb	r2, r0
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e00c      	b.n	8005c3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	1c58      	adds	r0, r3, #1
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	6288      	str	r0, [r1, #40]	; 0x28
 8005c32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4619      	mov	r1, r3
 8005c48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d120      	bne.n	8005c90 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0220 	bic.w	r2, r2, #32
 8005c5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fc fbc8 	bl	800241c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e002      	b.n	8005c96 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ce2:	f023 030c 	bic.w	r3, r3, #12
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	430b      	orrs	r3, r1
 8005cee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0e:	f040 818b 	bne.w	8006028 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4ac1      	ldr	r2, [pc, #772]	; (800601c <UART_SetConfig+0x37c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d005      	beq.n	8005d28 <UART_SetConfig+0x88>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4abf      	ldr	r2, [pc, #764]	; (8006020 <UART_SetConfig+0x380>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	f040 80bd 	bne.w	8005ea2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d28:	f7fe fde0 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 8005d2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	461d      	mov	r5, r3
 8005d32:	f04f 0600 	mov.w	r6, #0
 8005d36:	46a8      	mov	r8, r5
 8005d38:	46b1      	mov	r9, r6
 8005d3a:	eb18 0308 	adds.w	r3, r8, r8
 8005d3e:	eb49 0409 	adc.w	r4, r9, r9
 8005d42:	4698      	mov	r8, r3
 8005d44:	46a1      	mov	r9, r4
 8005d46:	eb18 0805 	adds.w	r8, r8, r5
 8005d4a:	eb49 0906 	adc.w	r9, r9, r6
 8005d4e:	f04f 0100 	mov.w	r1, #0
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d62:	4688      	mov	r8, r1
 8005d64:	4691      	mov	r9, r2
 8005d66:	eb18 0005 	adds.w	r0, r8, r5
 8005d6a:	eb49 0106 	adc.w	r1, r9, r6
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	461d      	mov	r5, r3
 8005d74:	f04f 0600 	mov.w	r6, #0
 8005d78:	196b      	adds	r3, r5, r5
 8005d7a:	eb46 0406 	adc.w	r4, r6, r6
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4623      	mov	r3, r4
 8005d82:	f7fa ff89 	bl	8000c98 <__aeabi_uldivmod>
 8005d86:	4603      	mov	r3, r0
 8005d88:	460c      	mov	r4, r1
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4ba5      	ldr	r3, [pc, #660]	; (8006024 <UART_SetConfig+0x384>)
 8005d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	461d      	mov	r5, r3
 8005d9c:	f04f 0600 	mov.w	r6, #0
 8005da0:	46a9      	mov	r9, r5
 8005da2:	46b2      	mov	sl, r6
 8005da4:	eb19 0309 	adds.w	r3, r9, r9
 8005da8:	eb4a 040a 	adc.w	r4, sl, sl
 8005dac:	4699      	mov	r9, r3
 8005dae:	46a2      	mov	sl, r4
 8005db0:	eb19 0905 	adds.w	r9, r9, r5
 8005db4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005db8:	f04f 0100 	mov.w	r1, #0
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dcc:	4689      	mov	r9, r1
 8005dce:	4692      	mov	sl, r2
 8005dd0:	eb19 0005 	adds.w	r0, r9, r5
 8005dd4:	eb4a 0106 	adc.w	r1, sl, r6
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	461d      	mov	r5, r3
 8005dde:	f04f 0600 	mov.w	r6, #0
 8005de2:	196b      	adds	r3, r5, r5
 8005de4:	eb46 0406 	adc.w	r4, r6, r6
 8005de8:	461a      	mov	r2, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	f7fa ff54 	bl	8000c98 <__aeabi_uldivmod>
 8005df0:	4603      	mov	r3, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	461a      	mov	r2, r3
 8005df6:	4b8b      	ldr	r3, [pc, #556]	; (8006024 <UART_SetConfig+0x384>)
 8005df8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	2164      	movs	r1, #100	; 0x64
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	3332      	adds	r3, #50	; 0x32
 8005e0a:	4a86      	ldr	r2, [pc, #536]	; (8006024 <UART_SetConfig+0x384>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e18:	4498      	add	r8, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	f04f 0600 	mov.w	r6, #0
 8005e22:	46a9      	mov	r9, r5
 8005e24:	46b2      	mov	sl, r6
 8005e26:	eb19 0309 	adds.w	r3, r9, r9
 8005e2a:	eb4a 040a 	adc.w	r4, sl, sl
 8005e2e:	4699      	mov	r9, r3
 8005e30:	46a2      	mov	sl, r4
 8005e32:	eb19 0905 	adds.w	r9, r9, r5
 8005e36:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e3a:	f04f 0100 	mov.w	r1, #0
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e4e:	4689      	mov	r9, r1
 8005e50:	4692      	mov	sl, r2
 8005e52:	eb19 0005 	adds.w	r0, r9, r5
 8005e56:	eb4a 0106 	adc.w	r1, sl, r6
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	461d      	mov	r5, r3
 8005e60:	f04f 0600 	mov.w	r6, #0
 8005e64:	196b      	adds	r3, r5, r5
 8005e66:	eb46 0406 	adc.w	r4, r6, r6
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4623      	mov	r3, r4
 8005e6e:	f7fa ff13 	bl	8000c98 <__aeabi_uldivmod>
 8005e72:	4603      	mov	r3, r0
 8005e74:	460c      	mov	r4, r1
 8005e76:	461a      	mov	r2, r3
 8005e78:	4b6a      	ldr	r3, [pc, #424]	; (8006024 <UART_SetConfig+0x384>)
 8005e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	2164      	movs	r1, #100	; 0x64
 8005e82:	fb01 f303 	mul.w	r3, r1, r3
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	3332      	adds	r3, #50	; 0x32
 8005e8c:	4a65      	ldr	r2, [pc, #404]	; (8006024 <UART_SetConfig+0x384>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	f003 0207 	and.w	r2, r3, #7
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4442      	add	r2, r8
 8005e9e:	609a      	str	r2, [r3, #8]
 8005ea0:	e26f      	b.n	8006382 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ea2:	f7fe fd0f 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8005ea6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	461d      	mov	r5, r3
 8005eac:	f04f 0600 	mov.w	r6, #0
 8005eb0:	46a8      	mov	r8, r5
 8005eb2:	46b1      	mov	r9, r6
 8005eb4:	eb18 0308 	adds.w	r3, r8, r8
 8005eb8:	eb49 0409 	adc.w	r4, r9, r9
 8005ebc:	4698      	mov	r8, r3
 8005ebe:	46a1      	mov	r9, r4
 8005ec0:	eb18 0805 	adds.w	r8, r8, r5
 8005ec4:	eb49 0906 	adc.w	r9, r9, r6
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ed4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ed8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005edc:	4688      	mov	r8, r1
 8005ede:	4691      	mov	r9, r2
 8005ee0:	eb18 0005 	adds.w	r0, r8, r5
 8005ee4:	eb49 0106 	adc.w	r1, r9, r6
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	461d      	mov	r5, r3
 8005eee:	f04f 0600 	mov.w	r6, #0
 8005ef2:	196b      	adds	r3, r5, r5
 8005ef4:	eb46 0406 	adc.w	r4, r6, r6
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4623      	mov	r3, r4
 8005efc:	f7fa fecc 	bl	8000c98 <__aeabi_uldivmod>
 8005f00:	4603      	mov	r3, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	461a      	mov	r2, r3
 8005f06:	4b47      	ldr	r3, [pc, #284]	; (8006024 <UART_SetConfig+0x384>)
 8005f08:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	461d      	mov	r5, r3
 8005f16:	f04f 0600 	mov.w	r6, #0
 8005f1a:	46a9      	mov	r9, r5
 8005f1c:	46b2      	mov	sl, r6
 8005f1e:	eb19 0309 	adds.w	r3, r9, r9
 8005f22:	eb4a 040a 	adc.w	r4, sl, sl
 8005f26:	4699      	mov	r9, r3
 8005f28:	46a2      	mov	sl, r4
 8005f2a:	eb19 0905 	adds.w	r9, r9, r5
 8005f2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f32:	f04f 0100 	mov.w	r1, #0
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f46:	4689      	mov	r9, r1
 8005f48:	4692      	mov	sl, r2
 8005f4a:	eb19 0005 	adds.w	r0, r9, r5
 8005f4e:	eb4a 0106 	adc.w	r1, sl, r6
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	461d      	mov	r5, r3
 8005f58:	f04f 0600 	mov.w	r6, #0
 8005f5c:	196b      	adds	r3, r5, r5
 8005f5e:	eb46 0406 	adc.w	r4, r6, r6
 8005f62:	461a      	mov	r2, r3
 8005f64:	4623      	mov	r3, r4
 8005f66:	f7fa fe97 	bl	8000c98 <__aeabi_uldivmod>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4b2c      	ldr	r3, [pc, #176]	; (8006024 <UART_SetConfig+0x384>)
 8005f72:	fba3 1302 	umull	r1, r3, r3, r2
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	2164      	movs	r1, #100	; 0x64
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	3332      	adds	r3, #50	; 0x32
 8005f84:	4a27      	ldr	r2, [pc, #156]	; (8006024 <UART_SetConfig+0x384>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f92:	4498      	add	r8, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	461d      	mov	r5, r3
 8005f98:	f04f 0600 	mov.w	r6, #0
 8005f9c:	46a9      	mov	r9, r5
 8005f9e:	46b2      	mov	sl, r6
 8005fa0:	eb19 0309 	adds.w	r3, r9, r9
 8005fa4:	eb4a 040a 	adc.w	r4, sl, sl
 8005fa8:	4699      	mov	r9, r3
 8005faa:	46a2      	mov	sl, r4
 8005fac:	eb19 0905 	adds.w	r9, r9, r5
 8005fb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fb4:	f04f 0100 	mov.w	r1, #0
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fc8:	4689      	mov	r9, r1
 8005fca:	4692      	mov	sl, r2
 8005fcc:	eb19 0005 	adds.w	r0, r9, r5
 8005fd0:	eb4a 0106 	adc.w	r1, sl, r6
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	461d      	mov	r5, r3
 8005fda:	f04f 0600 	mov.w	r6, #0
 8005fde:	196b      	adds	r3, r5, r5
 8005fe0:	eb46 0406 	adc.w	r4, r6, r6
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4623      	mov	r3, r4
 8005fe8:	f7fa fe56 	bl	8000c98 <__aeabi_uldivmod>
 8005fec:	4603      	mov	r3, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <UART_SetConfig+0x384>)
 8005ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	2164      	movs	r1, #100	; 0x64
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	3332      	adds	r3, #50	; 0x32
 8006006:	4a07      	ldr	r2, [pc, #28]	; (8006024 <UART_SetConfig+0x384>)
 8006008:	fba2 2303 	umull	r2, r3, r2, r3
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f003 0207 	and.w	r2, r3, #7
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4442      	add	r2, r8
 8006018:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800601a:	e1b2      	b.n	8006382 <UART_SetConfig+0x6e2>
 800601c:	40011000 	.word	0x40011000
 8006020:	40011400 	.word	0x40011400
 8006024:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4ad7      	ldr	r2, [pc, #860]	; (800638c <UART_SetConfig+0x6ec>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d005      	beq.n	800603e <UART_SetConfig+0x39e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4ad6      	ldr	r2, [pc, #856]	; (8006390 <UART_SetConfig+0x6f0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	f040 80d1 	bne.w	80061e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800603e:	f7fe fc55 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 8006042:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	469a      	mov	sl, r3
 8006048:	f04f 0b00 	mov.w	fp, #0
 800604c:	46d0      	mov	r8, sl
 800604e:	46d9      	mov	r9, fp
 8006050:	eb18 0308 	adds.w	r3, r8, r8
 8006054:	eb49 0409 	adc.w	r4, r9, r9
 8006058:	4698      	mov	r8, r3
 800605a:	46a1      	mov	r9, r4
 800605c:	eb18 080a 	adds.w	r8, r8, sl
 8006060:	eb49 090b 	adc.w	r9, r9, fp
 8006064:	f04f 0100 	mov.w	r1, #0
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006070:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006074:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006078:	4688      	mov	r8, r1
 800607a:	4691      	mov	r9, r2
 800607c:	eb1a 0508 	adds.w	r5, sl, r8
 8006080:	eb4b 0609 	adc.w	r6, fp, r9
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	4619      	mov	r1, r3
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	f04f 0400 	mov.w	r4, #0
 8006096:	0094      	lsls	r4, r2, #2
 8006098:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800609c:	008b      	lsls	r3, r1, #2
 800609e:	461a      	mov	r2, r3
 80060a0:	4623      	mov	r3, r4
 80060a2:	4628      	mov	r0, r5
 80060a4:	4631      	mov	r1, r6
 80060a6:	f7fa fdf7 	bl	8000c98 <__aeabi_uldivmod>
 80060aa:	4603      	mov	r3, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	461a      	mov	r2, r3
 80060b0:	4bb8      	ldr	r3, [pc, #736]	; (8006394 <UART_SetConfig+0x6f4>)
 80060b2:	fba3 2302 	umull	r2, r3, r3, r2
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	469b      	mov	fp, r3
 80060c0:	f04f 0c00 	mov.w	ip, #0
 80060c4:	46d9      	mov	r9, fp
 80060c6:	46e2      	mov	sl, ip
 80060c8:	eb19 0309 	adds.w	r3, r9, r9
 80060cc:	eb4a 040a 	adc.w	r4, sl, sl
 80060d0:	4699      	mov	r9, r3
 80060d2:	46a2      	mov	sl, r4
 80060d4:	eb19 090b 	adds.w	r9, r9, fp
 80060d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060f0:	4689      	mov	r9, r1
 80060f2:	4692      	mov	sl, r2
 80060f4:	eb1b 0509 	adds.w	r5, fp, r9
 80060f8:	eb4c 060a 	adc.w	r6, ip, sl
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4619      	mov	r1, r3
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	f04f 0400 	mov.w	r4, #0
 800610e:	0094      	lsls	r4, r2, #2
 8006110:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006114:	008b      	lsls	r3, r1, #2
 8006116:	461a      	mov	r2, r3
 8006118:	4623      	mov	r3, r4
 800611a:	4628      	mov	r0, r5
 800611c:	4631      	mov	r1, r6
 800611e:	f7fa fdbb 	bl	8000c98 <__aeabi_uldivmod>
 8006122:	4603      	mov	r3, r0
 8006124:	460c      	mov	r4, r1
 8006126:	461a      	mov	r2, r3
 8006128:	4b9a      	ldr	r3, [pc, #616]	; (8006394 <UART_SetConfig+0x6f4>)
 800612a:	fba3 1302 	umull	r1, r3, r3, r2
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	2164      	movs	r1, #100	; 0x64
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	3332      	adds	r3, #50	; 0x32
 800613c:	4a95      	ldr	r2, [pc, #596]	; (8006394 <UART_SetConfig+0x6f4>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006148:	4498      	add	r8, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	469b      	mov	fp, r3
 800614e:	f04f 0c00 	mov.w	ip, #0
 8006152:	46d9      	mov	r9, fp
 8006154:	46e2      	mov	sl, ip
 8006156:	eb19 0309 	adds.w	r3, r9, r9
 800615a:	eb4a 040a 	adc.w	r4, sl, sl
 800615e:	4699      	mov	r9, r3
 8006160:	46a2      	mov	sl, r4
 8006162:	eb19 090b 	adds.w	r9, r9, fp
 8006166:	eb4a 0a0c 	adc.w	sl, sl, ip
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006176:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800617a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800617e:	4689      	mov	r9, r1
 8006180:	4692      	mov	sl, r2
 8006182:	eb1b 0509 	adds.w	r5, fp, r9
 8006186:	eb4c 060a 	adc.w	r6, ip, sl
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	4619      	mov	r1, r3
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	f04f 0400 	mov.w	r4, #0
 800619c:	0094      	lsls	r4, r2, #2
 800619e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061a2:	008b      	lsls	r3, r1, #2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4623      	mov	r3, r4
 80061a8:	4628      	mov	r0, r5
 80061aa:	4631      	mov	r1, r6
 80061ac:	f7fa fd74 	bl	8000c98 <__aeabi_uldivmod>
 80061b0:	4603      	mov	r3, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b77      	ldr	r3, [pc, #476]	; (8006394 <UART_SetConfig+0x6f4>)
 80061b8:	fba3 1302 	umull	r1, r3, r3, r2
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	2164      	movs	r1, #100	; 0x64
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	3332      	adds	r3, #50	; 0x32
 80061ca:	4a72      	ldr	r2, [pc, #456]	; (8006394 <UART_SetConfig+0x6f4>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4442      	add	r2, r8
 80061dc:	609a      	str	r2, [r3, #8]
 80061de:	e0d0      	b.n	8006382 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061e0:	f7fe fb70 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 80061e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	469a      	mov	sl, r3
 80061ea:	f04f 0b00 	mov.w	fp, #0
 80061ee:	46d0      	mov	r8, sl
 80061f0:	46d9      	mov	r9, fp
 80061f2:	eb18 0308 	adds.w	r3, r8, r8
 80061f6:	eb49 0409 	adc.w	r4, r9, r9
 80061fa:	4698      	mov	r8, r3
 80061fc:	46a1      	mov	r9, r4
 80061fe:	eb18 080a 	adds.w	r8, r8, sl
 8006202:	eb49 090b 	adc.w	r9, r9, fp
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006212:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006216:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800621a:	4688      	mov	r8, r1
 800621c:	4691      	mov	r9, r2
 800621e:	eb1a 0508 	adds.w	r5, sl, r8
 8006222:	eb4b 0609 	adc.w	r6, fp, r9
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	4619      	mov	r1, r3
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	f04f 0400 	mov.w	r4, #0
 8006238:	0094      	lsls	r4, r2, #2
 800623a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800623e:	008b      	lsls	r3, r1, #2
 8006240:	461a      	mov	r2, r3
 8006242:	4623      	mov	r3, r4
 8006244:	4628      	mov	r0, r5
 8006246:	4631      	mov	r1, r6
 8006248:	f7fa fd26 	bl	8000c98 <__aeabi_uldivmod>
 800624c:	4603      	mov	r3, r0
 800624e:	460c      	mov	r4, r1
 8006250:	461a      	mov	r2, r3
 8006252:	4b50      	ldr	r3, [pc, #320]	; (8006394 <UART_SetConfig+0x6f4>)
 8006254:	fba3 2302 	umull	r2, r3, r3, r2
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	469b      	mov	fp, r3
 8006262:	f04f 0c00 	mov.w	ip, #0
 8006266:	46d9      	mov	r9, fp
 8006268:	46e2      	mov	sl, ip
 800626a:	eb19 0309 	adds.w	r3, r9, r9
 800626e:	eb4a 040a 	adc.w	r4, sl, sl
 8006272:	4699      	mov	r9, r3
 8006274:	46a2      	mov	sl, r4
 8006276:	eb19 090b 	adds.w	r9, r9, fp
 800627a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800627e:	f04f 0100 	mov.w	r1, #0
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800628a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800628e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006292:	4689      	mov	r9, r1
 8006294:	4692      	mov	sl, r2
 8006296:	eb1b 0509 	adds.w	r5, fp, r9
 800629a:	eb4c 060a 	adc.w	r6, ip, sl
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4619      	mov	r1, r3
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	f04f 0400 	mov.w	r4, #0
 80062b0:	0094      	lsls	r4, r2, #2
 80062b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062b6:	008b      	lsls	r3, r1, #2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4623      	mov	r3, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	4631      	mov	r1, r6
 80062c0:	f7fa fcea 	bl	8000c98 <__aeabi_uldivmod>
 80062c4:	4603      	mov	r3, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	461a      	mov	r2, r3
 80062ca:	4b32      	ldr	r3, [pc, #200]	; (8006394 <UART_SetConfig+0x6f4>)
 80062cc:	fba3 1302 	umull	r1, r3, r3, r2
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	2164      	movs	r1, #100	; 0x64
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	3332      	adds	r3, #50	; 0x32
 80062de:	4a2d      	ldr	r2, [pc, #180]	; (8006394 <UART_SetConfig+0x6f4>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ea:	4498      	add	r8, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	469b      	mov	fp, r3
 80062f0:	f04f 0c00 	mov.w	ip, #0
 80062f4:	46d9      	mov	r9, fp
 80062f6:	46e2      	mov	sl, ip
 80062f8:	eb19 0309 	adds.w	r3, r9, r9
 80062fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006300:	4699      	mov	r9, r3
 8006302:	46a2      	mov	sl, r4
 8006304:	eb19 090b 	adds.w	r9, r9, fp
 8006308:	eb4a 0a0c 	adc.w	sl, sl, ip
 800630c:	f04f 0100 	mov.w	r1, #0
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006318:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800631c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006320:	4689      	mov	r9, r1
 8006322:	4692      	mov	sl, r2
 8006324:	eb1b 0509 	adds.w	r5, fp, r9
 8006328:	eb4c 060a 	adc.w	r6, ip, sl
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4619      	mov	r1, r3
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	f04f 0400 	mov.w	r4, #0
 800633e:	0094      	lsls	r4, r2, #2
 8006340:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006344:	008b      	lsls	r3, r1, #2
 8006346:	461a      	mov	r2, r3
 8006348:	4623      	mov	r3, r4
 800634a:	4628      	mov	r0, r5
 800634c:	4631      	mov	r1, r6
 800634e:	f7fa fca3 	bl	8000c98 <__aeabi_uldivmod>
 8006352:	4603      	mov	r3, r0
 8006354:	460c      	mov	r4, r1
 8006356:	461a      	mov	r2, r3
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <UART_SetConfig+0x6f4>)
 800635a:	fba3 1302 	umull	r1, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	2164      	movs	r1, #100	; 0x64
 8006362:	fb01 f303 	mul.w	r3, r1, r3
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	3332      	adds	r3, #50	; 0x32
 800636c:	4a09      	ldr	r2, [pc, #36]	; (8006394 <UART_SetConfig+0x6f4>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f003 020f 	and.w	r2, r3, #15
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4442      	add	r2, r8
 800637e:	609a      	str	r2, [r3, #8]
}
 8006380:	e7ff      	b.n	8006382 <UART_SetConfig+0x6e2>
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638c:	40011000 	.word	0x40011000
 8006390:	40011400 	.word	0x40011400
 8006394:	51eb851f 	.word	0x51eb851f

08006398 <__errno>:
 8006398:	4b01      	ldr	r3, [pc, #4]	; (80063a0 <__errno+0x8>)
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000024 	.word	0x20000024

080063a4 <__libc_init_array>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	4e0d      	ldr	r6, [pc, #52]	; (80063dc <__libc_init_array+0x38>)
 80063a8:	4c0d      	ldr	r4, [pc, #52]	; (80063e0 <__libc_init_array+0x3c>)
 80063aa:	1ba4      	subs	r4, r4, r6
 80063ac:	10a4      	asrs	r4, r4, #2
 80063ae:	2500      	movs	r5, #0
 80063b0:	42a5      	cmp	r5, r4
 80063b2:	d109      	bne.n	80063c8 <__libc_init_array+0x24>
 80063b4:	4e0b      	ldr	r6, [pc, #44]	; (80063e4 <__libc_init_array+0x40>)
 80063b6:	4c0c      	ldr	r4, [pc, #48]	; (80063e8 <__libc_init_array+0x44>)
 80063b8:	f004 fd6c 	bl	800ae94 <_init>
 80063bc:	1ba4      	subs	r4, r4, r6
 80063be:	10a4      	asrs	r4, r4, #2
 80063c0:	2500      	movs	r5, #0
 80063c2:	42a5      	cmp	r5, r4
 80063c4:	d105      	bne.n	80063d2 <__libc_init_array+0x2e>
 80063c6:	bd70      	pop	{r4, r5, r6, pc}
 80063c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063cc:	4798      	blx	r3
 80063ce:	3501      	adds	r5, #1
 80063d0:	e7ee      	b.n	80063b0 <__libc_init_array+0xc>
 80063d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063d6:	4798      	blx	r3
 80063d8:	3501      	adds	r5, #1
 80063da:	e7f2      	b.n	80063c2 <__libc_init_array+0x1e>
 80063dc:	0800b9b8 	.word	0x0800b9b8
 80063e0:	0800b9b8 	.word	0x0800b9b8
 80063e4:	0800b9b8 	.word	0x0800b9b8
 80063e8:	0800b9bc 	.word	0x0800b9bc

080063ec <memcpy>:
 80063ec:	b510      	push	{r4, lr}
 80063ee:	1e43      	subs	r3, r0, #1
 80063f0:	440a      	add	r2, r1
 80063f2:	4291      	cmp	r1, r2
 80063f4:	d100      	bne.n	80063f8 <memcpy+0xc>
 80063f6:	bd10      	pop	{r4, pc}
 80063f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006400:	e7f7      	b.n	80063f2 <memcpy+0x6>

08006402 <memset>:
 8006402:	4402      	add	r2, r0
 8006404:	4603      	mov	r3, r0
 8006406:	4293      	cmp	r3, r2
 8006408:	d100      	bne.n	800640c <memset+0xa>
 800640a:	4770      	bx	lr
 800640c:	f803 1b01 	strb.w	r1, [r3], #1
 8006410:	e7f9      	b.n	8006406 <memset+0x4>

08006412 <__cvt>:
 8006412:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006416:	ec55 4b10 	vmov	r4, r5, d0
 800641a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800641c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006420:	2d00      	cmp	r5, #0
 8006422:	460e      	mov	r6, r1
 8006424:	4691      	mov	r9, r2
 8006426:	4619      	mov	r1, r3
 8006428:	bfb8      	it	lt
 800642a:	4622      	movlt	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	f027 0720 	bic.w	r7, r7, #32
 8006432:	bfbb      	ittet	lt
 8006434:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006438:	461d      	movlt	r5, r3
 800643a:	2300      	movge	r3, #0
 800643c:	232d      	movlt	r3, #45	; 0x2d
 800643e:	bfb8      	it	lt
 8006440:	4614      	movlt	r4, r2
 8006442:	2f46      	cmp	r7, #70	; 0x46
 8006444:	700b      	strb	r3, [r1, #0]
 8006446:	d004      	beq.n	8006452 <__cvt+0x40>
 8006448:	2f45      	cmp	r7, #69	; 0x45
 800644a:	d100      	bne.n	800644e <__cvt+0x3c>
 800644c:	3601      	adds	r6, #1
 800644e:	2102      	movs	r1, #2
 8006450:	e000      	b.n	8006454 <__cvt+0x42>
 8006452:	2103      	movs	r1, #3
 8006454:	ab03      	add	r3, sp, #12
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	ab02      	add	r3, sp, #8
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	4632      	mov	r2, r6
 800645e:	4653      	mov	r3, sl
 8006460:	ec45 4b10 	vmov	d0, r4, r5
 8006464:	f001 fd78 	bl	8007f58 <_dtoa_r>
 8006468:	2f47      	cmp	r7, #71	; 0x47
 800646a:	4680      	mov	r8, r0
 800646c:	d102      	bne.n	8006474 <__cvt+0x62>
 800646e:	f019 0f01 	tst.w	r9, #1
 8006472:	d026      	beq.n	80064c2 <__cvt+0xb0>
 8006474:	2f46      	cmp	r7, #70	; 0x46
 8006476:	eb08 0906 	add.w	r9, r8, r6
 800647a:	d111      	bne.n	80064a0 <__cvt+0x8e>
 800647c:	f898 3000 	ldrb.w	r3, [r8]
 8006480:	2b30      	cmp	r3, #48	; 0x30
 8006482:	d10a      	bne.n	800649a <__cvt+0x88>
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	4620      	mov	r0, r4
 800648a:	4629      	mov	r1, r5
 800648c:	f7fa fb24 	bl	8000ad8 <__aeabi_dcmpeq>
 8006490:	b918      	cbnz	r0, 800649a <__cvt+0x88>
 8006492:	f1c6 0601 	rsb	r6, r6, #1
 8006496:	f8ca 6000 	str.w	r6, [sl]
 800649a:	f8da 3000 	ldr.w	r3, [sl]
 800649e:	4499      	add	r9, r3
 80064a0:	2200      	movs	r2, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4620      	mov	r0, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7fa fb16 	bl	8000ad8 <__aeabi_dcmpeq>
 80064ac:	b938      	cbnz	r0, 80064be <__cvt+0xac>
 80064ae:	2230      	movs	r2, #48	; 0x30
 80064b0:	9b03      	ldr	r3, [sp, #12]
 80064b2:	454b      	cmp	r3, r9
 80064b4:	d205      	bcs.n	80064c2 <__cvt+0xb0>
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	9103      	str	r1, [sp, #12]
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e7f8      	b.n	80064b0 <__cvt+0x9e>
 80064be:	f8cd 900c 	str.w	r9, [sp, #12]
 80064c2:	9b03      	ldr	r3, [sp, #12]
 80064c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c6:	eba3 0308 	sub.w	r3, r3, r8
 80064ca:	4640      	mov	r0, r8
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	b004      	add	sp, #16
 80064d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080064d4 <__exponent>:
 80064d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064d6:	2900      	cmp	r1, #0
 80064d8:	4604      	mov	r4, r0
 80064da:	bfba      	itte	lt
 80064dc:	4249      	neglt	r1, r1
 80064de:	232d      	movlt	r3, #45	; 0x2d
 80064e0:	232b      	movge	r3, #43	; 0x2b
 80064e2:	2909      	cmp	r1, #9
 80064e4:	f804 2b02 	strb.w	r2, [r4], #2
 80064e8:	7043      	strb	r3, [r0, #1]
 80064ea:	dd20      	ble.n	800652e <__exponent+0x5a>
 80064ec:	f10d 0307 	add.w	r3, sp, #7
 80064f0:	461f      	mov	r7, r3
 80064f2:	260a      	movs	r6, #10
 80064f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80064f8:	fb06 1115 	mls	r1, r6, r5, r1
 80064fc:	3130      	adds	r1, #48	; 0x30
 80064fe:	2d09      	cmp	r5, #9
 8006500:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006504:	f103 32ff 	add.w	r2, r3, #4294967295
 8006508:	4629      	mov	r1, r5
 800650a:	dc09      	bgt.n	8006520 <__exponent+0x4c>
 800650c:	3130      	adds	r1, #48	; 0x30
 800650e:	3b02      	subs	r3, #2
 8006510:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006514:	42bb      	cmp	r3, r7
 8006516:	4622      	mov	r2, r4
 8006518:	d304      	bcc.n	8006524 <__exponent+0x50>
 800651a:	1a10      	subs	r0, r2, r0
 800651c:	b003      	add	sp, #12
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006520:	4613      	mov	r3, r2
 8006522:	e7e7      	b.n	80064f4 <__exponent+0x20>
 8006524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006528:	f804 2b01 	strb.w	r2, [r4], #1
 800652c:	e7f2      	b.n	8006514 <__exponent+0x40>
 800652e:	2330      	movs	r3, #48	; 0x30
 8006530:	4419      	add	r1, r3
 8006532:	7083      	strb	r3, [r0, #2]
 8006534:	1d02      	adds	r2, r0, #4
 8006536:	70c1      	strb	r1, [r0, #3]
 8006538:	e7ef      	b.n	800651a <__exponent+0x46>
	...

0800653c <_printf_float>:
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	b08d      	sub	sp, #52	; 0x34
 8006542:	460c      	mov	r4, r1
 8006544:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006548:	4616      	mov	r6, r2
 800654a:	461f      	mov	r7, r3
 800654c:	4605      	mov	r5, r0
 800654e:	f002 fde7 	bl	8009120 <_localeconv_r>
 8006552:	6803      	ldr	r3, [r0, #0]
 8006554:	9304      	str	r3, [sp, #16]
 8006556:	4618      	mov	r0, r3
 8006558:	f7f9 fe42 	bl	80001e0 <strlen>
 800655c:	2300      	movs	r3, #0
 800655e:	930a      	str	r3, [sp, #40]	; 0x28
 8006560:	f8d8 3000 	ldr.w	r3, [r8]
 8006564:	9005      	str	r0, [sp, #20]
 8006566:	3307      	adds	r3, #7
 8006568:	f023 0307 	bic.w	r3, r3, #7
 800656c:	f103 0208 	add.w	r2, r3, #8
 8006570:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006574:	f8d4 b000 	ldr.w	fp, [r4]
 8006578:	f8c8 2000 	str.w	r2, [r8]
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006584:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006588:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006592:	f04f 32ff 	mov.w	r2, #4294967295
 8006596:	4ba7      	ldr	r3, [pc, #668]	; (8006834 <_printf_float+0x2f8>)
 8006598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800659c:	f7fa face 	bl	8000b3c <__aeabi_dcmpun>
 80065a0:	bb70      	cbnz	r0, 8006600 <_printf_float+0xc4>
 80065a2:	f04f 32ff 	mov.w	r2, #4294967295
 80065a6:	4ba3      	ldr	r3, [pc, #652]	; (8006834 <_printf_float+0x2f8>)
 80065a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ac:	f7fa faa8 	bl	8000b00 <__aeabi_dcmple>
 80065b0:	bb30      	cbnz	r0, 8006600 <_printf_float+0xc4>
 80065b2:	2200      	movs	r2, #0
 80065b4:	2300      	movs	r3, #0
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7fa fa97 	bl	8000aec <__aeabi_dcmplt>
 80065be:	b110      	cbz	r0, 80065c6 <_printf_float+0x8a>
 80065c0:	232d      	movs	r3, #45	; 0x2d
 80065c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065c6:	4a9c      	ldr	r2, [pc, #624]	; (8006838 <_printf_float+0x2fc>)
 80065c8:	4b9c      	ldr	r3, [pc, #624]	; (800683c <_printf_float+0x300>)
 80065ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80065ce:	bf8c      	ite	hi
 80065d0:	4690      	movhi	r8, r2
 80065d2:	4698      	movls	r8, r3
 80065d4:	2303      	movs	r3, #3
 80065d6:	f02b 0204 	bic.w	r2, fp, #4
 80065da:	6123      	str	r3, [r4, #16]
 80065dc:	6022      	str	r2, [r4, #0]
 80065de:	f04f 0900 	mov.w	r9, #0
 80065e2:	9700      	str	r7, [sp, #0]
 80065e4:	4633      	mov	r3, r6
 80065e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80065e8:	4621      	mov	r1, r4
 80065ea:	4628      	mov	r0, r5
 80065ec:	f000 f9e6 	bl	80069bc <_printf_common>
 80065f0:	3001      	adds	r0, #1
 80065f2:	f040 808d 	bne.w	8006710 <_printf_float+0x1d4>
 80065f6:	f04f 30ff 	mov.w	r0, #4294967295
 80065fa:	b00d      	add	sp, #52	; 0x34
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	4640      	mov	r0, r8
 8006606:	4649      	mov	r1, r9
 8006608:	f7fa fa98 	bl	8000b3c <__aeabi_dcmpun>
 800660c:	b110      	cbz	r0, 8006614 <_printf_float+0xd8>
 800660e:	4a8c      	ldr	r2, [pc, #560]	; (8006840 <_printf_float+0x304>)
 8006610:	4b8c      	ldr	r3, [pc, #560]	; (8006844 <_printf_float+0x308>)
 8006612:	e7da      	b.n	80065ca <_printf_float+0x8e>
 8006614:	6861      	ldr	r1, [r4, #4]
 8006616:	1c4b      	adds	r3, r1, #1
 8006618:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800661c:	a80a      	add	r0, sp, #40	; 0x28
 800661e:	d13e      	bne.n	800669e <_printf_float+0x162>
 8006620:	2306      	movs	r3, #6
 8006622:	6063      	str	r3, [r4, #4]
 8006624:	2300      	movs	r3, #0
 8006626:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800662a:	ab09      	add	r3, sp, #36	; 0x24
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	ec49 8b10 	vmov	d0, r8, r9
 8006632:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006636:	6022      	str	r2, [r4, #0]
 8006638:	f8cd a004 	str.w	sl, [sp, #4]
 800663c:	6861      	ldr	r1, [r4, #4]
 800663e:	4628      	mov	r0, r5
 8006640:	f7ff fee7 	bl	8006412 <__cvt>
 8006644:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006648:	2b47      	cmp	r3, #71	; 0x47
 800664a:	4680      	mov	r8, r0
 800664c:	d109      	bne.n	8006662 <_printf_float+0x126>
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	1cd8      	adds	r0, r3, #3
 8006652:	db02      	blt.n	800665a <_printf_float+0x11e>
 8006654:	6862      	ldr	r2, [r4, #4]
 8006656:	4293      	cmp	r3, r2
 8006658:	dd47      	ble.n	80066ea <_printf_float+0x1ae>
 800665a:	f1aa 0a02 	sub.w	sl, sl, #2
 800665e:	fa5f fa8a 	uxtb.w	sl, sl
 8006662:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006666:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006668:	d824      	bhi.n	80066b4 <_printf_float+0x178>
 800666a:	3901      	subs	r1, #1
 800666c:	4652      	mov	r2, sl
 800666e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006672:	9109      	str	r1, [sp, #36]	; 0x24
 8006674:	f7ff ff2e 	bl	80064d4 <__exponent>
 8006678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800667a:	1813      	adds	r3, r2, r0
 800667c:	2a01      	cmp	r2, #1
 800667e:	4681      	mov	r9, r0
 8006680:	6123      	str	r3, [r4, #16]
 8006682:	dc02      	bgt.n	800668a <_printf_float+0x14e>
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	07d1      	lsls	r1, r2, #31
 8006688:	d501      	bpl.n	800668e <_printf_float+0x152>
 800668a:	3301      	adds	r3, #1
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0a5      	beq.n	80065e2 <_printf_float+0xa6>
 8006696:	232d      	movs	r3, #45	; 0x2d
 8006698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800669c:	e7a1      	b.n	80065e2 <_printf_float+0xa6>
 800669e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80066a2:	f000 8177 	beq.w	8006994 <_printf_float+0x458>
 80066a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066aa:	d1bb      	bne.n	8006624 <_printf_float+0xe8>
 80066ac:	2900      	cmp	r1, #0
 80066ae:	d1b9      	bne.n	8006624 <_printf_float+0xe8>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e7b6      	b.n	8006622 <_printf_float+0xe6>
 80066b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80066b8:	d119      	bne.n	80066ee <_printf_float+0x1b2>
 80066ba:	2900      	cmp	r1, #0
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	dd0c      	ble.n	80066da <_printf_float+0x19e>
 80066c0:	6121      	str	r1, [r4, #16]
 80066c2:	b913      	cbnz	r3, 80066ca <_printf_float+0x18e>
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	07d2      	lsls	r2, r2, #31
 80066c8:	d502      	bpl.n	80066d0 <_printf_float+0x194>
 80066ca:	3301      	adds	r3, #1
 80066cc:	440b      	add	r3, r1
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80066d4:	f04f 0900 	mov.w	r9, #0
 80066d8:	e7d9      	b.n	800668e <_printf_float+0x152>
 80066da:	b913      	cbnz	r3, 80066e2 <_printf_float+0x1a6>
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	07d0      	lsls	r0, r2, #31
 80066e0:	d501      	bpl.n	80066e6 <_printf_float+0x1aa>
 80066e2:	3302      	adds	r3, #2
 80066e4:	e7f3      	b.n	80066ce <_printf_float+0x192>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e7f1      	b.n	80066ce <_printf_float+0x192>
 80066ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80066ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80066f2:	4293      	cmp	r3, r2
 80066f4:	db05      	blt.n	8006702 <_printf_float+0x1c6>
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	07d1      	lsls	r1, r2, #31
 80066fc:	d5e8      	bpl.n	80066d0 <_printf_float+0x194>
 80066fe:	3301      	adds	r3, #1
 8006700:	e7e5      	b.n	80066ce <_printf_float+0x192>
 8006702:	2b00      	cmp	r3, #0
 8006704:	bfd4      	ite	le
 8006706:	f1c3 0302 	rsble	r3, r3, #2
 800670a:	2301      	movgt	r3, #1
 800670c:	4413      	add	r3, r2
 800670e:	e7de      	b.n	80066ce <_printf_float+0x192>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	055a      	lsls	r2, r3, #21
 8006714:	d407      	bmi.n	8006726 <_printf_float+0x1ea>
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	4642      	mov	r2, r8
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	d12b      	bne.n	800677c <_printf_float+0x240>
 8006724:	e767      	b.n	80065f6 <_printf_float+0xba>
 8006726:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800672a:	f240 80dc 	bls.w	80068e6 <_printf_float+0x3aa>
 800672e:	2200      	movs	r2, #0
 8006730:	2300      	movs	r3, #0
 8006732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006736:	f7fa f9cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800673a:	2800      	cmp	r0, #0
 800673c:	d033      	beq.n	80067a6 <_printf_float+0x26a>
 800673e:	2301      	movs	r3, #1
 8006740:	4a41      	ldr	r2, [pc, #260]	; (8006848 <_printf_float+0x30c>)
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	f43f af54 	beq.w	80065f6 <_printf_float+0xba>
 800674e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006752:	429a      	cmp	r2, r3
 8006754:	db02      	blt.n	800675c <_printf_float+0x220>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	07d8      	lsls	r0, r3, #31
 800675a:	d50f      	bpl.n	800677c <_printf_float+0x240>
 800675c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	f43f af45 	beq.w	80065f6 <_printf_float+0xba>
 800676c:	f04f 0800 	mov.w	r8, #0
 8006770:	f104 091a 	add.w	r9, r4, #26
 8006774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006776:	3b01      	subs	r3, #1
 8006778:	4543      	cmp	r3, r8
 800677a:	dc09      	bgt.n	8006790 <_printf_float+0x254>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	079b      	lsls	r3, r3, #30
 8006780:	f100 8103 	bmi.w	800698a <_printf_float+0x44e>
 8006784:	68e0      	ldr	r0, [r4, #12]
 8006786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006788:	4298      	cmp	r0, r3
 800678a:	bfb8      	it	lt
 800678c:	4618      	movlt	r0, r3
 800678e:	e734      	b.n	80065fa <_printf_float+0xbe>
 8006790:	2301      	movs	r3, #1
 8006792:	464a      	mov	r2, r9
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f af2b 	beq.w	80065f6 <_printf_float+0xba>
 80067a0:	f108 0801 	add.w	r8, r8, #1
 80067a4:	e7e6      	b.n	8006774 <_printf_float+0x238>
 80067a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dc2b      	bgt.n	8006804 <_printf_float+0x2c8>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4a26      	ldr	r2, [pc, #152]	; (8006848 <_printf_float+0x30c>)
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f af1d 	beq.w	80065f6 <_printf_float+0xba>
 80067bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067be:	b923      	cbnz	r3, 80067ca <_printf_float+0x28e>
 80067c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c2:	b913      	cbnz	r3, 80067ca <_printf_float+0x28e>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	07d9      	lsls	r1, r3, #31
 80067c8:	d5d8      	bpl.n	800677c <_printf_float+0x240>
 80067ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ce:	4631      	mov	r1, r6
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b8      	blx	r7
 80067d4:	3001      	adds	r0, #1
 80067d6:	f43f af0e 	beq.w	80065f6 <_printf_float+0xba>
 80067da:	f04f 0900 	mov.w	r9, #0
 80067de:	f104 0a1a 	add.w	sl, r4, #26
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	425b      	negs	r3, r3
 80067e6:	454b      	cmp	r3, r9
 80067e8:	dc01      	bgt.n	80067ee <_printf_float+0x2b2>
 80067ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ec:	e794      	b.n	8006718 <_printf_float+0x1dc>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4652      	mov	r2, sl
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f aefc 	beq.w	80065f6 <_printf_float+0xba>
 80067fe:	f109 0901 	add.w	r9, r9, #1
 8006802:	e7ee      	b.n	80067e2 <_printf_float+0x2a6>
 8006804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006808:	429a      	cmp	r2, r3
 800680a:	bfa8      	it	ge
 800680c:	461a      	movge	r2, r3
 800680e:	2a00      	cmp	r2, #0
 8006810:	4691      	mov	r9, r2
 8006812:	dd07      	ble.n	8006824 <_printf_float+0x2e8>
 8006814:	4613      	mov	r3, r2
 8006816:	4631      	mov	r1, r6
 8006818:	4642      	mov	r2, r8
 800681a:	4628      	mov	r0, r5
 800681c:	47b8      	blx	r7
 800681e:	3001      	adds	r0, #1
 8006820:	f43f aee9 	beq.w	80065f6 <_printf_float+0xba>
 8006824:	f104 031a 	add.w	r3, r4, #26
 8006828:	f04f 0b00 	mov.w	fp, #0
 800682c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006830:	9306      	str	r3, [sp, #24]
 8006832:	e015      	b.n	8006860 <_printf_float+0x324>
 8006834:	7fefffff 	.word	0x7fefffff
 8006838:	0800b524 	.word	0x0800b524
 800683c:	0800b520 	.word	0x0800b520
 8006840:	0800b52c 	.word	0x0800b52c
 8006844:	0800b528 	.word	0x0800b528
 8006848:	0800b530 	.word	0x0800b530
 800684c:	2301      	movs	r3, #1
 800684e:	9a06      	ldr	r2, [sp, #24]
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f aecd 	beq.w	80065f6 <_printf_float+0xba>
 800685c:	f10b 0b01 	add.w	fp, fp, #1
 8006860:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006864:	ebaa 0309 	sub.w	r3, sl, r9
 8006868:	455b      	cmp	r3, fp
 800686a:	dcef      	bgt.n	800684c <_printf_float+0x310>
 800686c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006870:	429a      	cmp	r2, r3
 8006872:	44d0      	add	r8, sl
 8006874:	db15      	blt.n	80068a2 <_printf_float+0x366>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	07da      	lsls	r2, r3, #31
 800687a:	d412      	bmi.n	80068a2 <_printf_float+0x366>
 800687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006880:	eba3 020a 	sub.w	r2, r3, sl
 8006884:	eba3 0a01 	sub.w	sl, r3, r1
 8006888:	4592      	cmp	sl, r2
 800688a:	bfa8      	it	ge
 800688c:	4692      	movge	sl, r2
 800688e:	f1ba 0f00 	cmp.w	sl, #0
 8006892:	dc0e      	bgt.n	80068b2 <_printf_float+0x376>
 8006894:	f04f 0800 	mov.w	r8, #0
 8006898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800689c:	f104 091a 	add.w	r9, r4, #26
 80068a0:	e019      	b.n	80068d6 <_printf_float+0x39a>
 80068a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	d1e5      	bne.n	800687c <_printf_float+0x340>
 80068b0:	e6a1      	b.n	80065f6 <_printf_float+0xba>
 80068b2:	4653      	mov	r3, sl
 80068b4:	4642      	mov	r2, r8
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	d1e9      	bne.n	8006894 <_printf_float+0x358>
 80068c0:	e699      	b.n	80065f6 <_printf_float+0xba>
 80068c2:	2301      	movs	r3, #1
 80068c4:	464a      	mov	r2, r9
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f ae92 	beq.w	80065f6 <_printf_float+0xba>
 80068d2:	f108 0801 	add.w	r8, r8, #1
 80068d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	eba3 030a 	sub.w	r3, r3, sl
 80068e0:	4543      	cmp	r3, r8
 80068e2:	dcee      	bgt.n	80068c2 <_printf_float+0x386>
 80068e4:	e74a      	b.n	800677c <_printf_float+0x240>
 80068e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068e8:	2a01      	cmp	r2, #1
 80068ea:	dc01      	bgt.n	80068f0 <_printf_float+0x3b4>
 80068ec:	07db      	lsls	r3, r3, #31
 80068ee:	d53a      	bpl.n	8006966 <_printf_float+0x42a>
 80068f0:	2301      	movs	r3, #1
 80068f2:	4642      	mov	r2, r8
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f ae7b 	beq.w	80065f6 <_printf_float+0xba>
 8006900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f108 0801 	add.w	r8, r8, #1
 8006910:	f43f ae71 	beq.w	80065f6 <_printf_float+0xba>
 8006914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006916:	2200      	movs	r2, #0
 8006918:	f103 3aff 	add.w	sl, r3, #4294967295
 800691c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006920:	2300      	movs	r3, #0
 8006922:	f7fa f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006926:	b9c8      	cbnz	r0, 800695c <_printf_float+0x420>
 8006928:	4653      	mov	r3, sl
 800692a:	4642      	mov	r2, r8
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	d10e      	bne.n	8006954 <_printf_float+0x418>
 8006936:	e65e      	b.n	80065f6 <_printf_float+0xba>
 8006938:	2301      	movs	r3, #1
 800693a:	4652      	mov	r2, sl
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	f43f ae57 	beq.w	80065f6 <_printf_float+0xba>
 8006948:	f108 0801 	add.w	r8, r8, #1
 800694c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694e:	3b01      	subs	r3, #1
 8006950:	4543      	cmp	r3, r8
 8006952:	dcf1      	bgt.n	8006938 <_printf_float+0x3fc>
 8006954:	464b      	mov	r3, r9
 8006956:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800695a:	e6de      	b.n	800671a <_printf_float+0x1de>
 800695c:	f04f 0800 	mov.w	r8, #0
 8006960:	f104 0a1a 	add.w	sl, r4, #26
 8006964:	e7f2      	b.n	800694c <_printf_float+0x410>
 8006966:	2301      	movs	r3, #1
 8006968:	e7df      	b.n	800692a <_printf_float+0x3ee>
 800696a:	2301      	movs	r3, #1
 800696c:	464a      	mov	r2, r9
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae3e 	beq.w	80065f6 <_printf_float+0xba>
 800697a:	f108 0801 	add.w	r8, r8, #1
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	4543      	cmp	r3, r8
 8006986:	dcf0      	bgt.n	800696a <_printf_float+0x42e>
 8006988:	e6fc      	b.n	8006784 <_printf_float+0x248>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	f104 0919 	add.w	r9, r4, #25
 8006992:	e7f4      	b.n	800697e <_printf_float+0x442>
 8006994:	2900      	cmp	r1, #0
 8006996:	f43f ae8b 	beq.w	80066b0 <_printf_float+0x174>
 800699a:	2300      	movs	r3, #0
 800699c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80069a0:	ab09      	add	r3, sp, #36	; 0x24
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	ec49 8b10 	vmov	d0, r8, r9
 80069a8:	6022      	str	r2, [r4, #0]
 80069aa:	f8cd a004 	str.w	sl, [sp, #4]
 80069ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7ff fd2d 	bl	8006412 <__cvt>
 80069b8:	4680      	mov	r8, r0
 80069ba:	e648      	b.n	800664e <_printf_float+0x112>

080069bc <_printf_common>:
 80069bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c0:	4691      	mov	r9, r2
 80069c2:	461f      	mov	r7, r3
 80069c4:	688a      	ldr	r2, [r1, #8]
 80069c6:	690b      	ldr	r3, [r1, #16]
 80069c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	bfb8      	it	lt
 80069d0:	4613      	movlt	r3, r2
 80069d2:	f8c9 3000 	str.w	r3, [r9]
 80069d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069da:	4606      	mov	r6, r0
 80069dc:	460c      	mov	r4, r1
 80069de:	b112      	cbz	r2, 80069e6 <_printf_common+0x2a>
 80069e0:	3301      	adds	r3, #1
 80069e2:	f8c9 3000 	str.w	r3, [r9]
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	0699      	lsls	r1, r3, #26
 80069ea:	bf42      	ittt	mi
 80069ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80069f0:	3302      	addmi	r3, #2
 80069f2:	f8c9 3000 	strmi.w	r3, [r9]
 80069f6:	6825      	ldr	r5, [r4, #0]
 80069f8:	f015 0506 	ands.w	r5, r5, #6
 80069fc:	d107      	bne.n	8006a0e <_printf_common+0x52>
 80069fe:	f104 0a19 	add.w	sl, r4, #25
 8006a02:	68e3      	ldr	r3, [r4, #12]
 8006a04:	f8d9 2000 	ldr.w	r2, [r9]
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	42ab      	cmp	r3, r5
 8006a0c:	dc28      	bgt.n	8006a60 <_printf_common+0xa4>
 8006a0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	3300      	adds	r3, #0
 8006a16:	bf18      	it	ne
 8006a18:	2301      	movne	r3, #1
 8006a1a:	0692      	lsls	r2, r2, #26
 8006a1c:	d42d      	bmi.n	8006a7a <_printf_common+0xbe>
 8006a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a22:	4639      	mov	r1, r7
 8006a24:	4630      	mov	r0, r6
 8006a26:	47c0      	blx	r8
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d020      	beq.n	8006a6e <_printf_common+0xb2>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	68e5      	ldr	r5, [r4, #12]
 8006a30:	f8d9 2000 	ldr.w	r2, [r9]
 8006a34:	f003 0306 	and.w	r3, r3, #6
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	bf08      	it	eq
 8006a3c:	1aad      	subeq	r5, r5, r2
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	bf0c      	ite	eq
 8006a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a48:	2500      	movne	r5, #0
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	bfc4      	itt	gt
 8006a4e:	1a9b      	subgt	r3, r3, r2
 8006a50:	18ed      	addgt	r5, r5, r3
 8006a52:	f04f 0900 	mov.w	r9, #0
 8006a56:	341a      	adds	r4, #26
 8006a58:	454d      	cmp	r5, r9
 8006a5a:	d11a      	bne.n	8006a92 <_printf_common+0xd6>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e008      	b.n	8006a72 <_printf_common+0xb6>
 8006a60:	2301      	movs	r3, #1
 8006a62:	4652      	mov	r2, sl
 8006a64:	4639      	mov	r1, r7
 8006a66:	4630      	mov	r0, r6
 8006a68:	47c0      	blx	r8
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d103      	bne.n	8006a76 <_printf_common+0xba>
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a76:	3501      	adds	r5, #1
 8006a78:	e7c3      	b.n	8006a02 <_printf_common+0x46>
 8006a7a:	18e1      	adds	r1, r4, r3
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	2030      	movs	r0, #48	; 0x30
 8006a80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a84:	4422      	add	r2, r4
 8006a86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a8e:	3302      	adds	r3, #2
 8006a90:	e7c5      	b.n	8006a1e <_printf_common+0x62>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4622      	mov	r2, r4
 8006a96:	4639      	mov	r1, r7
 8006a98:	4630      	mov	r0, r6
 8006a9a:	47c0      	blx	r8
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d0e6      	beq.n	8006a6e <_printf_common+0xb2>
 8006aa0:	f109 0901 	add.w	r9, r9, #1
 8006aa4:	e7d8      	b.n	8006a58 <_printf_common+0x9c>
	...

08006aa8 <_printf_i>:
 8006aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006aac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	7e09      	ldrb	r1, [r1, #24]
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	296e      	cmp	r1, #110	; 0x6e
 8006ab8:	4617      	mov	r7, r2
 8006aba:	4606      	mov	r6, r0
 8006abc:	4698      	mov	r8, r3
 8006abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ac0:	f000 80b3 	beq.w	8006c2a <_printf_i+0x182>
 8006ac4:	d822      	bhi.n	8006b0c <_printf_i+0x64>
 8006ac6:	2963      	cmp	r1, #99	; 0x63
 8006ac8:	d036      	beq.n	8006b38 <_printf_i+0x90>
 8006aca:	d80a      	bhi.n	8006ae2 <_printf_i+0x3a>
 8006acc:	2900      	cmp	r1, #0
 8006ace:	f000 80b9 	beq.w	8006c44 <_printf_i+0x19c>
 8006ad2:	2958      	cmp	r1, #88	; 0x58
 8006ad4:	f000 8083 	beq.w	8006bde <_printf_i+0x136>
 8006ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006adc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ae0:	e032      	b.n	8006b48 <_printf_i+0xa0>
 8006ae2:	2964      	cmp	r1, #100	; 0x64
 8006ae4:	d001      	beq.n	8006aea <_printf_i+0x42>
 8006ae6:	2969      	cmp	r1, #105	; 0x69
 8006ae8:	d1f6      	bne.n	8006ad8 <_printf_i+0x30>
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	6813      	ldr	r3, [r2, #0]
 8006aee:	0605      	lsls	r5, r0, #24
 8006af0:	f103 0104 	add.w	r1, r3, #4
 8006af4:	d52a      	bpl.n	8006b4c <_printf_i+0xa4>
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6011      	str	r1, [r2, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da03      	bge.n	8006b06 <_printf_i+0x5e>
 8006afe:	222d      	movs	r2, #45	; 0x2d
 8006b00:	425b      	negs	r3, r3
 8006b02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b06:	486f      	ldr	r0, [pc, #444]	; (8006cc4 <_printf_i+0x21c>)
 8006b08:	220a      	movs	r2, #10
 8006b0a:	e039      	b.n	8006b80 <_printf_i+0xd8>
 8006b0c:	2973      	cmp	r1, #115	; 0x73
 8006b0e:	f000 809d 	beq.w	8006c4c <_printf_i+0x1a4>
 8006b12:	d808      	bhi.n	8006b26 <_printf_i+0x7e>
 8006b14:	296f      	cmp	r1, #111	; 0x6f
 8006b16:	d020      	beq.n	8006b5a <_printf_i+0xb2>
 8006b18:	2970      	cmp	r1, #112	; 0x70
 8006b1a:	d1dd      	bne.n	8006ad8 <_printf_i+0x30>
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	f043 0320 	orr.w	r3, r3, #32
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	e003      	b.n	8006b2e <_printf_i+0x86>
 8006b26:	2975      	cmp	r1, #117	; 0x75
 8006b28:	d017      	beq.n	8006b5a <_printf_i+0xb2>
 8006b2a:	2978      	cmp	r1, #120	; 0x78
 8006b2c:	d1d4      	bne.n	8006ad8 <_printf_i+0x30>
 8006b2e:	2378      	movs	r3, #120	; 0x78
 8006b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b34:	4864      	ldr	r0, [pc, #400]	; (8006cc8 <_printf_i+0x220>)
 8006b36:	e055      	b.n	8006be4 <_printf_i+0x13c>
 8006b38:	6813      	ldr	r3, [r2, #0]
 8006b3a:	1d19      	adds	r1, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6011      	str	r1, [r2, #0]
 8006b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e08c      	b.n	8006c66 <_printf_i+0x1be>
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6011      	str	r1, [r2, #0]
 8006b50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b54:	bf18      	it	ne
 8006b56:	b21b      	sxthne	r3, r3
 8006b58:	e7cf      	b.n	8006afa <_printf_i+0x52>
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	6825      	ldr	r5, [r4, #0]
 8006b5e:	1d18      	adds	r0, r3, #4
 8006b60:	6010      	str	r0, [r2, #0]
 8006b62:	0628      	lsls	r0, r5, #24
 8006b64:	d501      	bpl.n	8006b6a <_printf_i+0xc2>
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	e002      	b.n	8006b70 <_printf_i+0xc8>
 8006b6a:	0668      	lsls	r0, r5, #25
 8006b6c:	d5fb      	bpl.n	8006b66 <_printf_i+0xbe>
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	4854      	ldr	r0, [pc, #336]	; (8006cc4 <_printf_i+0x21c>)
 8006b72:	296f      	cmp	r1, #111	; 0x6f
 8006b74:	bf14      	ite	ne
 8006b76:	220a      	movne	r2, #10
 8006b78:	2208      	moveq	r2, #8
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b80:	6865      	ldr	r5, [r4, #4]
 8006b82:	60a5      	str	r5, [r4, #8]
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	f2c0 8095 	blt.w	8006cb4 <_printf_i+0x20c>
 8006b8a:	6821      	ldr	r1, [r4, #0]
 8006b8c:	f021 0104 	bic.w	r1, r1, #4
 8006b90:	6021      	str	r1, [r4, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d13d      	bne.n	8006c12 <_printf_i+0x16a>
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	f040 808e 	bne.w	8006cb8 <_printf_i+0x210>
 8006b9c:	4665      	mov	r5, ip
 8006b9e:	2a08      	cmp	r2, #8
 8006ba0:	d10b      	bne.n	8006bba <_printf_i+0x112>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	07db      	lsls	r3, r3, #31
 8006ba6:	d508      	bpl.n	8006bba <_printf_i+0x112>
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	bfde      	ittt	le
 8006bb0:	2330      	movle	r3, #48	; 0x30
 8006bb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bba:	ebac 0305 	sub.w	r3, ip, r5
 8006bbe:	6123      	str	r3, [r4, #16]
 8006bc0:	f8cd 8000 	str.w	r8, [sp]
 8006bc4:	463b      	mov	r3, r7
 8006bc6:	aa03      	add	r2, sp, #12
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7ff fef6 	bl	80069bc <_printf_common>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d14d      	bne.n	8006c70 <_printf_i+0x1c8>
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	b005      	add	sp, #20
 8006bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bde:	4839      	ldr	r0, [pc, #228]	; (8006cc4 <_printf_i+0x21c>)
 8006be0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006be4:	6813      	ldr	r3, [r2, #0]
 8006be6:	6821      	ldr	r1, [r4, #0]
 8006be8:	1d1d      	adds	r5, r3, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6015      	str	r5, [r2, #0]
 8006bee:	060a      	lsls	r2, r1, #24
 8006bf0:	d50b      	bpl.n	8006c0a <_printf_i+0x162>
 8006bf2:	07ca      	lsls	r2, r1, #31
 8006bf4:	bf44      	itt	mi
 8006bf6:	f041 0120 	orrmi.w	r1, r1, #32
 8006bfa:	6021      	strmi	r1, [r4, #0]
 8006bfc:	b91b      	cbnz	r3, 8006c06 <_printf_i+0x15e>
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	f022 0220 	bic.w	r2, r2, #32
 8006c04:	6022      	str	r2, [r4, #0]
 8006c06:	2210      	movs	r2, #16
 8006c08:	e7b7      	b.n	8006b7a <_printf_i+0xd2>
 8006c0a:	064d      	lsls	r5, r1, #25
 8006c0c:	bf48      	it	mi
 8006c0e:	b29b      	uxthmi	r3, r3
 8006c10:	e7ef      	b.n	8006bf2 <_printf_i+0x14a>
 8006c12:	4665      	mov	r5, ip
 8006c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c18:	fb02 3311 	mls	r3, r2, r1, r3
 8006c1c:	5cc3      	ldrb	r3, [r0, r3]
 8006c1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c22:	460b      	mov	r3, r1
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d1f5      	bne.n	8006c14 <_printf_i+0x16c>
 8006c28:	e7b9      	b.n	8006b9e <_printf_i+0xf6>
 8006c2a:	6813      	ldr	r3, [r2, #0]
 8006c2c:	6825      	ldr	r5, [r4, #0]
 8006c2e:	6961      	ldr	r1, [r4, #20]
 8006c30:	1d18      	adds	r0, r3, #4
 8006c32:	6010      	str	r0, [r2, #0]
 8006c34:	0628      	lsls	r0, r5, #24
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	d501      	bpl.n	8006c3e <_printf_i+0x196>
 8006c3a:	6019      	str	r1, [r3, #0]
 8006c3c:	e002      	b.n	8006c44 <_printf_i+0x19c>
 8006c3e:	066a      	lsls	r2, r5, #25
 8006c40:	d5fb      	bpl.n	8006c3a <_printf_i+0x192>
 8006c42:	8019      	strh	r1, [r3, #0]
 8006c44:	2300      	movs	r3, #0
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	4665      	mov	r5, ip
 8006c4a:	e7b9      	b.n	8006bc0 <_printf_i+0x118>
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	1d19      	adds	r1, r3, #4
 8006c50:	6011      	str	r1, [r2, #0]
 8006c52:	681d      	ldr	r5, [r3, #0]
 8006c54:	6862      	ldr	r2, [r4, #4]
 8006c56:	2100      	movs	r1, #0
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f7f9 fac9 	bl	80001f0 <memchr>
 8006c5e:	b108      	cbz	r0, 8006c64 <_printf_i+0x1bc>
 8006c60:	1b40      	subs	r0, r0, r5
 8006c62:	6060      	str	r0, [r4, #4]
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	6123      	str	r3, [r4, #16]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6e:	e7a7      	b.n	8006bc0 <_printf_i+0x118>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	462a      	mov	r2, r5
 8006c74:	4639      	mov	r1, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	47c0      	blx	r8
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d0aa      	beq.n	8006bd4 <_printf_i+0x12c>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	079b      	lsls	r3, r3, #30
 8006c82:	d413      	bmi.n	8006cac <_printf_i+0x204>
 8006c84:	68e0      	ldr	r0, [r4, #12]
 8006c86:	9b03      	ldr	r3, [sp, #12]
 8006c88:	4298      	cmp	r0, r3
 8006c8a:	bfb8      	it	lt
 8006c8c:	4618      	movlt	r0, r3
 8006c8e:	e7a3      	b.n	8006bd8 <_printf_i+0x130>
 8006c90:	2301      	movs	r3, #1
 8006c92:	464a      	mov	r2, r9
 8006c94:	4639      	mov	r1, r7
 8006c96:	4630      	mov	r0, r6
 8006c98:	47c0      	blx	r8
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d09a      	beq.n	8006bd4 <_printf_i+0x12c>
 8006c9e:	3501      	adds	r5, #1
 8006ca0:	68e3      	ldr	r3, [r4, #12]
 8006ca2:	9a03      	ldr	r2, [sp, #12]
 8006ca4:	1a9b      	subs	r3, r3, r2
 8006ca6:	42ab      	cmp	r3, r5
 8006ca8:	dcf2      	bgt.n	8006c90 <_printf_i+0x1e8>
 8006caa:	e7eb      	b.n	8006c84 <_printf_i+0x1dc>
 8006cac:	2500      	movs	r5, #0
 8006cae:	f104 0919 	add.w	r9, r4, #25
 8006cb2:	e7f5      	b.n	8006ca0 <_printf_i+0x1f8>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1ac      	bne.n	8006c12 <_printf_i+0x16a>
 8006cb8:	7803      	ldrb	r3, [r0, #0]
 8006cba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc2:	e76c      	b.n	8006b9e <_printf_i+0xf6>
 8006cc4:	0800b532 	.word	0x0800b532
 8006cc8:	0800b543 	.word	0x0800b543

08006ccc <_scanf_float>:
 8006ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	469a      	mov	sl, r3
 8006cd2:	688b      	ldr	r3, [r1, #8]
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	1e5a      	subs	r2, r3, #1
 8006cd8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006cdc:	b087      	sub	sp, #28
 8006cde:	bf83      	ittte	hi
 8006ce0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006ce4:	189b      	addhi	r3, r3, r2
 8006ce6:	9301      	strhi	r3, [sp, #4]
 8006ce8:	2300      	movls	r3, #0
 8006cea:	bf86      	itte	hi
 8006cec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006cf0:	608b      	strhi	r3, [r1, #8]
 8006cf2:	9301      	strls	r3, [sp, #4]
 8006cf4:	680b      	ldr	r3, [r1, #0]
 8006cf6:	4688      	mov	r8, r1
 8006cf8:	f04f 0b00 	mov.w	fp, #0
 8006cfc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006d00:	f848 3b1c 	str.w	r3, [r8], #28
 8006d04:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006d08:	4607      	mov	r7, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4645      	mov	r5, r8
 8006d0e:	465a      	mov	r2, fp
 8006d10:	46d9      	mov	r9, fp
 8006d12:	f8cd b008 	str.w	fp, [sp, #8]
 8006d16:	68a1      	ldr	r1, [r4, #8]
 8006d18:	b181      	cbz	r1, 8006d3c <_scanf_float+0x70>
 8006d1a:	6833      	ldr	r3, [r6, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b49      	cmp	r3, #73	; 0x49
 8006d20:	d071      	beq.n	8006e06 <_scanf_float+0x13a>
 8006d22:	d84d      	bhi.n	8006dc0 <_scanf_float+0xf4>
 8006d24:	2b39      	cmp	r3, #57	; 0x39
 8006d26:	d840      	bhi.n	8006daa <_scanf_float+0xde>
 8006d28:	2b31      	cmp	r3, #49	; 0x31
 8006d2a:	f080 8088 	bcs.w	8006e3e <_scanf_float+0x172>
 8006d2e:	2b2d      	cmp	r3, #45	; 0x2d
 8006d30:	f000 8090 	beq.w	8006e54 <_scanf_float+0x188>
 8006d34:	d815      	bhi.n	8006d62 <_scanf_float+0x96>
 8006d36:	2b2b      	cmp	r3, #43	; 0x2b
 8006d38:	f000 808c 	beq.w	8006e54 <_scanf_float+0x188>
 8006d3c:	f1b9 0f00 	cmp.w	r9, #0
 8006d40:	d003      	beq.n	8006d4a <_scanf_float+0x7e>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	3a01      	subs	r2, #1
 8006d4c:	2a01      	cmp	r2, #1
 8006d4e:	f200 80ea 	bhi.w	8006f26 <_scanf_float+0x25a>
 8006d52:	4545      	cmp	r5, r8
 8006d54:	f200 80dc 	bhi.w	8006f10 <_scanf_float+0x244>
 8006d58:	2601      	movs	r6, #1
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	b007      	add	sp, #28
 8006d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d62:	2b2e      	cmp	r3, #46	; 0x2e
 8006d64:	f000 809f 	beq.w	8006ea6 <_scanf_float+0x1da>
 8006d68:	2b30      	cmp	r3, #48	; 0x30
 8006d6a:	d1e7      	bne.n	8006d3c <_scanf_float+0x70>
 8006d6c:	6820      	ldr	r0, [r4, #0]
 8006d6e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006d72:	d064      	beq.n	8006e3e <_scanf_float+0x172>
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006d7a:	6020      	str	r0, [r4, #0]
 8006d7c:	f109 0901 	add.w	r9, r9, #1
 8006d80:	b11b      	cbz	r3, 8006d8a <_scanf_float+0xbe>
 8006d82:	3b01      	subs	r3, #1
 8006d84:	3101      	adds	r1, #1
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	60a1      	str	r1, [r4, #8]
 8006d8a:	68a3      	ldr	r3, [r4, #8]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	60a3      	str	r3, [r4, #8]
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	3301      	adds	r3, #1
 8006d94:	6123      	str	r3, [r4, #16]
 8006d96:	6873      	ldr	r3, [r6, #4]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	6073      	str	r3, [r6, #4]
 8006d9e:	f340 80ac 	ble.w	8006efa <_scanf_float+0x22e>
 8006da2:	6833      	ldr	r3, [r6, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	6033      	str	r3, [r6, #0]
 8006da8:	e7b5      	b.n	8006d16 <_scanf_float+0x4a>
 8006daa:	2b45      	cmp	r3, #69	; 0x45
 8006dac:	f000 8085 	beq.w	8006eba <_scanf_float+0x1ee>
 8006db0:	2b46      	cmp	r3, #70	; 0x46
 8006db2:	d06a      	beq.n	8006e8a <_scanf_float+0x1be>
 8006db4:	2b41      	cmp	r3, #65	; 0x41
 8006db6:	d1c1      	bne.n	8006d3c <_scanf_float+0x70>
 8006db8:	2a01      	cmp	r2, #1
 8006dba:	d1bf      	bne.n	8006d3c <_scanf_float+0x70>
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	e046      	b.n	8006e4e <_scanf_float+0x182>
 8006dc0:	2b65      	cmp	r3, #101	; 0x65
 8006dc2:	d07a      	beq.n	8006eba <_scanf_float+0x1ee>
 8006dc4:	d818      	bhi.n	8006df8 <_scanf_float+0x12c>
 8006dc6:	2b54      	cmp	r3, #84	; 0x54
 8006dc8:	d066      	beq.n	8006e98 <_scanf_float+0x1cc>
 8006dca:	d811      	bhi.n	8006df0 <_scanf_float+0x124>
 8006dcc:	2b4e      	cmp	r3, #78	; 0x4e
 8006dce:	d1b5      	bne.n	8006d3c <_scanf_float+0x70>
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	d146      	bne.n	8006e62 <_scanf_float+0x196>
 8006dd4:	f1b9 0f00 	cmp.w	r9, #0
 8006dd8:	d145      	bne.n	8006e66 <_scanf_float+0x19a>
 8006dda:	6821      	ldr	r1, [r4, #0]
 8006ddc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006de0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006de4:	d13f      	bne.n	8006e66 <_scanf_float+0x19a>
 8006de6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006dea:	6021      	str	r1, [r4, #0]
 8006dec:	2201      	movs	r2, #1
 8006dee:	e02e      	b.n	8006e4e <_scanf_float+0x182>
 8006df0:	2b59      	cmp	r3, #89	; 0x59
 8006df2:	d01e      	beq.n	8006e32 <_scanf_float+0x166>
 8006df4:	2b61      	cmp	r3, #97	; 0x61
 8006df6:	e7de      	b.n	8006db6 <_scanf_float+0xea>
 8006df8:	2b6e      	cmp	r3, #110	; 0x6e
 8006dfa:	d0e9      	beq.n	8006dd0 <_scanf_float+0x104>
 8006dfc:	d815      	bhi.n	8006e2a <_scanf_float+0x15e>
 8006dfe:	2b66      	cmp	r3, #102	; 0x66
 8006e00:	d043      	beq.n	8006e8a <_scanf_float+0x1be>
 8006e02:	2b69      	cmp	r3, #105	; 0x69
 8006e04:	d19a      	bne.n	8006d3c <_scanf_float+0x70>
 8006e06:	f1bb 0f00 	cmp.w	fp, #0
 8006e0a:	d138      	bne.n	8006e7e <_scanf_float+0x1b2>
 8006e0c:	f1b9 0f00 	cmp.w	r9, #0
 8006e10:	d197      	bne.n	8006d42 <_scanf_float+0x76>
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006e18:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006e1c:	d195      	bne.n	8006d4a <_scanf_float+0x7e>
 8006e1e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e22:	6021      	str	r1, [r4, #0]
 8006e24:	f04f 0b01 	mov.w	fp, #1
 8006e28:	e011      	b.n	8006e4e <_scanf_float+0x182>
 8006e2a:	2b74      	cmp	r3, #116	; 0x74
 8006e2c:	d034      	beq.n	8006e98 <_scanf_float+0x1cc>
 8006e2e:	2b79      	cmp	r3, #121	; 0x79
 8006e30:	d184      	bne.n	8006d3c <_scanf_float+0x70>
 8006e32:	f1bb 0f07 	cmp.w	fp, #7
 8006e36:	d181      	bne.n	8006d3c <_scanf_float+0x70>
 8006e38:	f04f 0b08 	mov.w	fp, #8
 8006e3c:	e007      	b.n	8006e4e <_scanf_float+0x182>
 8006e3e:	eb12 0f0b 	cmn.w	r2, fp
 8006e42:	f47f af7b 	bne.w	8006d3c <_scanf_float+0x70>
 8006e46:	6821      	ldr	r1, [r4, #0]
 8006e48:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006e4c:	6021      	str	r1, [r4, #0]
 8006e4e:	702b      	strb	r3, [r5, #0]
 8006e50:	3501      	adds	r5, #1
 8006e52:	e79a      	b.n	8006d8a <_scanf_float+0xbe>
 8006e54:	6821      	ldr	r1, [r4, #0]
 8006e56:	0608      	lsls	r0, r1, #24
 8006e58:	f57f af70 	bpl.w	8006d3c <_scanf_float+0x70>
 8006e5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e60:	e7f4      	b.n	8006e4c <_scanf_float+0x180>
 8006e62:	2a02      	cmp	r2, #2
 8006e64:	d047      	beq.n	8006ef6 <_scanf_float+0x22a>
 8006e66:	f1bb 0f01 	cmp.w	fp, #1
 8006e6a:	d003      	beq.n	8006e74 <_scanf_float+0x1a8>
 8006e6c:	f1bb 0f04 	cmp.w	fp, #4
 8006e70:	f47f af64 	bne.w	8006d3c <_scanf_float+0x70>
 8006e74:	f10b 0b01 	add.w	fp, fp, #1
 8006e78:	fa5f fb8b 	uxtb.w	fp, fp
 8006e7c:	e7e7      	b.n	8006e4e <_scanf_float+0x182>
 8006e7e:	f1bb 0f03 	cmp.w	fp, #3
 8006e82:	d0f7      	beq.n	8006e74 <_scanf_float+0x1a8>
 8006e84:	f1bb 0f05 	cmp.w	fp, #5
 8006e88:	e7f2      	b.n	8006e70 <_scanf_float+0x1a4>
 8006e8a:	f1bb 0f02 	cmp.w	fp, #2
 8006e8e:	f47f af55 	bne.w	8006d3c <_scanf_float+0x70>
 8006e92:	f04f 0b03 	mov.w	fp, #3
 8006e96:	e7da      	b.n	8006e4e <_scanf_float+0x182>
 8006e98:	f1bb 0f06 	cmp.w	fp, #6
 8006e9c:	f47f af4e 	bne.w	8006d3c <_scanf_float+0x70>
 8006ea0:	f04f 0b07 	mov.w	fp, #7
 8006ea4:	e7d3      	b.n	8006e4e <_scanf_float+0x182>
 8006ea6:	6821      	ldr	r1, [r4, #0]
 8006ea8:	0588      	lsls	r0, r1, #22
 8006eaa:	f57f af47 	bpl.w	8006d3c <_scanf_float+0x70>
 8006eae:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006eb2:	6021      	str	r1, [r4, #0]
 8006eb4:	f8cd 9008 	str.w	r9, [sp, #8]
 8006eb8:	e7c9      	b.n	8006e4e <_scanf_float+0x182>
 8006eba:	6821      	ldr	r1, [r4, #0]
 8006ebc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006ec0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006ec4:	d006      	beq.n	8006ed4 <_scanf_float+0x208>
 8006ec6:	0548      	lsls	r0, r1, #21
 8006ec8:	f57f af38 	bpl.w	8006d3c <_scanf_float+0x70>
 8006ecc:	f1b9 0f00 	cmp.w	r9, #0
 8006ed0:	f43f af3b 	beq.w	8006d4a <_scanf_float+0x7e>
 8006ed4:	0588      	lsls	r0, r1, #22
 8006ed6:	bf58      	it	pl
 8006ed8:	9802      	ldrpl	r0, [sp, #8]
 8006eda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006ede:	bf58      	it	pl
 8006ee0:	eba9 0000 	subpl.w	r0, r9, r0
 8006ee4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006ee8:	bf58      	it	pl
 8006eea:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006eee:	6021      	str	r1, [r4, #0]
 8006ef0:	f04f 0900 	mov.w	r9, #0
 8006ef4:	e7ab      	b.n	8006e4e <_scanf_float+0x182>
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	e7a9      	b.n	8006e4e <_scanf_float+0x182>
 8006efa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006efe:	9205      	str	r2, [sp, #20]
 8006f00:	4631      	mov	r1, r6
 8006f02:	4638      	mov	r0, r7
 8006f04:	4798      	blx	r3
 8006f06:	9a05      	ldr	r2, [sp, #20]
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	f43f af04 	beq.w	8006d16 <_scanf_float+0x4a>
 8006f0e:	e715      	b.n	8006d3c <_scanf_float+0x70>
 8006f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	4798      	blx	r3
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	6123      	str	r3, [r4, #16]
 8006f24:	e715      	b.n	8006d52 <_scanf_float+0x86>
 8006f26:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006f2a:	2b06      	cmp	r3, #6
 8006f2c:	d80a      	bhi.n	8006f44 <_scanf_float+0x278>
 8006f2e:	f1bb 0f02 	cmp.w	fp, #2
 8006f32:	d968      	bls.n	8007006 <_scanf_float+0x33a>
 8006f34:	f1ab 0b03 	sub.w	fp, fp, #3
 8006f38:	fa5f fb8b 	uxtb.w	fp, fp
 8006f3c:	eba5 0b0b 	sub.w	fp, r5, fp
 8006f40:	455d      	cmp	r5, fp
 8006f42:	d14b      	bne.n	8006fdc <_scanf_float+0x310>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	05da      	lsls	r2, r3, #23
 8006f48:	d51f      	bpl.n	8006f8a <_scanf_float+0x2be>
 8006f4a:	055b      	lsls	r3, r3, #21
 8006f4c:	d468      	bmi.n	8007020 <_scanf_float+0x354>
 8006f4e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006f52:	6923      	ldr	r3, [r4, #16]
 8006f54:	2965      	cmp	r1, #101	; 0x65
 8006f56:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f5a:	f105 3bff 	add.w	fp, r5, #4294967295
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	d00d      	beq.n	8006f7e <_scanf_float+0x2b2>
 8006f62:	2945      	cmp	r1, #69	; 0x45
 8006f64:	d00b      	beq.n	8006f7e <_scanf_float+0x2b2>
 8006f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f6a:	4632      	mov	r2, r6
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	4798      	blx	r3
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	f1a5 0b02 	sub.w	fp, r5, #2
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f82:	4632      	mov	r2, r6
 8006f84:	4638      	mov	r0, r7
 8006f86:	4798      	blx	r3
 8006f88:	465d      	mov	r5, fp
 8006f8a:	6826      	ldr	r6, [r4, #0]
 8006f8c:	f016 0610 	ands.w	r6, r6, #16
 8006f90:	d17a      	bne.n	8007088 <_scanf_float+0x3bc>
 8006f92:	702e      	strb	r6, [r5, #0]
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9e:	d142      	bne.n	8007026 <_scanf_float+0x35a>
 8006fa0:	9b02      	ldr	r3, [sp, #8]
 8006fa2:	eba9 0303 	sub.w	r3, r9, r3
 8006fa6:	425a      	negs	r2, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d149      	bne.n	8007040 <_scanf_float+0x374>
 8006fac:	2200      	movs	r2, #0
 8006fae:	4641      	mov	r1, r8
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f000 fea5 	bl	8007d00 <_strtod_r>
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	f8da 3000 	ldr.w	r3, [sl]
 8006fbc:	f015 0f02 	tst.w	r5, #2
 8006fc0:	f103 0204 	add.w	r2, r3, #4
 8006fc4:	ec59 8b10 	vmov	r8, r9, d0
 8006fc8:	f8ca 2000 	str.w	r2, [sl]
 8006fcc:	d043      	beq.n	8007056 <_scanf_float+0x38a>
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	e9c3 8900 	strd	r8, r9, [r3]
 8006fd4:	68e3      	ldr	r3, [r4, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60e3      	str	r3, [r4, #12]
 8006fda:	e6be      	b.n	8006d5a <_scanf_float+0x8e>
 8006fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fe0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	4798      	blx	r3
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	e7a6      	b.n	8006f40 <_scanf_float+0x274>
 8006ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ff6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ffa:	4632      	mov	r2, r6
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	4798      	blx	r3
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	3b01      	subs	r3, #1
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	4545      	cmp	r5, r8
 8007008:	d8f3      	bhi.n	8006ff2 <_scanf_float+0x326>
 800700a:	e6a5      	b.n	8006d58 <_scanf_float+0x8c>
 800700c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007010:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007014:	4632      	mov	r2, r6
 8007016:	4638      	mov	r0, r7
 8007018:	4798      	blx	r3
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	3b01      	subs	r3, #1
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	4545      	cmp	r5, r8
 8007022:	d8f3      	bhi.n	800700c <_scanf_float+0x340>
 8007024:	e698      	b.n	8006d58 <_scanf_float+0x8c>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0bf      	beq.n	8006fac <_scanf_float+0x2e0>
 800702c:	9904      	ldr	r1, [sp, #16]
 800702e:	230a      	movs	r3, #10
 8007030:	4632      	mov	r2, r6
 8007032:	3101      	adds	r1, #1
 8007034:	4638      	mov	r0, r7
 8007036:	f000 feef 	bl	8007e18 <_strtol_r>
 800703a:	9b03      	ldr	r3, [sp, #12]
 800703c:	9d04      	ldr	r5, [sp, #16]
 800703e:	1ac2      	subs	r2, r0, r3
 8007040:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007044:	429d      	cmp	r5, r3
 8007046:	bf28      	it	cs
 8007048:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800704c:	490f      	ldr	r1, [pc, #60]	; (800708c <_scanf_float+0x3c0>)
 800704e:	4628      	mov	r0, r5
 8007050:	f000 f824 	bl	800709c <siprintf>
 8007054:	e7aa      	b.n	8006fac <_scanf_float+0x2e0>
 8007056:	f015 0504 	ands.w	r5, r5, #4
 800705a:	d1b8      	bne.n	8006fce <_scanf_float+0x302>
 800705c:	681f      	ldr	r7, [r3, #0]
 800705e:	ee10 2a10 	vmov	r2, s0
 8007062:	464b      	mov	r3, r9
 8007064:	ee10 0a10 	vmov	r0, s0
 8007068:	4649      	mov	r1, r9
 800706a:	f7f9 fd67 	bl	8000b3c <__aeabi_dcmpun>
 800706e:	b128      	cbz	r0, 800707c <_scanf_float+0x3b0>
 8007070:	4628      	mov	r0, r5
 8007072:	f000 f80d 	bl	8007090 <nanf>
 8007076:	ed87 0a00 	vstr	s0, [r7]
 800707a:	e7ab      	b.n	8006fd4 <_scanf_float+0x308>
 800707c:	4640      	mov	r0, r8
 800707e:	4649      	mov	r1, r9
 8007080:	f7f9 fdba 	bl	8000bf8 <__aeabi_d2f>
 8007084:	6038      	str	r0, [r7, #0]
 8007086:	e7a5      	b.n	8006fd4 <_scanf_float+0x308>
 8007088:	2600      	movs	r6, #0
 800708a:	e666      	b.n	8006d5a <_scanf_float+0x8e>
 800708c:	0800b554 	.word	0x0800b554

08007090 <nanf>:
 8007090:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007098 <nanf+0x8>
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	7fc00000 	.word	0x7fc00000

0800709c <siprintf>:
 800709c:	b40e      	push	{r1, r2, r3}
 800709e:	b500      	push	{lr}
 80070a0:	b09c      	sub	sp, #112	; 0x70
 80070a2:	ab1d      	add	r3, sp, #116	; 0x74
 80070a4:	9002      	str	r0, [sp, #8]
 80070a6:	9006      	str	r0, [sp, #24]
 80070a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070ac:	4809      	ldr	r0, [pc, #36]	; (80070d4 <siprintf+0x38>)
 80070ae:	9107      	str	r1, [sp, #28]
 80070b0:	9104      	str	r1, [sp, #16]
 80070b2:	4909      	ldr	r1, [pc, #36]	; (80070d8 <siprintf+0x3c>)
 80070b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b8:	9105      	str	r1, [sp, #20]
 80070ba:	6800      	ldr	r0, [r0, #0]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	a902      	add	r1, sp, #8
 80070c0:	f002 fd66 	bl	8009b90 <_svfiprintf_r>
 80070c4:	9b02      	ldr	r3, [sp, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	b01c      	add	sp, #112	; 0x70
 80070cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070d0:	b003      	add	sp, #12
 80070d2:	4770      	bx	lr
 80070d4:	20000024 	.word	0x20000024
 80070d8:	ffff0208 	.word	0xffff0208

080070dc <sulp>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	4604      	mov	r4, r0
 80070e0:	460d      	mov	r5, r1
 80070e2:	ec45 4b10 	vmov	d0, r4, r5
 80070e6:	4616      	mov	r6, r2
 80070e8:	f002 fb0e 	bl	8009708 <__ulp>
 80070ec:	ec51 0b10 	vmov	r0, r1, d0
 80070f0:	b17e      	cbz	r6, 8007112 <sulp+0x36>
 80070f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dd09      	ble.n	8007112 <sulp+0x36>
 80070fe:	051b      	lsls	r3, r3, #20
 8007100:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007104:	2400      	movs	r4, #0
 8007106:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800710a:	4622      	mov	r2, r4
 800710c:	462b      	mov	r3, r5
 800710e:	f7f9 fa7b 	bl	8000608 <__aeabi_dmul>
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	0000      	movs	r0, r0
	...

08007118 <_strtod_l>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	461f      	mov	r7, r3
 800711e:	b0a1      	sub	sp, #132	; 0x84
 8007120:	2300      	movs	r3, #0
 8007122:	4681      	mov	r9, r0
 8007124:	4638      	mov	r0, r7
 8007126:	460e      	mov	r6, r1
 8007128:	9217      	str	r2, [sp, #92]	; 0x5c
 800712a:	931c      	str	r3, [sp, #112]	; 0x70
 800712c:	f001 fff5 	bl	800911a <__localeconv_l>
 8007130:	4680      	mov	r8, r0
 8007132:	6800      	ldr	r0, [r0, #0]
 8007134:	f7f9 f854 	bl	80001e0 <strlen>
 8007138:	f04f 0a00 	mov.w	sl, #0
 800713c:	4604      	mov	r4, r0
 800713e:	f04f 0b00 	mov.w	fp, #0
 8007142:	961b      	str	r6, [sp, #108]	; 0x6c
 8007144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007146:	781a      	ldrb	r2, [r3, #0]
 8007148:	2a0d      	cmp	r2, #13
 800714a:	d832      	bhi.n	80071b2 <_strtod_l+0x9a>
 800714c:	2a09      	cmp	r2, #9
 800714e:	d236      	bcs.n	80071be <_strtod_l+0xa6>
 8007150:	2a00      	cmp	r2, #0
 8007152:	d03e      	beq.n	80071d2 <_strtod_l+0xba>
 8007154:	2300      	movs	r3, #0
 8007156:	930d      	str	r3, [sp, #52]	; 0x34
 8007158:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800715a:	782b      	ldrb	r3, [r5, #0]
 800715c:	2b30      	cmp	r3, #48	; 0x30
 800715e:	f040 80ac 	bne.w	80072ba <_strtod_l+0x1a2>
 8007162:	786b      	ldrb	r3, [r5, #1]
 8007164:	2b58      	cmp	r3, #88	; 0x58
 8007166:	d001      	beq.n	800716c <_strtod_l+0x54>
 8007168:	2b78      	cmp	r3, #120	; 0x78
 800716a:	d167      	bne.n	800723c <_strtod_l+0x124>
 800716c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	ab1c      	add	r3, sp, #112	; 0x70
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	9702      	str	r7, [sp, #8]
 8007176:	ab1d      	add	r3, sp, #116	; 0x74
 8007178:	4a88      	ldr	r2, [pc, #544]	; (800739c <_strtod_l+0x284>)
 800717a:	a91b      	add	r1, sp, #108	; 0x6c
 800717c:	4648      	mov	r0, r9
 800717e:	f001 fcf2 	bl	8008b66 <__gethex>
 8007182:	f010 0407 	ands.w	r4, r0, #7
 8007186:	4606      	mov	r6, r0
 8007188:	d005      	beq.n	8007196 <_strtod_l+0x7e>
 800718a:	2c06      	cmp	r4, #6
 800718c:	d12b      	bne.n	80071e6 <_strtod_l+0xce>
 800718e:	3501      	adds	r5, #1
 8007190:	2300      	movs	r3, #0
 8007192:	951b      	str	r5, [sp, #108]	; 0x6c
 8007194:	930d      	str	r3, [sp, #52]	; 0x34
 8007196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007198:	2b00      	cmp	r3, #0
 800719a:	f040 859a 	bne.w	8007cd2 <_strtod_l+0xbba>
 800719e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a0:	b1e3      	cbz	r3, 80071dc <_strtod_l+0xc4>
 80071a2:	4652      	mov	r2, sl
 80071a4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071a8:	ec43 2b10 	vmov	d0, r2, r3
 80071ac:	b021      	add	sp, #132	; 0x84
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	2a2b      	cmp	r2, #43	; 0x2b
 80071b4:	d015      	beq.n	80071e2 <_strtod_l+0xca>
 80071b6:	2a2d      	cmp	r2, #45	; 0x2d
 80071b8:	d004      	beq.n	80071c4 <_strtod_l+0xac>
 80071ba:	2a20      	cmp	r2, #32
 80071bc:	d1ca      	bne.n	8007154 <_strtod_l+0x3c>
 80071be:	3301      	adds	r3, #1
 80071c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80071c2:	e7bf      	b.n	8007144 <_strtod_l+0x2c>
 80071c4:	2201      	movs	r2, #1
 80071c6:	920d      	str	r2, [sp, #52]	; 0x34
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1c2      	bne.n	8007158 <_strtod_l+0x40>
 80071d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f040 8579 	bne.w	8007cce <_strtod_l+0xbb6>
 80071dc:	4652      	mov	r2, sl
 80071de:	465b      	mov	r3, fp
 80071e0:	e7e2      	b.n	80071a8 <_strtod_l+0x90>
 80071e2:	2200      	movs	r2, #0
 80071e4:	e7ef      	b.n	80071c6 <_strtod_l+0xae>
 80071e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80071e8:	b13a      	cbz	r2, 80071fa <_strtod_l+0xe2>
 80071ea:	2135      	movs	r1, #53	; 0x35
 80071ec:	a81e      	add	r0, sp, #120	; 0x78
 80071ee:	f002 fb83 	bl	80098f8 <__copybits>
 80071f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071f4:	4648      	mov	r0, r9
 80071f6:	f001 ffef 	bl	80091d8 <_Bfree>
 80071fa:	3c01      	subs	r4, #1
 80071fc:	2c04      	cmp	r4, #4
 80071fe:	d806      	bhi.n	800720e <_strtod_l+0xf6>
 8007200:	e8df f004 	tbb	[pc, r4]
 8007204:	1714030a 	.word	0x1714030a
 8007208:	0a          	.byte	0x0a
 8007209:	00          	.byte	0x00
 800720a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800720e:	0730      	lsls	r0, r6, #28
 8007210:	d5c1      	bpl.n	8007196 <_strtod_l+0x7e>
 8007212:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007216:	e7be      	b.n	8007196 <_strtod_l+0x7e>
 8007218:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800721c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800721e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007222:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007226:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800722a:	e7f0      	b.n	800720e <_strtod_l+0xf6>
 800722c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80073a0 <_strtod_l+0x288>
 8007230:	e7ed      	b.n	800720e <_strtod_l+0xf6>
 8007232:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007236:	f04f 3aff 	mov.w	sl, #4294967295
 800723a:	e7e8      	b.n	800720e <_strtod_l+0xf6>
 800723c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	921b      	str	r2, [sp, #108]	; 0x6c
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b30      	cmp	r3, #48	; 0x30
 8007246:	d0f9      	beq.n	800723c <_strtod_l+0x124>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0a4      	beq.n	8007196 <_strtod_l+0x7e>
 800724c:	2301      	movs	r3, #1
 800724e:	2500      	movs	r5, #0
 8007250:	9306      	str	r3, [sp, #24]
 8007252:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007254:	9308      	str	r3, [sp, #32]
 8007256:	9507      	str	r5, [sp, #28]
 8007258:	9505      	str	r5, [sp, #20]
 800725a:	220a      	movs	r2, #10
 800725c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800725e:	7807      	ldrb	r7, [r0, #0]
 8007260:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007264:	b2d9      	uxtb	r1, r3
 8007266:	2909      	cmp	r1, #9
 8007268:	d929      	bls.n	80072be <_strtod_l+0x1a6>
 800726a:	4622      	mov	r2, r4
 800726c:	f8d8 1000 	ldr.w	r1, [r8]
 8007270:	f002 fd96 	bl	8009da0 <strncmp>
 8007274:	2800      	cmp	r0, #0
 8007276:	d031      	beq.n	80072dc <_strtod_l+0x1c4>
 8007278:	2000      	movs	r0, #0
 800727a:	9c05      	ldr	r4, [sp, #20]
 800727c:	9004      	str	r0, [sp, #16]
 800727e:	463b      	mov	r3, r7
 8007280:	4602      	mov	r2, r0
 8007282:	2b65      	cmp	r3, #101	; 0x65
 8007284:	d001      	beq.n	800728a <_strtod_l+0x172>
 8007286:	2b45      	cmp	r3, #69	; 0x45
 8007288:	d114      	bne.n	80072b4 <_strtod_l+0x19c>
 800728a:	b924      	cbnz	r4, 8007296 <_strtod_l+0x17e>
 800728c:	b910      	cbnz	r0, 8007294 <_strtod_l+0x17c>
 800728e:	9b06      	ldr	r3, [sp, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d09e      	beq.n	80071d2 <_strtod_l+0xba>
 8007294:	2400      	movs	r4, #0
 8007296:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007298:	1c73      	adds	r3, r6, #1
 800729a:	931b      	str	r3, [sp, #108]	; 0x6c
 800729c:	7873      	ldrb	r3, [r6, #1]
 800729e:	2b2b      	cmp	r3, #43	; 0x2b
 80072a0:	d078      	beq.n	8007394 <_strtod_l+0x27c>
 80072a2:	2b2d      	cmp	r3, #45	; 0x2d
 80072a4:	d070      	beq.n	8007388 <_strtod_l+0x270>
 80072a6:	f04f 0c00 	mov.w	ip, #0
 80072aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80072ae:	2f09      	cmp	r7, #9
 80072b0:	d97c      	bls.n	80073ac <_strtod_l+0x294>
 80072b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80072b4:	f04f 0e00 	mov.w	lr, #0
 80072b8:	e09a      	b.n	80073f0 <_strtod_l+0x2d8>
 80072ba:	2300      	movs	r3, #0
 80072bc:	e7c7      	b.n	800724e <_strtod_l+0x136>
 80072be:	9905      	ldr	r1, [sp, #20]
 80072c0:	2908      	cmp	r1, #8
 80072c2:	bfdd      	ittte	le
 80072c4:	9907      	ldrle	r1, [sp, #28]
 80072c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80072ca:	9307      	strle	r3, [sp, #28]
 80072cc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80072d0:	9b05      	ldr	r3, [sp, #20]
 80072d2:	3001      	adds	r0, #1
 80072d4:	3301      	adds	r3, #1
 80072d6:	9305      	str	r3, [sp, #20]
 80072d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80072da:	e7bf      	b.n	800725c <_strtod_l+0x144>
 80072dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072de:	191a      	adds	r2, r3, r4
 80072e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80072e2:	9a05      	ldr	r2, [sp, #20]
 80072e4:	5d1b      	ldrb	r3, [r3, r4]
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	d037      	beq.n	800735a <_strtod_l+0x242>
 80072ea:	9c05      	ldr	r4, [sp, #20]
 80072ec:	4602      	mov	r2, r0
 80072ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80072f2:	2909      	cmp	r1, #9
 80072f4:	d913      	bls.n	800731e <_strtod_l+0x206>
 80072f6:	2101      	movs	r1, #1
 80072f8:	9104      	str	r1, [sp, #16]
 80072fa:	e7c2      	b.n	8007282 <_strtod_l+0x16a>
 80072fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	921b      	str	r2, [sp, #108]	; 0x6c
 8007302:	785b      	ldrb	r3, [r3, #1]
 8007304:	3001      	adds	r0, #1
 8007306:	2b30      	cmp	r3, #48	; 0x30
 8007308:	d0f8      	beq.n	80072fc <_strtod_l+0x1e4>
 800730a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800730e:	2a08      	cmp	r2, #8
 8007310:	f200 84e4 	bhi.w	8007cdc <_strtod_l+0xbc4>
 8007314:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007316:	9208      	str	r2, [sp, #32]
 8007318:	4602      	mov	r2, r0
 800731a:	2000      	movs	r0, #0
 800731c:	4604      	mov	r4, r0
 800731e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007322:	f100 0101 	add.w	r1, r0, #1
 8007326:	d012      	beq.n	800734e <_strtod_l+0x236>
 8007328:	440a      	add	r2, r1
 800732a:	eb00 0c04 	add.w	ip, r0, r4
 800732e:	4621      	mov	r1, r4
 8007330:	270a      	movs	r7, #10
 8007332:	458c      	cmp	ip, r1
 8007334:	d113      	bne.n	800735e <_strtod_l+0x246>
 8007336:	1821      	adds	r1, r4, r0
 8007338:	2908      	cmp	r1, #8
 800733a:	f104 0401 	add.w	r4, r4, #1
 800733e:	4404      	add	r4, r0
 8007340:	dc19      	bgt.n	8007376 <_strtod_l+0x25e>
 8007342:	9b07      	ldr	r3, [sp, #28]
 8007344:	210a      	movs	r1, #10
 8007346:	fb01 e303 	mla	r3, r1, r3, lr
 800734a:	9307      	str	r3, [sp, #28]
 800734c:	2100      	movs	r1, #0
 800734e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007350:	1c58      	adds	r0, r3, #1
 8007352:	901b      	str	r0, [sp, #108]	; 0x6c
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	4608      	mov	r0, r1
 8007358:	e7c9      	b.n	80072ee <_strtod_l+0x1d6>
 800735a:	9805      	ldr	r0, [sp, #20]
 800735c:	e7d3      	b.n	8007306 <_strtod_l+0x1ee>
 800735e:	2908      	cmp	r1, #8
 8007360:	f101 0101 	add.w	r1, r1, #1
 8007364:	dc03      	bgt.n	800736e <_strtod_l+0x256>
 8007366:	9b07      	ldr	r3, [sp, #28]
 8007368:	437b      	muls	r3, r7
 800736a:	9307      	str	r3, [sp, #28]
 800736c:	e7e1      	b.n	8007332 <_strtod_l+0x21a>
 800736e:	2910      	cmp	r1, #16
 8007370:	bfd8      	it	le
 8007372:	437d      	mulle	r5, r7
 8007374:	e7dd      	b.n	8007332 <_strtod_l+0x21a>
 8007376:	2c10      	cmp	r4, #16
 8007378:	bfdc      	itt	le
 800737a:	210a      	movle	r1, #10
 800737c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007380:	e7e4      	b.n	800734c <_strtod_l+0x234>
 8007382:	2301      	movs	r3, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	e781      	b.n	800728c <_strtod_l+0x174>
 8007388:	f04f 0c01 	mov.w	ip, #1
 800738c:	1cb3      	adds	r3, r6, #2
 800738e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007390:	78b3      	ldrb	r3, [r6, #2]
 8007392:	e78a      	b.n	80072aa <_strtod_l+0x192>
 8007394:	f04f 0c00 	mov.w	ip, #0
 8007398:	e7f8      	b.n	800738c <_strtod_l+0x274>
 800739a:	bf00      	nop
 800739c:	0800b55c 	.word	0x0800b55c
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073a6:	1c5f      	adds	r7, r3, #1
 80073a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b30      	cmp	r3, #48	; 0x30
 80073ae:	d0f9      	beq.n	80073a4 <_strtod_l+0x28c>
 80073b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80073b4:	2f08      	cmp	r7, #8
 80073b6:	f63f af7d 	bhi.w	80072b4 <_strtod_l+0x19c>
 80073ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80073be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073c0:	930a      	str	r3, [sp, #40]	; 0x28
 80073c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073c4:	1c5f      	adds	r7, r3, #1
 80073c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80073ce:	f1b8 0f09 	cmp.w	r8, #9
 80073d2:	d937      	bls.n	8007444 <_strtod_l+0x32c>
 80073d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073d6:	1a7f      	subs	r7, r7, r1
 80073d8:	2f08      	cmp	r7, #8
 80073da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80073de:	dc37      	bgt.n	8007450 <_strtod_l+0x338>
 80073e0:	45be      	cmp	lr, r7
 80073e2:	bfa8      	it	ge
 80073e4:	46be      	movge	lr, r7
 80073e6:	f1bc 0f00 	cmp.w	ip, #0
 80073ea:	d001      	beq.n	80073f0 <_strtod_l+0x2d8>
 80073ec:	f1ce 0e00 	rsb	lr, lr, #0
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	d151      	bne.n	8007498 <_strtod_l+0x380>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	f47f aece 	bne.w	8007196 <_strtod_l+0x7e>
 80073fa:	9a06      	ldr	r2, [sp, #24]
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	f47f aeca 	bne.w	8007196 <_strtod_l+0x7e>
 8007402:	9a04      	ldr	r2, [sp, #16]
 8007404:	2a00      	cmp	r2, #0
 8007406:	f47f aee4 	bne.w	80071d2 <_strtod_l+0xba>
 800740a:	2b4e      	cmp	r3, #78	; 0x4e
 800740c:	d027      	beq.n	800745e <_strtod_l+0x346>
 800740e:	dc21      	bgt.n	8007454 <_strtod_l+0x33c>
 8007410:	2b49      	cmp	r3, #73	; 0x49
 8007412:	f47f aede 	bne.w	80071d2 <_strtod_l+0xba>
 8007416:	49a0      	ldr	r1, [pc, #640]	; (8007698 <_strtod_l+0x580>)
 8007418:	a81b      	add	r0, sp, #108	; 0x6c
 800741a:	f001 fdd7 	bl	8008fcc <__match>
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f aed7 	beq.w	80071d2 <_strtod_l+0xba>
 8007424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007426:	499d      	ldr	r1, [pc, #628]	; (800769c <_strtod_l+0x584>)
 8007428:	3b01      	subs	r3, #1
 800742a:	a81b      	add	r0, sp, #108	; 0x6c
 800742c:	931b      	str	r3, [sp, #108]	; 0x6c
 800742e:	f001 fdcd 	bl	8008fcc <__match>
 8007432:	b910      	cbnz	r0, 800743a <_strtod_l+0x322>
 8007434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007436:	3301      	adds	r3, #1
 8007438:	931b      	str	r3, [sp, #108]	; 0x6c
 800743a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80076b0 <_strtod_l+0x598>
 800743e:	f04f 0a00 	mov.w	sl, #0
 8007442:	e6a8      	b.n	8007196 <_strtod_l+0x7e>
 8007444:	210a      	movs	r1, #10
 8007446:	fb01 3e0e 	mla	lr, r1, lr, r3
 800744a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800744e:	e7b8      	b.n	80073c2 <_strtod_l+0x2aa>
 8007450:	46be      	mov	lr, r7
 8007452:	e7c8      	b.n	80073e6 <_strtod_l+0x2ce>
 8007454:	2b69      	cmp	r3, #105	; 0x69
 8007456:	d0de      	beq.n	8007416 <_strtod_l+0x2fe>
 8007458:	2b6e      	cmp	r3, #110	; 0x6e
 800745a:	f47f aeba 	bne.w	80071d2 <_strtod_l+0xba>
 800745e:	4990      	ldr	r1, [pc, #576]	; (80076a0 <_strtod_l+0x588>)
 8007460:	a81b      	add	r0, sp, #108	; 0x6c
 8007462:	f001 fdb3 	bl	8008fcc <__match>
 8007466:	2800      	cmp	r0, #0
 8007468:	f43f aeb3 	beq.w	80071d2 <_strtod_l+0xba>
 800746c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b28      	cmp	r3, #40	; 0x28
 8007472:	d10e      	bne.n	8007492 <_strtod_l+0x37a>
 8007474:	aa1e      	add	r2, sp, #120	; 0x78
 8007476:	498b      	ldr	r1, [pc, #556]	; (80076a4 <_strtod_l+0x58c>)
 8007478:	a81b      	add	r0, sp, #108	; 0x6c
 800747a:	f001 fdbb 	bl	8008ff4 <__hexnan>
 800747e:	2805      	cmp	r0, #5
 8007480:	d107      	bne.n	8007492 <_strtod_l+0x37a>
 8007482:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007484:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007488:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800748c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007490:	e681      	b.n	8007196 <_strtod_l+0x7e>
 8007492:	f8df b224 	ldr.w	fp, [pc, #548]	; 80076b8 <_strtod_l+0x5a0>
 8007496:	e7d2      	b.n	800743e <_strtod_l+0x326>
 8007498:	ebae 0302 	sub.w	r3, lr, r2
 800749c:	9306      	str	r3, [sp, #24]
 800749e:	9b05      	ldr	r3, [sp, #20]
 80074a0:	9807      	ldr	r0, [sp, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bf08      	it	eq
 80074a6:	4623      	moveq	r3, r4
 80074a8:	2c10      	cmp	r4, #16
 80074aa:	9305      	str	r3, [sp, #20]
 80074ac:	46a0      	mov	r8, r4
 80074ae:	bfa8      	it	ge
 80074b0:	f04f 0810 	movge.w	r8, #16
 80074b4:	f7f9 f82e 	bl	8000514 <__aeabi_ui2d>
 80074b8:	2c09      	cmp	r4, #9
 80074ba:	4682      	mov	sl, r0
 80074bc:	468b      	mov	fp, r1
 80074be:	dc13      	bgt.n	80074e8 <_strtod_l+0x3d0>
 80074c0:	9b06      	ldr	r3, [sp, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f43f ae67 	beq.w	8007196 <_strtod_l+0x7e>
 80074c8:	9b06      	ldr	r3, [sp, #24]
 80074ca:	dd7a      	ble.n	80075c2 <_strtod_l+0x4aa>
 80074cc:	2b16      	cmp	r3, #22
 80074ce:	dc61      	bgt.n	8007594 <_strtod_l+0x47c>
 80074d0:	4a75      	ldr	r2, [pc, #468]	; (80076a8 <_strtod_l+0x590>)
 80074d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80074d6:	e9de 0100 	ldrd	r0, r1, [lr]
 80074da:	4652      	mov	r2, sl
 80074dc:	465b      	mov	r3, fp
 80074de:	f7f9 f893 	bl	8000608 <__aeabi_dmul>
 80074e2:	4682      	mov	sl, r0
 80074e4:	468b      	mov	fp, r1
 80074e6:	e656      	b.n	8007196 <_strtod_l+0x7e>
 80074e8:	4b6f      	ldr	r3, [pc, #444]	; (80076a8 <_strtod_l+0x590>)
 80074ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074f2:	f7f9 f889 	bl	8000608 <__aeabi_dmul>
 80074f6:	4606      	mov	r6, r0
 80074f8:	4628      	mov	r0, r5
 80074fa:	460f      	mov	r7, r1
 80074fc:	f7f9 f80a 	bl	8000514 <__aeabi_ui2d>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4630      	mov	r0, r6
 8007506:	4639      	mov	r1, r7
 8007508:	f7f8 fec8 	bl	800029c <__adddf3>
 800750c:	2c0f      	cmp	r4, #15
 800750e:	4682      	mov	sl, r0
 8007510:	468b      	mov	fp, r1
 8007512:	ddd5      	ble.n	80074c0 <_strtod_l+0x3a8>
 8007514:	9b06      	ldr	r3, [sp, #24]
 8007516:	eba4 0808 	sub.w	r8, r4, r8
 800751a:	4498      	add	r8, r3
 800751c:	f1b8 0f00 	cmp.w	r8, #0
 8007520:	f340 8096 	ble.w	8007650 <_strtod_l+0x538>
 8007524:	f018 030f 	ands.w	r3, r8, #15
 8007528:	d00a      	beq.n	8007540 <_strtod_l+0x428>
 800752a:	495f      	ldr	r1, [pc, #380]	; (80076a8 <_strtod_l+0x590>)
 800752c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007530:	4652      	mov	r2, sl
 8007532:	465b      	mov	r3, fp
 8007534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007538:	f7f9 f866 	bl	8000608 <__aeabi_dmul>
 800753c:	4682      	mov	sl, r0
 800753e:	468b      	mov	fp, r1
 8007540:	f038 080f 	bics.w	r8, r8, #15
 8007544:	d073      	beq.n	800762e <_strtod_l+0x516>
 8007546:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800754a:	dd47      	ble.n	80075dc <_strtod_l+0x4c4>
 800754c:	2400      	movs	r4, #0
 800754e:	46a0      	mov	r8, r4
 8007550:	9407      	str	r4, [sp, #28]
 8007552:	9405      	str	r4, [sp, #20]
 8007554:	2322      	movs	r3, #34	; 0x22
 8007556:	f8df b158 	ldr.w	fp, [pc, #344]	; 80076b0 <_strtod_l+0x598>
 800755a:	f8c9 3000 	str.w	r3, [r9]
 800755e:	f04f 0a00 	mov.w	sl, #0
 8007562:	9b07      	ldr	r3, [sp, #28]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f43f ae16 	beq.w	8007196 <_strtod_l+0x7e>
 800756a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800756c:	4648      	mov	r0, r9
 800756e:	f001 fe33 	bl	80091d8 <_Bfree>
 8007572:	9905      	ldr	r1, [sp, #20]
 8007574:	4648      	mov	r0, r9
 8007576:	f001 fe2f 	bl	80091d8 <_Bfree>
 800757a:	4641      	mov	r1, r8
 800757c:	4648      	mov	r0, r9
 800757e:	f001 fe2b 	bl	80091d8 <_Bfree>
 8007582:	9907      	ldr	r1, [sp, #28]
 8007584:	4648      	mov	r0, r9
 8007586:	f001 fe27 	bl	80091d8 <_Bfree>
 800758a:	4621      	mov	r1, r4
 800758c:	4648      	mov	r0, r9
 800758e:	f001 fe23 	bl	80091d8 <_Bfree>
 8007592:	e600      	b.n	8007196 <_strtod_l+0x7e>
 8007594:	9a06      	ldr	r2, [sp, #24]
 8007596:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800759a:	4293      	cmp	r3, r2
 800759c:	dbba      	blt.n	8007514 <_strtod_l+0x3fc>
 800759e:	4d42      	ldr	r5, [pc, #264]	; (80076a8 <_strtod_l+0x590>)
 80075a0:	f1c4 040f 	rsb	r4, r4, #15
 80075a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80075a8:	4652      	mov	r2, sl
 80075aa:	465b      	mov	r3, fp
 80075ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b0:	f7f9 f82a 	bl	8000608 <__aeabi_dmul>
 80075b4:	9b06      	ldr	r3, [sp, #24]
 80075b6:	1b1c      	subs	r4, r3, r4
 80075b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80075bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075c0:	e78d      	b.n	80074de <_strtod_l+0x3c6>
 80075c2:	f113 0f16 	cmn.w	r3, #22
 80075c6:	dba5      	blt.n	8007514 <_strtod_l+0x3fc>
 80075c8:	4a37      	ldr	r2, [pc, #220]	; (80076a8 <_strtod_l+0x590>)
 80075ca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80075ce:	e9d2 2300 	ldrd	r2, r3, [r2]
 80075d2:	4650      	mov	r0, sl
 80075d4:	4659      	mov	r1, fp
 80075d6:	f7f9 f941 	bl	800085c <__aeabi_ddiv>
 80075da:	e782      	b.n	80074e2 <_strtod_l+0x3ca>
 80075dc:	2300      	movs	r3, #0
 80075de:	4e33      	ldr	r6, [pc, #204]	; (80076ac <_strtod_l+0x594>)
 80075e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075e4:	4650      	mov	r0, sl
 80075e6:	4659      	mov	r1, fp
 80075e8:	461d      	mov	r5, r3
 80075ea:	f1b8 0f01 	cmp.w	r8, #1
 80075ee:	dc21      	bgt.n	8007634 <_strtod_l+0x51c>
 80075f0:	b10b      	cbz	r3, 80075f6 <_strtod_l+0x4de>
 80075f2:	4682      	mov	sl, r0
 80075f4:	468b      	mov	fp, r1
 80075f6:	4b2d      	ldr	r3, [pc, #180]	; (80076ac <_strtod_l+0x594>)
 80075f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007600:	4652      	mov	r2, sl
 8007602:	465b      	mov	r3, fp
 8007604:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007608:	f7f8 fffe 	bl	8000608 <__aeabi_dmul>
 800760c:	4b28      	ldr	r3, [pc, #160]	; (80076b0 <_strtod_l+0x598>)
 800760e:	460a      	mov	r2, r1
 8007610:	400b      	ands	r3, r1
 8007612:	4928      	ldr	r1, [pc, #160]	; (80076b4 <_strtod_l+0x59c>)
 8007614:	428b      	cmp	r3, r1
 8007616:	4682      	mov	sl, r0
 8007618:	d898      	bhi.n	800754c <_strtod_l+0x434>
 800761a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800761e:	428b      	cmp	r3, r1
 8007620:	bf86      	itte	hi
 8007622:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80076bc <_strtod_l+0x5a4>
 8007626:	f04f 3aff 	movhi.w	sl, #4294967295
 800762a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800762e:	2300      	movs	r3, #0
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	e077      	b.n	8007724 <_strtod_l+0x60c>
 8007634:	f018 0f01 	tst.w	r8, #1
 8007638:	d006      	beq.n	8007648 <_strtod_l+0x530>
 800763a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f7f8 ffe1 	bl	8000608 <__aeabi_dmul>
 8007646:	2301      	movs	r3, #1
 8007648:	3501      	adds	r5, #1
 800764a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800764e:	e7cc      	b.n	80075ea <_strtod_l+0x4d2>
 8007650:	d0ed      	beq.n	800762e <_strtod_l+0x516>
 8007652:	f1c8 0800 	rsb	r8, r8, #0
 8007656:	f018 020f 	ands.w	r2, r8, #15
 800765a:	d00a      	beq.n	8007672 <_strtod_l+0x55a>
 800765c:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <_strtod_l+0x590>)
 800765e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007662:	4650      	mov	r0, sl
 8007664:	4659      	mov	r1, fp
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f7f9 f8f7 	bl	800085c <__aeabi_ddiv>
 800766e:	4682      	mov	sl, r0
 8007670:	468b      	mov	fp, r1
 8007672:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007676:	d0da      	beq.n	800762e <_strtod_l+0x516>
 8007678:	f1b8 0f1f 	cmp.w	r8, #31
 800767c:	dd20      	ble.n	80076c0 <_strtod_l+0x5a8>
 800767e:	2400      	movs	r4, #0
 8007680:	46a0      	mov	r8, r4
 8007682:	9407      	str	r4, [sp, #28]
 8007684:	9405      	str	r4, [sp, #20]
 8007686:	2322      	movs	r3, #34	; 0x22
 8007688:	f04f 0a00 	mov.w	sl, #0
 800768c:	f04f 0b00 	mov.w	fp, #0
 8007690:	f8c9 3000 	str.w	r3, [r9]
 8007694:	e765      	b.n	8007562 <_strtod_l+0x44a>
 8007696:	bf00      	nop
 8007698:	0800b525 	.word	0x0800b525
 800769c:	0800b5b3 	.word	0x0800b5b3
 80076a0:	0800b52d 	.word	0x0800b52d
 80076a4:	0800b570 	.word	0x0800b570
 80076a8:	0800b5f0 	.word	0x0800b5f0
 80076ac:	0800b5c8 	.word	0x0800b5c8
 80076b0:	7ff00000 	.word	0x7ff00000
 80076b4:	7ca00000 	.word	0x7ca00000
 80076b8:	fff80000 	.word	0xfff80000
 80076bc:	7fefffff 	.word	0x7fefffff
 80076c0:	f018 0310 	ands.w	r3, r8, #16
 80076c4:	bf18      	it	ne
 80076c6:	236a      	movne	r3, #106	; 0x6a
 80076c8:	4da0      	ldr	r5, [pc, #640]	; (800794c <_strtod_l+0x834>)
 80076ca:	9304      	str	r3, [sp, #16]
 80076cc:	4650      	mov	r0, sl
 80076ce:	4659      	mov	r1, fp
 80076d0:	2300      	movs	r3, #0
 80076d2:	f1b8 0f00 	cmp.w	r8, #0
 80076d6:	f300 810a 	bgt.w	80078ee <_strtod_l+0x7d6>
 80076da:	b10b      	cbz	r3, 80076e0 <_strtod_l+0x5c8>
 80076dc:	4682      	mov	sl, r0
 80076de:	468b      	mov	fp, r1
 80076e0:	9b04      	ldr	r3, [sp, #16]
 80076e2:	b1bb      	cbz	r3, 8007714 <_strtod_l+0x5fc>
 80076e4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80076e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	4659      	mov	r1, fp
 80076f0:	dd10      	ble.n	8007714 <_strtod_l+0x5fc>
 80076f2:	2b1f      	cmp	r3, #31
 80076f4:	f340 8107 	ble.w	8007906 <_strtod_l+0x7ee>
 80076f8:	2b34      	cmp	r3, #52	; 0x34
 80076fa:	bfde      	ittt	le
 80076fc:	3b20      	suble	r3, #32
 80076fe:	f04f 32ff 	movle.w	r2, #4294967295
 8007702:	fa02 f303 	lslle.w	r3, r2, r3
 8007706:	f04f 0a00 	mov.w	sl, #0
 800770a:	bfcc      	ite	gt
 800770c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007710:	ea03 0b01 	andle.w	fp, r3, r1
 8007714:	2200      	movs	r2, #0
 8007716:	2300      	movs	r3, #0
 8007718:	4650      	mov	r0, sl
 800771a:	4659      	mov	r1, fp
 800771c:	f7f9 f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007720:	2800      	cmp	r0, #0
 8007722:	d1ac      	bne.n	800767e <_strtod_l+0x566>
 8007724:	9b07      	ldr	r3, [sp, #28]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	9a05      	ldr	r2, [sp, #20]
 800772a:	9908      	ldr	r1, [sp, #32]
 800772c:	4623      	mov	r3, r4
 800772e:	4648      	mov	r0, r9
 8007730:	f001 fda4 	bl	800927c <__s2b>
 8007734:	9007      	str	r0, [sp, #28]
 8007736:	2800      	cmp	r0, #0
 8007738:	f43f af08 	beq.w	800754c <_strtod_l+0x434>
 800773c:	9a06      	ldr	r2, [sp, #24]
 800773e:	9b06      	ldr	r3, [sp, #24]
 8007740:	2a00      	cmp	r2, #0
 8007742:	f1c3 0300 	rsb	r3, r3, #0
 8007746:	bfa8      	it	ge
 8007748:	2300      	movge	r3, #0
 800774a:	930e      	str	r3, [sp, #56]	; 0x38
 800774c:	2400      	movs	r4, #0
 800774e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007752:	9316      	str	r3, [sp, #88]	; 0x58
 8007754:	46a0      	mov	r8, r4
 8007756:	9b07      	ldr	r3, [sp, #28]
 8007758:	4648      	mov	r0, r9
 800775a:	6859      	ldr	r1, [r3, #4]
 800775c:	f001 fd08 	bl	8009170 <_Balloc>
 8007760:	9005      	str	r0, [sp, #20]
 8007762:	2800      	cmp	r0, #0
 8007764:	f43f aef6 	beq.w	8007554 <_strtod_l+0x43c>
 8007768:	9b07      	ldr	r3, [sp, #28]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	3202      	adds	r2, #2
 800776e:	f103 010c 	add.w	r1, r3, #12
 8007772:	0092      	lsls	r2, r2, #2
 8007774:	300c      	adds	r0, #12
 8007776:	f7fe fe39 	bl	80063ec <memcpy>
 800777a:	aa1e      	add	r2, sp, #120	; 0x78
 800777c:	a91d      	add	r1, sp, #116	; 0x74
 800777e:	ec4b ab10 	vmov	d0, sl, fp
 8007782:	4648      	mov	r0, r9
 8007784:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007788:	f002 f834 	bl	80097f4 <__d2b>
 800778c:	901c      	str	r0, [sp, #112]	; 0x70
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f aee0 	beq.w	8007554 <_strtod_l+0x43c>
 8007794:	2101      	movs	r1, #1
 8007796:	4648      	mov	r0, r9
 8007798:	f001 fdfc 	bl	8009394 <__i2b>
 800779c:	4680      	mov	r8, r0
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f aed8 	beq.w	8007554 <_strtod_l+0x43c>
 80077a4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80077a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80077a8:	2e00      	cmp	r6, #0
 80077aa:	bfab      	itete	ge
 80077ac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80077ae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80077b0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80077b2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80077b4:	bfac      	ite	ge
 80077b6:	18f7      	addge	r7, r6, r3
 80077b8:	1b9d      	sublt	r5, r3, r6
 80077ba:	9b04      	ldr	r3, [sp, #16]
 80077bc:	1af6      	subs	r6, r6, r3
 80077be:	4416      	add	r6, r2
 80077c0:	4b63      	ldr	r3, [pc, #396]	; (8007950 <_strtod_l+0x838>)
 80077c2:	3e01      	subs	r6, #1
 80077c4:	429e      	cmp	r6, r3
 80077c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077ca:	f280 80af 	bge.w	800792c <_strtod_l+0x814>
 80077ce:	1b9b      	subs	r3, r3, r6
 80077d0:	2b1f      	cmp	r3, #31
 80077d2:	eba2 0203 	sub.w	r2, r2, r3
 80077d6:	f04f 0101 	mov.w	r1, #1
 80077da:	f300 809b 	bgt.w	8007914 <_strtod_l+0x7fc>
 80077de:	fa01 f303 	lsl.w	r3, r1, r3
 80077e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80077e4:	2300      	movs	r3, #0
 80077e6:	930a      	str	r3, [sp, #40]	; 0x28
 80077e8:	18be      	adds	r6, r7, r2
 80077ea:	9b04      	ldr	r3, [sp, #16]
 80077ec:	42b7      	cmp	r7, r6
 80077ee:	4415      	add	r5, r2
 80077f0:	441d      	add	r5, r3
 80077f2:	463b      	mov	r3, r7
 80077f4:	bfa8      	it	ge
 80077f6:	4633      	movge	r3, r6
 80077f8:	42ab      	cmp	r3, r5
 80077fa:	bfa8      	it	ge
 80077fc:	462b      	movge	r3, r5
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bfc2      	ittt	gt
 8007802:	1af6      	subgt	r6, r6, r3
 8007804:	1aed      	subgt	r5, r5, r3
 8007806:	1aff      	subgt	r7, r7, r3
 8007808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800780a:	b1bb      	cbz	r3, 800783c <_strtod_l+0x724>
 800780c:	4641      	mov	r1, r8
 800780e:	461a      	mov	r2, r3
 8007810:	4648      	mov	r0, r9
 8007812:	f001 fe5f 	bl	80094d4 <__pow5mult>
 8007816:	4680      	mov	r8, r0
 8007818:	2800      	cmp	r0, #0
 800781a:	f43f ae9b 	beq.w	8007554 <_strtod_l+0x43c>
 800781e:	4601      	mov	r1, r0
 8007820:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007822:	4648      	mov	r0, r9
 8007824:	f001 fdbf 	bl	80093a6 <__multiply>
 8007828:	900c      	str	r0, [sp, #48]	; 0x30
 800782a:	2800      	cmp	r0, #0
 800782c:	f43f ae92 	beq.w	8007554 <_strtod_l+0x43c>
 8007830:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007832:	4648      	mov	r0, r9
 8007834:	f001 fcd0 	bl	80091d8 <_Bfree>
 8007838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800783a:	931c      	str	r3, [sp, #112]	; 0x70
 800783c:	2e00      	cmp	r6, #0
 800783e:	dc7a      	bgt.n	8007936 <_strtod_l+0x81e>
 8007840:	9b06      	ldr	r3, [sp, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd08      	ble.n	8007858 <_strtod_l+0x740>
 8007846:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007848:	9905      	ldr	r1, [sp, #20]
 800784a:	4648      	mov	r0, r9
 800784c:	f001 fe42 	bl	80094d4 <__pow5mult>
 8007850:	9005      	str	r0, [sp, #20]
 8007852:	2800      	cmp	r0, #0
 8007854:	f43f ae7e 	beq.w	8007554 <_strtod_l+0x43c>
 8007858:	2d00      	cmp	r5, #0
 800785a:	dd08      	ble.n	800786e <_strtod_l+0x756>
 800785c:	462a      	mov	r2, r5
 800785e:	9905      	ldr	r1, [sp, #20]
 8007860:	4648      	mov	r0, r9
 8007862:	f001 fe85 	bl	8009570 <__lshift>
 8007866:	9005      	str	r0, [sp, #20]
 8007868:	2800      	cmp	r0, #0
 800786a:	f43f ae73 	beq.w	8007554 <_strtod_l+0x43c>
 800786e:	2f00      	cmp	r7, #0
 8007870:	dd08      	ble.n	8007884 <_strtod_l+0x76c>
 8007872:	4641      	mov	r1, r8
 8007874:	463a      	mov	r2, r7
 8007876:	4648      	mov	r0, r9
 8007878:	f001 fe7a 	bl	8009570 <__lshift>
 800787c:	4680      	mov	r8, r0
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f ae68 	beq.w	8007554 <_strtod_l+0x43c>
 8007884:	9a05      	ldr	r2, [sp, #20]
 8007886:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007888:	4648      	mov	r0, r9
 800788a:	f001 fedf 	bl	800964c <__mdiff>
 800788e:	4604      	mov	r4, r0
 8007890:	2800      	cmp	r0, #0
 8007892:	f43f ae5f 	beq.w	8007554 <_strtod_l+0x43c>
 8007896:	68c3      	ldr	r3, [r0, #12]
 8007898:	930c      	str	r3, [sp, #48]	; 0x30
 800789a:	2300      	movs	r3, #0
 800789c:	60c3      	str	r3, [r0, #12]
 800789e:	4641      	mov	r1, r8
 80078a0:	f001 feba 	bl	8009618 <__mcmp>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	da55      	bge.n	8007954 <_strtod_l+0x83c>
 80078a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078aa:	b9e3      	cbnz	r3, 80078e6 <_strtod_l+0x7ce>
 80078ac:	f1ba 0f00 	cmp.w	sl, #0
 80078b0:	d119      	bne.n	80078e6 <_strtod_l+0x7ce>
 80078b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078b6:	b9b3      	cbnz	r3, 80078e6 <_strtod_l+0x7ce>
 80078b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078bc:	0d1b      	lsrs	r3, r3, #20
 80078be:	051b      	lsls	r3, r3, #20
 80078c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078c4:	d90f      	bls.n	80078e6 <_strtod_l+0x7ce>
 80078c6:	6963      	ldr	r3, [r4, #20]
 80078c8:	b913      	cbnz	r3, 80078d0 <_strtod_l+0x7b8>
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	dd0a      	ble.n	80078e6 <_strtod_l+0x7ce>
 80078d0:	4621      	mov	r1, r4
 80078d2:	2201      	movs	r2, #1
 80078d4:	4648      	mov	r0, r9
 80078d6:	f001 fe4b 	bl	8009570 <__lshift>
 80078da:	4641      	mov	r1, r8
 80078dc:	4604      	mov	r4, r0
 80078de:	f001 fe9b 	bl	8009618 <__mcmp>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	dc67      	bgt.n	80079b6 <_strtod_l+0x89e>
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d171      	bne.n	80079d0 <_strtod_l+0x8b8>
 80078ec:	e63d      	b.n	800756a <_strtod_l+0x452>
 80078ee:	f018 0f01 	tst.w	r8, #1
 80078f2:	d004      	beq.n	80078fe <_strtod_l+0x7e6>
 80078f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078f8:	f7f8 fe86 	bl	8000608 <__aeabi_dmul>
 80078fc:	2301      	movs	r3, #1
 80078fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007902:	3508      	adds	r5, #8
 8007904:	e6e5      	b.n	80076d2 <_strtod_l+0x5ba>
 8007906:	f04f 32ff 	mov.w	r2, #4294967295
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	ea03 0a0a 	and.w	sl, r3, sl
 8007912:	e6ff      	b.n	8007714 <_strtod_l+0x5fc>
 8007914:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007918:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800791c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007920:	36e2      	adds	r6, #226	; 0xe2
 8007922:	fa01 f306 	lsl.w	r3, r1, r6
 8007926:	930a      	str	r3, [sp, #40]	; 0x28
 8007928:	910f      	str	r1, [sp, #60]	; 0x3c
 800792a:	e75d      	b.n	80077e8 <_strtod_l+0x6d0>
 800792c:	2300      	movs	r3, #0
 800792e:	930a      	str	r3, [sp, #40]	; 0x28
 8007930:	2301      	movs	r3, #1
 8007932:	930f      	str	r3, [sp, #60]	; 0x3c
 8007934:	e758      	b.n	80077e8 <_strtod_l+0x6d0>
 8007936:	4632      	mov	r2, r6
 8007938:	991c      	ldr	r1, [sp, #112]	; 0x70
 800793a:	4648      	mov	r0, r9
 800793c:	f001 fe18 	bl	8009570 <__lshift>
 8007940:	901c      	str	r0, [sp, #112]	; 0x70
 8007942:	2800      	cmp	r0, #0
 8007944:	f47f af7c 	bne.w	8007840 <_strtod_l+0x728>
 8007948:	e604      	b.n	8007554 <_strtod_l+0x43c>
 800794a:	bf00      	nop
 800794c:	0800b588 	.word	0x0800b588
 8007950:	fffffc02 	.word	0xfffffc02
 8007954:	465d      	mov	r5, fp
 8007956:	f040 8086 	bne.w	8007a66 <_strtod_l+0x94e>
 800795a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800795c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007960:	b32a      	cbz	r2, 80079ae <_strtod_l+0x896>
 8007962:	4aaf      	ldr	r2, [pc, #700]	; (8007c20 <_strtod_l+0xb08>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d153      	bne.n	8007a10 <_strtod_l+0x8f8>
 8007968:	9b04      	ldr	r3, [sp, #16]
 800796a:	4650      	mov	r0, sl
 800796c:	b1d3      	cbz	r3, 80079a4 <_strtod_l+0x88c>
 800796e:	4aad      	ldr	r2, [pc, #692]	; (8007c24 <_strtod_l+0xb0c>)
 8007970:	402a      	ands	r2, r5
 8007972:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007976:	f04f 31ff 	mov.w	r1, #4294967295
 800797a:	d816      	bhi.n	80079aa <_strtod_l+0x892>
 800797c:	0d12      	lsrs	r2, r2, #20
 800797e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007982:	fa01 f303 	lsl.w	r3, r1, r3
 8007986:	4298      	cmp	r0, r3
 8007988:	d142      	bne.n	8007a10 <_strtod_l+0x8f8>
 800798a:	4ba7      	ldr	r3, [pc, #668]	; (8007c28 <_strtod_l+0xb10>)
 800798c:	429d      	cmp	r5, r3
 800798e:	d102      	bne.n	8007996 <_strtod_l+0x87e>
 8007990:	3001      	adds	r0, #1
 8007992:	f43f addf 	beq.w	8007554 <_strtod_l+0x43c>
 8007996:	4ba3      	ldr	r3, [pc, #652]	; (8007c24 <_strtod_l+0xb0c>)
 8007998:	402b      	ands	r3, r5
 800799a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800799e:	f04f 0a00 	mov.w	sl, #0
 80079a2:	e7a0      	b.n	80078e6 <_strtod_l+0x7ce>
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	e7ed      	b.n	8007986 <_strtod_l+0x86e>
 80079aa:	460b      	mov	r3, r1
 80079ac:	e7eb      	b.n	8007986 <_strtod_l+0x86e>
 80079ae:	bb7b      	cbnz	r3, 8007a10 <_strtod_l+0x8f8>
 80079b0:	f1ba 0f00 	cmp.w	sl, #0
 80079b4:	d12c      	bne.n	8007a10 <_strtod_l+0x8f8>
 80079b6:	9904      	ldr	r1, [sp, #16]
 80079b8:	4a9a      	ldr	r2, [pc, #616]	; (8007c24 <_strtod_l+0xb0c>)
 80079ba:	465b      	mov	r3, fp
 80079bc:	b1f1      	cbz	r1, 80079fc <_strtod_l+0x8e4>
 80079be:	ea02 010b 	and.w	r1, r2, fp
 80079c2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80079c6:	dc19      	bgt.n	80079fc <_strtod_l+0x8e4>
 80079c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80079cc:	f77f ae5b 	ble.w	8007686 <_strtod_l+0x56e>
 80079d0:	4a96      	ldr	r2, [pc, #600]	; (8007c2c <_strtod_l+0xb14>)
 80079d2:	2300      	movs	r3, #0
 80079d4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80079d8:	4650      	mov	r0, sl
 80079da:	4659      	mov	r1, fp
 80079dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80079e0:	f7f8 fe12 	bl	8000608 <__aeabi_dmul>
 80079e4:	4682      	mov	sl, r0
 80079e6:	468b      	mov	fp, r1
 80079e8:	2900      	cmp	r1, #0
 80079ea:	f47f adbe 	bne.w	800756a <_strtod_l+0x452>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	f47f adbb 	bne.w	800756a <_strtod_l+0x452>
 80079f4:	2322      	movs	r3, #34	; 0x22
 80079f6:	f8c9 3000 	str.w	r3, [r9]
 80079fa:	e5b6      	b.n	800756a <_strtod_l+0x452>
 80079fc:	4013      	ands	r3, r2
 80079fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a02:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a06:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a0a:	f04f 3aff 	mov.w	sl, #4294967295
 8007a0e:	e76a      	b.n	80078e6 <_strtod_l+0x7ce>
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	b193      	cbz	r3, 8007a3a <_strtod_l+0x922>
 8007a14:	422b      	tst	r3, r5
 8007a16:	f43f af66 	beq.w	80078e6 <_strtod_l+0x7ce>
 8007a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a1c:	9a04      	ldr	r2, [sp, #16]
 8007a1e:	4650      	mov	r0, sl
 8007a20:	4659      	mov	r1, fp
 8007a22:	b173      	cbz	r3, 8007a42 <_strtod_l+0x92a>
 8007a24:	f7ff fb5a 	bl	80070dc <sulp>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a30:	f7f8 fc34 	bl	800029c <__adddf3>
 8007a34:	4682      	mov	sl, r0
 8007a36:	468b      	mov	fp, r1
 8007a38:	e755      	b.n	80078e6 <_strtod_l+0x7ce>
 8007a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a3c:	ea13 0f0a 	tst.w	r3, sl
 8007a40:	e7e9      	b.n	8007a16 <_strtod_l+0x8fe>
 8007a42:	f7ff fb4b 	bl	80070dc <sulp>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a4e:	f7f8 fc23 	bl	8000298 <__aeabi_dsub>
 8007a52:	2200      	movs	r2, #0
 8007a54:	2300      	movs	r3, #0
 8007a56:	4682      	mov	sl, r0
 8007a58:	468b      	mov	fp, r1
 8007a5a:	f7f9 f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f47f ae11 	bne.w	8007686 <_strtod_l+0x56e>
 8007a64:	e73f      	b.n	80078e6 <_strtod_l+0x7ce>
 8007a66:	4641      	mov	r1, r8
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f001 ff12 	bl	8009892 <__ratio>
 8007a6e:	ec57 6b10 	vmov	r6, r7, d0
 8007a72:	2200      	movs	r2, #0
 8007a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a78:	ee10 0a10 	vmov	r0, s0
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	f7f9 f83f 	bl	8000b00 <__aeabi_dcmple>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d077      	beq.n	8007b76 <_strtod_l+0xa5e>
 8007a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d04a      	beq.n	8007b22 <_strtod_l+0xa0a>
 8007a8c:	4b68      	ldr	r3, [pc, #416]	; (8007c30 <_strtod_l+0xb18>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a94:	4f66      	ldr	r7, [pc, #408]	; (8007c30 <_strtod_l+0xb18>)
 8007a96:	2600      	movs	r6, #0
 8007a98:	4b62      	ldr	r3, [pc, #392]	; (8007c24 <_strtod_l+0xb0c>)
 8007a9a:	402b      	ands	r3, r5
 8007a9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007aa0:	4b64      	ldr	r3, [pc, #400]	; (8007c34 <_strtod_l+0xb1c>)
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	f040 80ce 	bne.w	8007c44 <_strtod_l+0xb2c>
 8007aa8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007aac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ab0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007ab4:	ec4b ab10 	vmov	d0, sl, fp
 8007ab8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007abc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ac0:	f001 fe22 	bl	8009708 <__ulp>
 8007ac4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ac8:	ec53 2b10 	vmov	r2, r3, d0
 8007acc:	f7f8 fd9c 	bl	8000608 <__aeabi_dmul>
 8007ad0:	4652      	mov	r2, sl
 8007ad2:	465b      	mov	r3, fp
 8007ad4:	f7f8 fbe2 	bl	800029c <__adddf3>
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4952      	ldr	r1, [pc, #328]	; (8007c24 <_strtod_l+0xb0c>)
 8007adc:	4a56      	ldr	r2, [pc, #344]	; (8007c38 <_strtod_l+0xb20>)
 8007ade:	4019      	ands	r1, r3
 8007ae0:	4291      	cmp	r1, r2
 8007ae2:	4682      	mov	sl, r0
 8007ae4:	d95b      	bls.n	8007b9e <_strtod_l+0xa86>
 8007ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d103      	bne.n	8007af8 <_strtod_l+0x9e0>
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	3301      	adds	r3, #1
 8007af4:	f43f ad2e 	beq.w	8007554 <_strtod_l+0x43c>
 8007af8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007c28 <_strtod_l+0xb10>
 8007afc:	f04f 3aff 	mov.w	sl, #4294967295
 8007b00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b02:	4648      	mov	r0, r9
 8007b04:	f001 fb68 	bl	80091d8 <_Bfree>
 8007b08:	9905      	ldr	r1, [sp, #20]
 8007b0a:	4648      	mov	r0, r9
 8007b0c:	f001 fb64 	bl	80091d8 <_Bfree>
 8007b10:	4641      	mov	r1, r8
 8007b12:	4648      	mov	r0, r9
 8007b14:	f001 fb60 	bl	80091d8 <_Bfree>
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4648      	mov	r0, r9
 8007b1c:	f001 fb5c 	bl	80091d8 <_Bfree>
 8007b20:	e619      	b.n	8007756 <_strtod_l+0x63e>
 8007b22:	f1ba 0f00 	cmp.w	sl, #0
 8007b26:	d11a      	bne.n	8007b5e <_strtod_l+0xa46>
 8007b28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b2c:	b9eb      	cbnz	r3, 8007b6a <_strtod_l+0xa52>
 8007b2e:	2200      	movs	r2, #0
 8007b30:	4b3f      	ldr	r3, [pc, #252]	; (8007c30 <_strtod_l+0xb18>)
 8007b32:	4630      	mov	r0, r6
 8007b34:	4639      	mov	r1, r7
 8007b36:	f7f8 ffd9 	bl	8000aec <__aeabi_dcmplt>
 8007b3a:	b9c8      	cbnz	r0, 8007b70 <_strtod_l+0xa58>
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4639      	mov	r1, r7
 8007b40:	2200      	movs	r2, #0
 8007b42:	4b3e      	ldr	r3, [pc, #248]	; (8007c3c <_strtod_l+0xb24>)
 8007b44:	f7f8 fd60 	bl	8000608 <__aeabi_dmul>
 8007b48:	4606      	mov	r6, r0
 8007b4a:	460f      	mov	r7, r1
 8007b4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b50:	9618      	str	r6, [sp, #96]	; 0x60
 8007b52:	9319      	str	r3, [sp, #100]	; 0x64
 8007b54:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007b58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b5c:	e79c      	b.n	8007a98 <_strtod_l+0x980>
 8007b5e:	f1ba 0f01 	cmp.w	sl, #1
 8007b62:	d102      	bne.n	8007b6a <_strtod_l+0xa52>
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	f43f ad8e 	beq.w	8007686 <_strtod_l+0x56e>
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4b34      	ldr	r3, [pc, #208]	; (8007c40 <_strtod_l+0xb28>)
 8007b6e:	e78f      	b.n	8007a90 <_strtod_l+0x978>
 8007b70:	2600      	movs	r6, #0
 8007b72:	4f32      	ldr	r7, [pc, #200]	; (8007c3c <_strtod_l+0xb24>)
 8007b74:	e7ea      	b.n	8007b4c <_strtod_l+0xa34>
 8007b76:	4b31      	ldr	r3, [pc, #196]	; (8007c3c <_strtod_l+0xb24>)
 8007b78:	4630      	mov	r0, r6
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f7f8 fd43 	bl	8000608 <__aeabi_dmul>
 8007b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b84:	4606      	mov	r6, r0
 8007b86:	460f      	mov	r7, r1
 8007b88:	b933      	cbnz	r3, 8007b98 <_strtod_l+0xa80>
 8007b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b8e:	9010      	str	r0, [sp, #64]	; 0x40
 8007b90:	9311      	str	r3, [sp, #68]	; 0x44
 8007b92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b96:	e7df      	b.n	8007b58 <_strtod_l+0xa40>
 8007b98:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007b9c:	e7f9      	b.n	8007b92 <_strtod_l+0xa7a>
 8007b9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1ab      	bne.n	8007b00 <_strtod_l+0x9e8>
 8007ba8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bac:	0d1b      	lsrs	r3, r3, #20
 8007bae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bb0:	051b      	lsls	r3, r3, #20
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	465d      	mov	r5, fp
 8007bb6:	d1a3      	bne.n	8007b00 <_strtod_l+0x9e8>
 8007bb8:	4639      	mov	r1, r7
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7f8 ffd4 	bl	8000b68 <__aeabi_d2iz>
 8007bc0:	f7f8 fcb8 	bl	8000534 <__aeabi_i2d>
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	4639      	mov	r1, r7
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7f8 fb64 	bl	8000298 <__aeabi_dsub>
 8007bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	b933      	cbnz	r3, 8007be6 <_strtod_l+0xace>
 8007bd8:	f1ba 0f00 	cmp.w	sl, #0
 8007bdc:	d103      	bne.n	8007be6 <_strtod_l+0xace>
 8007bde:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007be2:	2d00      	cmp	r5, #0
 8007be4:	d06d      	beq.n	8007cc2 <_strtod_l+0xbaa>
 8007be6:	a30a      	add	r3, pc, #40	; (adr r3, 8007c10 <_strtod_l+0xaf8>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	4630      	mov	r0, r6
 8007bee:	4639      	mov	r1, r7
 8007bf0:	f7f8 ff7c 	bl	8000aec <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f47f acb8 	bne.w	800756a <_strtod_l+0x452>
 8007bfa:	a307      	add	r3, pc, #28	; (adr r3, 8007c18 <_strtod_l+0xb00>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f8 ff90 	bl	8000b28 <__aeabi_dcmpgt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f43f af79 	beq.w	8007b00 <_strtod_l+0x9e8>
 8007c0e:	e4ac      	b.n	800756a <_strtod_l+0x452>
 8007c10:	94a03595 	.word	0x94a03595
 8007c14:	3fdfffff 	.word	0x3fdfffff
 8007c18:	35afe535 	.word	0x35afe535
 8007c1c:	3fe00000 	.word	0x3fe00000
 8007c20:	000fffff 	.word	0x000fffff
 8007c24:	7ff00000 	.word	0x7ff00000
 8007c28:	7fefffff 	.word	0x7fefffff
 8007c2c:	39500000 	.word	0x39500000
 8007c30:	3ff00000 	.word	0x3ff00000
 8007c34:	7fe00000 	.word	0x7fe00000
 8007c38:	7c9fffff 	.word	0x7c9fffff
 8007c3c:	3fe00000 	.word	0x3fe00000
 8007c40:	bff00000 	.word	0xbff00000
 8007c44:	9b04      	ldr	r3, [sp, #16]
 8007c46:	b333      	cbz	r3, 8007c96 <_strtod_l+0xb7e>
 8007c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c4e:	d822      	bhi.n	8007c96 <_strtod_l+0xb7e>
 8007c50:	a327      	add	r3, pc, #156	; (adr r3, 8007cf0 <_strtod_l+0xbd8>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 ff51 	bl	8000b00 <__aeabi_dcmple>
 8007c5e:	b1a0      	cbz	r0, 8007c8a <_strtod_l+0xb72>
 8007c60:	4639      	mov	r1, r7
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7f8 ffa8 	bl	8000bb8 <__aeabi_d2uiz>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	bf08      	it	eq
 8007c6c:	2001      	moveq	r0, #1
 8007c6e:	f7f8 fc51 	bl	8000514 <__aeabi_ui2d>
 8007c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	bb03      	cbnz	r3, 8007cbc <_strtod_l+0xba4>
 8007c7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c7e:	9012      	str	r0, [sp, #72]	; 0x48
 8007c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007c86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c8e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c96:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007c9a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007c9e:	f001 fd33 	bl	8009708 <__ulp>
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	ec53 2b10 	vmov	r2, r3, d0
 8007ca8:	4659      	mov	r1, fp
 8007caa:	f7f8 fcad 	bl	8000608 <__aeabi_dmul>
 8007cae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007cb2:	f7f8 faf3 	bl	800029c <__adddf3>
 8007cb6:	4682      	mov	sl, r0
 8007cb8:	468b      	mov	fp, r1
 8007cba:	e772      	b.n	8007ba2 <_strtod_l+0xa8a>
 8007cbc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007cc0:	e7df      	b.n	8007c82 <_strtod_l+0xb6a>
 8007cc2:	a30d      	add	r3, pc, #52	; (adr r3, 8007cf8 <_strtod_l+0xbe0>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 ff10 	bl	8000aec <__aeabi_dcmplt>
 8007ccc:	e79c      	b.n	8007c08 <_strtod_l+0xaf0>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	930d      	str	r3, [sp, #52]	; 0x34
 8007cd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	f7ff ba61 	b.w	800719e <_strtod_l+0x86>
 8007cdc:	2b65      	cmp	r3, #101	; 0x65
 8007cde:	f04f 0200 	mov.w	r2, #0
 8007ce2:	f43f ab4e 	beq.w	8007382 <_strtod_l+0x26a>
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	9104      	str	r1, [sp, #16]
 8007cec:	f7ff bacb 	b.w	8007286 <_strtod_l+0x16e>
 8007cf0:	ffc00000 	.word	0xffc00000
 8007cf4:	41dfffff 	.word	0x41dfffff
 8007cf8:	94a03595 	.word	0x94a03595
 8007cfc:	3fcfffff 	.word	0x3fcfffff

08007d00 <_strtod_r>:
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <_strtod_r+0x18>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	b410      	push	{r4}
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	4c04      	ldr	r4, [pc, #16]	; (8007d1c <_strtod_r+0x1c>)
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf08      	it	eq
 8007d0e:	4623      	moveq	r3, r4
 8007d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d14:	f7ff ba00 	b.w	8007118 <_strtod_l>
 8007d18:	20000024 	.word	0x20000024
 8007d1c:	20000088 	.word	0x20000088

08007d20 <_strtol_l.isra.0>:
 8007d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	4680      	mov	r8, r0
 8007d26:	4689      	mov	r9, r1
 8007d28:	4692      	mov	sl, r2
 8007d2a:	461e      	mov	r6, r3
 8007d2c:	460f      	mov	r7, r1
 8007d2e:	463d      	mov	r5, r7
 8007d30:	9808      	ldr	r0, [sp, #32]
 8007d32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d36:	f001 f9ed 	bl	8009114 <__locale_ctype_ptr_l>
 8007d3a:	4420      	add	r0, r4
 8007d3c:	7843      	ldrb	r3, [r0, #1]
 8007d3e:	f013 0308 	ands.w	r3, r3, #8
 8007d42:	d132      	bne.n	8007daa <_strtol_l.isra.0+0x8a>
 8007d44:	2c2d      	cmp	r4, #45	; 0x2d
 8007d46:	d132      	bne.n	8007dae <_strtol_l.isra.0+0x8e>
 8007d48:	787c      	ldrb	r4, [r7, #1]
 8007d4a:	1cbd      	adds	r5, r7, #2
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	2e00      	cmp	r6, #0
 8007d50:	d05d      	beq.n	8007e0e <_strtol_l.isra.0+0xee>
 8007d52:	2e10      	cmp	r6, #16
 8007d54:	d109      	bne.n	8007d6a <_strtol_l.isra.0+0x4a>
 8007d56:	2c30      	cmp	r4, #48	; 0x30
 8007d58:	d107      	bne.n	8007d6a <_strtol_l.isra.0+0x4a>
 8007d5a:	782b      	ldrb	r3, [r5, #0]
 8007d5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d60:	2b58      	cmp	r3, #88	; 0x58
 8007d62:	d14f      	bne.n	8007e04 <_strtol_l.isra.0+0xe4>
 8007d64:	786c      	ldrb	r4, [r5, #1]
 8007d66:	2610      	movs	r6, #16
 8007d68:	3502      	adds	r5, #2
 8007d6a:	2a00      	cmp	r2, #0
 8007d6c:	bf14      	ite	ne
 8007d6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007d72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007d76:	2700      	movs	r7, #0
 8007d78:	fbb1 fcf6 	udiv	ip, r1, r6
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007d82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007d86:	2b09      	cmp	r3, #9
 8007d88:	d817      	bhi.n	8007dba <_strtol_l.isra.0+0x9a>
 8007d8a:	461c      	mov	r4, r3
 8007d8c:	42a6      	cmp	r6, r4
 8007d8e:	dd23      	ble.n	8007dd8 <_strtol_l.isra.0+0xb8>
 8007d90:	1c7b      	adds	r3, r7, #1
 8007d92:	d007      	beq.n	8007da4 <_strtol_l.isra.0+0x84>
 8007d94:	4584      	cmp	ip, r0
 8007d96:	d31c      	bcc.n	8007dd2 <_strtol_l.isra.0+0xb2>
 8007d98:	d101      	bne.n	8007d9e <_strtol_l.isra.0+0x7e>
 8007d9a:	45a6      	cmp	lr, r4
 8007d9c:	db19      	blt.n	8007dd2 <_strtol_l.isra.0+0xb2>
 8007d9e:	fb00 4006 	mla	r0, r0, r6, r4
 8007da2:	2701      	movs	r7, #1
 8007da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007da8:	e7eb      	b.n	8007d82 <_strtol_l.isra.0+0x62>
 8007daa:	462f      	mov	r7, r5
 8007dac:	e7bf      	b.n	8007d2e <_strtol_l.isra.0+0xe>
 8007dae:	2c2b      	cmp	r4, #43	; 0x2b
 8007db0:	bf04      	itt	eq
 8007db2:	1cbd      	addeq	r5, r7, #2
 8007db4:	787c      	ldrbeq	r4, [r7, #1]
 8007db6:	461a      	mov	r2, r3
 8007db8:	e7c9      	b.n	8007d4e <_strtol_l.isra.0+0x2e>
 8007dba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007dbe:	2b19      	cmp	r3, #25
 8007dc0:	d801      	bhi.n	8007dc6 <_strtol_l.isra.0+0xa6>
 8007dc2:	3c37      	subs	r4, #55	; 0x37
 8007dc4:	e7e2      	b.n	8007d8c <_strtol_l.isra.0+0x6c>
 8007dc6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007dca:	2b19      	cmp	r3, #25
 8007dcc:	d804      	bhi.n	8007dd8 <_strtol_l.isra.0+0xb8>
 8007dce:	3c57      	subs	r4, #87	; 0x57
 8007dd0:	e7dc      	b.n	8007d8c <_strtol_l.isra.0+0x6c>
 8007dd2:	f04f 37ff 	mov.w	r7, #4294967295
 8007dd6:	e7e5      	b.n	8007da4 <_strtol_l.isra.0+0x84>
 8007dd8:	1c7b      	adds	r3, r7, #1
 8007dda:	d108      	bne.n	8007dee <_strtol_l.isra.0+0xce>
 8007ddc:	2322      	movs	r3, #34	; 0x22
 8007dde:	f8c8 3000 	str.w	r3, [r8]
 8007de2:	4608      	mov	r0, r1
 8007de4:	f1ba 0f00 	cmp.w	sl, #0
 8007de8:	d107      	bne.n	8007dfa <_strtol_l.isra.0+0xda>
 8007dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dee:	b102      	cbz	r2, 8007df2 <_strtol_l.isra.0+0xd2>
 8007df0:	4240      	negs	r0, r0
 8007df2:	f1ba 0f00 	cmp.w	sl, #0
 8007df6:	d0f8      	beq.n	8007dea <_strtol_l.isra.0+0xca>
 8007df8:	b10f      	cbz	r7, 8007dfe <_strtol_l.isra.0+0xde>
 8007dfa:	f105 39ff 	add.w	r9, r5, #4294967295
 8007dfe:	f8ca 9000 	str.w	r9, [sl]
 8007e02:	e7f2      	b.n	8007dea <_strtol_l.isra.0+0xca>
 8007e04:	2430      	movs	r4, #48	; 0x30
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	d1af      	bne.n	8007d6a <_strtol_l.isra.0+0x4a>
 8007e0a:	2608      	movs	r6, #8
 8007e0c:	e7ad      	b.n	8007d6a <_strtol_l.isra.0+0x4a>
 8007e0e:	2c30      	cmp	r4, #48	; 0x30
 8007e10:	d0a3      	beq.n	8007d5a <_strtol_l.isra.0+0x3a>
 8007e12:	260a      	movs	r6, #10
 8007e14:	e7a9      	b.n	8007d6a <_strtol_l.isra.0+0x4a>
	...

08007e18 <_strtol_r>:
 8007e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e1a:	4c06      	ldr	r4, [pc, #24]	; (8007e34 <_strtol_r+0x1c>)
 8007e1c:	4d06      	ldr	r5, [pc, #24]	; (8007e38 <_strtol_r+0x20>)
 8007e1e:	6824      	ldr	r4, [r4, #0]
 8007e20:	6a24      	ldr	r4, [r4, #32]
 8007e22:	2c00      	cmp	r4, #0
 8007e24:	bf08      	it	eq
 8007e26:	462c      	moveq	r4, r5
 8007e28:	9400      	str	r4, [sp, #0]
 8007e2a:	f7ff ff79 	bl	8007d20 <_strtol_l.isra.0>
 8007e2e:	b003      	add	sp, #12
 8007e30:	bd30      	pop	{r4, r5, pc}
 8007e32:	bf00      	nop
 8007e34:	20000024 	.word	0x20000024
 8007e38:	20000088 	.word	0x20000088

08007e3c <quorem>:
 8007e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	6903      	ldr	r3, [r0, #16]
 8007e42:	690c      	ldr	r4, [r1, #16]
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	4680      	mov	r8, r0
 8007e48:	f2c0 8082 	blt.w	8007f50 <quorem+0x114>
 8007e4c:	3c01      	subs	r4, #1
 8007e4e:	f101 0714 	add.w	r7, r1, #20
 8007e52:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e56:	f100 0614 	add.w	r6, r0, #20
 8007e5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e62:	eb06 030c 	add.w	r3, r6, ip
 8007e66:	3501      	adds	r5, #1
 8007e68:	eb07 090c 	add.w	r9, r7, ip
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e72:	b395      	cbz	r5, 8007eda <quorem+0x9e>
 8007e74:	f04f 0a00 	mov.w	sl, #0
 8007e78:	4638      	mov	r0, r7
 8007e7a:	46b6      	mov	lr, r6
 8007e7c:	46d3      	mov	fp, sl
 8007e7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e82:	b293      	uxth	r3, r2
 8007e84:	fb05 a303 	mla	r3, r5, r3, sl
 8007e88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	ebab 0303 	sub.w	r3, fp, r3
 8007e92:	0c12      	lsrs	r2, r2, #16
 8007e94:	f8de b000 	ldr.w	fp, [lr]
 8007e98:	fb05 a202 	mla	r2, r5, r2, sl
 8007e9c:	fa13 f38b 	uxtah	r3, r3, fp
 8007ea0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ea4:	fa1f fb82 	uxth.w	fp, r2
 8007ea8:	f8de 2000 	ldr.w	r2, [lr]
 8007eac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eba:	4581      	cmp	r9, r0
 8007ebc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ec0:	f84e 3b04 	str.w	r3, [lr], #4
 8007ec4:	d2db      	bcs.n	8007e7e <quorem+0x42>
 8007ec6:	f856 300c 	ldr.w	r3, [r6, ip]
 8007eca:	b933      	cbnz	r3, 8007eda <quorem+0x9e>
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	3b04      	subs	r3, #4
 8007ed0:	429e      	cmp	r6, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	d330      	bcc.n	8007f38 <quorem+0xfc>
 8007ed6:	f8c8 4010 	str.w	r4, [r8, #16]
 8007eda:	4640      	mov	r0, r8
 8007edc:	f001 fb9c 	bl	8009618 <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	db25      	blt.n	8007f30 <quorem+0xf4>
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f04f 0c00 	mov.w	ip, #0
 8007eec:	f857 2b04 	ldr.w	r2, [r7], #4
 8007ef0:	f8d0 e000 	ldr.w	lr, [r0]
 8007ef4:	b293      	uxth	r3, r2
 8007ef6:	ebac 0303 	sub.w	r3, ip, r3
 8007efa:	0c12      	lsrs	r2, r2, #16
 8007efc:	fa13 f38e 	uxtah	r3, r3, lr
 8007f00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f0e:	45b9      	cmp	r9, r7
 8007f10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f14:	f840 3b04 	str.w	r3, [r0], #4
 8007f18:	d2e8      	bcs.n	8007eec <quorem+0xb0>
 8007f1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f22:	b92a      	cbnz	r2, 8007f30 <quorem+0xf4>
 8007f24:	3b04      	subs	r3, #4
 8007f26:	429e      	cmp	r6, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	d30b      	bcc.n	8007f44 <quorem+0x108>
 8007f2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f30:	4628      	mov	r0, r5
 8007f32:	b003      	add	sp, #12
 8007f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	3b04      	subs	r3, #4
 8007f3c:	2a00      	cmp	r2, #0
 8007f3e:	d1ca      	bne.n	8007ed6 <quorem+0x9a>
 8007f40:	3c01      	subs	r4, #1
 8007f42:	e7c5      	b.n	8007ed0 <quorem+0x94>
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	3b04      	subs	r3, #4
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	d1ef      	bne.n	8007f2c <quorem+0xf0>
 8007f4c:	3c01      	subs	r4, #1
 8007f4e:	e7ea      	b.n	8007f26 <quorem+0xea>
 8007f50:	2000      	movs	r0, #0
 8007f52:	e7ee      	b.n	8007f32 <quorem+0xf6>
 8007f54:	0000      	movs	r0, r0
	...

08007f58 <_dtoa_r>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	ec57 6b10 	vmov	r6, r7, d0
 8007f60:	b097      	sub	sp, #92	; 0x5c
 8007f62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f64:	9106      	str	r1, [sp, #24]
 8007f66:	4604      	mov	r4, r0
 8007f68:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f6a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f70:	e9cd 6700 	strd	r6, r7, [sp]
 8007f74:	b93d      	cbnz	r5, 8007f86 <_dtoa_r+0x2e>
 8007f76:	2010      	movs	r0, #16
 8007f78:	f001 f8e0 	bl	800913c <malloc>
 8007f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f82:	6005      	str	r5, [r0, #0]
 8007f84:	60c5      	str	r5, [r0, #12]
 8007f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f88:	6819      	ldr	r1, [r3, #0]
 8007f8a:	b151      	cbz	r1, 8007fa2 <_dtoa_r+0x4a>
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	604a      	str	r2, [r1, #4]
 8007f90:	2301      	movs	r3, #1
 8007f92:	4093      	lsls	r3, r2
 8007f94:	608b      	str	r3, [r1, #8]
 8007f96:	4620      	mov	r0, r4
 8007f98:	f001 f91e 	bl	80091d8 <_Bfree>
 8007f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	1e3b      	subs	r3, r7, #0
 8007fa4:	bfbb      	ittet	lt
 8007fa6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007faa:	9301      	strlt	r3, [sp, #4]
 8007fac:	2300      	movge	r3, #0
 8007fae:	2201      	movlt	r2, #1
 8007fb0:	bfac      	ite	ge
 8007fb2:	f8c8 3000 	strge.w	r3, [r8]
 8007fb6:	f8c8 2000 	strlt.w	r2, [r8]
 8007fba:	4baf      	ldr	r3, [pc, #700]	; (8008278 <_dtoa_r+0x320>)
 8007fbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007fc0:	ea33 0308 	bics.w	r3, r3, r8
 8007fc4:	d114      	bne.n	8007ff0 <_dtoa_r+0x98>
 8007fc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	b923      	cbnz	r3, 8007fdc <_dtoa_r+0x84>
 8007fd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f000 8542 	beq.w	8008a60 <_dtoa_r+0xb08>
 8007fdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800828c <_dtoa_r+0x334>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 8544 	beq.w	8008a70 <_dtoa_r+0xb18>
 8007fe8:	f10b 0303 	add.w	r3, fp, #3
 8007fec:	f000 bd3e 	b.w	8008a6c <_dtoa_r+0xb14>
 8007ff0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 fd6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008000:	4681      	mov	r9, r0
 8008002:	b168      	cbz	r0, 8008020 <_dtoa_r+0xc8>
 8008004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008006:	2301      	movs	r3, #1
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8524 	beq.w	8008a5a <_dtoa_r+0xb02>
 8008012:	4b9a      	ldr	r3, [pc, #616]	; (800827c <_dtoa_r+0x324>)
 8008014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008016:	f103 3bff 	add.w	fp, r3, #4294967295
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	f000 bd28 	b.w	8008a70 <_dtoa_r+0xb18>
 8008020:	aa14      	add	r2, sp, #80	; 0x50
 8008022:	a915      	add	r1, sp, #84	; 0x54
 8008024:	ec47 6b10 	vmov	d0, r6, r7
 8008028:	4620      	mov	r0, r4
 800802a:	f001 fbe3 	bl	80097f4 <__d2b>
 800802e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008032:	9004      	str	r0, [sp, #16]
 8008034:	2d00      	cmp	r5, #0
 8008036:	d07c      	beq.n	8008132 <_dtoa_r+0x1da>
 8008038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800803c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008040:	46b2      	mov	sl, r6
 8008042:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800804a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800804e:	2200      	movs	r2, #0
 8008050:	4b8b      	ldr	r3, [pc, #556]	; (8008280 <_dtoa_r+0x328>)
 8008052:	4650      	mov	r0, sl
 8008054:	4659      	mov	r1, fp
 8008056:	f7f8 f91f 	bl	8000298 <__aeabi_dsub>
 800805a:	a381      	add	r3, pc, #516	; (adr r3, 8008260 <_dtoa_r+0x308>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 fad2 	bl	8000608 <__aeabi_dmul>
 8008064:	a380      	add	r3, pc, #512	; (adr r3, 8008268 <_dtoa_r+0x310>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f917 	bl	800029c <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	4628      	mov	r0, r5
 8008072:	460f      	mov	r7, r1
 8008074:	f7f8 fa5e 	bl	8000534 <__aeabi_i2d>
 8008078:	a37d      	add	r3, pc, #500	; (adr r3, 8008270 <_dtoa_r+0x318>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 fac3 	bl	8000608 <__aeabi_dmul>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7f8 f907 	bl	800029c <__adddf3>
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	f7f8 fd69 	bl	8000b68 <__aeabi_d2iz>
 8008096:	2200      	movs	r2, #0
 8008098:	4682      	mov	sl, r0
 800809a:	2300      	movs	r3, #0
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fd24 	bl	8000aec <__aeabi_dcmplt>
 80080a4:	b148      	cbz	r0, 80080ba <_dtoa_r+0x162>
 80080a6:	4650      	mov	r0, sl
 80080a8:	f7f8 fa44 	bl	8000534 <__aeabi_i2d>
 80080ac:	4632      	mov	r2, r6
 80080ae:	463b      	mov	r3, r7
 80080b0:	f7f8 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80080b4:	b908      	cbnz	r0, 80080ba <_dtoa_r+0x162>
 80080b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ba:	f1ba 0f16 	cmp.w	sl, #22
 80080be:	d859      	bhi.n	8008174 <_dtoa_r+0x21c>
 80080c0:	4970      	ldr	r1, [pc, #448]	; (8008284 <_dtoa_r+0x32c>)
 80080c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ce:	f7f8 fd2b 	bl	8000b28 <__aeabi_dcmpgt>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d050      	beq.n	8008178 <_dtoa_r+0x220>
 80080d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080da:	2300      	movs	r3, #0
 80080dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080e0:	1b5d      	subs	r5, r3, r5
 80080e2:	f1b5 0801 	subs.w	r8, r5, #1
 80080e6:	bf49      	itett	mi
 80080e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80080ec:	2300      	movpl	r3, #0
 80080ee:	9305      	strmi	r3, [sp, #20]
 80080f0:	f04f 0800 	movmi.w	r8, #0
 80080f4:	bf58      	it	pl
 80080f6:	9305      	strpl	r3, [sp, #20]
 80080f8:	f1ba 0f00 	cmp.w	sl, #0
 80080fc:	db3e      	blt.n	800817c <_dtoa_r+0x224>
 80080fe:	2300      	movs	r3, #0
 8008100:	44d0      	add	r8, sl
 8008102:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008106:	9307      	str	r3, [sp, #28]
 8008108:	9b06      	ldr	r3, [sp, #24]
 800810a:	2b09      	cmp	r3, #9
 800810c:	f200 8090 	bhi.w	8008230 <_dtoa_r+0x2d8>
 8008110:	2b05      	cmp	r3, #5
 8008112:	bfc4      	itt	gt
 8008114:	3b04      	subgt	r3, #4
 8008116:	9306      	strgt	r3, [sp, #24]
 8008118:	9b06      	ldr	r3, [sp, #24]
 800811a:	f1a3 0302 	sub.w	r3, r3, #2
 800811e:	bfcc      	ite	gt
 8008120:	2500      	movgt	r5, #0
 8008122:	2501      	movle	r5, #1
 8008124:	2b03      	cmp	r3, #3
 8008126:	f200 808f 	bhi.w	8008248 <_dtoa_r+0x2f0>
 800812a:	e8df f003 	tbb	[pc, r3]
 800812e:	7f7d      	.short	0x7f7d
 8008130:	7131      	.short	0x7131
 8008132:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008136:	441d      	add	r5, r3
 8008138:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800813c:	2820      	cmp	r0, #32
 800813e:	dd13      	ble.n	8008168 <_dtoa_r+0x210>
 8008140:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008144:	9b00      	ldr	r3, [sp, #0]
 8008146:	fa08 f800 	lsl.w	r8, r8, r0
 800814a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800814e:	fa23 f000 	lsr.w	r0, r3, r0
 8008152:	ea48 0000 	orr.w	r0, r8, r0
 8008156:	f7f8 f9dd 	bl	8000514 <__aeabi_ui2d>
 800815a:	2301      	movs	r3, #1
 800815c:	4682      	mov	sl, r0
 800815e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008162:	3d01      	subs	r5, #1
 8008164:	9313      	str	r3, [sp, #76]	; 0x4c
 8008166:	e772      	b.n	800804e <_dtoa_r+0xf6>
 8008168:	9b00      	ldr	r3, [sp, #0]
 800816a:	f1c0 0020 	rsb	r0, r0, #32
 800816e:	fa03 f000 	lsl.w	r0, r3, r0
 8008172:	e7f0      	b.n	8008156 <_dtoa_r+0x1fe>
 8008174:	2301      	movs	r3, #1
 8008176:	e7b1      	b.n	80080dc <_dtoa_r+0x184>
 8008178:	900f      	str	r0, [sp, #60]	; 0x3c
 800817a:	e7b0      	b.n	80080de <_dtoa_r+0x186>
 800817c:	9b05      	ldr	r3, [sp, #20]
 800817e:	eba3 030a 	sub.w	r3, r3, sl
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	f1ca 0300 	rsb	r3, sl, #0
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	2300      	movs	r3, #0
 800818c:	930e      	str	r3, [sp, #56]	; 0x38
 800818e:	e7bb      	b.n	8008108 <_dtoa_r+0x1b0>
 8008190:	2301      	movs	r3, #1
 8008192:	930a      	str	r3, [sp, #40]	; 0x28
 8008194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd59      	ble.n	800824e <_dtoa_r+0x2f6>
 800819a:	9302      	str	r3, [sp, #8]
 800819c:	4699      	mov	r9, r3
 800819e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081a0:	2200      	movs	r2, #0
 80081a2:	6072      	str	r2, [r6, #4]
 80081a4:	2204      	movs	r2, #4
 80081a6:	f102 0014 	add.w	r0, r2, #20
 80081aa:	4298      	cmp	r0, r3
 80081ac:	6871      	ldr	r1, [r6, #4]
 80081ae:	d953      	bls.n	8008258 <_dtoa_r+0x300>
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 ffdd 	bl	8009170 <_Balloc>
 80081b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b8:	6030      	str	r0, [r6, #0]
 80081ba:	f1b9 0f0e 	cmp.w	r9, #14
 80081be:	f8d3 b000 	ldr.w	fp, [r3]
 80081c2:	f200 80e6 	bhi.w	8008392 <_dtoa_r+0x43a>
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	f000 80e3 	beq.w	8008392 <_dtoa_r+0x43a>
 80081cc:	ed9d 7b00 	vldr	d7, [sp]
 80081d0:	f1ba 0f00 	cmp.w	sl, #0
 80081d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80081d8:	dd74      	ble.n	80082c4 <_dtoa_r+0x36c>
 80081da:	4a2a      	ldr	r2, [pc, #168]	; (8008284 <_dtoa_r+0x32c>)
 80081dc:	f00a 030f 	and.w	r3, sl, #15
 80081e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081e4:	ed93 7b00 	vldr	d7, [r3]
 80081e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80081ec:	06f0      	lsls	r0, r6, #27
 80081ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80081f2:	d565      	bpl.n	80082c0 <_dtoa_r+0x368>
 80081f4:	4b24      	ldr	r3, [pc, #144]	; (8008288 <_dtoa_r+0x330>)
 80081f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081fe:	f7f8 fb2d 	bl	800085c <__aeabi_ddiv>
 8008202:	e9cd 0100 	strd	r0, r1, [sp]
 8008206:	f006 060f 	and.w	r6, r6, #15
 800820a:	2503      	movs	r5, #3
 800820c:	4f1e      	ldr	r7, [pc, #120]	; (8008288 <_dtoa_r+0x330>)
 800820e:	e04c      	b.n	80082aa <_dtoa_r+0x352>
 8008210:	2301      	movs	r3, #1
 8008212:	930a      	str	r3, [sp, #40]	; 0x28
 8008214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008216:	4453      	add	r3, sl
 8008218:	f103 0901 	add.w	r9, r3, #1
 800821c:	9302      	str	r3, [sp, #8]
 800821e:	464b      	mov	r3, r9
 8008220:	2b01      	cmp	r3, #1
 8008222:	bfb8      	it	lt
 8008224:	2301      	movlt	r3, #1
 8008226:	e7ba      	b.n	800819e <_dtoa_r+0x246>
 8008228:	2300      	movs	r3, #0
 800822a:	e7b2      	b.n	8008192 <_dtoa_r+0x23a>
 800822c:	2300      	movs	r3, #0
 800822e:	e7f0      	b.n	8008212 <_dtoa_r+0x2ba>
 8008230:	2501      	movs	r5, #1
 8008232:	2300      	movs	r3, #0
 8008234:	9306      	str	r3, [sp, #24]
 8008236:	950a      	str	r5, [sp, #40]	; 0x28
 8008238:	f04f 33ff 	mov.w	r3, #4294967295
 800823c:	9302      	str	r3, [sp, #8]
 800823e:	4699      	mov	r9, r3
 8008240:	2200      	movs	r2, #0
 8008242:	2312      	movs	r3, #18
 8008244:	920b      	str	r2, [sp, #44]	; 0x2c
 8008246:	e7aa      	b.n	800819e <_dtoa_r+0x246>
 8008248:	2301      	movs	r3, #1
 800824a:	930a      	str	r3, [sp, #40]	; 0x28
 800824c:	e7f4      	b.n	8008238 <_dtoa_r+0x2e0>
 800824e:	2301      	movs	r3, #1
 8008250:	9302      	str	r3, [sp, #8]
 8008252:	4699      	mov	r9, r3
 8008254:	461a      	mov	r2, r3
 8008256:	e7f5      	b.n	8008244 <_dtoa_r+0x2ec>
 8008258:	3101      	adds	r1, #1
 800825a:	6071      	str	r1, [r6, #4]
 800825c:	0052      	lsls	r2, r2, #1
 800825e:	e7a2      	b.n	80081a6 <_dtoa_r+0x24e>
 8008260:	636f4361 	.word	0x636f4361
 8008264:	3fd287a7 	.word	0x3fd287a7
 8008268:	8b60c8b3 	.word	0x8b60c8b3
 800826c:	3fc68a28 	.word	0x3fc68a28
 8008270:	509f79fb 	.word	0x509f79fb
 8008274:	3fd34413 	.word	0x3fd34413
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	0800b531 	.word	0x0800b531
 8008280:	3ff80000 	.word	0x3ff80000
 8008284:	0800b5f0 	.word	0x0800b5f0
 8008288:	0800b5c8 	.word	0x0800b5c8
 800828c:	0800b5b9 	.word	0x0800b5b9
 8008290:	07f1      	lsls	r1, r6, #31
 8008292:	d508      	bpl.n	80082a6 <_dtoa_r+0x34e>
 8008294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800829c:	f7f8 f9b4 	bl	8000608 <__aeabi_dmul>
 80082a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082a4:	3501      	adds	r5, #1
 80082a6:	1076      	asrs	r6, r6, #1
 80082a8:	3708      	adds	r7, #8
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	d1f0      	bne.n	8008290 <_dtoa_r+0x338>
 80082ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082b6:	f7f8 fad1 	bl	800085c <__aeabi_ddiv>
 80082ba:	e9cd 0100 	strd	r0, r1, [sp]
 80082be:	e01a      	b.n	80082f6 <_dtoa_r+0x39e>
 80082c0:	2502      	movs	r5, #2
 80082c2:	e7a3      	b.n	800820c <_dtoa_r+0x2b4>
 80082c4:	f000 80a0 	beq.w	8008408 <_dtoa_r+0x4b0>
 80082c8:	f1ca 0600 	rsb	r6, sl, #0
 80082cc:	4b9f      	ldr	r3, [pc, #636]	; (800854c <_dtoa_r+0x5f4>)
 80082ce:	4fa0      	ldr	r7, [pc, #640]	; (8008550 <_dtoa_r+0x5f8>)
 80082d0:	f006 020f 	and.w	r2, r6, #15
 80082d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082e0:	f7f8 f992 	bl	8000608 <__aeabi_dmul>
 80082e4:	e9cd 0100 	strd	r0, r1, [sp]
 80082e8:	1136      	asrs	r6, r6, #4
 80082ea:	2300      	movs	r3, #0
 80082ec:	2502      	movs	r5, #2
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	d17f      	bne.n	80083f2 <_dtoa_r+0x49a>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e1      	bne.n	80082ba <_dtoa_r+0x362>
 80082f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 8087 	beq.w	800840c <_dtoa_r+0x4b4>
 80082fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008302:	2200      	movs	r2, #0
 8008304:	4b93      	ldr	r3, [pc, #588]	; (8008554 <_dtoa_r+0x5fc>)
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f8 fbef 	bl	8000aec <__aeabi_dcmplt>
 800830e:	2800      	cmp	r0, #0
 8008310:	d07c      	beq.n	800840c <_dtoa_r+0x4b4>
 8008312:	f1b9 0f00 	cmp.w	r9, #0
 8008316:	d079      	beq.n	800840c <_dtoa_r+0x4b4>
 8008318:	9b02      	ldr	r3, [sp, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	dd35      	ble.n	800838a <_dtoa_r+0x432>
 800831e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008322:	9308      	str	r3, [sp, #32]
 8008324:	4639      	mov	r1, r7
 8008326:	2200      	movs	r2, #0
 8008328:	4b8b      	ldr	r3, [pc, #556]	; (8008558 <_dtoa_r+0x600>)
 800832a:	4630      	mov	r0, r6
 800832c:	f7f8 f96c 	bl	8000608 <__aeabi_dmul>
 8008330:	e9cd 0100 	strd	r0, r1, [sp]
 8008334:	9f02      	ldr	r7, [sp, #8]
 8008336:	3501      	adds	r5, #1
 8008338:	4628      	mov	r0, r5
 800833a:	f7f8 f8fb 	bl	8000534 <__aeabi_i2d>
 800833e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008342:	f7f8 f961 	bl	8000608 <__aeabi_dmul>
 8008346:	2200      	movs	r2, #0
 8008348:	4b84      	ldr	r3, [pc, #528]	; (800855c <_dtoa_r+0x604>)
 800834a:	f7f7 ffa7 	bl	800029c <__adddf3>
 800834e:	4605      	mov	r5, r0
 8008350:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008354:	2f00      	cmp	r7, #0
 8008356:	d15d      	bne.n	8008414 <_dtoa_r+0x4bc>
 8008358:	2200      	movs	r2, #0
 800835a:	4b81      	ldr	r3, [pc, #516]	; (8008560 <_dtoa_r+0x608>)
 800835c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008360:	f7f7 ff9a 	bl	8000298 <__aeabi_dsub>
 8008364:	462a      	mov	r2, r5
 8008366:	4633      	mov	r3, r6
 8008368:	e9cd 0100 	strd	r0, r1, [sp]
 800836c:	f7f8 fbdc 	bl	8000b28 <__aeabi_dcmpgt>
 8008370:	2800      	cmp	r0, #0
 8008372:	f040 8288 	bne.w	8008886 <_dtoa_r+0x92e>
 8008376:	462a      	mov	r2, r5
 8008378:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800837c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008380:	f7f8 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8008384:	2800      	cmp	r0, #0
 8008386:	f040 827c 	bne.w	8008882 <_dtoa_r+0x92a>
 800838a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800838e:	e9cd 2300 	strd	r2, r3, [sp]
 8008392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008394:	2b00      	cmp	r3, #0
 8008396:	f2c0 8150 	blt.w	800863a <_dtoa_r+0x6e2>
 800839a:	f1ba 0f0e 	cmp.w	sl, #14
 800839e:	f300 814c 	bgt.w	800863a <_dtoa_r+0x6e2>
 80083a2:	4b6a      	ldr	r3, [pc, #424]	; (800854c <_dtoa_r+0x5f4>)
 80083a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083a8:	ed93 7b00 	vldr	d7, [r3]
 80083ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083b4:	f280 80d8 	bge.w	8008568 <_dtoa_r+0x610>
 80083b8:	f1b9 0f00 	cmp.w	r9, #0
 80083bc:	f300 80d4 	bgt.w	8008568 <_dtoa_r+0x610>
 80083c0:	f040 825e 	bne.w	8008880 <_dtoa_r+0x928>
 80083c4:	2200      	movs	r2, #0
 80083c6:	4b66      	ldr	r3, [pc, #408]	; (8008560 <_dtoa_r+0x608>)
 80083c8:	ec51 0b17 	vmov	r0, r1, d7
 80083cc:	f7f8 f91c 	bl	8000608 <__aeabi_dmul>
 80083d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083d4:	f7f8 fb9e 	bl	8000b14 <__aeabi_dcmpge>
 80083d8:	464f      	mov	r7, r9
 80083da:	464e      	mov	r6, r9
 80083dc:	2800      	cmp	r0, #0
 80083de:	f040 8234 	bne.w	800884a <_dtoa_r+0x8f2>
 80083e2:	2331      	movs	r3, #49	; 0x31
 80083e4:	f10b 0501 	add.w	r5, fp, #1
 80083e8:	f88b 3000 	strb.w	r3, [fp]
 80083ec:	f10a 0a01 	add.w	sl, sl, #1
 80083f0:	e22f      	b.n	8008852 <_dtoa_r+0x8fa>
 80083f2:	07f2      	lsls	r2, r6, #31
 80083f4:	d505      	bpl.n	8008402 <_dtoa_r+0x4aa>
 80083f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fa:	f7f8 f905 	bl	8000608 <__aeabi_dmul>
 80083fe:	3501      	adds	r5, #1
 8008400:	2301      	movs	r3, #1
 8008402:	1076      	asrs	r6, r6, #1
 8008404:	3708      	adds	r7, #8
 8008406:	e772      	b.n	80082ee <_dtoa_r+0x396>
 8008408:	2502      	movs	r5, #2
 800840a:	e774      	b.n	80082f6 <_dtoa_r+0x39e>
 800840c:	f8cd a020 	str.w	sl, [sp, #32]
 8008410:	464f      	mov	r7, r9
 8008412:	e791      	b.n	8008338 <_dtoa_r+0x3e0>
 8008414:	4b4d      	ldr	r3, [pc, #308]	; (800854c <_dtoa_r+0x5f4>)
 8008416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800841a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800841e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008420:	2b00      	cmp	r3, #0
 8008422:	d047      	beq.n	80084b4 <_dtoa_r+0x55c>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	2000      	movs	r0, #0
 800842a:	494e      	ldr	r1, [pc, #312]	; (8008564 <_dtoa_r+0x60c>)
 800842c:	f7f8 fa16 	bl	800085c <__aeabi_ddiv>
 8008430:	462a      	mov	r2, r5
 8008432:	4633      	mov	r3, r6
 8008434:	f7f7 ff30 	bl	8000298 <__aeabi_dsub>
 8008438:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800843c:	465d      	mov	r5, fp
 800843e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008442:	f7f8 fb91 	bl	8000b68 <__aeabi_d2iz>
 8008446:	4606      	mov	r6, r0
 8008448:	f7f8 f874 	bl	8000534 <__aeabi_i2d>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008454:	f7f7 ff20 	bl	8000298 <__aeabi_dsub>
 8008458:	3630      	adds	r6, #48	; 0x30
 800845a:	f805 6b01 	strb.w	r6, [r5], #1
 800845e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008462:	e9cd 0100 	strd	r0, r1, [sp]
 8008466:	f7f8 fb41 	bl	8000aec <__aeabi_dcmplt>
 800846a:	2800      	cmp	r0, #0
 800846c:	d163      	bne.n	8008536 <_dtoa_r+0x5de>
 800846e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008472:	2000      	movs	r0, #0
 8008474:	4937      	ldr	r1, [pc, #220]	; (8008554 <_dtoa_r+0x5fc>)
 8008476:	f7f7 ff0f 	bl	8000298 <__aeabi_dsub>
 800847a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800847e:	f7f8 fb35 	bl	8000aec <__aeabi_dcmplt>
 8008482:	2800      	cmp	r0, #0
 8008484:	f040 80b7 	bne.w	80085f6 <_dtoa_r+0x69e>
 8008488:	eba5 030b 	sub.w	r3, r5, fp
 800848c:	429f      	cmp	r7, r3
 800848e:	f77f af7c 	ble.w	800838a <_dtoa_r+0x432>
 8008492:	2200      	movs	r2, #0
 8008494:	4b30      	ldr	r3, [pc, #192]	; (8008558 <_dtoa_r+0x600>)
 8008496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800849a:	f7f8 f8b5 	bl	8000608 <__aeabi_dmul>
 800849e:	2200      	movs	r2, #0
 80084a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084a4:	4b2c      	ldr	r3, [pc, #176]	; (8008558 <_dtoa_r+0x600>)
 80084a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084aa:	f7f8 f8ad 	bl	8000608 <__aeabi_dmul>
 80084ae:	e9cd 0100 	strd	r0, r1, [sp]
 80084b2:	e7c4      	b.n	800843e <_dtoa_r+0x4e6>
 80084b4:	462a      	mov	r2, r5
 80084b6:	4633      	mov	r3, r6
 80084b8:	f7f8 f8a6 	bl	8000608 <__aeabi_dmul>
 80084bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084c0:	eb0b 0507 	add.w	r5, fp, r7
 80084c4:	465e      	mov	r6, fp
 80084c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ca:	f7f8 fb4d 	bl	8000b68 <__aeabi_d2iz>
 80084ce:	4607      	mov	r7, r0
 80084d0:	f7f8 f830 	bl	8000534 <__aeabi_i2d>
 80084d4:	3730      	adds	r7, #48	; 0x30
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084de:	f7f7 fedb 	bl	8000298 <__aeabi_dsub>
 80084e2:	f806 7b01 	strb.w	r7, [r6], #1
 80084e6:	42ae      	cmp	r6, r5
 80084e8:	e9cd 0100 	strd	r0, r1, [sp]
 80084ec:	f04f 0200 	mov.w	r2, #0
 80084f0:	d126      	bne.n	8008540 <_dtoa_r+0x5e8>
 80084f2:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <_dtoa_r+0x60c>)
 80084f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084f8:	f7f7 fed0 	bl	800029c <__adddf3>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008504:	f7f8 fb10 	bl	8000b28 <__aeabi_dcmpgt>
 8008508:	2800      	cmp	r0, #0
 800850a:	d174      	bne.n	80085f6 <_dtoa_r+0x69e>
 800850c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008510:	2000      	movs	r0, #0
 8008512:	4914      	ldr	r1, [pc, #80]	; (8008564 <_dtoa_r+0x60c>)
 8008514:	f7f7 fec0 	bl	8000298 <__aeabi_dsub>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008520:	f7f8 fae4 	bl	8000aec <__aeabi_dcmplt>
 8008524:	2800      	cmp	r0, #0
 8008526:	f43f af30 	beq.w	800838a <_dtoa_r+0x432>
 800852a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800852e:	2b30      	cmp	r3, #48	; 0x30
 8008530:	f105 32ff 	add.w	r2, r5, #4294967295
 8008534:	d002      	beq.n	800853c <_dtoa_r+0x5e4>
 8008536:	f8dd a020 	ldr.w	sl, [sp, #32]
 800853a:	e04a      	b.n	80085d2 <_dtoa_r+0x67a>
 800853c:	4615      	mov	r5, r2
 800853e:	e7f4      	b.n	800852a <_dtoa_r+0x5d2>
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <_dtoa_r+0x600>)
 8008542:	f7f8 f861 	bl	8000608 <__aeabi_dmul>
 8008546:	e9cd 0100 	strd	r0, r1, [sp]
 800854a:	e7bc      	b.n	80084c6 <_dtoa_r+0x56e>
 800854c:	0800b5f0 	.word	0x0800b5f0
 8008550:	0800b5c8 	.word	0x0800b5c8
 8008554:	3ff00000 	.word	0x3ff00000
 8008558:	40240000 	.word	0x40240000
 800855c:	401c0000 	.word	0x401c0000
 8008560:	40140000 	.word	0x40140000
 8008564:	3fe00000 	.word	0x3fe00000
 8008568:	e9dd 6700 	ldrd	r6, r7, [sp]
 800856c:	465d      	mov	r5, fp
 800856e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008572:	4630      	mov	r0, r6
 8008574:	4639      	mov	r1, r7
 8008576:	f7f8 f971 	bl	800085c <__aeabi_ddiv>
 800857a:	f7f8 faf5 	bl	8000b68 <__aeabi_d2iz>
 800857e:	4680      	mov	r8, r0
 8008580:	f7f7 ffd8 	bl	8000534 <__aeabi_i2d>
 8008584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008588:	f7f8 f83e 	bl	8000608 <__aeabi_dmul>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4630      	mov	r0, r6
 8008592:	4639      	mov	r1, r7
 8008594:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008598:	f7f7 fe7e 	bl	8000298 <__aeabi_dsub>
 800859c:	f805 6b01 	strb.w	r6, [r5], #1
 80085a0:	eba5 060b 	sub.w	r6, r5, fp
 80085a4:	45b1      	cmp	r9, r6
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	d139      	bne.n	8008620 <_dtoa_r+0x6c8>
 80085ac:	f7f7 fe76 	bl	800029c <__adddf3>
 80085b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085b4:	4606      	mov	r6, r0
 80085b6:	460f      	mov	r7, r1
 80085b8:	f7f8 fab6 	bl	8000b28 <__aeabi_dcmpgt>
 80085bc:	b9c8      	cbnz	r0, 80085f2 <_dtoa_r+0x69a>
 80085be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c2:	4630      	mov	r0, r6
 80085c4:	4639      	mov	r1, r7
 80085c6:	f7f8 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80085ca:	b110      	cbz	r0, 80085d2 <_dtoa_r+0x67a>
 80085cc:	f018 0f01 	tst.w	r8, #1
 80085d0:	d10f      	bne.n	80085f2 <_dtoa_r+0x69a>
 80085d2:	9904      	ldr	r1, [sp, #16]
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 fdff 	bl	80091d8 <_Bfree>
 80085da:	2300      	movs	r3, #0
 80085dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085de:	702b      	strb	r3, [r5, #0]
 80085e0:	f10a 0301 	add.w	r3, sl, #1
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8241 	beq.w	8008a70 <_dtoa_r+0xb18>
 80085ee:	601d      	str	r5, [r3, #0]
 80085f0:	e23e      	b.n	8008a70 <_dtoa_r+0xb18>
 80085f2:	f8cd a020 	str.w	sl, [sp, #32]
 80085f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085fa:	2a39      	cmp	r2, #57	; 0x39
 80085fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8008600:	d108      	bne.n	8008614 <_dtoa_r+0x6bc>
 8008602:	459b      	cmp	fp, r3
 8008604:	d10a      	bne.n	800861c <_dtoa_r+0x6c4>
 8008606:	9b08      	ldr	r3, [sp, #32]
 8008608:	3301      	adds	r3, #1
 800860a:	9308      	str	r3, [sp, #32]
 800860c:	2330      	movs	r3, #48	; 0x30
 800860e:	f88b 3000 	strb.w	r3, [fp]
 8008612:	465b      	mov	r3, fp
 8008614:	781a      	ldrb	r2, [r3, #0]
 8008616:	3201      	adds	r2, #1
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	e78c      	b.n	8008536 <_dtoa_r+0x5de>
 800861c:	461d      	mov	r5, r3
 800861e:	e7ea      	b.n	80085f6 <_dtoa_r+0x69e>
 8008620:	2200      	movs	r2, #0
 8008622:	4b9b      	ldr	r3, [pc, #620]	; (8008890 <_dtoa_r+0x938>)
 8008624:	f7f7 fff0 	bl	8000608 <__aeabi_dmul>
 8008628:	2200      	movs	r2, #0
 800862a:	2300      	movs	r3, #0
 800862c:	4606      	mov	r6, r0
 800862e:	460f      	mov	r7, r1
 8008630:	f7f8 fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8008634:	2800      	cmp	r0, #0
 8008636:	d09a      	beq.n	800856e <_dtoa_r+0x616>
 8008638:	e7cb      	b.n	80085d2 <_dtoa_r+0x67a>
 800863a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800863c:	2a00      	cmp	r2, #0
 800863e:	f000 808b 	beq.w	8008758 <_dtoa_r+0x800>
 8008642:	9a06      	ldr	r2, [sp, #24]
 8008644:	2a01      	cmp	r2, #1
 8008646:	dc6e      	bgt.n	8008726 <_dtoa_r+0x7ce>
 8008648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800864a:	2a00      	cmp	r2, #0
 800864c:	d067      	beq.n	800871e <_dtoa_r+0x7c6>
 800864e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008652:	9f07      	ldr	r7, [sp, #28]
 8008654:	9d05      	ldr	r5, [sp, #20]
 8008656:	9a05      	ldr	r2, [sp, #20]
 8008658:	2101      	movs	r1, #1
 800865a:	441a      	add	r2, r3
 800865c:	4620      	mov	r0, r4
 800865e:	9205      	str	r2, [sp, #20]
 8008660:	4498      	add	r8, r3
 8008662:	f000 fe97 	bl	8009394 <__i2b>
 8008666:	4606      	mov	r6, r0
 8008668:	2d00      	cmp	r5, #0
 800866a:	dd0c      	ble.n	8008686 <_dtoa_r+0x72e>
 800866c:	f1b8 0f00 	cmp.w	r8, #0
 8008670:	dd09      	ble.n	8008686 <_dtoa_r+0x72e>
 8008672:	4545      	cmp	r5, r8
 8008674:	9a05      	ldr	r2, [sp, #20]
 8008676:	462b      	mov	r3, r5
 8008678:	bfa8      	it	ge
 800867a:	4643      	movge	r3, r8
 800867c:	1ad2      	subs	r2, r2, r3
 800867e:	9205      	str	r2, [sp, #20]
 8008680:	1aed      	subs	r5, r5, r3
 8008682:	eba8 0803 	sub.w	r8, r8, r3
 8008686:	9b07      	ldr	r3, [sp, #28]
 8008688:	b1eb      	cbz	r3, 80086c6 <_dtoa_r+0x76e>
 800868a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800868c:	2b00      	cmp	r3, #0
 800868e:	d067      	beq.n	8008760 <_dtoa_r+0x808>
 8008690:	b18f      	cbz	r7, 80086b6 <_dtoa_r+0x75e>
 8008692:	4631      	mov	r1, r6
 8008694:	463a      	mov	r2, r7
 8008696:	4620      	mov	r0, r4
 8008698:	f000 ff1c 	bl	80094d4 <__pow5mult>
 800869c:	9a04      	ldr	r2, [sp, #16]
 800869e:	4601      	mov	r1, r0
 80086a0:	4606      	mov	r6, r0
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 fe7f 	bl	80093a6 <__multiply>
 80086a8:	9904      	ldr	r1, [sp, #16]
 80086aa:	9008      	str	r0, [sp, #32]
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fd93 	bl	80091d8 <_Bfree>
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	9b07      	ldr	r3, [sp, #28]
 80086b8:	1bda      	subs	r2, r3, r7
 80086ba:	d004      	beq.n	80086c6 <_dtoa_r+0x76e>
 80086bc:	9904      	ldr	r1, [sp, #16]
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 ff08 	bl	80094d4 <__pow5mult>
 80086c4:	9004      	str	r0, [sp, #16]
 80086c6:	2101      	movs	r1, #1
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fe63 	bl	8009394 <__i2b>
 80086ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d0:	4607      	mov	r7, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 81d0 	beq.w	8008a78 <_dtoa_r+0xb20>
 80086d8:	461a      	mov	r2, r3
 80086da:	4601      	mov	r1, r0
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fef9 	bl	80094d4 <__pow5mult>
 80086e2:	9b06      	ldr	r3, [sp, #24]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	4607      	mov	r7, r0
 80086e8:	dc40      	bgt.n	800876c <_dtoa_r+0x814>
 80086ea:	9b00      	ldr	r3, [sp, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d139      	bne.n	8008764 <_dtoa_r+0x80c>
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d136      	bne.n	8008768 <_dtoa_r+0x810>
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008700:	0d1b      	lsrs	r3, r3, #20
 8008702:	051b      	lsls	r3, r3, #20
 8008704:	b12b      	cbz	r3, 8008712 <_dtoa_r+0x7ba>
 8008706:	9b05      	ldr	r3, [sp, #20]
 8008708:	3301      	adds	r3, #1
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	f108 0801 	add.w	r8, r8, #1
 8008710:	2301      	movs	r3, #1
 8008712:	9307      	str	r3, [sp, #28]
 8008714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008716:	2b00      	cmp	r3, #0
 8008718:	d12a      	bne.n	8008770 <_dtoa_r+0x818>
 800871a:	2001      	movs	r0, #1
 800871c:	e030      	b.n	8008780 <_dtoa_r+0x828>
 800871e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008720:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008724:	e795      	b.n	8008652 <_dtoa_r+0x6fa>
 8008726:	9b07      	ldr	r3, [sp, #28]
 8008728:	f109 37ff 	add.w	r7, r9, #4294967295
 800872c:	42bb      	cmp	r3, r7
 800872e:	bfbf      	itttt	lt
 8008730:	9b07      	ldrlt	r3, [sp, #28]
 8008732:	9707      	strlt	r7, [sp, #28]
 8008734:	1afa      	sublt	r2, r7, r3
 8008736:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008738:	bfbb      	ittet	lt
 800873a:	189b      	addlt	r3, r3, r2
 800873c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800873e:	1bdf      	subge	r7, r3, r7
 8008740:	2700      	movlt	r7, #0
 8008742:	f1b9 0f00 	cmp.w	r9, #0
 8008746:	bfb5      	itete	lt
 8008748:	9b05      	ldrlt	r3, [sp, #20]
 800874a:	9d05      	ldrge	r5, [sp, #20]
 800874c:	eba3 0509 	sublt.w	r5, r3, r9
 8008750:	464b      	movge	r3, r9
 8008752:	bfb8      	it	lt
 8008754:	2300      	movlt	r3, #0
 8008756:	e77e      	b.n	8008656 <_dtoa_r+0x6fe>
 8008758:	9f07      	ldr	r7, [sp, #28]
 800875a:	9d05      	ldr	r5, [sp, #20]
 800875c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800875e:	e783      	b.n	8008668 <_dtoa_r+0x710>
 8008760:	9a07      	ldr	r2, [sp, #28]
 8008762:	e7ab      	b.n	80086bc <_dtoa_r+0x764>
 8008764:	2300      	movs	r3, #0
 8008766:	e7d4      	b.n	8008712 <_dtoa_r+0x7ba>
 8008768:	9b00      	ldr	r3, [sp, #0]
 800876a:	e7d2      	b.n	8008712 <_dtoa_r+0x7ba>
 800876c:	2300      	movs	r3, #0
 800876e:	9307      	str	r3, [sp, #28]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008776:	6918      	ldr	r0, [r3, #16]
 8008778:	f000 fdbe 	bl	80092f8 <__hi0bits>
 800877c:	f1c0 0020 	rsb	r0, r0, #32
 8008780:	4440      	add	r0, r8
 8008782:	f010 001f 	ands.w	r0, r0, #31
 8008786:	d047      	beq.n	8008818 <_dtoa_r+0x8c0>
 8008788:	f1c0 0320 	rsb	r3, r0, #32
 800878c:	2b04      	cmp	r3, #4
 800878e:	dd3b      	ble.n	8008808 <_dtoa_r+0x8b0>
 8008790:	9b05      	ldr	r3, [sp, #20]
 8008792:	f1c0 001c 	rsb	r0, r0, #28
 8008796:	4403      	add	r3, r0
 8008798:	9305      	str	r3, [sp, #20]
 800879a:	4405      	add	r5, r0
 800879c:	4480      	add	r8, r0
 800879e:	9b05      	ldr	r3, [sp, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	dd05      	ble.n	80087b0 <_dtoa_r+0x858>
 80087a4:	461a      	mov	r2, r3
 80087a6:	9904      	ldr	r1, [sp, #16]
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fee1 	bl	8009570 <__lshift>
 80087ae:	9004      	str	r0, [sp, #16]
 80087b0:	f1b8 0f00 	cmp.w	r8, #0
 80087b4:	dd05      	ble.n	80087c2 <_dtoa_r+0x86a>
 80087b6:	4639      	mov	r1, r7
 80087b8:	4642      	mov	r2, r8
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fed8 	bl	8009570 <__lshift>
 80087c0:	4607      	mov	r7, r0
 80087c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087c4:	b353      	cbz	r3, 800881c <_dtoa_r+0x8c4>
 80087c6:	4639      	mov	r1, r7
 80087c8:	9804      	ldr	r0, [sp, #16]
 80087ca:	f000 ff25 	bl	8009618 <__mcmp>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	da24      	bge.n	800881c <_dtoa_r+0x8c4>
 80087d2:	2300      	movs	r3, #0
 80087d4:	220a      	movs	r2, #10
 80087d6:	9904      	ldr	r1, [sp, #16]
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fd14 	bl	8009206 <__multadd>
 80087de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e0:	9004      	str	r0, [sp, #16]
 80087e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 814d 	beq.w	8008a86 <_dtoa_r+0xb2e>
 80087ec:	2300      	movs	r3, #0
 80087ee:	4631      	mov	r1, r6
 80087f0:	220a      	movs	r2, #10
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 fd07 	bl	8009206 <__multadd>
 80087f8:	9b02      	ldr	r3, [sp, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	4606      	mov	r6, r0
 80087fe:	dc4f      	bgt.n	80088a0 <_dtoa_r+0x948>
 8008800:	9b06      	ldr	r3, [sp, #24]
 8008802:	2b02      	cmp	r3, #2
 8008804:	dd4c      	ble.n	80088a0 <_dtoa_r+0x948>
 8008806:	e011      	b.n	800882c <_dtoa_r+0x8d4>
 8008808:	d0c9      	beq.n	800879e <_dtoa_r+0x846>
 800880a:	9a05      	ldr	r2, [sp, #20]
 800880c:	331c      	adds	r3, #28
 800880e:	441a      	add	r2, r3
 8008810:	9205      	str	r2, [sp, #20]
 8008812:	441d      	add	r5, r3
 8008814:	4498      	add	r8, r3
 8008816:	e7c2      	b.n	800879e <_dtoa_r+0x846>
 8008818:	4603      	mov	r3, r0
 800881a:	e7f6      	b.n	800880a <_dtoa_r+0x8b2>
 800881c:	f1b9 0f00 	cmp.w	r9, #0
 8008820:	dc38      	bgt.n	8008894 <_dtoa_r+0x93c>
 8008822:	9b06      	ldr	r3, [sp, #24]
 8008824:	2b02      	cmp	r3, #2
 8008826:	dd35      	ble.n	8008894 <_dtoa_r+0x93c>
 8008828:	f8cd 9008 	str.w	r9, [sp, #8]
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	b963      	cbnz	r3, 800884a <_dtoa_r+0x8f2>
 8008830:	4639      	mov	r1, r7
 8008832:	2205      	movs	r2, #5
 8008834:	4620      	mov	r0, r4
 8008836:	f000 fce6 	bl	8009206 <__multadd>
 800883a:	4601      	mov	r1, r0
 800883c:	4607      	mov	r7, r0
 800883e:	9804      	ldr	r0, [sp, #16]
 8008840:	f000 feea 	bl	8009618 <__mcmp>
 8008844:	2800      	cmp	r0, #0
 8008846:	f73f adcc 	bgt.w	80083e2 <_dtoa_r+0x48a>
 800884a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800884c:	465d      	mov	r5, fp
 800884e:	ea6f 0a03 	mvn.w	sl, r3
 8008852:	f04f 0900 	mov.w	r9, #0
 8008856:	4639      	mov	r1, r7
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fcbd 	bl	80091d8 <_Bfree>
 800885e:	2e00      	cmp	r6, #0
 8008860:	f43f aeb7 	beq.w	80085d2 <_dtoa_r+0x67a>
 8008864:	f1b9 0f00 	cmp.w	r9, #0
 8008868:	d005      	beq.n	8008876 <_dtoa_r+0x91e>
 800886a:	45b1      	cmp	r9, r6
 800886c:	d003      	beq.n	8008876 <_dtoa_r+0x91e>
 800886e:	4649      	mov	r1, r9
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fcb1 	bl	80091d8 <_Bfree>
 8008876:	4631      	mov	r1, r6
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fcad 	bl	80091d8 <_Bfree>
 800887e:	e6a8      	b.n	80085d2 <_dtoa_r+0x67a>
 8008880:	2700      	movs	r7, #0
 8008882:	463e      	mov	r6, r7
 8008884:	e7e1      	b.n	800884a <_dtoa_r+0x8f2>
 8008886:	f8dd a020 	ldr.w	sl, [sp, #32]
 800888a:	463e      	mov	r6, r7
 800888c:	e5a9      	b.n	80083e2 <_dtoa_r+0x48a>
 800888e:	bf00      	nop
 8008890:	40240000 	.word	0x40240000
 8008894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008896:	f8cd 9008 	str.w	r9, [sp, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80fa 	beq.w	8008a94 <_dtoa_r+0xb3c>
 80088a0:	2d00      	cmp	r5, #0
 80088a2:	dd05      	ble.n	80088b0 <_dtoa_r+0x958>
 80088a4:	4631      	mov	r1, r6
 80088a6:	462a      	mov	r2, r5
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fe61 	bl	8009570 <__lshift>
 80088ae:	4606      	mov	r6, r0
 80088b0:	9b07      	ldr	r3, [sp, #28]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d04c      	beq.n	8008950 <_dtoa_r+0x9f8>
 80088b6:	6871      	ldr	r1, [r6, #4]
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fc59 	bl	8009170 <_Balloc>
 80088be:	6932      	ldr	r2, [r6, #16]
 80088c0:	3202      	adds	r2, #2
 80088c2:	4605      	mov	r5, r0
 80088c4:	0092      	lsls	r2, r2, #2
 80088c6:	f106 010c 	add.w	r1, r6, #12
 80088ca:	300c      	adds	r0, #12
 80088cc:	f7fd fd8e 	bl	80063ec <memcpy>
 80088d0:	2201      	movs	r2, #1
 80088d2:	4629      	mov	r1, r5
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fe4b 	bl	8009570 <__lshift>
 80088da:	9b00      	ldr	r3, [sp, #0]
 80088dc:	f8cd b014 	str.w	fp, [sp, #20]
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	46b1      	mov	r9, r6
 80088e6:	9307      	str	r3, [sp, #28]
 80088e8:	4606      	mov	r6, r0
 80088ea:	4639      	mov	r1, r7
 80088ec:	9804      	ldr	r0, [sp, #16]
 80088ee:	f7ff faa5 	bl	8007e3c <quorem>
 80088f2:	4649      	mov	r1, r9
 80088f4:	4605      	mov	r5, r0
 80088f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088fa:	9804      	ldr	r0, [sp, #16]
 80088fc:	f000 fe8c 	bl	8009618 <__mcmp>
 8008900:	4632      	mov	r2, r6
 8008902:	9000      	str	r0, [sp, #0]
 8008904:	4639      	mov	r1, r7
 8008906:	4620      	mov	r0, r4
 8008908:	f000 fea0 	bl	800964c <__mdiff>
 800890c:	68c3      	ldr	r3, [r0, #12]
 800890e:	4602      	mov	r2, r0
 8008910:	bb03      	cbnz	r3, 8008954 <_dtoa_r+0x9fc>
 8008912:	4601      	mov	r1, r0
 8008914:	9008      	str	r0, [sp, #32]
 8008916:	9804      	ldr	r0, [sp, #16]
 8008918:	f000 fe7e 	bl	8009618 <__mcmp>
 800891c:	9a08      	ldr	r2, [sp, #32]
 800891e:	4603      	mov	r3, r0
 8008920:	4611      	mov	r1, r2
 8008922:	4620      	mov	r0, r4
 8008924:	9308      	str	r3, [sp, #32]
 8008926:	f000 fc57 	bl	80091d8 <_Bfree>
 800892a:	9b08      	ldr	r3, [sp, #32]
 800892c:	b9a3      	cbnz	r3, 8008958 <_dtoa_r+0xa00>
 800892e:	9a06      	ldr	r2, [sp, #24]
 8008930:	b992      	cbnz	r2, 8008958 <_dtoa_r+0xa00>
 8008932:	9a07      	ldr	r2, [sp, #28]
 8008934:	b982      	cbnz	r2, 8008958 <_dtoa_r+0xa00>
 8008936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800893a:	d029      	beq.n	8008990 <_dtoa_r+0xa38>
 800893c:	9b00      	ldr	r3, [sp, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	dd01      	ble.n	8008946 <_dtoa_r+0x9ee>
 8008942:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008946:	9b05      	ldr	r3, [sp, #20]
 8008948:	1c5d      	adds	r5, r3, #1
 800894a:	f883 8000 	strb.w	r8, [r3]
 800894e:	e782      	b.n	8008856 <_dtoa_r+0x8fe>
 8008950:	4630      	mov	r0, r6
 8008952:	e7c2      	b.n	80088da <_dtoa_r+0x982>
 8008954:	2301      	movs	r3, #1
 8008956:	e7e3      	b.n	8008920 <_dtoa_r+0x9c8>
 8008958:	9a00      	ldr	r2, [sp, #0]
 800895a:	2a00      	cmp	r2, #0
 800895c:	db04      	blt.n	8008968 <_dtoa_r+0xa10>
 800895e:	d125      	bne.n	80089ac <_dtoa_r+0xa54>
 8008960:	9a06      	ldr	r2, [sp, #24]
 8008962:	bb1a      	cbnz	r2, 80089ac <_dtoa_r+0xa54>
 8008964:	9a07      	ldr	r2, [sp, #28]
 8008966:	bb0a      	cbnz	r2, 80089ac <_dtoa_r+0xa54>
 8008968:	2b00      	cmp	r3, #0
 800896a:	ddec      	ble.n	8008946 <_dtoa_r+0x9ee>
 800896c:	2201      	movs	r2, #1
 800896e:	9904      	ldr	r1, [sp, #16]
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fdfd 	bl	8009570 <__lshift>
 8008976:	4639      	mov	r1, r7
 8008978:	9004      	str	r0, [sp, #16]
 800897a:	f000 fe4d 	bl	8009618 <__mcmp>
 800897e:	2800      	cmp	r0, #0
 8008980:	dc03      	bgt.n	800898a <_dtoa_r+0xa32>
 8008982:	d1e0      	bne.n	8008946 <_dtoa_r+0x9ee>
 8008984:	f018 0f01 	tst.w	r8, #1
 8008988:	d0dd      	beq.n	8008946 <_dtoa_r+0x9ee>
 800898a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800898e:	d1d8      	bne.n	8008942 <_dtoa_r+0x9ea>
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	9a05      	ldr	r2, [sp, #20]
 8008994:	1c5d      	adds	r5, r3, #1
 8008996:	2339      	movs	r3, #57	; 0x39
 8008998:	7013      	strb	r3, [r2, #0]
 800899a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800899e:	2b39      	cmp	r3, #57	; 0x39
 80089a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80089a4:	d04f      	beq.n	8008a46 <_dtoa_r+0xaee>
 80089a6:	3301      	adds	r3, #1
 80089a8:	7013      	strb	r3, [r2, #0]
 80089aa:	e754      	b.n	8008856 <_dtoa_r+0x8fe>
 80089ac:	9a05      	ldr	r2, [sp, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f102 0501 	add.w	r5, r2, #1
 80089b4:	dd06      	ble.n	80089c4 <_dtoa_r+0xa6c>
 80089b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ba:	d0e9      	beq.n	8008990 <_dtoa_r+0xa38>
 80089bc:	f108 0801 	add.w	r8, r8, #1
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	e7c2      	b.n	800894a <_dtoa_r+0x9f2>
 80089c4:	9a02      	ldr	r2, [sp, #8]
 80089c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80089ca:	eba5 030b 	sub.w	r3, r5, fp
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d021      	beq.n	8008a16 <_dtoa_r+0xabe>
 80089d2:	2300      	movs	r3, #0
 80089d4:	220a      	movs	r2, #10
 80089d6:	9904      	ldr	r1, [sp, #16]
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fc14 	bl	8009206 <__multadd>
 80089de:	45b1      	cmp	r9, r6
 80089e0:	9004      	str	r0, [sp, #16]
 80089e2:	f04f 0300 	mov.w	r3, #0
 80089e6:	f04f 020a 	mov.w	r2, #10
 80089ea:	4649      	mov	r1, r9
 80089ec:	4620      	mov	r0, r4
 80089ee:	d105      	bne.n	80089fc <_dtoa_r+0xaa4>
 80089f0:	f000 fc09 	bl	8009206 <__multadd>
 80089f4:	4681      	mov	r9, r0
 80089f6:	4606      	mov	r6, r0
 80089f8:	9505      	str	r5, [sp, #20]
 80089fa:	e776      	b.n	80088ea <_dtoa_r+0x992>
 80089fc:	f000 fc03 	bl	8009206 <__multadd>
 8008a00:	4631      	mov	r1, r6
 8008a02:	4681      	mov	r9, r0
 8008a04:	2300      	movs	r3, #0
 8008a06:	220a      	movs	r2, #10
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fbfc 	bl	8009206 <__multadd>
 8008a0e:	4606      	mov	r6, r0
 8008a10:	e7f2      	b.n	80089f8 <_dtoa_r+0xaa0>
 8008a12:	f04f 0900 	mov.w	r9, #0
 8008a16:	2201      	movs	r2, #1
 8008a18:	9904      	ldr	r1, [sp, #16]
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fda8 	bl	8009570 <__lshift>
 8008a20:	4639      	mov	r1, r7
 8008a22:	9004      	str	r0, [sp, #16]
 8008a24:	f000 fdf8 	bl	8009618 <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	dcb6      	bgt.n	800899a <_dtoa_r+0xa42>
 8008a2c:	d102      	bne.n	8008a34 <_dtoa_r+0xadc>
 8008a2e:	f018 0f01 	tst.w	r8, #1
 8008a32:	d1b2      	bne.n	800899a <_dtoa_r+0xa42>
 8008a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a38:	2b30      	cmp	r3, #48	; 0x30
 8008a3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a3e:	f47f af0a 	bne.w	8008856 <_dtoa_r+0x8fe>
 8008a42:	4615      	mov	r5, r2
 8008a44:	e7f6      	b.n	8008a34 <_dtoa_r+0xadc>
 8008a46:	4593      	cmp	fp, r2
 8008a48:	d105      	bne.n	8008a56 <_dtoa_r+0xafe>
 8008a4a:	2331      	movs	r3, #49	; 0x31
 8008a4c:	f10a 0a01 	add.w	sl, sl, #1
 8008a50:	f88b 3000 	strb.w	r3, [fp]
 8008a54:	e6ff      	b.n	8008856 <_dtoa_r+0x8fe>
 8008a56:	4615      	mov	r5, r2
 8008a58:	e79f      	b.n	800899a <_dtoa_r+0xa42>
 8008a5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008ac0 <_dtoa_r+0xb68>
 8008a5e:	e007      	b.n	8008a70 <_dtoa_r+0xb18>
 8008a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a62:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008ac4 <_dtoa_r+0xb6c>
 8008a66:	b11b      	cbz	r3, 8008a70 <_dtoa_r+0xb18>
 8008a68:	f10b 0308 	add.w	r3, fp, #8
 8008a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	4658      	mov	r0, fp
 8008a72:	b017      	add	sp, #92	; 0x5c
 8008a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a78:	9b06      	ldr	r3, [sp, #24]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	f77f ae35 	ble.w	80086ea <_dtoa_r+0x792>
 8008a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a82:	9307      	str	r3, [sp, #28]
 8008a84:	e649      	b.n	800871a <_dtoa_r+0x7c2>
 8008a86:	9b02      	ldr	r3, [sp, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dc03      	bgt.n	8008a94 <_dtoa_r+0xb3c>
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	f73f aecc 	bgt.w	800882c <_dtoa_r+0x8d4>
 8008a94:	465d      	mov	r5, fp
 8008a96:	4639      	mov	r1, r7
 8008a98:	9804      	ldr	r0, [sp, #16]
 8008a9a:	f7ff f9cf 	bl	8007e3c <quorem>
 8008a9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008aa2:	f805 8b01 	strb.w	r8, [r5], #1
 8008aa6:	9a02      	ldr	r2, [sp, #8]
 8008aa8:	eba5 030b 	sub.w	r3, r5, fp
 8008aac:	429a      	cmp	r2, r3
 8008aae:	ddb0      	ble.n	8008a12 <_dtoa_r+0xaba>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	220a      	movs	r2, #10
 8008ab4:	9904      	ldr	r1, [sp, #16]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 fba5 	bl	8009206 <__multadd>
 8008abc:	9004      	str	r0, [sp, #16]
 8008abe:	e7ea      	b.n	8008a96 <_dtoa_r+0xb3e>
 8008ac0:	0800b530 	.word	0x0800b530
 8008ac4:	0800b5b0 	.word	0x0800b5b0

08008ac8 <rshift>:
 8008ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aca:	6906      	ldr	r6, [r0, #16]
 8008acc:	114b      	asrs	r3, r1, #5
 8008ace:	429e      	cmp	r6, r3
 8008ad0:	f100 0414 	add.w	r4, r0, #20
 8008ad4:	dd30      	ble.n	8008b38 <rshift+0x70>
 8008ad6:	f011 011f 	ands.w	r1, r1, #31
 8008ada:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008ade:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008ae2:	d108      	bne.n	8008af6 <rshift+0x2e>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	42b2      	cmp	r2, r6
 8008ae8:	460b      	mov	r3, r1
 8008aea:	d211      	bcs.n	8008b10 <rshift+0x48>
 8008aec:	f852 3b04 	ldr.w	r3, [r2], #4
 8008af0:	f841 3b04 	str.w	r3, [r1], #4
 8008af4:	e7f7      	b.n	8008ae6 <rshift+0x1e>
 8008af6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008afa:	f1c1 0c20 	rsb	ip, r1, #32
 8008afe:	40cd      	lsrs	r5, r1
 8008b00:	3204      	adds	r2, #4
 8008b02:	4623      	mov	r3, r4
 8008b04:	42b2      	cmp	r2, r6
 8008b06:	4617      	mov	r7, r2
 8008b08:	d30c      	bcc.n	8008b24 <rshift+0x5c>
 8008b0a:	601d      	str	r5, [r3, #0]
 8008b0c:	b105      	cbz	r5, 8008b10 <rshift+0x48>
 8008b0e:	3304      	adds	r3, #4
 8008b10:	1b1a      	subs	r2, r3, r4
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b18:	bf08      	it	eq
 8008b1a:	2300      	moveq	r3, #0
 8008b1c:	6102      	str	r2, [r0, #16]
 8008b1e:	bf08      	it	eq
 8008b20:	6143      	streq	r3, [r0, #20]
 8008b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b24:	683f      	ldr	r7, [r7, #0]
 8008b26:	fa07 f70c 	lsl.w	r7, r7, ip
 8008b2a:	433d      	orrs	r5, r7
 8008b2c:	f843 5b04 	str.w	r5, [r3], #4
 8008b30:	f852 5b04 	ldr.w	r5, [r2], #4
 8008b34:	40cd      	lsrs	r5, r1
 8008b36:	e7e5      	b.n	8008b04 <rshift+0x3c>
 8008b38:	4623      	mov	r3, r4
 8008b3a:	e7e9      	b.n	8008b10 <rshift+0x48>

08008b3c <__hexdig_fun>:
 8008b3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b40:	2b09      	cmp	r3, #9
 8008b42:	d802      	bhi.n	8008b4a <__hexdig_fun+0xe>
 8008b44:	3820      	subs	r0, #32
 8008b46:	b2c0      	uxtb	r0, r0
 8008b48:	4770      	bx	lr
 8008b4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b4e:	2b05      	cmp	r3, #5
 8008b50:	d801      	bhi.n	8008b56 <__hexdig_fun+0x1a>
 8008b52:	3847      	subs	r0, #71	; 0x47
 8008b54:	e7f7      	b.n	8008b46 <__hexdig_fun+0xa>
 8008b56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	d801      	bhi.n	8008b62 <__hexdig_fun+0x26>
 8008b5e:	3827      	subs	r0, #39	; 0x27
 8008b60:	e7f1      	b.n	8008b46 <__hexdig_fun+0xa>
 8008b62:	2000      	movs	r0, #0
 8008b64:	4770      	bx	lr

08008b66 <__gethex>:
 8008b66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	b08b      	sub	sp, #44	; 0x2c
 8008b6c:	468a      	mov	sl, r1
 8008b6e:	9002      	str	r0, [sp, #8]
 8008b70:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008b72:	9306      	str	r3, [sp, #24]
 8008b74:	4690      	mov	r8, r2
 8008b76:	f000 fad0 	bl	800911a <__localeconv_l>
 8008b7a:	6803      	ldr	r3, [r0, #0]
 8008b7c:	9303      	str	r3, [sp, #12]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7f7 fb2e 	bl	80001e0 <strlen>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	9001      	str	r0, [sp, #4]
 8008b88:	4403      	add	r3, r0
 8008b8a:	f04f 0b00 	mov.w	fp, #0
 8008b8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b92:	9307      	str	r3, [sp, #28]
 8008b94:	f8da 3000 	ldr.w	r3, [sl]
 8008b98:	3302      	adds	r3, #2
 8008b9a:	461f      	mov	r7, r3
 8008b9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ba0:	2830      	cmp	r0, #48	; 0x30
 8008ba2:	d06c      	beq.n	8008c7e <__gethex+0x118>
 8008ba4:	f7ff ffca 	bl	8008b3c <__hexdig_fun>
 8008ba8:	4604      	mov	r4, r0
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d16a      	bne.n	8008c84 <__gethex+0x11e>
 8008bae:	9a01      	ldr	r2, [sp, #4]
 8008bb0:	9903      	ldr	r1, [sp, #12]
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	f001 f8f4 	bl	8009da0 <strncmp>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d166      	bne.n	8008c8a <__gethex+0x124>
 8008bbc:	9b01      	ldr	r3, [sp, #4]
 8008bbe:	5cf8      	ldrb	r0, [r7, r3]
 8008bc0:	18fe      	adds	r6, r7, r3
 8008bc2:	f7ff ffbb 	bl	8008b3c <__hexdig_fun>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d062      	beq.n	8008c90 <__gethex+0x12a>
 8008bca:	4633      	mov	r3, r6
 8008bcc:	7818      	ldrb	r0, [r3, #0]
 8008bce:	2830      	cmp	r0, #48	; 0x30
 8008bd0:	461f      	mov	r7, r3
 8008bd2:	f103 0301 	add.w	r3, r3, #1
 8008bd6:	d0f9      	beq.n	8008bcc <__gethex+0x66>
 8008bd8:	f7ff ffb0 	bl	8008b3c <__hexdig_fun>
 8008bdc:	fab0 f580 	clz	r5, r0
 8008be0:	096d      	lsrs	r5, r5, #5
 8008be2:	4634      	mov	r4, r6
 8008be4:	f04f 0b01 	mov.w	fp, #1
 8008be8:	463a      	mov	r2, r7
 8008bea:	4616      	mov	r6, r2
 8008bec:	3201      	adds	r2, #1
 8008bee:	7830      	ldrb	r0, [r6, #0]
 8008bf0:	f7ff ffa4 	bl	8008b3c <__hexdig_fun>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d1f8      	bne.n	8008bea <__gethex+0x84>
 8008bf8:	9a01      	ldr	r2, [sp, #4]
 8008bfa:	9903      	ldr	r1, [sp, #12]
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f001 f8cf 	bl	8009da0 <strncmp>
 8008c02:	b950      	cbnz	r0, 8008c1a <__gethex+0xb4>
 8008c04:	b954      	cbnz	r4, 8008c1c <__gethex+0xb6>
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	18f4      	adds	r4, r6, r3
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	3201      	adds	r2, #1
 8008c10:	7830      	ldrb	r0, [r6, #0]
 8008c12:	f7ff ff93 	bl	8008b3c <__hexdig_fun>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d1f8      	bne.n	8008c0c <__gethex+0xa6>
 8008c1a:	b10c      	cbz	r4, 8008c20 <__gethex+0xba>
 8008c1c:	1ba4      	subs	r4, r4, r6
 8008c1e:	00a4      	lsls	r4, r4, #2
 8008c20:	7833      	ldrb	r3, [r6, #0]
 8008c22:	2b50      	cmp	r3, #80	; 0x50
 8008c24:	d001      	beq.n	8008c2a <__gethex+0xc4>
 8008c26:	2b70      	cmp	r3, #112	; 0x70
 8008c28:	d140      	bne.n	8008cac <__gethex+0x146>
 8008c2a:	7873      	ldrb	r3, [r6, #1]
 8008c2c:	2b2b      	cmp	r3, #43	; 0x2b
 8008c2e:	d031      	beq.n	8008c94 <__gethex+0x12e>
 8008c30:	2b2d      	cmp	r3, #45	; 0x2d
 8008c32:	d033      	beq.n	8008c9c <__gethex+0x136>
 8008c34:	1c71      	adds	r1, r6, #1
 8008c36:	f04f 0900 	mov.w	r9, #0
 8008c3a:	7808      	ldrb	r0, [r1, #0]
 8008c3c:	f7ff ff7e 	bl	8008b3c <__hexdig_fun>
 8008c40:	1e43      	subs	r3, r0, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b18      	cmp	r3, #24
 8008c46:	d831      	bhi.n	8008cac <__gethex+0x146>
 8008c48:	f1a0 0210 	sub.w	r2, r0, #16
 8008c4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c50:	f7ff ff74 	bl	8008b3c <__hexdig_fun>
 8008c54:	1e43      	subs	r3, r0, #1
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b18      	cmp	r3, #24
 8008c5a:	d922      	bls.n	8008ca2 <__gethex+0x13c>
 8008c5c:	f1b9 0f00 	cmp.w	r9, #0
 8008c60:	d000      	beq.n	8008c64 <__gethex+0xfe>
 8008c62:	4252      	negs	r2, r2
 8008c64:	4414      	add	r4, r2
 8008c66:	f8ca 1000 	str.w	r1, [sl]
 8008c6a:	b30d      	cbz	r5, 8008cb0 <__gethex+0x14a>
 8008c6c:	f1bb 0f00 	cmp.w	fp, #0
 8008c70:	bf0c      	ite	eq
 8008c72:	2706      	moveq	r7, #6
 8008c74:	2700      	movne	r7, #0
 8008c76:	4638      	mov	r0, r7
 8008c78:	b00b      	add	sp, #44	; 0x2c
 8008c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7e:	f10b 0b01 	add.w	fp, fp, #1
 8008c82:	e78a      	b.n	8008b9a <__gethex+0x34>
 8008c84:	2500      	movs	r5, #0
 8008c86:	462c      	mov	r4, r5
 8008c88:	e7ae      	b.n	8008be8 <__gethex+0x82>
 8008c8a:	463e      	mov	r6, r7
 8008c8c:	2501      	movs	r5, #1
 8008c8e:	e7c7      	b.n	8008c20 <__gethex+0xba>
 8008c90:	4604      	mov	r4, r0
 8008c92:	e7fb      	b.n	8008c8c <__gethex+0x126>
 8008c94:	f04f 0900 	mov.w	r9, #0
 8008c98:	1cb1      	adds	r1, r6, #2
 8008c9a:	e7ce      	b.n	8008c3a <__gethex+0xd4>
 8008c9c:	f04f 0901 	mov.w	r9, #1
 8008ca0:	e7fa      	b.n	8008c98 <__gethex+0x132>
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	fb03 0202 	mla	r2, r3, r2, r0
 8008ca8:	3a10      	subs	r2, #16
 8008caa:	e7cf      	b.n	8008c4c <__gethex+0xe6>
 8008cac:	4631      	mov	r1, r6
 8008cae:	e7da      	b.n	8008c66 <__gethex+0x100>
 8008cb0:	1bf3      	subs	r3, r6, r7
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	2b07      	cmp	r3, #7
 8008cb8:	dc49      	bgt.n	8008d4e <__gethex+0x1e8>
 8008cba:	9802      	ldr	r0, [sp, #8]
 8008cbc:	f000 fa58 	bl	8009170 <_Balloc>
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	f100 0914 	add.w	r9, r0, #20
 8008cc6:	f04f 0b00 	mov.w	fp, #0
 8008cca:	f1c3 0301 	rsb	r3, r3, #1
 8008cce:	4605      	mov	r5, r0
 8008cd0:	f8cd 9010 	str.w	r9, [sp, #16]
 8008cd4:	46da      	mov	sl, fp
 8008cd6:	9308      	str	r3, [sp, #32]
 8008cd8:	42b7      	cmp	r7, r6
 8008cda:	d33b      	bcc.n	8008d54 <__gethex+0x1ee>
 8008cdc:	9804      	ldr	r0, [sp, #16]
 8008cde:	f840 ab04 	str.w	sl, [r0], #4
 8008ce2:	eba0 0009 	sub.w	r0, r0, r9
 8008ce6:	1080      	asrs	r0, r0, #2
 8008ce8:	6128      	str	r0, [r5, #16]
 8008cea:	0147      	lsls	r7, r0, #5
 8008cec:	4650      	mov	r0, sl
 8008cee:	f000 fb03 	bl	80092f8 <__hi0bits>
 8008cf2:	f8d8 6000 	ldr.w	r6, [r8]
 8008cf6:	1a3f      	subs	r7, r7, r0
 8008cf8:	42b7      	cmp	r7, r6
 8008cfa:	dd64      	ble.n	8008dc6 <__gethex+0x260>
 8008cfc:	1bbf      	subs	r7, r7, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	4628      	mov	r0, r5
 8008d02:	f000 fe13 	bl	800992c <__any_on>
 8008d06:	4682      	mov	sl, r0
 8008d08:	b178      	cbz	r0, 8008d2a <__gethex+0x1c4>
 8008d0a:	1e7b      	subs	r3, r7, #1
 8008d0c:	1159      	asrs	r1, r3, #5
 8008d0e:	f003 021f 	and.w	r2, r3, #31
 8008d12:	f04f 0a01 	mov.w	sl, #1
 8008d16:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d1a:	fa0a f202 	lsl.w	r2, sl, r2
 8008d1e:	420a      	tst	r2, r1
 8008d20:	d003      	beq.n	8008d2a <__gethex+0x1c4>
 8008d22:	4553      	cmp	r3, sl
 8008d24:	dc46      	bgt.n	8008db4 <__gethex+0x24e>
 8008d26:	f04f 0a02 	mov.w	sl, #2
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f7ff fecb 	bl	8008ac8 <rshift>
 8008d32:	443c      	add	r4, r7
 8008d34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	da52      	bge.n	8008de2 <__gethex+0x27c>
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	9802      	ldr	r0, [sp, #8]
 8008d40:	f000 fa4a 	bl	80091d8 <_Bfree>
 8008d44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d46:	2300      	movs	r3, #0
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	27a3      	movs	r7, #163	; 0xa3
 8008d4c:	e793      	b.n	8008c76 <__gethex+0x110>
 8008d4e:	3101      	adds	r1, #1
 8008d50:	105b      	asrs	r3, r3, #1
 8008d52:	e7b0      	b.n	8008cb6 <__gethex+0x150>
 8008d54:	1e73      	subs	r3, r6, #1
 8008d56:	9305      	str	r3, [sp, #20]
 8008d58:	9a07      	ldr	r2, [sp, #28]
 8008d5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d018      	beq.n	8008d94 <__gethex+0x22e>
 8008d62:	f1bb 0f20 	cmp.w	fp, #32
 8008d66:	d107      	bne.n	8008d78 <__gethex+0x212>
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	f8c3 a000 	str.w	sl, [r3]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	f04f 0a00 	mov.w	sl, #0
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	46d3      	mov	fp, sl
 8008d78:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d7c:	f7ff fede 	bl	8008b3c <__hexdig_fun>
 8008d80:	f000 000f 	and.w	r0, r0, #15
 8008d84:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d88:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d8c:	f10b 0b04 	add.w	fp, fp, #4
 8008d90:	9b05      	ldr	r3, [sp, #20]
 8008d92:	e00d      	b.n	8008db0 <__gethex+0x24a>
 8008d94:	9b05      	ldr	r3, [sp, #20]
 8008d96:	9a08      	ldr	r2, [sp, #32]
 8008d98:	4413      	add	r3, r2
 8008d9a:	42bb      	cmp	r3, r7
 8008d9c:	d3e1      	bcc.n	8008d62 <__gethex+0x1fc>
 8008d9e:	4618      	mov	r0, r3
 8008da0:	9a01      	ldr	r2, [sp, #4]
 8008da2:	9903      	ldr	r1, [sp, #12]
 8008da4:	9309      	str	r3, [sp, #36]	; 0x24
 8008da6:	f000 fffb 	bl	8009da0 <strncmp>
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1d8      	bne.n	8008d62 <__gethex+0x1fc>
 8008db0:	461e      	mov	r6, r3
 8008db2:	e791      	b.n	8008cd8 <__gethex+0x172>
 8008db4:	1eb9      	subs	r1, r7, #2
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 fdb8 	bl	800992c <__any_on>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d0b2      	beq.n	8008d26 <__gethex+0x1c0>
 8008dc0:	f04f 0a03 	mov.w	sl, #3
 8008dc4:	e7b1      	b.n	8008d2a <__gethex+0x1c4>
 8008dc6:	da09      	bge.n	8008ddc <__gethex+0x276>
 8008dc8:	1bf7      	subs	r7, r6, r7
 8008dca:	4629      	mov	r1, r5
 8008dcc:	463a      	mov	r2, r7
 8008dce:	9802      	ldr	r0, [sp, #8]
 8008dd0:	f000 fbce 	bl	8009570 <__lshift>
 8008dd4:	1be4      	subs	r4, r4, r7
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	f100 0914 	add.w	r9, r0, #20
 8008ddc:	f04f 0a00 	mov.w	sl, #0
 8008de0:	e7a8      	b.n	8008d34 <__gethex+0x1ce>
 8008de2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008de6:	42a0      	cmp	r0, r4
 8008de8:	dd6a      	ble.n	8008ec0 <__gethex+0x35a>
 8008dea:	1b04      	subs	r4, r0, r4
 8008dec:	42a6      	cmp	r6, r4
 8008dee:	dc2e      	bgt.n	8008e4e <__gethex+0x2e8>
 8008df0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d022      	beq.n	8008e3e <__gethex+0x2d8>
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d024      	beq.n	8008e46 <__gethex+0x2e0>
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d115      	bne.n	8008e2c <__gethex+0x2c6>
 8008e00:	42a6      	cmp	r6, r4
 8008e02:	d113      	bne.n	8008e2c <__gethex+0x2c6>
 8008e04:	2e01      	cmp	r6, #1
 8008e06:	dc0b      	bgt.n	8008e20 <__gethex+0x2ba>
 8008e08:	9a06      	ldr	r2, [sp, #24]
 8008e0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	2301      	movs	r3, #1
 8008e12:	612b      	str	r3, [r5, #16]
 8008e14:	f8c9 3000 	str.w	r3, [r9]
 8008e18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e1a:	2762      	movs	r7, #98	; 0x62
 8008e1c:	601d      	str	r5, [r3, #0]
 8008e1e:	e72a      	b.n	8008c76 <__gethex+0x110>
 8008e20:	1e71      	subs	r1, r6, #1
 8008e22:	4628      	mov	r0, r5
 8008e24:	f000 fd82 	bl	800992c <__any_on>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d1ed      	bne.n	8008e08 <__gethex+0x2a2>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	9802      	ldr	r0, [sp, #8]
 8008e30:	f000 f9d2 	bl	80091d8 <_Bfree>
 8008e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e36:	2300      	movs	r3, #0
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	2750      	movs	r7, #80	; 0x50
 8008e3c:	e71b      	b.n	8008c76 <__gethex+0x110>
 8008e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0e1      	beq.n	8008e08 <__gethex+0x2a2>
 8008e44:	e7f2      	b.n	8008e2c <__gethex+0x2c6>
 8008e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1dd      	bne.n	8008e08 <__gethex+0x2a2>
 8008e4c:	e7ee      	b.n	8008e2c <__gethex+0x2c6>
 8008e4e:	1e67      	subs	r7, r4, #1
 8008e50:	f1ba 0f00 	cmp.w	sl, #0
 8008e54:	d131      	bne.n	8008eba <__gethex+0x354>
 8008e56:	b127      	cbz	r7, 8008e62 <__gethex+0x2fc>
 8008e58:	4639      	mov	r1, r7
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 fd66 	bl	800992c <__any_on>
 8008e60:	4682      	mov	sl, r0
 8008e62:	117a      	asrs	r2, r7, #5
 8008e64:	2301      	movs	r3, #1
 8008e66:	f007 071f 	and.w	r7, r7, #31
 8008e6a:	fa03 f707 	lsl.w	r7, r3, r7
 8008e6e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008e72:	4621      	mov	r1, r4
 8008e74:	421f      	tst	r7, r3
 8008e76:	4628      	mov	r0, r5
 8008e78:	bf18      	it	ne
 8008e7a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e7e:	1b36      	subs	r6, r6, r4
 8008e80:	f7ff fe22 	bl	8008ac8 <rshift>
 8008e84:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008e88:	2702      	movs	r7, #2
 8008e8a:	f1ba 0f00 	cmp.w	sl, #0
 8008e8e:	d048      	beq.n	8008f22 <__gethex+0x3bc>
 8008e90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d015      	beq.n	8008ec4 <__gethex+0x35e>
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d017      	beq.n	8008ecc <__gethex+0x366>
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d109      	bne.n	8008eb4 <__gethex+0x34e>
 8008ea0:	f01a 0f02 	tst.w	sl, #2
 8008ea4:	d006      	beq.n	8008eb4 <__gethex+0x34e>
 8008ea6:	f8d9 3000 	ldr.w	r3, [r9]
 8008eaa:	ea4a 0a03 	orr.w	sl, sl, r3
 8008eae:	f01a 0f01 	tst.w	sl, #1
 8008eb2:	d10e      	bne.n	8008ed2 <__gethex+0x36c>
 8008eb4:	f047 0710 	orr.w	r7, r7, #16
 8008eb8:	e033      	b.n	8008f22 <__gethex+0x3bc>
 8008eba:	f04f 0a01 	mov.w	sl, #1
 8008ebe:	e7d0      	b.n	8008e62 <__gethex+0x2fc>
 8008ec0:	2701      	movs	r7, #1
 8008ec2:	e7e2      	b.n	8008e8a <__gethex+0x324>
 8008ec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ec6:	f1c3 0301 	rsb	r3, r3, #1
 8008eca:	9315      	str	r3, [sp, #84]	; 0x54
 8008ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0f0      	beq.n	8008eb4 <__gethex+0x34e>
 8008ed2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008ed6:	f105 0314 	add.w	r3, r5, #20
 8008eda:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008ede:	eb03 010a 	add.w	r1, r3, sl
 8008ee2:	f04f 0c00 	mov.w	ip, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ef0:	d01c      	beq.n	8008f2c <__gethex+0x3c6>
 8008ef2:	3201      	adds	r2, #1
 8008ef4:	6002      	str	r2, [r0, #0]
 8008ef6:	2f02      	cmp	r7, #2
 8008ef8:	f105 0314 	add.w	r3, r5, #20
 8008efc:	d138      	bne.n	8008f70 <__gethex+0x40a>
 8008efe:	f8d8 2000 	ldr.w	r2, [r8]
 8008f02:	3a01      	subs	r2, #1
 8008f04:	42b2      	cmp	r2, r6
 8008f06:	d10a      	bne.n	8008f1e <__gethex+0x3b8>
 8008f08:	1171      	asrs	r1, r6, #5
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f006 061f 	and.w	r6, r6, #31
 8008f10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f14:	fa02 f606 	lsl.w	r6, r2, r6
 8008f18:	421e      	tst	r6, r3
 8008f1a:	bf18      	it	ne
 8008f1c:	4617      	movne	r7, r2
 8008f1e:	f047 0720 	orr.w	r7, r7, #32
 8008f22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f24:	601d      	str	r5, [r3, #0]
 8008f26:	9b06      	ldr	r3, [sp, #24]
 8008f28:	601c      	str	r4, [r3, #0]
 8008f2a:	e6a4      	b.n	8008c76 <__gethex+0x110>
 8008f2c:	4299      	cmp	r1, r3
 8008f2e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f32:	d8d8      	bhi.n	8008ee6 <__gethex+0x380>
 8008f34:	68ab      	ldr	r3, [r5, #8]
 8008f36:	4599      	cmp	r9, r3
 8008f38:	db12      	blt.n	8008f60 <__gethex+0x3fa>
 8008f3a:	6869      	ldr	r1, [r5, #4]
 8008f3c:	9802      	ldr	r0, [sp, #8]
 8008f3e:	3101      	adds	r1, #1
 8008f40:	f000 f916 	bl	8009170 <_Balloc>
 8008f44:	692a      	ldr	r2, [r5, #16]
 8008f46:	3202      	adds	r2, #2
 8008f48:	f105 010c 	add.w	r1, r5, #12
 8008f4c:	4683      	mov	fp, r0
 8008f4e:	0092      	lsls	r2, r2, #2
 8008f50:	300c      	adds	r0, #12
 8008f52:	f7fd fa4b 	bl	80063ec <memcpy>
 8008f56:	4629      	mov	r1, r5
 8008f58:	9802      	ldr	r0, [sp, #8]
 8008f5a:	f000 f93d 	bl	80091d8 <_Bfree>
 8008f5e:	465d      	mov	r5, fp
 8008f60:	692b      	ldr	r3, [r5, #16]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008f68:	612a      	str	r2, [r5, #16]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	615a      	str	r2, [r3, #20]
 8008f6e:	e7c2      	b.n	8008ef6 <__gethex+0x390>
 8008f70:	692a      	ldr	r2, [r5, #16]
 8008f72:	454a      	cmp	r2, r9
 8008f74:	dd0b      	ble.n	8008f8e <__gethex+0x428>
 8008f76:	2101      	movs	r1, #1
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f7ff fda5 	bl	8008ac8 <rshift>
 8008f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f82:	3401      	adds	r4, #1
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	f6ff aed9 	blt.w	8008d3c <__gethex+0x1d6>
 8008f8a:	2701      	movs	r7, #1
 8008f8c:	e7c7      	b.n	8008f1e <__gethex+0x3b8>
 8008f8e:	f016 061f 	ands.w	r6, r6, #31
 8008f92:	d0fa      	beq.n	8008f8a <__gethex+0x424>
 8008f94:	449a      	add	sl, r3
 8008f96:	f1c6 0620 	rsb	r6, r6, #32
 8008f9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008f9e:	f000 f9ab 	bl	80092f8 <__hi0bits>
 8008fa2:	42b0      	cmp	r0, r6
 8008fa4:	dbe7      	blt.n	8008f76 <__gethex+0x410>
 8008fa6:	e7f0      	b.n	8008f8a <__gethex+0x424>

08008fa8 <L_shift>:
 8008fa8:	f1c2 0208 	rsb	r2, r2, #8
 8008fac:	0092      	lsls	r2, r2, #2
 8008fae:	b570      	push	{r4, r5, r6, lr}
 8008fb0:	f1c2 0620 	rsb	r6, r2, #32
 8008fb4:	6843      	ldr	r3, [r0, #4]
 8008fb6:	6804      	ldr	r4, [r0, #0]
 8008fb8:	fa03 f506 	lsl.w	r5, r3, r6
 8008fbc:	432c      	orrs	r4, r5
 8008fbe:	40d3      	lsrs	r3, r2
 8008fc0:	6004      	str	r4, [r0, #0]
 8008fc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fc6:	4288      	cmp	r0, r1
 8008fc8:	d3f4      	bcc.n	8008fb4 <L_shift+0xc>
 8008fca:	bd70      	pop	{r4, r5, r6, pc}

08008fcc <__match>:
 8008fcc:	b530      	push	{r4, r5, lr}
 8008fce:	6803      	ldr	r3, [r0, #0]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd6:	b914      	cbnz	r4, 8008fde <__match+0x12>
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	2001      	movs	r0, #1
 8008fdc:	bd30      	pop	{r4, r5, pc}
 8008fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008fe6:	2d19      	cmp	r5, #25
 8008fe8:	bf98      	it	ls
 8008fea:	3220      	addls	r2, #32
 8008fec:	42a2      	cmp	r2, r4
 8008fee:	d0f0      	beq.n	8008fd2 <__match+0x6>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7f3      	b.n	8008fdc <__match+0x10>

08008ff4 <__hexnan>:
 8008ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff8:	680b      	ldr	r3, [r1, #0]
 8008ffa:	6801      	ldr	r1, [r0, #0]
 8008ffc:	115f      	asrs	r7, r3, #5
 8008ffe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009002:	f013 031f 	ands.w	r3, r3, #31
 8009006:	b087      	sub	sp, #28
 8009008:	bf18      	it	ne
 800900a:	3704      	addne	r7, #4
 800900c:	2500      	movs	r5, #0
 800900e:	1f3e      	subs	r6, r7, #4
 8009010:	4682      	mov	sl, r0
 8009012:	4690      	mov	r8, r2
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	f847 5c04 	str.w	r5, [r7, #-4]
 800901a:	46b1      	mov	r9, r6
 800901c:	4634      	mov	r4, r6
 800901e:	9502      	str	r5, [sp, #8]
 8009020:	46ab      	mov	fp, r5
 8009022:	784a      	ldrb	r2, [r1, #1]
 8009024:	1c4b      	adds	r3, r1, #1
 8009026:	9303      	str	r3, [sp, #12]
 8009028:	b342      	cbz	r2, 800907c <__hexnan+0x88>
 800902a:	4610      	mov	r0, r2
 800902c:	9105      	str	r1, [sp, #20]
 800902e:	9204      	str	r2, [sp, #16]
 8009030:	f7ff fd84 	bl	8008b3c <__hexdig_fun>
 8009034:	2800      	cmp	r0, #0
 8009036:	d143      	bne.n	80090c0 <__hexnan+0xcc>
 8009038:	9a04      	ldr	r2, [sp, #16]
 800903a:	9905      	ldr	r1, [sp, #20]
 800903c:	2a20      	cmp	r2, #32
 800903e:	d818      	bhi.n	8009072 <__hexnan+0x7e>
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	459b      	cmp	fp, r3
 8009044:	dd13      	ble.n	800906e <__hexnan+0x7a>
 8009046:	454c      	cmp	r4, r9
 8009048:	d206      	bcs.n	8009058 <__hexnan+0x64>
 800904a:	2d07      	cmp	r5, #7
 800904c:	dc04      	bgt.n	8009058 <__hexnan+0x64>
 800904e:	462a      	mov	r2, r5
 8009050:	4649      	mov	r1, r9
 8009052:	4620      	mov	r0, r4
 8009054:	f7ff ffa8 	bl	8008fa8 <L_shift>
 8009058:	4544      	cmp	r4, r8
 800905a:	d944      	bls.n	80090e6 <__hexnan+0xf2>
 800905c:	2300      	movs	r3, #0
 800905e:	f1a4 0904 	sub.w	r9, r4, #4
 8009062:	f844 3c04 	str.w	r3, [r4, #-4]
 8009066:	f8cd b008 	str.w	fp, [sp, #8]
 800906a:	464c      	mov	r4, r9
 800906c:	461d      	mov	r5, r3
 800906e:	9903      	ldr	r1, [sp, #12]
 8009070:	e7d7      	b.n	8009022 <__hexnan+0x2e>
 8009072:	2a29      	cmp	r2, #41	; 0x29
 8009074:	d14a      	bne.n	800910c <__hexnan+0x118>
 8009076:	3102      	adds	r1, #2
 8009078:	f8ca 1000 	str.w	r1, [sl]
 800907c:	f1bb 0f00 	cmp.w	fp, #0
 8009080:	d044      	beq.n	800910c <__hexnan+0x118>
 8009082:	454c      	cmp	r4, r9
 8009084:	d206      	bcs.n	8009094 <__hexnan+0xa0>
 8009086:	2d07      	cmp	r5, #7
 8009088:	dc04      	bgt.n	8009094 <__hexnan+0xa0>
 800908a:	462a      	mov	r2, r5
 800908c:	4649      	mov	r1, r9
 800908e:	4620      	mov	r0, r4
 8009090:	f7ff ff8a 	bl	8008fa8 <L_shift>
 8009094:	4544      	cmp	r4, r8
 8009096:	d928      	bls.n	80090ea <__hexnan+0xf6>
 8009098:	4643      	mov	r3, r8
 800909a:	f854 2b04 	ldr.w	r2, [r4], #4
 800909e:	f843 2b04 	str.w	r2, [r3], #4
 80090a2:	42a6      	cmp	r6, r4
 80090a4:	d2f9      	bcs.n	800909a <__hexnan+0xa6>
 80090a6:	2200      	movs	r2, #0
 80090a8:	f843 2b04 	str.w	r2, [r3], #4
 80090ac:	429e      	cmp	r6, r3
 80090ae:	d2fb      	bcs.n	80090a8 <__hexnan+0xb4>
 80090b0:	6833      	ldr	r3, [r6, #0]
 80090b2:	b91b      	cbnz	r3, 80090bc <__hexnan+0xc8>
 80090b4:	4546      	cmp	r6, r8
 80090b6:	d127      	bne.n	8009108 <__hexnan+0x114>
 80090b8:	2301      	movs	r3, #1
 80090ba:	6033      	str	r3, [r6, #0]
 80090bc:	2005      	movs	r0, #5
 80090be:	e026      	b.n	800910e <__hexnan+0x11a>
 80090c0:	3501      	adds	r5, #1
 80090c2:	2d08      	cmp	r5, #8
 80090c4:	f10b 0b01 	add.w	fp, fp, #1
 80090c8:	dd06      	ble.n	80090d8 <__hexnan+0xe4>
 80090ca:	4544      	cmp	r4, r8
 80090cc:	d9cf      	bls.n	800906e <__hexnan+0x7a>
 80090ce:	2300      	movs	r3, #0
 80090d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80090d4:	2501      	movs	r5, #1
 80090d6:	3c04      	subs	r4, #4
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	f000 000f 	and.w	r0, r0, #15
 80090de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	e7c3      	b.n	800906e <__hexnan+0x7a>
 80090e6:	2508      	movs	r5, #8
 80090e8:	e7c1      	b.n	800906e <__hexnan+0x7a>
 80090ea:	9b01      	ldr	r3, [sp, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d0df      	beq.n	80090b0 <__hexnan+0xbc>
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	f1c3 0320 	rsb	r3, r3, #32
 80090f8:	fa22 f303 	lsr.w	r3, r2, r3
 80090fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009100:	401a      	ands	r2, r3
 8009102:	f847 2c04 	str.w	r2, [r7, #-4]
 8009106:	e7d3      	b.n	80090b0 <__hexnan+0xbc>
 8009108:	3e04      	subs	r6, #4
 800910a:	e7d1      	b.n	80090b0 <__hexnan+0xbc>
 800910c:	2004      	movs	r0, #4
 800910e:	b007      	add	sp, #28
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009114 <__locale_ctype_ptr_l>:
 8009114:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009118:	4770      	bx	lr

0800911a <__localeconv_l>:
 800911a:	30f0      	adds	r0, #240	; 0xf0
 800911c:	4770      	bx	lr
	...

08009120 <_localeconv_r>:
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <_localeconv_r+0x14>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6a18      	ldr	r0, [r3, #32]
 8009126:	4b04      	ldr	r3, [pc, #16]	; (8009138 <_localeconv_r+0x18>)
 8009128:	2800      	cmp	r0, #0
 800912a:	bf08      	it	eq
 800912c:	4618      	moveq	r0, r3
 800912e:	30f0      	adds	r0, #240	; 0xf0
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20000024 	.word	0x20000024
 8009138:	20000088 	.word	0x20000088

0800913c <malloc>:
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <malloc+0xc>)
 800913e:	4601      	mov	r1, r0
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	f000 bc71 	b.w	8009a28 <_malloc_r>
 8009146:	bf00      	nop
 8009148:	20000024 	.word	0x20000024

0800914c <__ascii_mbtowc>:
 800914c:	b082      	sub	sp, #8
 800914e:	b901      	cbnz	r1, 8009152 <__ascii_mbtowc+0x6>
 8009150:	a901      	add	r1, sp, #4
 8009152:	b142      	cbz	r2, 8009166 <__ascii_mbtowc+0x1a>
 8009154:	b14b      	cbz	r3, 800916a <__ascii_mbtowc+0x1e>
 8009156:	7813      	ldrb	r3, [r2, #0]
 8009158:	600b      	str	r3, [r1, #0]
 800915a:	7812      	ldrb	r2, [r2, #0]
 800915c:	1c10      	adds	r0, r2, #0
 800915e:	bf18      	it	ne
 8009160:	2001      	movne	r0, #1
 8009162:	b002      	add	sp, #8
 8009164:	4770      	bx	lr
 8009166:	4610      	mov	r0, r2
 8009168:	e7fb      	b.n	8009162 <__ascii_mbtowc+0x16>
 800916a:	f06f 0001 	mvn.w	r0, #1
 800916e:	e7f8      	b.n	8009162 <__ascii_mbtowc+0x16>

08009170 <_Balloc>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009174:	4604      	mov	r4, r0
 8009176:	460e      	mov	r6, r1
 8009178:	b93d      	cbnz	r5, 800918a <_Balloc+0x1a>
 800917a:	2010      	movs	r0, #16
 800917c:	f7ff ffde 	bl	800913c <malloc>
 8009180:	6260      	str	r0, [r4, #36]	; 0x24
 8009182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009186:	6005      	str	r5, [r0, #0]
 8009188:	60c5      	str	r5, [r0, #12]
 800918a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800918c:	68eb      	ldr	r3, [r5, #12]
 800918e:	b183      	cbz	r3, 80091b2 <_Balloc+0x42>
 8009190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009198:	b9b8      	cbnz	r0, 80091ca <_Balloc+0x5a>
 800919a:	2101      	movs	r1, #1
 800919c:	fa01 f506 	lsl.w	r5, r1, r6
 80091a0:	1d6a      	adds	r2, r5, #5
 80091a2:	0092      	lsls	r2, r2, #2
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fbe2 	bl	800996e <_calloc_r>
 80091aa:	b160      	cbz	r0, 80091c6 <_Balloc+0x56>
 80091ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80091b0:	e00e      	b.n	80091d0 <_Balloc+0x60>
 80091b2:	2221      	movs	r2, #33	; 0x21
 80091b4:	2104      	movs	r1, #4
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fbd9 	bl	800996e <_calloc_r>
 80091bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091be:	60e8      	str	r0, [r5, #12]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e4      	bne.n	8009190 <_Balloc+0x20>
 80091c6:	2000      	movs	r0, #0
 80091c8:	bd70      	pop	{r4, r5, r6, pc}
 80091ca:	6802      	ldr	r2, [r0, #0]
 80091cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80091d0:	2300      	movs	r3, #0
 80091d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d6:	e7f7      	b.n	80091c8 <_Balloc+0x58>

080091d8 <_Bfree>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80091dc:	4606      	mov	r6, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	b93c      	cbnz	r4, 80091f2 <_Bfree+0x1a>
 80091e2:	2010      	movs	r0, #16
 80091e4:	f7ff ffaa 	bl	800913c <malloc>
 80091e8:	6270      	str	r0, [r6, #36]	; 0x24
 80091ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091ee:	6004      	str	r4, [r0, #0]
 80091f0:	60c4      	str	r4, [r0, #12]
 80091f2:	b13d      	cbz	r5, 8009204 <_Bfree+0x2c>
 80091f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091f6:	686a      	ldr	r2, [r5, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091fe:	6029      	str	r1, [r5, #0]
 8009200:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009204:	bd70      	pop	{r4, r5, r6, pc}

08009206 <__multadd>:
 8009206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800920a:	690d      	ldr	r5, [r1, #16]
 800920c:	461f      	mov	r7, r3
 800920e:	4606      	mov	r6, r0
 8009210:	460c      	mov	r4, r1
 8009212:	f101 0c14 	add.w	ip, r1, #20
 8009216:	2300      	movs	r3, #0
 8009218:	f8dc 0000 	ldr.w	r0, [ip]
 800921c:	b281      	uxth	r1, r0
 800921e:	fb02 7101 	mla	r1, r2, r1, r7
 8009222:	0c0f      	lsrs	r7, r1, #16
 8009224:	0c00      	lsrs	r0, r0, #16
 8009226:	fb02 7000 	mla	r0, r2, r0, r7
 800922a:	b289      	uxth	r1, r1
 800922c:	3301      	adds	r3, #1
 800922e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009232:	429d      	cmp	r5, r3
 8009234:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009238:	f84c 1b04 	str.w	r1, [ip], #4
 800923c:	dcec      	bgt.n	8009218 <__multadd+0x12>
 800923e:	b1d7      	cbz	r7, 8009276 <__multadd+0x70>
 8009240:	68a3      	ldr	r3, [r4, #8]
 8009242:	42ab      	cmp	r3, r5
 8009244:	dc12      	bgt.n	800926c <__multadd+0x66>
 8009246:	6861      	ldr	r1, [r4, #4]
 8009248:	4630      	mov	r0, r6
 800924a:	3101      	adds	r1, #1
 800924c:	f7ff ff90 	bl	8009170 <_Balloc>
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	3202      	adds	r2, #2
 8009254:	f104 010c 	add.w	r1, r4, #12
 8009258:	4680      	mov	r8, r0
 800925a:	0092      	lsls	r2, r2, #2
 800925c:	300c      	adds	r0, #12
 800925e:	f7fd f8c5 	bl	80063ec <memcpy>
 8009262:	4621      	mov	r1, r4
 8009264:	4630      	mov	r0, r6
 8009266:	f7ff ffb7 	bl	80091d8 <_Bfree>
 800926a:	4644      	mov	r4, r8
 800926c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009270:	3501      	adds	r5, #1
 8009272:	615f      	str	r7, [r3, #20]
 8009274:	6125      	str	r5, [r4, #16]
 8009276:	4620      	mov	r0, r4
 8009278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800927c <__s2b>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	460c      	mov	r4, r1
 8009282:	4615      	mov	r5, r2
 8009284:	461f      	mov	r7, r3
 8009286:	2209      	movs	r2, #9
 8009288:	3308      	adds	r3, #8
 800928a:	4606      	mov	r6, r0
 800928c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009290:	2100      	movs	r1, #0
 8009292:	2201      	movs	r2, #1
 8009294:	429a      	cmp	r2, r3
 8009296:	db20      	blt.n	80092da <__s2b+0x5e>
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff ff69 	bl	8009170 <_Balloc>
 800929e:	9b08      	ldr	r3, [sp, #32]
 80092a0:	6143      	str	r3, [r0, #20]
 80092a2:	2d09      	cmp	r5, #9
 80092a4:	f04f 0301 	mov.w	r3, #1
 80092a8:	6103      	str	r3, [r0, #16]
 80092aa:	dd19      	ble.n	80092e0 <__s2b+0x64>
 80092ac:	f104 0809 	add.w	r8, r4, #9
 80092b0:	46c1      	mov	r9, r8
 80092b2:	442c      	add	r4, r5
 80092b4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80092b8:	4601      	mov	r1, r0
 80092ba:	3b30      	subs	r3, #48	; 0x30
 80092bc:	220a      	movs	r2, #10
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff ffa1 	bl	8009206 <__multadd>
 80092c4:	45a1      	cmp	r9, r4
 80092c6:	d1f5      	bne.n	80092b4 <__s2b+0x38>
 80092c8:	eb08 0405 	add.w	r4, r8, r5
 80092cc:	3c08      	subs	r4, #8
 80092ce:	1b2d      	subs	r5, r5, r4
 80092d0:	1963      	adds	r3, r4, r5
 80092d2:	42bb      	cmp	r3, r7
 80092d4:	db07      	blt.n	80092e6 <__s2b+0x6a>
 80092d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092da:	0052      	lsls	r2, r2, #1
 80092dc:	3101      	adds	r1, #1
 80092de:	e7d9      	b.n	8009294 <__s2b+0x18>
 80092e0:	340a      	adds	r4, #10
 80092e2:	2509      	movs	r5, #9
 80092e4:	e7f3      	b.n	80092ce <__s2b+0x52>
 80092e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092ea:	4601      	mov	r1, r0
 80092ec:	3b30      	subs	r3, #48	; 0x30
 80092ee:	220a      	movs	r2, #10
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7ff ff88 	bl	8009206 <__multadd>
 80092f6:	e7eb      	b.n	80092d0 <__s2b+0x54>

080092f8 <__hi0bits>:
 80092f8:	0c02      	lsrs	r2, r0, #16
 80092fa:	0412      	lsls	r2, r2, #16
 80092fc:	4603      	mov	r3, r0
 80092fe:	b9b2      	cbnz	r2, 800932e <__hi0bits+0x36>
 8009300:	0403      	lsls	r3, r0, #16
 8009302:	2010      	movs	r0, #16
 8009304:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009308:	bf04      	itt	eq
 800930a:	021b      	lsleq	r3, r3, #8
 800930c:	3008      	addeq	r0, #8
 800930e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009312:	bf04      	itt	eq
 8009314:	011b      	lsleq	r3, r3, #4
 8009316:	3004      	addeq	r0, #4
 8009318:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800931c:	bf04      	itt	eq
 800931e:	009b      	lsleq	r3, r3, #2
 8009320:	3002      	addeq	r0, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	db06      	blt.n	8009334 <__hi0bits+0x3c>
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	d503      	bpl.n	8009332 <__hi0bits+0x3a>
 800932a:	3001      	adds	r0, #1
 800932c:	4770      	bx	lr
 800932e:	2000      	movs	r0, #0
 8009330:	e7e8      	b.n	8009304 <__hi0bits+0xc>
 8009332:	2020      	movs	r0, #32
 8009334:	4770      	bx	lr

08009336 <__lo0bits>:
 8009336:	6803      	ldr	r3, [r0, #0]
 8009338:	f013 0207 	ands.w	r2, r3, #7
 800933c:	4601      	mov	r1, r0
 800933e:	d00b      	beq.n	8009358 <__lo0bits+0x22>
 8009340:	07da      	lsls	r2, r3, #31
 8009342:	d423      	bmi.n	800938c <__lo0bits+0x56>
 8009344:	0798      	lsls	r0, r3, #30
 8009346:	bf49      	itett	mi
 8009348:	085b      	lsrmi	r3, r3, #1
 800934a:	089b      	lsrpl	r3, r3, #2
 800934c:	2001      	movmi	r0, #1
 800934e:	600b      	strmi	r3, [r1, #0]
 8009350:	bf5c      	itt	pl
 8009352:	600b      	strpl	r3, [r1, #0]
 8009354:	2002      	movpl	r0, #2
 8009356:	4770      	bx	lr
 8009358:	b298      	uxth	r0, r3
 800935a:	b9a8      	cbnz	r0, 8009388 <__lo0bits+0x52>
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	2010      	movs	r0, #16
 8009360:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009364:	bf04      	itt	eq
 8009366:	0a1b      	lsreq	r3, r3, #8
 8009368:	3008      	addeq	r0, #8
 800936a:	071a      	lsls	r2, r3, #28
 800936c:	bf04      	itt	eq
 800936e:	091b      	lsreq	r3, r3, #4
 8009370:	3004      	addeq	r0, #4
 8009372:	079a      	lsls	r2, r3, #30
 8009374:	bf04      	itt	eq
 8009376:	089b      	lsreq	r3, r3, #2
 8009378:	3002      	addeq	r0, #2
 800937a:	07da      	lsls	r2, r3, #31
 800937c:	d402      	bmi.n	8009384 <__lo0bits+0x4e>
 800937e:	085b      	lsrs	r3, r3, #1
 8009380:	d006      	beq.n	8009390 <__lo0bits+0x5a>
 8009382:	3001      	adds	r0, #1
 8009384:	600b      	str	r3, [r1, #0]
 8009386:	4770      	bx	lr
 8009388:	4610      	mov	r0, r2
 800938a:	e7e9      	b.n	8009360 <__lo0bits+0x2a>
 800938c:	2000      	movs	r0, #0
 800938e:	4770      	bx	lr
 8009390:	2020      	movs	r0, #32
 8009392:	4770      	bx	lr

08009394 <__i2b>:
 8009394:	b510      	push	{r4, lr}
 8009396:	460c      	mov	r4, r1
 8009398:	2101      	movs	r1, #1
 800939a:	f7ff fee9 	bl	8009170 <_Balloc>
 800939e:	2201      	movs	r2, #1
 80093a0:	6144      	str	r4, [r0, #20]
 80093a2:	6102      	str	r2, [r0, #16]
 80093a4:	bd10      	pop	{r4, pc}

080093a6 <__multiply>:
 80093a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093aa:	4614      	mov	r4, r2
 80093ac:	690a      	ldr	r2, [r1, #16]
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	bfb8      	it	lt
 80093b4:	460b      	movlt	r3, r1
 80093b6:	4688      	mov	r8, r1
 80093b8:	bfbc      	itt	lt
 80093ba:	46a0      	movlt	r8, r4
 80093bc:	461c      	movlt	r4, r3
 80093be:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80093c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093ce:	eb07 0609 	add.w	r6, r7, r9
 80093d2:	42b3      	cmp	r3, r6
 80093d4:	bfb8      	it	lt
 80093d6:	3101      	addlt	r1, #1
 80093d8:	f7ff feca 	bl	8009170 <_Balloc>
 80093dc:	f100 0514 	add.w	r5, r0, #20
 80093e0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80093e4:	462b      	mov	r3, r5
 80093e6:	2200      	movs	r2, #0
 80093e8:	4573      	cmp	r3, lr
 80093ea:	d316      	bcc.n	800941a <__multiply+0x74>
 80093ec:	f104 0214 	add.w	r2, r4, #20
 80093f0:	f108 0114 	add.w	r1, r8, #20
 80093f4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80093f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	9201      	str	r2, [sp, #4]
 8009402:	4293      	cmp	r3, r2
 8009404:	d80c      	bhi.n	8009420 <__multiply+0x7a>
 8009406:	2e00      	cmp	r6, #0
 8009408:	dd03      	ble.n	8009412 <__multiply+0x6c>
 800940a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800940e:	2b00      	cmp	r3, #0
 8009410:	d05d      	beq.n	80094ce <__multiply+0x128>
 8009412:	6106      	str	r6, [r0, #16]
 8009414:	b003      	add	sp, #12
 8009416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941a:	f843 2b04 	str.w	r2, [r3], #4
 800941e:	e7e3      	b.n	80093e8 <__multiply+0x42>
 8009420:	f8b2 b000 	ldrh.w	fp, [r2]
 8009424:	f1bb 0f00 	cmp.w	fp, #0
 8009428:	d023      	beq.n	8009472 <__multiply+0xcc>
 800942a:	4689      	mov	r9, r1
 800942c:	46ac      	mov	ip, r5
 800942e:	f04f 0800 	mov.w	r8, #0
 8009432:	f859 4b04 	ldr.w	r4, [r9], #4
 8009436:	f8dc a000 	ldr.w	sl, [ip]
 800943a:	b2a3      	uxth	r3, r4
 800943c:	fa1f fa8a 	uxth.w	sl, sl
 8009440:	fb0b a303 	mla	r3, fp, r3, sl
 8009444:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009448:	f8dc 4000 	ldr.w	r4, [ip]
 800944c:	4443      	add	r3, r8
 800944e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009452:	fb0b 840a 	mla	r4, fp, sl, r8
 8009456:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800945a:	46e2      	mov	sl, ip
 800945c:	b29b      	uxth	r3, r3
 800945e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009462:	454f      	cmp	r7, r9
 8009464:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009468:	f84a 3b04 	str.w	r3, [sl], #4
 800946c:	d82b      	bhi.n	80094c6 <__multiply+0x120>
 800946e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009478:	3204      	adds	r2, #4
 800947a:	f1ba 0f00 	cmp.w	sl, #0
 800947e:	d020      	beq.n	80094c2 <__multiply+0x11c>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	4689      	mov	r9, r1
 8009484:	46a8      	mov	r8, r5
 8009486:	f04f 0b00 	mov.w	fp, #0
 800948a:	f8b9 c000 	ldrh.w	ip, [r9]
 800948e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009492:	fb0a 440c 	mla	r4, sl, ip, r4
 8009496:	445c      	add	r4, fp
 8009498:	46c4      	mov	ip, r8
 800949a:	b29b      	uxth	r3, r3
 800949c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094a0:	f84c 3b04 	str.w	r3, [ip], #4
 80094a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80094ac:	0c1b      	lsrs	r3, r3, #16
 80094ae:	fb0a b303 	mla	r3, sl, r3, fp
 80094b2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80094b6:	454f      	cmp	r7, r9
 80094b8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80094bc:	d805      	bhi.n	80094ca <__multiply+0x124>
 80094be:	f8c8 3004 	str.w	r3, [r8, #4]
 80094c2:	3504      	adds	r5, #4
 80094c4:	e79b      	b.n	80093fe <__multiply+0x58>
 80094c6:	46d4      	mov	ip, sl
 80094c8:	e7b3      	b.n	8009432 <__multiply+0x8c>
 80094ca:	46e0      	mov	r8, ip
 80094cc:	e7dd      	b.n	800948a <__multiply+0xe4>
 80094ce:	3e01      	subs	r6, #1
 80094d0:	e799      	b.n	8009406 <__multiply+0x60>
	...

080094d4 <__pow5mult>:
 80094d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d8:	4615      	mov	r5, r2
 80094da:	f012 0203 	ands.w	r2, r2, #3
 80094de:	4606      	mov	r6, r0
 80094e0:	460f      	mov	r7, r1
 80094e2:	d007      	beq.n	80094f4 <__pow5mult+0x20>
 80094e4:	3a01      	subs	r2, #1
 80094e6:	4c21      	ldr	r4, [pc, #132]	; (800956c <__pow5mult+0x98>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ee:	f7ff fe8a 	bl	8009206 <__multadd>
 80094f2:	4607      	mov	r7, r0
 80094f4:	10ad      	asrs	r5, r5, #2
 80094f6:	d035      	beq.n	8009564 <__pow5mult+0x90>
 80094f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094fa:	b93c      	cbnz	r4, 800950c <__pow5mult+0x38>
 80094fc:	2010      	movs	r0, #16
 80094fe:	f7ff fe1d 	bl	800913c <malloc>
 8009502:	6270      	str	r0, [r6, #36]	; 0x24
 8009504:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009508:	6004      	str	r4, [r0, #0]
 800950a:	60c4      	str	r4, [r0, #12]
 800950c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009510:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009514:	b94c      	cbnz	r4, 800952a <__pow5mult+0x56>
 8009516:	f240 2171 	movw	r1, #625	; 0x271
 800951a:	4630      	mov	r0, r6
 800951c:	f7ff ff3a 	bl	8009394 <__i2b>
 8009520:	2300      	movs	r3, #0
 8009522:	f8c8 0008 	str.w	r0, [r8, #8]
 8009526:	4604      	mov	r4, r0
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	07eb      	lsls	r3, r5, #31
 8009530:	d50a      	bpl.n	8009548 <__pow5mult+0x74>
 8009532:	4639      	mov	r1, r7
 8009534:	4622      	mov	r2, r4
 8009536:	4630      	mov	r0, r6
 8009538:	f7ff ff35 	bl	80093a6 <__multiply>
 800953c:	4639      	mov	r1, r7
 800953e:	4681      	mov	r9, r0
 8009540:	4630      	mov	r0, r6
 8009542:	f7ff fe49 	bl	80091d8 <_Bfree>
 8009546:	464f      	mov	r7, r9
 8009548:	106d      	asrs	r5, r5, #1
 800954a:	d00b      	beq.n	8009564 <__pow5mult+0x90>
 800954c:	6820      	ldr	r0, [r4, #0]
 800954e:	b938      	cbnz	r0, 8009560 <__pow5mult+0x8c>
 8009550:	4622      	mov	r2, r4
 8009552:	4621      	mov	r1, r4
 8009554:	4630      	mov	r0, r6
 8009556:	f7ff ff26 	bl	80093a6 <__multiply>
 800955a:	6020      	str	r0, [r4, #0]
 800955c:	f8c0 8000 	str.w	r8, [r0]
 8009560:	4604      	mov	r4, r0
 8009562:	e7e4      	b.n	800952e <__pow5mult+0x5a>
 8009564:	4638      	mov	r0, r7
 8009566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800956a:	bf00      	nop
 800956c:	0800b6b8 	.word	0x0800b6b8

08009570 <__lshift>:
 8009570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	6849      	ldr	r1, [r1, #4]
 800957e:	eb0a 0903 	add.w	r9, sl, r3
 8009582:	68a3      	ldr	r3, [r4, #8]
 8009584:	4607      	mov	r7, r0
 8009586:	4616      	mov	r6, r2
 8009588:	f109 0501 	add.w	r5, r9, #1
 800958c:	42ab      	cmp	r3, r5
 800958e:	db32      	blt.n	80095f6 <__lshift+0x86>
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff fded 	bl	8009170 <_Balloc>
 8009596:	2300      	movs	r3, #0
 8009598:	4680      	mov	r8, r0
 800959a:	f100 0114 	add.w	r1, r0, #20
 800959e:	461a      	mov	r2, r3
 80095a0:	4553      	cmp	r3, sl
 80095a2:	db2b      	blt.n	80095fc <__lshift+0x8c>
 80095a4:	6920      	ldr	r0, [r4, #16]
 80095a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095aa:	f104 0314 	add.w	r3, r4, #20
 80095ae:	f016 021f 	ands.w	r2, r6, #31
 80095b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095ba:	d025      	beq.n	8009608 <__lshift+0x98>
 80095bc:	f1c2 0e20 	rsb	lr, r2, #32
 80095c0:	2000      	movs	r0, #0
 80095c2:	681e      	ldr	r6, [r3, #0]
 80095c4:	468a      	mov	sl, r1
 80095c6:	4096      	lsls	r6, r2
 80095c8:	4330      	orrs	r0, r6
 80095ca:	f84a 0b04 	str.w	r0, [sl], #4
 80095ce:	f853 0b04 	ldr.w	r0, [r3], #4
 80095d2:	459c      	cmp	ip, r3
 80095d4:	fa20 f00e 	lsr.w	r0, r0, lr
 80095d8:	d814      	bhi.n	8009604 <__lshift+0x94>
 80095da:	6048      	str	r0, [r1, #4]
 80095dc:	b108      	cbz	r0, 80095e2 <__lshift+0x72>
 80095de:	f109 0502 	add.w	r5, r9, #2
 80095e2:	3d01      	subs	r5, #1
 80095e4:	4638      	mov	r0, r7
 80095e6:	f8c8 5010 	str.w	r5, [r8, #16]
 80095ea:	4621      	mov	r1, r4
 80095ec:	f7ff fdf4 	bl	80091d8 <_Bfree>
 80095f0:	4640      	mov	r0, r8
 80095f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f6:	3101      	adds	r1, #1
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	e7c7      	b.n	800958c <__lshift+0x1c>
 80095fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009600:	3301      	adds	r3, #1
 8009602:	e7cd      	b.n	80095a0 <__lshift+0x30>
 8009604:	4651      	mov	r1, sl
 8009606:	e7dc      	b.n	80095c2 <__lshift+0x52>
 8009608:	3904      	subs	r1, #4
 800960a:	f853 2b04 	ldr.w	r2, [r3], #4
 800960e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009612:	459c      	cmp	ip, r3
 8009614:	d8f9      	bhi.n	800960a <__lshift+0x9a>
 8009616:	e7e4      	b.n	80095e2 <__lshift+0x72>

08009618 <__mcmp>:
 8009618:	6903      	ldr	r3, [r0, #16]
 800961a:	690a      	ldr	r2, [r1, #16]
 800961c:	1a9b      	subs	r3, r3, r2
 800961e:	b530      	push	{r4, r5, lr}
 8009620:	d10c      	bne.n	800963c <__mcmp+0x24>
 8009622:	0092      	lsls	r2, r2, #2
 8009624:	3014      	adds	r0, #20
 8009626:	3114      	adds	r1, #20
 8009628:	1884      	adds	r4, r0, r2
 800962a:	4411      	add	r1, r2
 800962c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009630:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009634:	4295      	cmp	r5, r2
 8009636:	d003      	beq.n	8009640 <__mcmp+0x28>
 8009638:	d305      	bcc.n	8009646 <__mcmp+0x2e>
 800963a:	2301      	movs	r3, #1
 800963c:	4618      	mov	r0, r3
 800963e:	bd30      	pop	{r4, r5, pc}
 8009640:	42a0      	cmp	r0, r4
 8009642:	d3f3      	bcc.n	800962c <__mcmp+0x14>
 8009644:	e7fa      	b.n	800963c <__mcmp+0x24>
 8009646:	f04f 33ff 	mov.w	r3, #4294967295
 800964a:	e7f7      	b.n	800963c <__mcmp+0x24>

0800964c <__mdiff>:
 800964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009650:	460d      	mov	r5, r1
 8009652:	4607      	mov	r7, r0
 8009654:	4611      	mov	r1, r2
 8009656:	4628      	mov	r0, r5
 8009658:	4614      	mov	r4, r2
 800965a:	f7ff ffdd 	bl	8009618 <__mcmp>
 800965e:	1e06      	subs	r6, r0, #0
 8009660:	d108      	bne.n	8009674 <__mdiff+0x28>
 8009662:	4631      	mov	r1, r6
 8009664:	4638      	mov	r0, r7
 8009666:	f7ff fd83 	bl	8009170 <_Balloc>
 800966a:	2301      	movs	r3, #1
 800966c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009674:	bfa4      	itt	ge
 8009676:	4623      	movge	r3, r4
 8009678:	462c      	movge	r4, r5
 800967a:	4638      	mov	r0, r7
 800967c:	6861      	ldr	r1, [r4, #4]
 800967e:	bfa6      	itte	ge
 8009680:	461d      	movge	r5, r3
 8009682:	2600      	movge	r6, #0
 8009684:	2601      	movlt	r6, #1
 8009686:	f7ff fd73 	bl	8009170 <_Balloc>
 800968a:	692b      	ldr	r3, [r5, #16]
 800968c:	60c6      	str	r6, [r0, #12]
 800968e:	6926      	ldr	r6, [r4, #16]
 8009690:	f105 0914 	add.w	r9, r5, #20
 8009694:	f104 0214 	add.w	r2, r4, #20
 8009698:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800969c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80096a0:	f100 0514 	add.w	r5, r0, #20
 80096a4:	f04f 0e00 	mov.w	lr, #0
 80096a8:	f852 ab04 	ldr.w	sl, [r2], #4
 80096ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80096b0:	fa1e f18a 	uxtah	r1, lr, sl
 80096b4:	b2a3      	uxth	r3, r4
 80096b6:	1ac9      	subs	r1, r1, r3
 80096b8:	0c23      	lsrs	r3, r4, #16
 80096ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80096be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80096c2:	b289      	uxth	r1, r1
 80096c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80096c8:	45c8      	cmp	r8, r9
 80096ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80096ce:	4694      	mov	ip, r2
 80096d0:	f845 3b04 	str.w	r3, [r5], #4
 80096d4:	d8e8      	bhi.n	80096a8 <__mdiff+0x5c>
 80096d6:	45bc      	cmp	ip, r7
 80096d8:	d304      	bcc.n	80096e4 <__mdiff+0x98>
 80096da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80096de:	b183      	cbz	r3, 8009702 <__mdiff+0xb6>
 80096e0:	6106      	str	r6, [r0, #16]
 80096e2:	e7c5      	b.n	8009670 <__mdiff+0x24>
 80096e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80096e8:	fa1e f381 	uxtah	r3, lr, r1
 80096ec:	141a      	asrs	r2, r3, #16
 80096ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80096fc:	f845 3b04 	str.w	r3, [r5], #4
 8009700:	e7e9      	b.n	80096d6 <__mdiff+0x8a>
 8009702:	3e01      	subs	r6, #1
 8009704:	e7e9      	b.n	80096da <__mdiff+0x8e>
	...

08009708 <__ulp>:
 8009708:	4b12      	ldr	r3, [pc, #72]	; (8009754 <__ulp+0x4c>)
 800970a:	ee10 2a90 	vmov	r2, s1
 800970e:	401a      	ands	r2, r3
 8009710:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009714:	2b00      	cmp	r3, #0
 8009716:	dd04      	ble.n	8009722 <__ulp+0x1a>
 8009718:	2000      	movs	r0, #0
 800971a:	4619      	mov	r1, r3
 800971c:	ec41 0b10 	vmov	d0, r0, r1
 8009720:	4770      	bx	lr
 8009722:	425b      	negs	r3, r3
 8009724:	151b      	asrs	r3, r3, #20
 8009726:	2b13      	cmp	r3, #19
 8009728:	f04f 0000 	mov.w	r0, #0
 800972c:	f04f 0100 	mov.w	r1, #0
 8009730:	dc04      	bgt.n	800973c <__ulp+0x34>
 8009732:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009736:	fa42 f103 	asr.w	r1, r2, r3
 800973a:	e7ef      	b.n	800971c <__ulp+0x14>
 800973c:	3b14      	subs	r3, #20
 800973e:	2b1e      	cmp	r3, #30
 8009740:	f04f 0201 	mov.w	r2, #1
 8009744:	bfda      	itte	le
 8009746:	f1c3 031f 	rsble	r3, r3, #31
 800974a:	fa02 f303 	lslle.w	r3, r2, r3
 800974e:	4613      	movgt	r3, r2
 8009750:	4618      	mov	r0, r3
 8009752:	e7e3      	b.n	800971c <__ulp+0x14>
 8009754:	7ff00000 	.word	0x7ff00000

08009758 <__b2d>:
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975a:	6905      	ldr	r5, [r0, #16]
 800975c:	f100 0714 	add.w	r7, r0, #20
 8009760:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009764:	1f2e      	subs	r6, r5, #4
 8009766:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800976a:	4620      	mov	r0, r4
 800976c:	f7ff fdc4 	bl	80092f8 <__hi0bits>
 8009770:	f1c0 0320 	rsb	r3, r0, #32
 8009774:	280a      	cmp	r0, #10
 8009776:	600b      	str	r3, [r1, #0]
 8009778:	f8df c074 	ldr.w	ip, [pc, #116]	; 80097f0 <__b2d+0x98>
 800977c:	dc14      	bgt.n	80097a8 <__b2d+0x50>
 800977e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009782:	fa24 f10e 	lsr.w	r1, r4, lr
 8009786:	42b7      	cmp	r7, r6
 8009788:	ea41 030c 	orr.w	r3, r1, ip
 800978c:	bf34      	ite	cc
 800978e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009792:	2100      	movcs	r1, #0
 8009794:	3015      	adds	r0, #21
 8009796:	fa04 f000 	lsl.w	r0, r4, r0
 800979a:	fa21 f10e 	lsr.w	r1, r1, lr
 800979e:	ea40 0201 	orr.w	r2, r0, r1
 80097a2:	ec43 2b10 	vmov	d0, r2, r3
 80097a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a8:	42b7      	cmp	r7, r6
 80097aa:	bf3a      	itte	cc
 80097ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80097b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097b4:	2100      	movcs	r1, #0
 80097b6:	380b      	subs	r0, #11
 80097b8:	d015      	beq.n	80097e6 <__b2d+0x8e>
 80097ba:	4084      	lsls	r4, r0
 80097bc:	f1c0 0520 	rsb	r5, r0, #32
 80097c0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80097c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80097c8:	42be      	cmp	r6, r7
 80097ca:	fa21 fc05 	lsr.w	ip, r1, r5
 80097ce:	ea44 030c 	orr.w	r3, r4, ip
 80097d2:	bf8c      	ite	hi
 80097d4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80097d8:	2400      	movls	r4, #0
 80097da:	fa01 f000 	lsl.w	r0, r1, r0
 80097de:	40ec      	lsrs	r4, r5
 80097e0:	ea40 0204 	orr.w	r2, r0, r4
 80097e4:	e7dd      	b.n	80097a2 <__b2d+0x4a>
 80097e6:	ea44 030c 	orr.w	r3, r4, ip
 80097ea:	460a      	mov	r2, r1
 80097ec:	e7d9      	b.n	80097a2 <__b2d+0x4a>
 80097ee:	bf00      	nop
 80097f0:	3ff00000 	.word	0x3ff00000

080097f4 <__d2b>:
 80097f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097f8:	460e      	mov	r6, r1
 80097fa:	2101      	movs	r1, #1
 80097fc:	ec59 8b10 	vmov	r8, r9, d0
 8009800:	4615      	mov	r5, r2
 8009802:	f7ff fcb5 	bl	8009170 <_Balloc>
 8009806:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800980a:	4607      	mov	r7, r0
 800980c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009810:	bb34      	cbnz	r4, 8009860 <__d2b+0x6c>
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	f1b8 0300 	subs.w	r3, r8, #0
 8009818:	d027      	beq.n	800986a <__d2b+0x76>
 800981a:	a802      	add	r0, sp, #8
 800981c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009820:	f7ff fd89 	bl	8009336 <__lo0bits>
 8009824:	9900      	ldr	r1, [sp, #0]
 8009826:	b1f0      	cbz	r0, 8009866 <__d2b+0x72>
 8009828:	9a01      	ldr	r2, [sp, #4]
 800982a:	f1c0 0320 	rsb	r3, r0, #32
 800982e:	fa02 f303 	lsl.w	r3, r2, r3
 8009832:	430b      	orrs	r3, r1
 8009834:	40c2      	lsrs	r2, r0
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	9201      	str	r2, [sp, #4]
 800983a:	9b01      	ldr	r3, [sp, #4]
 800983c:	61bb      	str	r3, [r7, #24]
 800983e:	2b00      	cmp	r3, #0
 8009840:	bf14      	ite	ne
 8009842:	2102      	movne	r1, #2
 8009844:	2101      	moveq	r1, #1
 8009846:	6139      	str	r1, [r7, #16]
 8009848:	b1c4      	cbz	r4, 800987c <__d2b+0x88>
 800984a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800984e:	4404      	add	r4, r0
 8009850:	6034      	str	r4, [r6, #0]
 8009852:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009856:	6028      	str	r0, [r5, #0]
 8009858:	4638      	mov	r0, r7
 800985a:	b003      	add	sp, #12
 800985c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009864:	e7d5      	b.n	8009812 <__d2b+0x1e>
 8009866:	6179      	str	r1, [r7, #20]
 8009868:	e7e7      	b.n	800983a <__d2b+0x46>
 800986a:	a801      	add	r0, sp, #4
 800986c:	f7ff fd63 	bl	8009336 <__lo0bits>
 8009870:	9b01      	ldr	r3, [sp, #4]
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	2101      	movs	r1, #1
 8009876:	6139      	str	r1, [r7, #16]
 8009878:	3020      	adds	r0, #32
 800987a:	e7e5      	b.n	8009848 <__d2b+0x54>
 800987c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009880:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009884:	6030      	str	r0, [r6, #0]
 8009886:	6918      	ldr	r0, [r3, #16]
 8009888:	f7ff fd36 	bl	80092f8 <__hi0bits>
 800988c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009890:	e7e1      	b.n	8009856 <__d2b+0x62>

08009892 <__ratio>:
 8009892:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009896:	4688      	mov	r8, r1
 8009898:	4669      	mov	r1, sp
 800989a:	4681      	mov	r9, r0
 800989c:	f7ff ff5c 	bl	8009758 <__b2d>
 80098a0:	a901      	add	r1, sp, #4
 80098a2:	4640      	mov	r0, r8
 80098a4:	ec57 6b10 	vmov	r6, r7, d0
 80098a8:	f7ff ff56 	bl	8009758 <__b2d>
 80098ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80098b4:	eba3 0c02 	sub.w	ip, r3, r2
 80098b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098bc:	1a9b      	subs	r3, r3, r2
 80098be:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80098c2:	ec5b ab10 	vmov	sl, fp, d0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	bfce      	itee	gt
 80098ca:	463a      	movgt	r2, r7
 80098cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098d0:	465a      	movle	r2, fp
 80098d2:	4659      	mov	r1, fp
 80098d4:	463d      	mov	r5, r7
 80098d6:	bfd4      	ite	le
 80098d8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80098dc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80098e0:	4630      	mov	r0, r6
 80098e2:	ee10 2a10 	vmov	r2, s0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f6 ffb7 	bl	800085c <__aeabi_ddiv>
 80098ee:	ec41 0b10 	vmov	d0, r0, r1
 80098f2:	b003      	add	sp, #12
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098f8 <__copybits>:
 80098f8:	3901      	subs	r1, #1
 80098fa:	b510      	push	{r4, lr}
 80098fc:	1149      	asrs	r1, r1, #5
 80098fe:	6914      	ldr	r4, [r2, #16]
 8009900:	3101      	adds	r1, #1
 8009902:	f102 0314 	add.w	r3, r2, #20
 8009906:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800990a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800990e:	42a3      	cmp	r3, r4
 8009910:	4602      	mov	r2, r0
 8009912:	d303      	bcc.n	800991c <__copybits+0x24>
 8009914:	2300      	movs	r3, #0
 8009916:	428a      	cmp	r2, r1
 8009918:	d305      	bcc.n	8009926 <__copybits+0x2e>
 800991a:	bd10      	pop	{r4, pc}
 800991c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009920:	f840 2b04 	str.w	r2, [r0], #4
 8009924:	e7f3      	b.n	800990e <__copybits+0x16>
 8009926:	f842 3b04 	str.w	r3, [r2], #4
 800992a:	e7f4      	b.n	8009916 <__copybits+0x1e>

0800992c <__any_on>:
 800992c:	f100 0214 	add.w	r2, r0, #20
 8009930:	6900      	ldr	r0, [r0, #16]
 8009932:	114b      	asrs	r3, r1, #5
 8009934:	4298      	cmp	r0, r3
 8009936:	b510      	push	{r4, lr}
 8009938:	db11      	blt.n	800995e <__any_on+0x32>
 800993a:	dd0a      	ble.n	8009952 <__any_on+0x26>
 800993c:	f011 011f 	ands.w	r1, r1, #31
 8009940:	d007      	beq.n	8009952 <__any_on+0x26>
 8009942:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009946:	fa24 f001 	lsr.w	r0, r4, r1
 800994a:	fa00 f101 	lsl.w	r1, r0, r1
 800994e:	428c      	cmp	r4, r1
 8009950:	d10b      	bne.n	800996a <__any_on+0x3e>
 8009952:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009956:	4293      	cmp	r3, r2
 8009958:	d803      	bhi.n	8009962 <__any_on+0x36>
 800995a:	2000      	movs	r0, #0
 800995c:	bd10      	pop	{r4, pc}
 800995e:	4603      	mov	r3, r0
 8009960:	e7f7      	b.n	8009952 <__any_on+0x26>
 8009962:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009966:	2900      	cmp	r1, #0
 8009968:	d0f5      	beq.n	8009956 <__any_on+0x2a>
 800996a:	2001      	movs	r0, #1
 800996c:	e7f6      	b.n	800995c <__any_on+0x30>

0800996e <_calloc_r>:
 800996e:	b538      	push	{r3, r4, r5, lr}
 8009970:	fb02 f401 	mul.w	r4, r2, r1
 8009974:	4621      	mov	r1, r4
 8009976:	f000 f857 	bl	8009a28 <_malloc_r>
 800997a:	4605      	mov	r5, r0
 800997c:	b118      	cbz	r0, 8009986 <_calloc_r+0x18>
 800997e:	4622      	mov	r2, r4
 8009980:	2100      	movs	r1, #0
 8009982:	f7fc fd3e 	bl	8006402 <memset>
 8009986:	4628      	mov	r0, r5
 8009988:	bd38      	pop	{r3, r4, r5, pc}
	...

0800998c <_free_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4605      	mov	r5, r0
 8009990:	2900      	cmp	r1, #0
 8009992:	d045      	beq.n	8009a20 <_free_r+0x94>
 8009994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009998:	1f0c      	subs	r4, r1, #4
 800999a:	2b00      	cmp	r3, #0
 800999c:	bfb8      	it	lt
 800999e:	18e4      	addlt	r4, r4, r3
 80099a0:	f000 fa36 	bl	8009e10 <__malloc_lock>
 80099a4:	4a1f      	ldr	r2, [pc, #124]	; (8009a24 <_free_r+0x98>)
 80099a6:	6813      	ldr	r3, [r2, #0]
 80099a8:	4610      	mov	r0, r2
 80099aa:	b933      	cbnz	r3, 80099ba <_free_r+0x2e>
 80099ac:	6063      	str	r3, [r4, #4]
 80099ae:	6014      	str	r4, [r2, #0]
 80099b0:	4628      	mov	r0, r5
 80099b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099b6:	f000 ba2c 	b.w	8009e12 <__malloc_unlock>
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	d90c      	bls.n	80099d8 <_free_r+0x4c>
 80099be:	6821      	ldr	r1, [r4, #0]
 80099c0:	1862      	adds	r2, r4, r1
 80099c2:	4293      	cmp	r3, r2
 80099c4:	bf04      	itt	eq
 80099c6:	681a      	ldreq	r2, [r3, #0]
 80099c8:	685b      	ldreq	r3, [r3, #4]
 80099ca:	6063      	str	r3, [r4, #4]
 80099cc:	bf04      	itt	eq
 80099ce:	1852      	addeq	r2, r2, r1
 80099d0:	6022      	streq	r2, [r4, #0]
 80099d2:	6004      	str	r4, [r0, #0]
 80099d4:	e7ec      	b.n	80099b0 <_free_r+0x24>
 80099d6:	4613      	mov	r3, r2
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	b10a      	cbz	r2, 80099e0 <_free_r+0x54>
 80099dc:	42a2      	cmp	r2, r4
 80099de:	d9fa      	bls.n	80099d6 <_free_r+0x4a>
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	1858      	adds	r0, r3, r1
 80099e4:	42a0      	cmp	r0, r4
 80099e6:	d10b      	bne.n	8009a00 <_free_r+0x74>
 80099e8:	6820      	ldr	r0, [r4, #0]
 80099ea:	4401      	add	r1, r0
 80099ec:	1858      	adds	r0, r3, r1
 80099ee:	4282      	cmp	r2, r0
 80099f0:	6019      	str	r1, [r3, #0]
 80099f2:	d1dd      	bne.n	80099b0 <_free_r+0x24>
 80099f4:	6810      	ldr	r0, [r2, #0]
 80099f6:	6852      	ldr	r2, [r2, #4]
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	4401      	add	r1, r0
 80099fc:	6019      	str	r1, [r3, #0]
 80099fe:	e7d7      	b.n	80099b0 <_free_r+0x24>
 8009a00:	d902      	bls.n	8009a08 <_free_r+0x7c>
 8009a02:	230c      	movs	r3, #12
 8009a04:	602b      	str	r3, [r5, #0]
 8009a06:	e7d3      	b.n	80099b0 <_free_r+0x24>
 8009a08:	6820      	ldr	r0, [r4, #0]
 8009a0a:	1821      	adds	r1, r4, r0
 8009a0c:	428a      	cmp	r2, r1
 8009a0e:	bf04      	itt	eq
 8009a10:	6811      	ldreq	r1, [r2, #0]
 8009a12:	6852      	ldreq	r2, [r2, #4]
 8009a14:	6062      	str	r2, [r4, #4]
 8009a16:	bf04      	itt	eq
 8009a18:	1809      	addeq	r1, r1, r0
 8009a1a:	6021      	streq	r1, [r4, #0]
 8009a1c:	605c      	str	r4, [r3, #4]
 8009a1e:	e7c7      	b.n	80099b0 <_free_r+0x24>
 8009a20:	bd38      	pop	{r3, r4, r5, pc}
 8009a22:	bf00      	nop
 8009a24:	200002f0 	.word	0x200002f0

08009a28 <_malloc_r>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	1ccd      	adds	r5, r1, #3
 8009a2c:	f025 0503 	bic.w	r5, r5, #3
 8009a30:	3508      	adds	r5, #8
 8009a32:	2d0c      	cmp	r5, #12
 8009a34:	bf38      	it	cc
 8009a36:	250c      	movcc	r5, #12
 8009a38:	2d00      	cmp	r5, #0
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	db01      	blt.n	8009a42 <_malloc_r+0x1a>
 8009a3e:	42a9      	cmp	r1, r5
 8009a40:	d903      	bls.n	8009a4a <_malloc_r+0x22>
 8009a42:	230c      	movs	r3, #12
 8009a44:	6033      	str	r3, [r6, #0]
 8009a46:	2000      	movs	r0, #0
 8009a48:	bd70      	pop	{r4, r5, r6, pc}
 8009a4a:	f000 f9e1 	bl	8009e10 <__malloc_lock>
 8009a4e:	4a21      	ldr	r2, [pc, #132]	; (8009ad4 <_malloc_r+0xac>)
 8009a50:	6814      	ldr	r4, [r2, #0]
 8009a52:	4621      	mov	r1, r4
 8009a54:	b991      	cbnz	r1, 8009a7c <_malloc_r+0x54>
 8009a56:	4c20      	ldr	r4, [pc, #128]	; (8009ad8 <_malloc_r+0xb0>)
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	b91b      	cbnz	r3, 8009a64 <_malloc_r+0x3c>
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f000 f98f 	bl	8009d80 <_sbrk_r>
 8009a62:	6020      	str	r0, [r4, #0]
 8009a64:	4629      	mov	r1, r5
 8009a66:	4630      	mov	r0, r6
 8009a68:	f000 f98a 	bl	8009d80 <_sbrk_r>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d124      	bne.n	8009aba <_malloc_r+0x92>
 8009a70:	230c      	movs	r3, #12
 8009a72:	6033      	str	r3, [r6, #0]
 8009a74:	4630      	mov	r0, r6
 8009a76:	f000 f9cc 	bl	8009e12 <__malloc_unlock>
 8009a7a:	e7e4      	b.n	8009a46 <_malloc_r+0x1e>
 8009a7c:	680b      	ldr	r3, [r1, #0]
 8009a7e:	1b5b      	subs	r3, r3, r5
 8009a80:	d418      	bmi.n	8009ab4 <_malloc_r+0x8c>
 8009a82:	2b0b      	cmp	r3, #11
 8009a84:	d90f      	bls.n	8009aa6 <_malloc_r+0x7e>
 8009a86:	600b      	str	r3, [r1, #0]
 8009a88:	50cd      	str	r5, [r1, r3]
 8009a8a:	18cc      	adds	r4, r1, r3
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f000 f9c0 	bl	8009e12 <__malloc_unlock>
 8009a92:	f104 000b 	add.w	r0, r4, #11
 8009a96:	1d23      	adds	r3, r4, #4
 8009a98:	f020 0007 	bic.w	r0, r0, #7
 8009a9c:	1ac3      	subs	r3, r0, r3
 8009a9e:	d0d3      	beq.n	8009a48 <_malloc_r+0x20>
 8009aa0:	425a      	negs	r2, r3
 8009aa2:	50e2      	str	r2, [r4, r3]
 8009aa4:	e7d0      	b.n	8009a48 <_malloc_r+0x20>
 8009aa6:	428c      	cmp	r4, r1
 8009aa8:	684b      	ldr	r3, [r1, #4]
 8009aaa:	bf16      	itet	ne
 8009aac:	6063      	strne	r3, [r4, #4]
 8009aae:	6013      	streq	r3, [r2, #0]
 8009ab0:	460c      	movne	r4, r1
 8009ab2:	e7eb      	b.n	8009a8c <_malloc_r+0x64>
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	6849      	ldr	r1, [r1, #4]
 8009ab8:	e7cc      	b.n	8009a54 <_malloc_r+0x2c>
 8009aba:	1cc4      	adds	r4, r0, #3
 8009abc:	f024 0403 	bic.w	r4, r4, #3
 8009ac0:	42a0      	cmp	r0, r4
 8009ac2:	d005      	beq.n	8009ad0 <_malloc_r+0xa8>
 8009ac4:	1a21      	subs	r1, r4, r0
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f000 f95a 	bl	8009d80 <_sbrk_r>
 8009acc:	3001      	adds	r0, #1
 8009ace:	d0cf      	beq.n	8009a70 <_malloc_r+0x48>
 8009ad0:	6025      	str	r5, [r4, #0]
 8009ad2:	e7db      	b.n	8009a8c <_malloc_r+0x64>
 8009ad4:	200002f0 	.word	0x200002f0
 8009ad8:	200002f4 	.word	0x200002f4

08009adc <__ssputs_r>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	688e      	ldr	r6, [r1, #8]
 8009ae2:	429e      	cmp	r6, r3
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	4690      	mov	r8, r2
 8009aea:	4699      	mov	r9, r3
 8009aec:	d837      	bhi.n	8009b5e <__ssputs_r+0x82>
 8009aee:	898a      	ldrh	r2, [r1, #12]
 8009af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009af4:	d031      	beq.n	8009b5a <__ssputs_r+0x7e>
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	6909      	ldr	r1, [r1, #16]
 8009afa:	1a6f      	subs	r7, r5, r1
 8009afc:	6965      	ldr	r5, [r4, #20]
 8009afe:	2302      	movs	r3, #2
 8009b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b04:	fb95 f5f3 	sdiv	r5, r5, r3
 8009b08:	f109 0301 	add.w	r3, r9, #1
 8009b0c:	443b      	add	r3, r7
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	bf38      	it	cc
 8009b12:	461d      	movcc	r5, r3
 8009b14:	0553      	lsls	r3, r2, #21
 8009b16:	d530      	bpl.n	8009b7a <__ssputs_r+0x9e>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7ff ff85 	bl	8009a28 <_malloc_r>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	b950      	cbnz	r0, 8009b38 <__ssputs_r+0x5c>
 8009b22:	230c      	movs	r3, #12
 8009b24:	f8ca 3000 	str.w	r3, [sl]
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	f04f 30ff 	mov.w	r0, #4294967295
 8009b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b38:	463a      	mov	r2, r7
 8009b3a:	6921      	ldr	r1, [r4, #16]
 8009b3c:	f7fc fc56 	bl	80063ec <memcpy>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	6126      	str	r6, [r4, #16]
 8009b4e:	6165      	str	r5, [r4, #20]
 8009b50:	443e      	add	r6, r7
 8009b52:	1bed      	subs	r5, r5, r7
 8009b54:	6026      	str	r6, [r4, #0]
 8009b56:	60a5      	str	r5, [r4, #8]
 8009b58:	464e      	mov	r6, r9
 8009b5a:	454e      	cmp	r6, r9
 8009b5c:	d900      	bls.n	8009b60 <__ssputs_r+0x84>
 8009b5e:	464e      	mov	r6, r9
 8009b60:	4632      	mov	r2, r6
 8009b62:	4641      	mov	r1, r8
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	f000 f93a 	bl	8009dde <memmove>
 8009b6a:	68a3      	ldr	r3, [r4, #8]
 8009b6c:	1b9b      	subs	r3, r3, r6
 8009b6e:	60a3      	str	r3, [r4, #8]
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	441e      	add	r6, r3
 8009b74:	6026      	str	r6, [r4, #0]
 8009b76:	2000      	movs	r0, #0
 8009b78:	e7dc      	b.n	8009b34 <__ssputs_r+0x58>
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	f000 f94a 	bl	8009e14 <_realloc_r>
 8009b80:	4606      	mov	r6, r0
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d1e2      	bne.n	8009b4c <__ssputs_r+0x70>
 8009b86:	6921      	ldr	r1, [r4, #16]
 8009b88:	4650      	mov	r0, sl
 8009b8a:	f7ff feff 	bl	800998c <_free_r>
 8009b8e:	e7c8      	b.n	8009b22 <__ssputs_r+0x46>

08009b90 <_svfiprintf_r>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	461d      	mov	r5, r3
 8009b96:	898b      	ldrh	r3, [r1, #12]
 8009b98:	061f      	lsls	r7, r3, #24
 8009b9a:	b09d      	sub	sp, #116	; 0x74
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	4616      	mov	r6, r2
 8009ba2:	d50f      	bpl.n	8009bc4 <_svfiprintf_r+0x34>
 8009ba4:	690b      	ldr	r3, [r1, #16]
 8009ba6:	b96b      	cbnz	r3, 8009bc4 <_svfiprintf_r+0x34>
 8009ba8:	2140      	movs	r1, #64	; 0x40
 8009baa:	f7ff ff3d 	bl	8009a28 <_malloc_r>
 8009bae:	6020      	str	r0, [r4, #0]
 8009bb0:	6120      	str	r0, [r4, #16]
 8009bb2:	b928      	cbnz	r0, 8009bc0 <_svfiprintf_r+0x30>
 8009bb4:	230c      	movs	r3, #12
 8009bb6:	f8c8 3000 	str.w	r3, [r8]
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbe:	e0c8      	b.n	8009d52 <_svfiprintf_r+0x1c2>
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	6163      	str	r3, [r4, #20]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc8:	2320      	movs	r3, #32
 8009bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bce:	2330      	movs	r3, #48	; 0x30
 8009bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bd4:	9503      	str	r5, [sp, #12]
 8009bd6:	f04f 0b01 	mov.w	fp, #1
 8009bda:	4637      	mov	r7, r6
 8009bdc:	463d      	mov	r5, r7
 8009bde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009be2:	b10b      	cbz	r3, 8009be8 <_svfiprintf_r+0x58>
 8009be4:	2b25      	cmp	r3, #37	; 0x25
 8009be6:	d13e      	bne.n	8009c66 <_svfiprintf_r+0xd6>
 8009be8:	ebb7 0a06 	subs.w	sl, r7, r6
 8009bec:	d00b      	beq.n	8009c06 <_svfiprintf_r+0x76>
 8009bee:	4653      	mov	r3, sl
 8009bf0:	4632      	mov	r2, r6
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	f7ff ff71 	bl	8009adc <__ssputs_r>
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f000 80a4 	beq.w	8009d48 <_svfiprintf_r+0x1b8>
 8009c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c02:	4453      	add	r3, sl
 8009c04:	9309      	str	r3, [sp, #36]	; 0x24
 8009c06:	783b      	ldrb	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 809d 	beq.w	8009d48 <_svfiprintf_r+0x1b8>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f04f 32ff 	mov.w	r2, #4294967295
 8009c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c18:	9304      	str	r3, [sp, #16]
 8009c1a:	9307      	str	r3, [sp, #28]
 8009c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c20:	931a      	str	r3, [sp, #104]	; 0x68
 8009c22:	462f      	mov	r7, r5
 8009c24:	2205      	movs	r2, #5
 8009c26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009c2a:	4850      	ldr	r0, [pc, #320]	; (8009d6c <_svfiprintf_r+0x1dc>)
 8009c2c:	f7f6 fae0 	bl	80001f0 <memchr>
 8009c30:	9b04      	ldr	r3, [sp, #16]
 8009c32:	b9d0      	cbnz	r0, 8009c6a <_svfiprintf_r+0xda>
 8009c34:	06d9      	lsls	r1, r3, #27
 8009c36:	bf44      	itt	mi
 8009c38:	2220      	movmi	r2, #32
 8009c3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c3e:	071a      	lsls	r2, r3, #28
 8009c40:	bf44      	itt	mi
 8009c42:	222b      	movmi	r2, #43	; 0x2b
 8009c44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c48:	782a      	ldrb	r2, [r5, #0]
 8009c4a:	2a2a      	cmp	r2, #42	; 0x2a
 8009c4c:	d015      	beq.n	8009c7a <_svfiprintf_r+0xea>
 8009c4e:	9a07      	ldr	r2, [sp, #28]
 8009c50:	462f      	mov	r7, r5
 8009c52:	2000      	movs	r0, #0
 8009c54:	250a      	movs	r5, #10
 8009c56:	4639      	mov	r1, r7
 8009c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c5c:	3b30      	subs	r3, #48	; 0x30
 8009c5e:	2b09      	cmp	r3, #9
 8009c60:	d94d      	bls.n	8009cfe <_svfiprintf_r+0x16e>
 8009c62:	b1b8      	cbz	r0, 8009c94 <_svfiprintf_r+0x104>
 8009c64:	e00f      	b.n	8009c86 <_svfiprintf_r+0xf6>
 8009c66:	462f      	mov	r7, r5
 8009c68:	e7b8      	b.n	8009bdc <_svfiprintf_r+0x4c>
 8009c6a:	4a40      	ldr	r2, [pc, #256]	; (8009d6c <_svfiprintf_r+0x1dc>)
 8009c6c:	1a80      	subs	r0, r0, r2
 8009c6e:	fa0b f000 	lsl.w	r0, fp, r0
 8009c72:	4318      	orrs	r0, r3
 8009c74:	9004      	str	r0, [sp, #16]
 8009c76:	463d      	mov	r5, r7
 8009c78:	e7d3      	b.n	8009c22 <_svfiprintf_r+0x92>
 8009c7a:	9a03      	ldr	r2, [sp, #12]
 8009c7c:	1d11      	adds	r1, r2, #4
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	9103      	str	r1, [sp, #12]
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	db01      	blt.n	8009c8a <_svfiprintf_r+0xfa>
 8009c86:	9207      	str	r2, [sp, #28]
 8009c88:	e004      	b.n	8009c94 <_svfiprintf_r+0x104>
 8009c8a:	4252      	negs	r2, r2
 8009c8c:	f043 0302 	orr.w	r3, r3, #2
 8009c90:	9207      	str	r2, [sp, #28]
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	783b      	ldrb	r3, [r7, #0]
 8009c96:	2b2e      	cmp	r3, #46	; 0x2e
 8009c98:	d10c      	bne.n	8009cb4 <_svfiprintf_r+0x124>
 8009c9a:	787b      	ldrb	r3, [r7, #1]
 8009c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c9e:	d133      	bne.n	8009d08 <_svfiprintf_r+0x178>
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	1d1a      	adds	r2, r3, #4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	9203      	str	r2, [sp, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bfb8      	it	lt
 8009cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cb0:	3702      	adds	r7, #2
 8009cb2:	9305      	str	r3, [sp, #20]
 8009cb4:	4d2e      	ldr	r5, [pc, #184]	; (8009d70 <_svfiprintf_r+0x1e0>)
 8009cb6:	7839      	ldrb	r1, [r7, #0]
 8009cb8:	2203      	movs	r2, #3
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f7f6 fa98 	bl	80001f0 <memchr>
 8009cc0:	b138      	cbz	r0, 8009cd2 <_svfiprintf_r+0x142>
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	1b40      	subs	r0, r0, r5
 8009cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8009cca:	9b04      	ldr	r3, [sp, #16]
 8009ccc:	4303      	orrs	r3, r0
 8009cce:	3701      	adds	r7, #1
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	7839      	ldrb	r1, [r7, #0]
 8009cd4:	4827      	ldr	r0, [pc, #156]	; (8009d74 <_svfiprintf_r+0x1e4>)
 8009cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cda:	2206      	movs	r2, #6
 8009cdc:	1c7e      	adds	r6, r7, #1
 8009cde:	f7f6 fa87 	bl	80001f0 <memchr>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d038      	beq.n	8009d58 <_svfiprintf_r+0x1c8>
 8009ce6:	4b24      	ldr	r3, [pc, #144]	; (8009d78 <_svfiprintf_r+0x1e8>)
 8009ce8:	bb13      	cbnz	r3, 8009d30 <_svfiprintf_r+0x1a0>
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	3307      	adds	r3, #7
 8009cee:	f023 0307 	bic.w	r3, r3, #7
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	9303      	str	r3, [sp, #12]
 8009cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf8:	444b      	add	r3, r9
 8009cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfc:	e76d      	b.n	8009bda <_svfiprintf_r+0x4a>
 8009cfe:	fb05 3202 	mla	r2, r5, r2, r3
 8009d02:	2001      	movs	r0, #1
 8009d04:	460f      	mov	r7, r1
 8009d06:	e7a6      	b.n	8009c56 <_svfiprintf_r+0xc6>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	3701      	adds	r7, #1
 8009d0c:	9305      	str	r3, [sp, #20]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	250a      	movs	r5, #10
 8009d12:	4638      	mov	r0, r7
 8009d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d18:	3a30      	subs	r2, #48	; 0x30
 8009d1a:	2a09      	cmp	r2, #9
 8009d1c:	d903      	bls.n	8009d26 <_svfiprintf_r+0x196>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0c8      	beq.n	8009cb4 <_svfiprintf_r+0x124>
 8009d22:	9105      	str	r1, [sp, #20]
 8009d24:	e7c6      	b.n	8009cb4 <_svfiprintf_r+0x124>
 8009d26:	fb05 2101 	mla	r1, r5, r1, r2
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	e7f0      	b.n	8009d12 <_svfiprintf_r+0x182>
 8009d30:	ab03      	add	r3, sp, #12
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	4622      	mov	r2, r4
 8009d36:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <_svfiprintf_r+0x1ec>)
 8009d38:	a904      	add	r1, sp, #16
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	f7fc fbfe 	bl	800653c <_printf_float>
 8009d40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d44:	4681      	mov	r9, r0
 8009d46:	d1d6      	bne.n	8009cf6 <_svfiprintf_r+0x166>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	065b      	lsls	r3, r3, #25
 8009d4c:	f53f af35 	bmi.w	8009bba <_svfiprintf_r+0x2a>
 8009d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d52:	b01d      	add	sp, #116	; 0x74
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	ab03      	add	r3, sp, #12
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	4b07      	ldr	r3, [pc, #28]	; (8009d7c <_svfiprintf_r+0x1ec>)
 8009d60:	a904      	add	r1, sp, #16
 8009d62:	4640      	mov	r0, r8
 8009d64:	f7fc fea0 	bl	8006aa8 <_printf_i>
 8009d68:	e7ea      	b.n	8009d40 <_svfiprintf_r+0x1b0>
 8009d6a:	bf00      	nop
 8009d6c:	0800b6c4 	.word	0x0800b6c4
 8009d70:	0800b6ca 	.word	0x0800b6ca
 8009d74:	0800b6ce 	.word	0x0800b6ce
 8009d78:	0800653d 	.word	0x0800653d
 8009d7c:	08009add 	.word	0x08009add

08009d80 <_sbrk_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4c06      	ldr	r4, [pc, #24]	; (8009d9c <_sbrk_r+0x1c>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4605      	mov	r5, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	f7f8 fe3c 	bl	8002a08 <_sbrk>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_sbrk_r+0x1a>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_sbrk_r+0x1a>
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	200004bc 	.word	0x200004bc

08009da0 <strncmp>:
 8009da0:	b510      	push	{r4, lr}
 8009da2:	b16a      	cbz	r2, 8009dc0 <strncmp+0x20>
 8009da4:	3901      	subs	r1, #1
 8009da6:	1884      	adds	r4, r0, r2
 8009da8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009dac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d103      	bne.n	8009dbc <strncmp+0x1c>
 8009db4:	42a0      	cmp	r0, r4
 8009db6:	d001      	beq.n	8009dbc <strncmp+0x1c>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1f5      	bne.n	8009da8 <strncmp+0x8>
 8009dbc:	1a98      	subs	r0, r3, r2
 8009dbe:	bd10      	pop	{r4, pc}
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	e7fc      	b.n	8009dbe <strncmp+0x1e>

08009dc4 <__ascii_wctomb>:
 8009dc4:	b149      	cbz	r1, 8009dda <__ascii_wctomb+0x16>
 8009dc6:	2aff      	cmp	r2, #255	; 0xff
 8009dc8:	bf85      	ittet	hi
 8009dca:	238a      	movhi	r3, #138	; 0x8a
 8009dcc:	6003      	strhi	r3, [r0, #0]
 8009dce:	700a      	strbls	r2, [r1, #0]
 8009dd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009dd4:	bf98      	it	ls
 8009dd6:	2001      	movls	r0, #1
 8009dd8:	4770      	bx	lr
 8009dda:	4608      	mov	r0, r1
 8009ddc:	4770      	bx	lr

08009dde <memmove>:
 8009dde:	4288      	cmp	r0, r1
 8009de0:	b510      	push	{r4, lr}
 8009de2:	eb01 0302 	add.w	r3, r1, r2
 8009de6:	d807      	bhi.n	8009df8 <memmove+0x1a>
 8009de8:	1e42      	subs	r2, r0, #1
 8009dea:	4299      	cmp	r1, r3
 8009dec:	d00a      	beq.n	8009e04 <memmove+0x26>
 8009dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009df2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009df6:	e7f8      	b.n	8009dea <memmove+0xc>
 8009df8:	4283      	cmp	r3, r0
 8009dfa:	d9f5      	bls.n	8009de8 <memmove+0xa>
 8009dfc:	1881      	adds	r1, r0, r2
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	42d3      	cmn	r3, r2
 8009e02:	d100      	bne.n	8009e06 <memmove+0x28>
 8009e04:	bd10      	pop	{r4, pc}
 8009e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e0e:	e7f7      	b.n	8009e00 <memmove+0x22>

08009e10 <__malloc_lock>:
 8009e10:	4770      	bx	lr

08009e12 <__malloc_unlock>:
 8009e12:	4770      	bx	lr

08009e14 <_realloc_r>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	4607      	mov	r7, r0
 8009e18:	4614      	mov	r4, r2
 8009e1a:	460e      	mov	r6, r1
 8009e1c:	b921      	cbnz	r1, 8009e28 <_realloc_r+0x14>
 8009e1e:	4611      	mov	r1, r2
 8009e20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e24:	f7ff be00 	b.w	8009a28 <_malloc_r>
 8009e28:	b922      	cbnz	r2, 8009e34 <_realloc_r+0x20>
 8009e2a:	f7ff fdaf 	bl	800998c <_free_r>
 8009e2e:	4625      	mov	r5, r4
 8009e30:	4628      	mov	r0, r5
 8009e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e34:	f000 f814 	bl	8009e60 <_malloc_usable_size_r>
 8009e38:	42a0      	cmp	r0, r4
 8009e3a:	d20f      	bcs.n	8009e5c <_realloc_r+0x48>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	4638      	mov	r0, r7
 8009e40:	f7ff fdf2 	bl	8009a28 <_malloc_r>
 8009e44:	4605      	mov	r5, r0
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0f2      	beq.n	8009e30 <_realloc_r+0x1c>
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	f7fc facd 	bl	80063ec <memcpy>
 8009e52:	4631      	mov	r1, r6
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff fd99 	bl	800998c <_free_r>
 8009e5a:	e7e9      	b.n	8009e30 <_realloc_r+0x1c>
 8009e5c:	4635      	mov	r5, r6
 8009e5e:	e7e7      	b.n	8009e30 <_realloc_r+0x1c>

08009e60 <_malloc_usable_size_r>:
 8009e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e64:	1f18      	subs	r0, r3, #4
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bfbc      	itt	lt
 8009e6a:	580b      	ldrlt	r3, [r1, r0]
 8009e6c:	18c0      	addlt	r0, r0, r3
 8009e6e:	4770      	bx	lr

08009e70 <sin>:
 8009e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e72:	ec51 0b10 	vmov	r0, r1, d0
 8009e76:	4a20      	ldr	r2, [pc, #128]	; (8009ef8 <sin+0x88>)
 8009e78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	dc07      	bgt.n	8009e90 <sin+0x20>
 8009e80:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009ef0 <sin+0x80>
 8009e84:	2000      	movs	r0, #0
 8009e86:	f000 fe37 	bl	800aaf8 <__kernel_sin>
 8009e8a:	ec51 0b10 	vmov	r0, r1, d0
 8009e8e:	e007      	b.n	8009ea0 <sin+0x30>
 8009e90:	4a1a      	ldr	r2, [pc, #104]	; (8009efc <sin+0x8c>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	dd09      	ble.n	8009eaa <sin+0x3a>
 8009e96:	ee10 2a10 	vmov	r2, s0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	f7f6 f9fc 	bl	8000298 <__aeabi_dsub>
 8009ea0:	ec41 0b10 	vmov	d0, r0, r1
 8009ea4:	b005      	add	sp, #20
 8009ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009eaa:	4668      	mov	r0, sp
 8009eac:	f000 f828 	bl	8009f00 <__ieee754_rem_pio2>
 8009eb0:	f000 0003 	and.w	r0, r0, #3
 8009eb4:	2801      	cmp	r0, #1
 8009eb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009eba:	ed9d 0b00 	vldr	d0, [sp]
 8009ebe:	d004      	beq.n	8009eca <sin+0x5a>
 8009ec0:	2802      	cmp	r0, #2
 8009ec2:	d005      	beq.n	8009ed0 <sin+0x60>
 8009ec4:	b970      	cbnz	r0, 8009ee4 <sin+0x74>
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	e7dd      	b.n	8009e86 <sin+0x16>
 8009eca:	f000 fa0d 	bl	800a2e8 <__kernel_cos>
 8009ece:	e7dc      	b.n	8009e8a <sin+0x1a>
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	f000 fe11 	bl	800aaf8 <__kernel_sin>
 8009ed6:	ec53 2b10 	vmov	r2, r3, d0
 8009eda:	ee10 0a10 	vmov	r0, s0
 8009ede:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ee2:	e7dd      	b.n	8009ea0 <sin+0x30>
 8009ee4:	f000 fa00 	bl	800a2e8 <__kernel_cos>
 8009ee8:	e7f5      	b.n	8009ed6 <sin+0x66>
 8009eea:	bf00      	nop
 8009eec:	f3af 8000 	nop.w
	...
 8009ef8:	3fe921fb 	.word	0x3fe921fb
 8009efc:	7fefffff 	.word	0x7fefffff

08009f00 <__ieee754_rem_pio2>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	ec57 6b10 	vmov	r6, r7, d0
 8009f08:	4bc3      	ldr	r3, [pc, #780]	; (800a218 <__ieee754_rem_pio2+0x318>)
 8009f0a:	b08d      	sub	sp, #52	; 0x34
 8009f0c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009f10:	4598      	cmp	r8, r3
 8009f12:	4604      	mov	r4, r0
 8009f14:	9704      	str	r7, [sp, #16]
 8009f16:	dc07      	bgt.n	8009f28 <__ieee754_rem_pio2+0x28>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	ed84 0b00 	vstr	d0, [r4]
 8009f20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009f24:	2500      	movs	r5, #0
 8009f26:	e027      	b.n	8009f78 <__ieee754_rem_pio2+0x78>
 8009f28:	4bbc      	ldr	r3, [pc, #752]	; (800a21c <__ieee754_rem_pio2+0x31c>)
 8009f2a:	4598      	cmp	r8, r3
 8009f2c:	dc75      	bgt.n	800a01a <__ieee754_rem_pio2+0x11a>
 8009f2e:	9b04      	ldr	r3, [sp, #16]
 8009f30:	4dbb      	ldr	r5, [pc, #748]	; (800a220 <__ieee754_rem_pio2+0x320>)
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	ee10 0a10 	vmov	r0, s0
 8009f38:	a3a9      	add	r3, pc, #676	; (adr r3, 800a1e0 <__ieee754_rem_pio2+0x2e0>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	4639      	mov	r1, r7
 8009f40:	dd36      	ble.n	8009fb0 <__ieee754_rem_pio2+0xb0>
 8009f42:	f7f6 f9a9 	bl	8000298 <__aeabi_dsub>
 8009f46:	45a8      	cmp	r8, r5
 8009f48:	4606      	mov	r6, r0
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	d018      	beq.n	8009f80 <__ieee754_rem_pio2+0x80>
 8009f4e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x2e8>)
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	f7f6 f9a0 	bl	8000298 <__aeabi_dsub>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	e9c4 2300 	strd	r2, r3, [r4]
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 f998 	bl	8000298 <__aeabi_dsub>
 8009f68:	a39f      	add	r3, pc, #636	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x2e8>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 f993 	bl	8000298 <__aeabi_dsub>
 8009f72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f76:	2501      	movs	r5, #1
 8009f78:	4628      	mov	r0, r5
 8009f7a:	b00d      	add	sp, #52	; 0x34
 8009f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f80:	a39b      	add	r3, pc, #620	; (adr r3, 800a1f0 <__ieee754_rem_pio2+0x2f0>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f987 	bl	8000298 <__aeabi_dsub>
 8009f8a:	a39b      	add	r3, pc, #620	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x2f8>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	4606      	mov	r6, r0
 8009f92:	460f      	mov	r7, r1
 8009f94:	f7f6 f980 	bl	8000298 <__aeabi_dsub>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	e9c4 2300 	strd	r2, r3, [r4]
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	f7f6 f978 	bl	8000298 <__aeabi_dsub>
 8009fa8:	a393      	add	r3, pc, #588	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x2f8>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	e7de      	b.n	8009f6e <__ieee754_rem_pio2+0x6e>
 8009fb0:	f7f6 f974 	bl	800029c <__adddf3>
 8009fb4:	45a8      	cmp	r8, r5
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	d016      	beq.n	8009fea <__ieee754_rem_pio2+0xea>
 8009fbc:	a38a      	add	r3, pc, #552	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x2e8>)
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	f7f6 f96b 	bl	800029c <__adddf3>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	e9c4 2300 	strd	r2, r3, [r4]
 8009fce:	4630      	mov	r0, r6
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	f7f6 f961 	bl	8000298 <__aeabi_dsub>
 8009fd6:	a384      	add	r3, pc, #528	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x2e8>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f7f6 f95e 	bl	800029c <__adddf3>
 8009fe0:	f04f 35ff 	mov.w	r5, #4294967295
 8009fe4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009fe8:	e7c6      	b.n	8009f78 <__ieee754_rem_pio2+0x78>
 8009fea:	a381      	add	r3, pc, #516	; (adr r3, 800a1f0 <__ieee754_rem_pio2+0x2f0>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f7f6 f954 	bl	800029c <__adddf3>
 8009ff4:	a380      	add	r3, pc, #512	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x2f8>)
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	460f      	mov	r7, r1
 8009ffe:	f7f6 f94d 	bl	800029c <__adddf3>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	e9c4 2300 	strd	r2, r3, [r4]
 800a00a:	4630      	mov	r0, r6
 800a00c:	4639      	mov	r1, r7
 800a00e:	f7f6 f943 	bl	8000298 <__aeabi_dsub>
 800a012:	a379      	add	r3, pc, #484	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x2f8>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	e7e0      	b.n	8009fdc <__ieee754_rem_pio2+0xdc>
 800a01a:	4b82      	ldr	r3, [pc, #520]	; (800a224 <__ieee754_rem_pio2+0x324>)
 800a01c:	4598      	cmp	r8, r3
 800a01e:	f300 80d0 	bgt.w	800a1c2 <__ieee754_rem_pio2+0x2c2>
 800a022:	f000 fe23 	bl	800ac6c <fabs>
 800a026:	ec57 6b10 	vmov	r6, r7, d0
 800a02a:	ee10 0a10 	vmov	r0, s0
 800a02e:	a374      	add	r3, pc, #464	; (adr r3, 800a200 <__ieee754_rem_pio2+0x300>)
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	4639      	mov	r1, r7
 800a036:	f7f6 fae7 	bl	8000608 <__aeabi_dmul>
 800a03a:	2200      	movs	r2, #0
 800a03c:	4b7a      	ldr	r3, [pc, #488]	; (800a228 <__ieee754_rem_pio2+0x328>)
 800a03e:	f7f6 f92d 	bl	800029c <__adddf3>
 800a042:	f7f6 fd91 	bl	8000b68 <__aeabi_d2iz>
 800a046:	4605      	mov	r5, r0
 800a048:	f7f6 fa74 	bl	8000534 <__aeabi_i2d>
 800a04c:	a364      	add	r3, pc, #400	; (adr r3, 800a1e0 <__ieee754_rem_pio2+0x2e0>)
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a056:	f7f6 fad7 	bl	8000608 <__aeabi_dmul>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 f919 	bl	8000298 <__aeabi_dsub>
 800a066:	a360      	add	r3, pc, #384	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x2e8>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	4682      	mov	sl, r0
 800a06e:	468b      	mov	fp, r1
 800a070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a074:	f7f6 fac8 	bl	8000608 <__aeabi_dmul>
 800a078:	2d1f      	cmp	r5, #31
 800a07a:	4606      	mov	r6, r0
 800a07c:	460f      	mov	r7, r1
 800a07e:	dc0c      	bgt.n	800a09a <__ieee754_rem_pio2+0x19a>
 800a080:	1e6a      	subs	r2, r5, #1
 800a082:	4b6a      	ldr	r3, [pc, #424]	; (800a22c <__ieee754_rem_pio2+0x32c>)
 800a084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a088:	4543      	cmp	r3, r8
 800a08a:	d006      	beq.n	800a09a <__ieee754_rem_pio2+0x19a>
 800a08c:	4632      	mov	r2, r6
 800a08e:	463b      	mov	r3, r7
 800a090:	4650      	mov	r0, sl
 800a092:	4659      	mov	r1, fp
 800a094:	f7f6 f900 	bl	8000298 <__aeabi_dsub>
 800a098:	e00e      	b.n	800a0b8 <__ieee754_rem_pio2+0x1b8>
 800a09a:	4632      	mov	r2, r6
 800a09c:	463b      	mov	r3, r7
 800a09e:	4650      	mov	r0, sl
 800a0a0:	4659      	mov	r1, fp
 800a0a2:	f7f6 f8f9 	bl	8000298 <__aeabi_dsub>
 800a0a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a0aa:	9305      	str	r3, [sp, #20]
 800a0ac:	9a05      	ldr	r2, [sp, #20]
 800a0ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	2b10      	cmp	r3, #16
 800a0b6:	dc02      	bgt.n	800a0be <__ieee754_rem_pio2+0x1be>
 800a0b8:	e9c4 0100 	strd	r0, r1, [r4]
 800a0bc:	e039      	b.n	800a132 <__ieee754_rem_pio2+0x232>
 800a0be:	a34c      	add	r3, pc, #304	; (adr r3, 800a1f0 <__ieee754_rem_pio2+0x2f0>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c8:	f7f6 fa9e 	bl	8000608 <__aeabi_dmul>
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	460f      	mov	r7, r1
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4650      	mov	r0, sl
 800a0d6:	4659      	mov	r1, fp
 800a0d8:	f7f6 f8de 	bl	8000298 <__aeabi_dsub>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4689      	mov	r9, r1
 800a0e4:	4650      	mov	r0, sl
 800a0e6:	4659      	mov	r1, fp
 800a0e8:	f7f6 f8d6 	bl	8000298 <__aeabi_dsub>
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	f7f6 f8d2 	bl	8000298 <__aeabi_dsub>
 800a0f4:	a340      	add	r3, pc, #256	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x2f8>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a102:	f7f6 fa81 	bl	8000608 <__aeabi_dmul>
 800a106:	4632      	mov	r2, r6
 800a108:	463b      	mov	r3, r7
 800a10a:	f7f6 f8c5 	bl	8000298 <__aeabi_dsub>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4606      	mov	r6, r0
 800a114:	460f      	mov	r7, r1
 800a116:	4640      	mov	r0, r8
 800a118:	4649      	mov	r1, r9
 800a11a:	f7f6 f8bd 	bl	8000298 <__aeabi_dsub>
 800a11e:	9a05      	ldr	r2, [sp, #20]
 800a120:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	2b31      	cmp	r3, #49	; 0x31
 800a128:	dc20      	bgt.n	800a16c <__ieee754_rem_pio2+0x26c>
 800a12a:	e9c4 0100 	strd	r0, r1, [r4]
 800a12e:	46c2      	mov	sl, r8
 800a130:	46cb      	mov	fp, r9
 800a132:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a136:	4650      	mov	r0, sl
 800a138:	4642      	mov	r2, r8
 800a13a:	464b      	mov	r3, r9
 800a13c:	4659      	mov	r1, fp
 800a13e:	f7f6 f8ab 	bl	8000298 <__aeabi_dsub>
 800a142:	463b      	mov	r3, r7
 800a144:	4632      	mov	r2, r6
 800a146:	f7f6 f8a7 	bl	8000298 <__aeabi_dsub>
 800a14a:	9b04      	ldr	r3, [sp, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a152:	f6bf af11 	bge.w	8009f78 <__ieee754_rem_pio2+0x78>
 800a156:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a15a:	6063      	str	r3, [r4, #4]
 800a15c:	f8c4 8000 	str.w	r8, [r4]
 800a160:	60a0      	str	r0, [r4, #8]
 800a162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a166:	60e3      	str	r3, [r4, #12]
 800a168:	426d      	negs	r5, r5
 800a16a:	e705      	b.n	8009f78 <__ieee754_rem_pio2+0x78>
 800a16c:	a326      	add	r3, pc, #152	; (adr r3, 800a208 <__ieee754_rem_pio2+0x308>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a176:	f7f6 fa47 	bl	8000608 <__aeabi_dmul>
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	f7f6 f887 	bl	8000298 <__aeabi_dsub>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4682      	mov	sl, r0
 800a190:	468b      	mov	fp, r1
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 f87f 	bl	8000298 <__aeabi_dsub>
 800a19a:	4632      	mov	r2, r6
 800a19c:	463b      	mov	r3, r7
 800a19e:	f7f6 f87b 	bl	8000298 <__aeabi_dsub>
 800a1a2:	a31b      	add	r3, pc, #108	; (adr r3, 800a210 <__ieee754_rem_pio2+0x310>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	460f      	mov	r7, r1
 800a1ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b0:	f7f6 fa2a 	bl	8000608 <__aeabi_dmul>
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	f7f6 f86e 	bl	8000298 <__aeabi_dsub>
 800a1bc:	4606      	mov	r6, r0
 800a1be:	460f      	mov	r7, r1
 800a1c0:	e764      	b.n	800a08c <__ieee754_rem_pio2+0x18c>
 800a1c2:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <__ieee754_rem_pio2+0x330>)
 800a1c4:	4598      	cmp	r8, r3
 800a1c6:	dd35      	ble.n	800a234 <__ieee754_rem_pio2+0x334>
 800a1c8:	ee10 2a10 	vmov	r2, s0
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	f7f6 f861 	bl	8000298 <__aeabi_dsub>
 800a1d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1da:	e9c4 0100 	strd	r0, r1, [r4]
 800a1de:	e6a1      	b.n	8009f24 <__ieee754_rem_pio2+0x24>
 800a1e0:	54400000 	.word	0x54400000
 800a1e4:	3ff921fb 	.word	0x3ff921fb
 800a1e8:	1a626331 	.word	0x1a626331
 800a1ec:	3dd0b461 	.word	0x3dd0b461
 800a1f0:	1a600000 	.word	0x1a600000
 800a1f4:	3dd0b461 	.word	0x3dd0b461
 800a1f8:	2e037073 	.word	0x2e037073
 800a1fc:	3ba3198a 	.word	0x3ba3198a
 800a200:	6dc9c883 	.word	0x6dc9c883
 800a204:	3fe45f30 	.word	0x3fe45f30
 800a208:	2e000000 	.word	0x2e000000
 800a20c:	3ba3198a 	.word	0x3ba3198a
 800a210:	252049c1 	.word	0x252049c1
 800a214:	397b839a 	.word	0x397b839a
 800a218:	3fe921fb 	.word	0x3fe921fb
 800a21c:	4002d97b 	.word	0x4002d97b
 800a220:	3ff921fb 	.word	0x3ff921fb
 800a224:	413921fb 	.word	0x413921fb
 800a228:	3fe00000 	.word	0x3fe00000
 800a22c:	0800b7d8 	.word	0x0800b7d8
 800a230:	7fefffff 	.word	0x7fefffff
 800a234:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a238:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a23c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a240:	4630      	mov	r0, r6
 800a242:	460f      	mov	r7, r1
 800a244:	f7f6 fc90 	bl	8000b68 <__aeabi_d2iz>
 800a248:	f7f6 f974 	bl	8000534 <__aeabi_i2d>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	4630      	mov	r0, r6
 800a252:	4639      	mov	r1, r7
 800a254:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a258:	f7f6 f81e 	bl	8000298 <__aeabi_dsub>
 800a25c:	2200      	movs	r2, #0
 800a25e:	4b1f      	ldr	r3, [pc, #124]	; (800a2dc <__ieee754_rem_pio2+0x3dc>)
 800a260:	f7f6 f9d2 	bl	8000608 <__aeabi_dmul>
 800a264:	460f      	mov	r7, r1
 800a266:	4606      	mov	r6, r0
 800a268:	f7f6 fc7e 	bl	8000b68 <__aeabi_d2iz>
 800a26c:	f7f6 f962 	bl	8000534 <__aeabi_i2d>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4630      	mov	r0, r6
 800a276:	4639      	mov	r1, r7
 800a278:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a27c:	f7f6 f80c 	bl	8000298 <__aeabi_dsub>
 800a280:	2200      	movs	r2, #0
 800a282:	4b16      	ldr	r3, [pc, #88]	; (800a2dc <__ieee754_rem_pio2+0x3dc>)
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a28c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a290:	f04f 0803 	mov.w	r8, #3
 800a294:	2600      	movs	r6, #0
 800a296:	2700      	movs	r7, #0
 800a298:	4632      	mov	r2, r6
 800a29a:	463b      	mov	r3, r7
 800a29c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a2a0:	f108 3aff 	add.w	sl, r8, #4294967295
 800a2a4:	f7f6 fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2a8:	b9b0      	cbnz	r0, 800a2d8 <__ieee754_rem_pio2+0x3d8>
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	; (800a2e0 <__ieee754_rem_pio2+0x3e0>)
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4643      	mov	r3, r8
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	a806      	add	r0, sp, #24
 800a2ba:	f000 f8dd 	bl	800a478 <__kernel_rem_pio2>
 800a2be:	9b04      	ldr	r3, [sp, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	f6bf ae58 	bge.w	8009f78 <__ieee754_rem_pio2+0x78>
 800a2c8:	6863      	ldr	r3, [r4, #4]
 800a2ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2ce:	6063      	str	r3, [r4, #4]
 800a2d0:	68e3      	ldr	r3, [r4, #12]
 800a2d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2d6:	e746      	b.n	800a166 <__ieee754_rem_pio2+0x266>
 800a2d8:	46d0      	mov	r8, sl
 800a2da:	e7dd      	b.n	800a298 <__ieee754_rem_pio2+0x398>
 800a2dc:	41700000 	.word	0x41700000
 800a2e0:	0800b858 	.word	0x0800b858
 800a2e4:	00000000 	.word	0x00000000

0800a2e8 <__kernel_cos>:
 800a2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	ec59 8b10 	vmov	r8, r9, d0
 800a2f0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a2f4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a2f8:	ed2d 8b02 	vpush	{d8}
 800a2fc:	eeb0 8a41 	vmov.f32	s16, s2
 800a300:	eef0 8a61 	vmov.f32	s17, s3
 800a304:	da07      	bge.n	800a316 <__kernel_cos+0x2e>
 800a306:	ee10 0a10 	vmov	r0, s0
 800a30a:	4649      	mov	r1, r9
 800a30c:	f7f6 fc2c 	bl	8000b68 <__aeabi_d2iz>
 800a310:	2800      	cmp	r0, #0
 800a312:	f000 8089 	beq.w	800a428 <__kernel_cos+0x140>
 800a316:	4642      	mov	r2, r8
 800a318:	464b      	mov	r3, r9
 800a31a:	4640      	mov	r0, r8
 800a31c:	4649      	mov	r1, r9
 800a31e:	f7f6 f973 	bl	8000608 <__aeabi_dmul>
 800a322:	2200      	movs	r2, #0
 800a324:	4b4e      	ldr	r3, [pc, #312]	; (800a460 <__kernel_cos+0x178>)
 800a326:	4604      	mov	r4, r0
 800a328:	460d      	mov	r5, r1
 800a32a:	f7f6 f96d 	bl	8000608 <__aeabi_dmul>
 800a32e:	a340      	add	r3, pc, #256	; (adr r3, 800a430 <__kernel_cos+0x148>)
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	4682      	mov	sl, r0
 800a336:	468b      	mov	fp, r1
 800a338:	4620      	mov	r0, r4
 800a33a:	4629      	mov	r1, r5
 800a33c:	f7f6 f964 	bl	8000608 <__aeabi_dmul>
 800a340:	a33d      	add	r3, pc, #244	; (adr r3, 800a438 <__kernel_cos+0x150>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	f7f5 ffa9 	bl	800029c <__adddf3>
 800a34a:	4622      	mov	r2, r4
 800a34c:	462b      	mov	r3, r5
 800a34e:	f7f6 f95b 	bl	8000608 <__aeabi_dmul>
 800a352:	a33b      	add	r3, pc, #236	; (adr r3, 800a440 <__kernel_cos+0x158>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f5 ff9e 	bl	8000298 <__aeabi_dsub>
 800a35c:	4622      	mov	r2, r4
 800a35e:	462b      	mov	r3, r5
 800a360:	f7f6 f952 	bl	8000608 <__aeabi_dmul>
 800a364:	a338      	add	r3, pc, #224	; (adr r3, 800a448 <__kernel_cos+0x160>)
 800a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36a:	f7f5 ff97 	bl	800029c <__adddf3>
 800a36e:	4622      	mov	r2, r4
 800a370:	462b      	mov	r3, r5
 800a372:	f7f6 f949 	bl	8000608 <__aeabi_dmul>
 800a376:	a336      	add	r3, pc, #216	; (adr r3, 800a450 <__kernel_cos+0x168>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7f5 ff8c 	bl	8000298 <__aeabi_dsub>
 800a380:	4622      	mov	r2, r4
 800a382:	462b      	mov	r3, r5
 800a384:	f7f6 f940 	bl	8000608 <__aeabi_dmul>
 800a388:	a333      	add	r3, pc, #204	; (adr r3, 800a458 <__kernel_cos+0x170>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f5 ff85 	bl	800029c <__adddf3>
 800a392:	4622      	mov	r2, r4
 800a394:	462b      	mov	r3, r5
 800a396:	f7f6 f937 	bl	8000608 <__aeabi_dmul>
 800a39a:	4622      	mov	r2, r4
 800a39c:	462b      	mov	r3, r5
 800a39e:	f7f6 f933 	bl	8000608 <__aeabi_dmul>
 800a3a2:	ec53 2b18 	vmov	r2, r3, d8
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	f7f6 f92b 	bl	8000608 <__aeabi_dmul>
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f7f5 ff6d 	bl	8000298 <__aeabi_dsub>
 800a3be:	4b29      	ldr	r3, [pc, #164]	; (800a464 <__kernel_cos+0x17c>)
 800a3c0:	429e      	cmp	r6, r3
 800a3c2:	4680      	mov	r8, r0
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	dc11      	bgt.n	800a3ec <__kernel_cos+0x104>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	4659      	mov	r1, fp
 800a3d0:	f7f5 ff62 	bl	8000298 <__aeabi_dsub>
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4924      	ldr	r1, [pc, #144]	; (800a468 <__kernel_cos+0x180>)
 800a3d8:	4602      	mov	r2, r0
 800a3da:	2000      	movs	r0, #0
 800a3dc:	f7f5 ff5c 	bl	8000298 <__aeabi_dsub>
 800a3e0:	ecbd 8b02 	vpop	{d8}
 800a3e4:	ec41 0b10 	vmov	d0, r0, r1
 800a3e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ec:	4b1f      	ldr	r3, [pc, #124]	; (800a46c <__kernel_cos+0x184>)
 800a3ee:	491e      	ldr	r1, [pc, #120]	; (800a468 <__kernel_cos+0x180>)
 800a3f0:	429e      	cmp	r6, r3
 800a3f2:	bfcc      	ite	gt
 800a3f4:	4d1e      	ldrgt	r5, [pc, #120]	; (800a470 <__kernel_cos+0x188>)
 800a3f6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a3fa:	2400      	movs	r4, #0
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	462b      	mov	r3, r5
 800a400:	2000      	movs	r0, #0
 800a402:	f7f5 ff49 	bl	8000298 <__aeabi_dsub>
 800a406:	4622      	mov	r2, r4
 800a408:	4606      	mov	r6, r0
 800a40a:	460f      	mov	r7, r1
 800a40c:	462b      	mov	r3, r5
 800a40e:	4650      	mov	r0, sl
 800a410:	4659      	mov	r1, fp
 800a412:	f7f5 ff41 	bl	8000298 <__aeabi_dsub>
 800a416:	4642      	mov	r2, r8
 800a418:	464b      	mov	r3, r9
 800a41a:	f7f5 ff3d 	bl	8000298 <__aeabi_dsub>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4630      	mov	r0, r6
 800a424:	4639      	mov	r1, r7
 800a426:	e7d9      	b.n	800a3dc <__kernel_cos+0xf4>
 800a428:	2000      	movs	r0, #0
 800a42a:	490f      	ldr	r1, [pc, #60]	; (800a468 <__kernel_cos+0x180>)
 800a42c:	e7d8      	b.n	800a3e0 <__kernel_cos+0xf8>
 800a42e:	bf00      	nop
 800a430:	be8838d4 	.word	0xbe8838d4
 800a434:	bda8fae9 	.word	0xbda8fae9
 800a438:	bdb4b1c4 	.word	0xbdb4b1c4
 800a43c:	3e21ee9e 	.word	0x3e21ee9e
 800a440:	809c52ad 	.word	0x809c52ad
 800a444:	3e927e4f 	.word	0x3e927e4f
 800a448:	19cb1590 	.word	0x19cb1590
 800a44c:	3efa01a0 	.word	0x3efa01a0
 800a450:	16c15177 	.word	0x16c15177
 800a454:	3f56c16c 	.word	0x3f56c16c
 800a458:	5555554c 	.word	0x5555554c
 800a45c:	3fa55555 	.word	0x3fa55555
 800a460:	3fe00000 	.word	0x3fe00000
 800a464:	3fd33332 	.word	0x3fd33332
 800a468:	3ff00000 	.word	0x3ff00000
 800a46c:	3fe90000 	.word	0x3fe90000
 800a470:	3fd20000 	.word	0x3fd20000
 800a474:	00000000 	.word	0x00000000

0800a478 <__kernel_rem_pio2>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	ed2d 8b02 	vpush	{d8}
 800a480:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a484:	1ed4      	subs	r4, r2, #3
 800a486:	9308      	str	r3, [sp, #32]
 800a488:	9101      	str	r1, [sp, #4]
 800a48a:	4bc5      	ldr	r3, [pc, #788]	; (800a7a0 <__kernel_rem_pio2+0x328>)
 800a48c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a48e:	9009      	str	r0, [sp, #36]	; 0x24
 800a490:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	9b08      	ldr	r3, [sp, #32]
 800a498:	3b01      	subs	r3, #1
 800a49a:	9307      	str	r3, [sp, #28]
 800a49c:	2318      	movs	r3, #24
 800a49e:	fb94 f4f3 	sdiv	r4, r4, r3
 800a4a2:	f06f 0317 	mvn.w	r3, #23
 800a4a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a4aa:	fb04 3303 	mla	r3, r4, r3, r3
 800a4ae:	eb03 0a02 	add.w	sl, r3, r2
 800a4b2:	9b04      	ldr	r3, [sp, #16]
 800a4b4:	9a07      	ldr	r2, [sp, #28]
 800a4b6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a790 <__kernel_rem_pio2+0x318>
 800a4ba:	eb03 0802 	add.w	r8, r3, r2
 800a4be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a4c0:	1aa7      	subs	r7, r4, r2
 800a4c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a4c6:	ae22      	add	r6, sp, #136	; 0x88
 800a4c8:	2500      	movs	r5, #0
 800a4ca:	4545      	cmp	r5, r8
 800a4cc:	dd13      	ble.n	800a4f6 <__kernel_rem_pio2+0x7e>
 800a4ce:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a790 <__kernel_rem_pio2+0x318>
 800a4d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a4d6:	2600      	movs	r6, #0
 800a4d8:	9b04      	ldr	r3, [sp, #16]
 800a4da:	429e      	cmp	r6, r3
 800a4dc:	dc32      	bgt.n	800a544 <__kernel_rem_pio2+0xcc>
 800a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e0:	9302      	str	r3, [sp, #8]
 800a4e2:	9b08      	ldr	r3, [sp, #32]
 800a4e4:	199d      	adds	r5, r3, r6
 800a4e6:	ab22      	add	r3, sp, #136	; 0x88
 800a4e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a4ec:	9306      	str	r3, [sp, #24]
 800a4ee:	ec59 8b18 	vmov	r8, r9, d8
 800a4f2:	2700      	movs	r7, #0
 800a4f4:	e01f      	b.n	800a536 <__kernel_rem_pio2+0xbe>
 800a4f6:	42ef      	cmn	r7, r5
 800a4f8:	d407      	bmi.n	800a50a <__kernel_rem_pio2+0x92>
 800a4fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a4fe:	f7f6 f819 	bl	8000534 <__aeabi_i2d>
 800a502:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a506:	3501      	adds	r5, #1
 800a508:	e7df      	b.n	800a4ca <__kernel_rem_pio2+0x52>
 800a50a:	ec51 0b18 	vmov	r0, r1, d8
 800a50e:	e7f8      	b.n	800a502 <__kernel_rem_pio2+0x8a>
 800a510:	9906      	ldr	r1, [sp, #24]
 800a512:	9d02      	ldr	r5, [sp, #8]
 800a514:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a518:	9106      	str	r1, [sp, #24]
 800a51a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a51e:	9502      	str	r5, [sp, #8]
 800a520:	f7f6 f872 	bl	8000608 <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4640      	mov	r0, r8
 800a52a:	4649      	mov	r1, r9
 800a52c:	f7f5 feb6 	bl	800029c <__adddf3>
 800a530:	3701      	adds	r7, #1
 800a532:	4680      	mov	r8, r0
 800a534:	4689      	mov	r9, r1
 800a536:	9b07      	ldr	r3, [sp, #28]
 800a538:	429f      	cmp	r7, r3
 800a53a:	dde9      	ble.n	800a510 <__kernel_rem_pio2+0x98>
 800a53c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a540:	3601      	adds	r6, #1
 800a542:	e7c9      	b.n	800a4d8 <__kernel_rem_pio2+0x60>
 800a544:	9b04      	ldr	r3, [sp, #16]
 800a546:	aa0e      	add	r2, sp, #56	; 0x38
 800a548:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a54c:	930c      	str	r3, [sp, #48]	; 0x30
 800a54e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a550:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a554:	9c04      	ldr	r4, [sp, #16]
 800a556:	930b      	str	r3, [sp, #44]	; 0x2c
 800a558:	ab9a      	add	r3, sp, #616	; 0x268
 800a55a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a55e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a562:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a566:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a56a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a56e:	ab9a      	add	r3, sp, #616	; 0x268
 800a570:	445b      	add	r3, fp
 800a572:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a576:	2500      	movs	r5, #0
 800a578:	1b63      	subs	r3, r4, r5
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dc78      	bgt.n	800a670 <__kernel_rem_pio2+0x1f8>
 800a57e:	4650      	mov	r0, sl
 800a580:	ec49 8b10 	vmov	d0, r8, r9
 800a584:	f000 fc00 	bl	800ad88 <scalbn>
 800a588:	ec57 6b10 	vmov	r6, r7, d0
 800a58c:	2200      	movs	r2, #0
 800a58e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a592:	ee10 0a10 	vmov	r0, s0
 800a596:	4639      	mov	r1, r7
 800a598:	f7f6 f836 	bl	8000608 <__aeabi_dmul>
 800a59c:	ec41 0b10 	vmov	d0, r0, r1
 800a5a0:	f000 fb6e 	bl	800ac80 <floor>
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	ec51 0b10 	vmov	r0, r1, d0
 800a5aa:	4b7e      	ldr	r3, [pc, #504]	; (800a7a4 <__kernel_rem_pio2+0x32c>)
 800a5ac:	f7f6 f82c 	bl	8000608 <__aeabi_dmul>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	f7f5 fe6e 	bl	8000298 <__aeabi_dsub>
 800a5bc:	460f      	mov	r7, r1
 800a5be:	4606      	mov	r6, r0
 800a5c0:	f7f6 fad2 	bl	8000b68 <__aeabi_d2iz>
 800a5c4:	9006      	str	r0, [sp, #24]
 800a5c6:	f7f5 ffb5 	bl	8000534 <__aeabi_i2d>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f5 fe61 	bl	8000298 <__aeabi_dsub>
 800a5d6:	f1ba 0f00 	cmp.w	sl, #0
 800a5da:	4606      	mov	r6, r0
 800a5dc:	460f      	mov	r7, r1
 800a5de:	dd6c      	ble.n	800a6ba <__kernel_rem_pio2+0x242>
 800a5e0:	1e62      	subs	r2, r4, #1
 800a5e2:	ab0e      	add	r3, sp, #56	; 0x38
 800a5e4:	f1ca 0118 	rsb	r1, sl, #24
 800a5e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a5ec:	9d06      	ldr	r5, [sp, #24]
 800a5ee:	fa40 f301 	asr.w	r3, r0, r1
 800a5f2:	441d      	add	r5, r3
 800a5f4:	408b      	lsls	r3, r1
 800a5f6:	1ac0      	subs	r0, r0, r3
 800a5f8:	ab0e      	add	r3, sp, #56	; 0x38
 800a5fa:	9506      	str	r5, [sp, #24]
 800a5fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a600:	f1ca 0317 	rsb	r3, sl, #23
 800a604:	fa40 f303 	asr.w	r3, r0, r3
 800a608:	9302      	str	r3, [sp, #8]
 800a60a:	9b02      	ldr	r3, [sp, #8]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dd62      	ble.n	800a6d6 <__kernel_rem_pio2+0x25e>
 800a610:	9b06      	ldr	r3, [sp, #24]
 800a612:	2200      	movs	r2, #0
 800a614:	3301      	adds	r3, #1
 800a616:	9306      	str	r3, [sp, #24]
 800a618:	4615      	mov	r5, r2
 800a61a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a61e:	4294      	cmp	r4, r2
 800a620:	f300 8095 	bgt.w	800a74e <__kernel_rem_pio2+0x2d6>
 800a624:	f1ba 0f00 	cmp.w	sl, #0
 800a628:	dd07      	ble.n	800a63a <__kernel_rem_pio2+0x1c2>
 800a62a:	f1ba 0f01 	cmp.w	sl, #1
 800a62e:	f000 80a2 	beq.w	800a776 <__kernel_rem_pio2+0x2fe>
 800a632:	f1ba 0f02 	cmp.w	sl, #2
 800a636:	f000 80c1 	beq.w	800a7bc <__kernel_rem_pio2+0x344>
 800a63a:	9b02      	ldr	r3, [sp, #8]
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d14a      	bne.n	800a6d6 <__kernel_rem_pio2+0x25e>
 800a640:	4632      	mov	r2, r6
 800a642:	463b      	mov	r3, r7
 800a644:	2000      	movs	r0, #0
 800a646:	4958      	ldr	r1, [pc, #352]	; (800a7a8 <__kernel_rem_pio2+0x330>)
 800a648:	f7f5 fe26 	bl	8000298 <__aeabi_dsub>
 800a64c:	4606      	mov	r6, r0
 800a64e:	460f      	mov	r7, r1
 800a650:	2d00      	cmp	r5, #0
 800a652:	d040      	beq.n	800a6d6 <__kernel_rem_pio2+0x25e>
 800a654:	4650      	mov	r0, sl
 800a656:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a798 <__kernel_rem_pio2+0x320>
 800a65a:	f000 fb95 	bl	800ad88 <scalbn>
 800a65e:	4630      	mov	r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	ec53 2b10 	vmov	r2, r3, d0
 800a666:	f7f5 fe17 	bl	8000298 <__aeabi_dsub>
 800a66a:	4606      	mov	r6, r0
 800a66c:	460f      	mov	r7, r1
 800a66e:	e032      	b.n	800a6d6 <__kernel_rem_pio2+0x25e>
 800a670:	2200      	movs	r2, #0
 800a672:	4b4e      	ldr	r3, [pc, #312]	; (800a7ac <__kernel_rem_pio2+0x334>)
 800a674:	4640      	mov	r0, r8
 800a676:	4649      	mov	r1, r9
 800a678:	f7f5 ffc6 	bl	8000608 <__aeabi_dmul>
 800a67c:	f7f6 fa74 	bl	8000b68 <__aeabi_d2iz>
 800a680:	f7f5 ff58 	bl	8000534 <__aeabi_i2d>
 800a684:	2200      	movs	r2, #0
 800a686:	4b4a      	ldr	r3, [pc, #296]	; (800a7b0 <__kernel_rem_pio2+0x338>)
 800a688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a68c:	f7f5 ffbc 	bl	8000608 <__aeabi_dmul>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4640      	mov	r0, r8
 800a696:	4649      	mov	r1, r9
 800a698:	f7f5 fdfe 	bl	8000298 <__aeabi_dsub>
 800a69c:	f7f6 fa64 	bl	8000b68 <__aeabi_d2iz>
 800a6a0:	ab0e      	add	r3, sp, #56	; 0x38
 800a6a2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a6a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a6aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ae:	f7f5 fdf5 	bl	800029c <__adddf3>
 800a6b2:	3501      	adds	r5, #1
 800a6b4:	4680      	mov	r8, r0
 800a6b6:	4689      	mov	r9, r1
 800a6b8:	e75e      	b.n	800a578 <__kernel_rem_pio2+0x100>
 800a6ba:	d105      	bne.n	800a6c8 <__kernel_rem_pio2+0x250>
 800a6bc:	1e63      	subs	r3, r4, #1
 800a6be:	aa0e      	add	r2, sp, #56	; 0x38
 800a6c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a6c4:	15c3      	asrs	r3, r0, #23
 800a6c6:	e79f      	b.n	800a608 <__kernel_rem_pio2+0x190>
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4b3a      	ldr	r3, [pc, #232]	; (800a7b4 <__kernel_rem_pio2+0x33c>)
 800a6cc:	f7f6 fa22 	bl	8000b14 <__aeabi_dcmpge>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d139      	bne.n	800a748 <__kernel_rem_pio2+0x2d0>
 800a6d4:	9002      	str	r0, [sp, #8]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4630      	mov	r0, r6
 800a6dc:	4639      	mov	r1, r7
 800a6de:	f7f6 f9fb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	f000 80c7 	beq.w	800a876 <__kernel_rem_pio2+0x3fe>
 800a6e8:	1e65      	subs	r5, r4, #1
 800a6ea:	462b      	mov	r3, r5
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	9904      	ldr	r1, [sp, #16]
 800a6f0:	428b      	cmp	r3, r1
 800a6f2:	da6a      	bge.n	800a7ca <__kernel_rem_pio2+0x352>
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	f000 8088 	beq.w	800a80a <__kernel_rem_pio2+0x392>
 800a6fa:	ab0e      	add	r3, sp, #56	; 0x38
 800a6fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800a700:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 80b4 	beq.w	800a872 <__kernel_rem_pio2+0x3fa>
 800a70a:	4650      	mov	r0, sl
 800a70c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a798 <__kernel_rem_pio2+0x320>
 800a710:	f000 fb3a 	bl	800ad88 <scalbn>
 800a714:	00ec      	lsls	r4, r5, #3
 800a716:	ab72      	add	r3, sp, #456	; 0x1c8
 800a718:	191e      	adds	r6, r3, r4
 800a71a:	ec59 8b10 	vmov	r8, r9, d0
 800a71e:	f106 0a08 	add.w	sl, r6, #8
 800a722:	462f      	mov	r7, r5
 800a724:	2f00      	cmp	r7, #0
 800a726:	f280 80df 	bge.w	800a8e8 <__kernel_rem_pio2+0x470>
 800a72a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a790 <__kernel_rem_pio2+0x318>
 800a72e:	f04f 0a00 	mov.w	sl, #0
 800a732:	eba5 030a 	sub.w	r3, r5, sl
 800a736:	2b00      	cmp	r3, #0
 800a738:	f2c0 810a 	blt.w	800a950 <__kernel_rem_pio2+0x4d8>
 800a73c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a7b8 <__kernel_rem_pio2+0x340>
 800a740:	ec59 8b18 	vmov	r8, r9, d8
 800a744:	2700      	movs	r7, #0
 800a746:	e0f5      	b.n	800a934 <__kernel_rem_pio2+0x4bc>
 800a748:	2302      	movs	r3, #2
 800a74a:	9302      	str	r3, [sp, #8]
 800a74c:	e760      	b.n	800a610 <__kernel_rem_pio2+0x198>
 800a74e:	ab0e      	add	r3, sp, #56	; 0x38
 800a750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a754:	b94d      	cbnz	r5, 800a76a <__kernel_rem_pio2+0x2f2>
 800a756:	b12b      	cbz	r3, 800a764 <__kernel_rem_pio2+0x2ec>
 800a758:	a80e      	add	r0, sp, #56	; 0x38
 800a75a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a75e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a762:	2301      	movs	r3, #1
 800a764:	3201      	adds	r2, #1
 800a766:	461d      	mov	r5, r3
 800a768:	e759      	b.n	800a61e <__kernel_rem_pio2+0x1a6>
 800a76a:	a80e      	add	r0, sp, #56	; 0x38
 800a76c:	1acb      	subs	r3, r1, r3
 800a76e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a772:	462b      	mov	r3, r5
 800a774:	e7f6      	b.n	800a764 <__kernel_rem_pio2+0x2ec>
 800a776:	1e62      	subs	r2, r4, #1
 800a778:	ab0e      	add	r3, sp, #56	; 0x38
 800a77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a782:	a90e      	add	r1, sp, #56	; 0x38
 800a784:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a788:	e757      	b.n	800a63a <__kernel_rem_pio2+0x1c2>
 800a78a:	bf00      	nop
 800a78c:	f3af 8000 	nop.w
	...
 800a79c:	3ff00000 	.word	0x3ff00000
 800a7a0:	0800b9a0 	.word	0x0800b9a0
 800a7a4:	40200000 	.word	0x40200000
 800a7a8:	3ff00000 	.word	0x3ff00000
 800a7ac:	3e700000 	.word	0x3e700000
 800a7b0:	41700000 	.word	0x41700000
 800a7b4:	3fe00000 	.word	0x3fe00000
 800a7b8:	0800b960 	.word	0x0800b960
 800a7bc:	1e62      	subs	r2, r4, #1
 800a7be:	ab0e      	add	r3, sp, #56	; 0x38
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a7c8:	e7db      	b.n	800a782 <__kernel_rem_pio2+0x30a>
 800a7ca:	a90e      	add	r1, sp, #56	; 0x38
 800a7cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	e78b      	b.n	800a6ee <__kernel_rem_pio2+0x276>
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a7dc:	2900      	cmp	r1, #0
 800a7de:	d0fa      	beq.n	800a7d6 <__kernel_rem_pio2+0x35e>
 800a7e0:	9a08      	ldr	r2, [sp, #32]
 800a7e2:	4422      	add	r2, r4
 800a7e4:	00d2      	lsls	r2, r2, #3
 800a7e6:	a922      	add	r1, sp, #136	; 0x88
 800a7e8:	18e3      	adds	r3, r4, r3
 800a7ea:	9206      	str	r2, [sp, #24]
 800a7ec:	440a      	add	r2, r1
 800a7ee:	9302      	str	r3, [sp, #8]
 800a7f0:	f10b 0108 	add.w	r1, fp, #8
 800a7f4:	f102 0308 	add.w	r3, r2, #8
 800a7f8:	1c66      	adds	r6, r4, #1
 800a7fa:	910a      	str	r1, [sp, #40]	; 0x28
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a800:	9b02      	ldr	r3, [sp, #8]
 800a802:	42b3      	cmp	r3, r6
 800a804:	da04      	bge.n	800a810 <__kernel_rem_pio2+0x398>
 800a806:	461c      	mov	r4, r3
 800a808:	e6a6      	b.n	800a558 <__kernel_rem_pio2+0xe0>
 800a80a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a80c:	2301      	movs	r3, #1
 800a80e:	e7e3      	b.n	800a7d8 <__kernel_rem_pio2+0x360>
 800a810:	9b06      	ldr	r3, [sp, #24]
 800a812:	18ef      	adds	r7, r5, r3
 800a814:	ab22      	add	r3, sp, #136	; 0x88
 800a816:	441f      	add	r7, r3
 800a818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a81a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a81e:	f7f5 fe89 	bl	8000534 <__aeabi_i2d>
 800a822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a824:	461c      	mov	r4, r3
 800a826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a828:	e9c7 0100 	strd	r0, r1, [r7]
 800a82c:	eb03 0b05 	add.w	fp, r3, r5
 800a830:	2700      	movs	r7, #0
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	f04f 0900 	mov.w	r9, #0
 800a83a:	9b07      	ldr	r3, [sp, #28]
 800a83c:	429f      	cmp	r7, r3
 800a83e:	dd08      	ble.n	800a852 <__kernel_rem_pio2+0x3da>
 800a840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a842:	aa72      	add	r2, sp, #456	; 0x1c8
 800a844:	18eb      	adds	r3, r5, r3
 800a846:	4413      	add	r3, r2
 800a848:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a84c:	3601      	adds	r6, #1
 800a84e:	3508      	adds	r5, #8
 800a850:	e7d6      	b.n	800a800 <__kernel_rem_pio2+0x388>
 800a852:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a856:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a85a:	f7f5 fed5 	bl	8000608 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f5 fd19 	bl	800029c <__adddf3>
 800a86a:	3701      	adds	r7, #1
 800a86c:	4680      	mov	r8, r0
 800a86e:	4689      	mov	r9, r1
 800a870:	e7e3      	b.n	800a83a <__kernel_rem_pio2+0x3c2>
 800a872:	3d01      	subs	r5, #1
 800a874:	e741      	b.n	800a6fa <__kernel_rem_pio2+0x282>
 800a876:	f1ca 0000 	rsb	r0, sl, #0
 800a87a:	ec47 6b10 	vmov	d0, r6, r7
 800a87e:	f000 fa83 	bl	800ad88 <scalbn>
 800a882:	ec57 6b10 	vmov	r6, r7, d0
 800a886:	2200      	movs	r2, #0
 800a888:	4b99      	ldr	r3, [pc, #612]	; (800aaf0 <__kernel_rem_pio2+0x678>)
 800a88a:	ee10 0a10 	vmov	r0, s0
 800a88e:	4639      	mov	r1, r7
 800a890:	f7f6 f940 	bl	8000b14 <__aeabi_dcmpge>
 800a894:	b1f8      	cbz	r0, 800a8d6 <__kernel_rem_pio2+0x45e>
 800a896:	2200      	movs	r2, #0
 800a898:	4b96      	ldr	r3, [pc, #600]	; (800aaf4 <__kernel_rem_pio2+0x67c>)
 800a89a:	4630      	mov	r0, r6
 800a89c:	4639      	mov	r1, r7
 800a89e:	f7f5 feb3 	bl	8000608 <__aeabi_dmul>
 800a8a2:	f7f6 f961 	bl	8000b68 <__aeabi_d2iz>
 800a8a6:	4680      	mov	r8, r0
 800a8a8:	f7f5 fe44 	bl	8000534 <__aeabi_i2d>
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4b90      	ldr	r3, [pc, #576]	; (800aaf0 <__kernel_rem_pio2+0x678>)
 800a8b0:	f7f5 feaa 	bl	8000608 <__aeabi_dmul>
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7f5 fcec 	bl	8000298 <__aeabi_dsub>
 800a8c0:	f7f6 f952 	bl	8000b68 <__aeabi_d2iz>
 800a8c4:	1c65      	adds	r5, r4, #1
 800a8c6:	ab0e      	add	r3, sp, #56	; 0x38
 800a8c8:	f10a 0a18 	add.w	sl, sl, #24
 800a8cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8d0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a8d4:	e719      	b.n	800a70a <__kernel_rem_pio2+0x292>
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	f7f6 f945 	bl	8000b68 <__aeabi_d2iz>
 800a8de:	ab0e      	add	r3, sp, #56	; 0x38
 800a8e0:	4625      	mov	r5, r4
 800a8e2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8e6:	e710      	b.n	800a70a <__kernel_rem_pio2+0x292>
 800a8e8:	ab0e      	add	r3, sp, #56	; 0x38
 800a8ea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a8ee:	f7f5 fe21 	bl	8000534 <__aeabi_i2d>
 800a8f2:	4642      	mov	r2, r8
 800a8f4:	464b      	mov	r3, r9
 800a8f6:	f7f5 fe87 	bl	8000608 <__aeabi_dmul>
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a900:	4b7c      	ldr	r3, [pc, #496]	; (800aaf4 <__kernel_rem_pio2+0x67c>)
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f5 fe7f 	bl	8000608 <__aeabi_dmul>
 800a90a:	3f01      	subs	r7, #1
 800a90c:	4680      	mov	r8, r0
 800a90e:	4689      	mov	r9, r1
 800a910:	e708      	b.n	800a724 <__kernel_rem_pio2+0x2ac>
 800a912:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a91e:	f7f5 fe73 	bl	8000608 <__aeabi_dmul>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4640      	mov	r0, r8
 800a928:	4649      	mov	r1, r9
 800a92a:	f7f5 fcb7 	bl	800029c <__adddf3>
 800a92e:	3701      	adds	r7, #1
 800a930:	4680      	mov	r8, r0
 800a932:	4689      	mov	r9, r1
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	429f      	cmp	r7, r3
 800a938:	dc01      	bgt.n	800a93e <__kernel_rem_pio2+0x4c6>
 800a93a:	45ba      	cmp	sl, r7
 800a93c:	dae9      	bge.n	800a912 <__kernel_rem_pio2+0x49a>
 800a93e:	ab4a      	add	r3, sp, #296	; 0x128
 800a940:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a944:	e9c3 8900 	strd	r8, r9, [r3]
 800a948:	f10a 0a01 	add.w	sl, sl, #1
 800a94c:	3e08      	subs	r6, #8
 800a94e:	e6f0      	b.n	800a732 <__kernel_rem_pio2+0x2ba>
 800a950:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a952:	2b03      	cmp	r3, #3
 800a954:	d85b      	bhi.n	800aa0e <__kernel_rem_pio2+0x596>
 800a956:	e8df f003 	tbb	[pc, r3]
 800a95a:	264a      	.short	0x264a
 800a95c:	0226      	.short	0x0226
 800a95e:	ab9a      	add	r3, sp, #616	; 0x268
 800a960:	441c      	add	r4, r3
 800a962:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a966:	46a2      	mov	sl, r4
 800a968:	46ab      	mov	fp, r5
 800a96a:	f1bb 0f00 	cmp.w	fp, #0
 800a96e:	dc6c      	bgt.n	800aa4a <__kernel_rem_pio2+0x5d2>
 800a970:	46a2      	mov	sl, r4
 800a972:	46ab      	mov	fp, r5
 800a974:	f1bb 0f01 	cmp.w	fp, #1
 800a978:	f300 8086 	bgt.w	800aa88 <__kernel_rem_pio2+0x610>
 800a97c:	2000      	movs	r0, #0
 800a97e:	2100      	movs	r1, #0
 800a980:	2d01      	cmp	r5, #1
 800a982:	f300 80a0 	bgt.w	800aac6 <__kernel_rem_pio2+0x64e>
 800a986:	9b02      	ldr	r3, [sp, #8]
 800a988:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a98c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a990:	2b00      	cmp	r3, #0
 800a992:	f040 809e 	bne.w	800aad2 <__kernel_rem_pio2+0x65a>
 800a996:	9b01      	ldr	r3, [sp, #4]
 800a998:	e9c3 7800 	strd	r7, r8, [r3]
 800a99c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a9a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9a4:	e033      	b.n	800aa0e <__kernel_rem_pio2+0x596>
 800a9a6:	3408      	adds	r4, #8
 800a9a8:	ab4a      	add	r3, sp, #296	; 0x128
 800a9aa:	441c      	add	r4, r3
 800a9ac:	462e      	mov	r6, r5
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	2e00      	cmp	r6, #0
 800a9b4:	da3a      	bge.n	800aa2c <__kernel_rem_pio2+0x5b4>
 800a9b6:	9b02      	ldr	r3, [sp, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d03d      	beq.n	800aa38 <__kernel_rem_pio2+0x5c0>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9c2:	9c01      	ldr	r4, [sp, #4]
 800a9c4:	e9c4 2300 	strd	r2, r3, [r4]
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a9d0:	f7f5 fc62 	bl	8000298 <__aeabi_dsub>
 800a9d4:	ae4c      	add	r6, sp, #304	; 0x130
 800a9d6:	2401      	movs	r4, #1
 800a9d8:	42a5      	cmp	r5, r4
 800a9da:	da30      	bge.n	800aa3e <__kernel_rem_pio2+0x5c6>
 800a9dc:	9b02      	ldr	r3, [sp, #8]
 800a9de:	b113      	cbz	r3, 800a9e6 <__kernel_rem_pio2+0x56e>
 800a9e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a9ec:	e00f      	b.n	800aa0e <__kernel_rem_pio2+0x596>
 800a9ee:	ab9a      	add	r3, sp, #616	; 0x268
 800a9f0:	441c      	add	r4, r3
 800a9f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	2d00      	cmp	r5, #0
 800a9fc:	da10      	bge.n	800aa20 <__kernel_rem_pio2+0x5a8>
 800a9fe:	9b02      	ldr	r3, [sp, #8]
 800aa00:	b113      	cbz	r3, 800aa08 <__kernel_rem_pio2+0x590>
 800aa02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa06:	4619      	mov	r1, r3
 800aa08:	9b01      	ldr	r3, [sp, #4]
 800aa0a:	e9c3 0100 	strd	r0, r1, [r3]
 800aa0e:	9b06      	ldr	r3, [sp, #24]
 800aa10:	f003 0007 	and.w	r0, r3, #7
 800aa14:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800aa18:	ecbd 8b02 	vpop	{d8}
 800aa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa20:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa24:	f7f5 fc3a 	bl	800029c <__adddf3>
 800aa28:	3d01      	subs	r5, #1
 800aa2a:	e7e6      	b.n	800a9fa <__kernel_rem_pio2+0x582>
 800aa2c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa30:	f7f5 fc34 	bl	800029c <__adddf3>
 800aa34:	3e01      	subs	r6, #1
 800aa36:	e7bc      	b.n	800a9b2 <__kernel_rem_pio2+0x53a>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	e7c1      	b.n	800a9c2 <__kernel_rem_pio2+0x54a>
 800aa3e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800aa42:	f7f5 fc2b 	bl	800029c <__adddf3>
 800aa46:	3401      	adds	r4, #1
 800aa48:	e7c6      	b.n	800a9d8 <__kernel_rem_pio2+0x560>
 800aa4a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800aa4e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800aa52:	4640      	mov	r0, r8
 800aa54:	ec53 2b17 	vmov	r2, r3, d7
 800aa58:	4649      	mov	r1, r9
 800aa5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aa5e:	f7f5 fc1d 	bl	800029c <__adddf3>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	4606      	mov	r6, r0
 800aa68:	460f      	mov	r7, r1
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	f7f5 fc13 	bl	8000298 <__aeabi_dsub>
 800aa72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa76:	f7f5 fc11 	bl	800029c <__adddf3>
 800aa7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa7e:	e9ca 0100 	strd	r0, r1, [sl]
 800aa82:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800aa86:	e770      	b.n	800a96a <__kernel_rem_pio2+0x4f2>
 800aa88:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800aa8c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800aa90:	4630      	mov	r0, r6
 800aa92:	ec53 2b17 	vmov	r2, r3, d7
 800aa96:	4639      	mov	r1, r7
 800aa98:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aa9c:	f7f5 fbfe 	bl	800029c <__adddf3>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4680      	mov	r8, r0
 800aaa6:	4689      	mov	r9, r1
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	4639      	mov	r1, r7
 800aaac:	f7f5 fbf4 	bl	8000298 <__aeabi_dsub>
 800aab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab4:	f7f5 fbf2 	bl	800029c <__adddf3>
 800aab8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aabc:	e9ca 0100 	strd	r0, r1, [sl]
 800aac0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800aac4:	e756      	b.n	800a974 <__kernel_rem_pio2+0x4fc>
 800aac6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aaca:	f7f5 fbe7 	bl	800029c <__adddf3>
 800aace:	3d01      	subs	r5, #1
 800aad0:	e756      	b.n	800a980 <__kernel_rem_pio2+0x508>
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	9a01      	ldr	r2, [sp, #4]
 800aad6:	601f      	str	r7, [r3, #0]
 800aad8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800aadc:	605c      	str	r4, [r3, #4]
 800aade:	609d      	str	r5, [r3, #8]
 800aae0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aae4:	60d3      	str	r3, [r2, #12]
 800aae6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaea:	6110      	str	r0, [r2, #16]
 800aaec:	6153      	str	r3, [r2, #20]
 800aaee:	e78e      	b.n	800aa0e <__kernel_rem_pio2+0x596>
 800aaf0:	41700000 	.word	0x41700000
 800aaf4:	3e700000 	.word	0x3e700000

0800aaf8 <__kernel_sin>:
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	ec55 4b10 	vmov	r4, r5, d0
 800ab00:	b085      	sub	sp, #20
 800ab02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab06:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab0a:	ed8d 1b00 	vstr	d1, [sp]
 800ab0e:	9002      	str	r0, [sp, #8]
 800ab10:	da06      	bge.n	800ab20 <__kernel_sin+0x28>
 800ab12:	ee10 0a10 	vmov	r0, s0
 800ab16:	4629      	mov	r1, r5
 800ab18:	f7f6 f826 	bl	8000b68 <__aeabi_d2iz>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d051      	beq.n	800abc4 <__kernel_sin+0xcc>
 800ab20:	4622      	mov	r2, r4
 800ab22:	462b      	mov	r3, r5
 800ab24:	4620      	mov	r0, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	f7f5 fd6e 	bl	8000608 <__aeabi_dmul>
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	468b      	mov	fp, r1
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f5 fd66 	bl	8000608 <__aeabi_dmul>
 800ab3c:	a341      	add	r3, pc, #260	; (adr r3, 800ac44 <__kernel_sin+0x14c>)
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	4680      	mov	r8, r0
 800ab44:	4689      	mov	r9, r1
 800ab46:	4650      	mov	r0, sl
 800ab48:	4659      	mov	r1, fp
 800ab4a:	f7f5 fd5d 	bl	8000608 <__aeabi_dmul>
 800ab4e:	a33f      	add	r3, pc, #252	; (adr r3, 800ac4c <__kernel_sin+0x154>)
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	f7f5 fba0 	bl	8000298 <__aeabi_dsub>
 800ab58:	4652      	mov	r2, sl
 800ab5a:	465b      	mov	r3, fp
 800ab5c:	f7f5 fd54 	bl	8000608 <__aeabi_dmul>
 800ab60:	a33c      	add	r3, pc, #240	; (adr r3, 800ac54 <__kernel_sin+0x15c>)
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	f7f5 fb99 	bl	800029c <__adddf3>
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	f7f5 fd4b 	bl	8000608 <__aeabi_dmul>
 800ab72:	a33a      	add	r3, pc, #232	; (adr r3, 800ac5c <__kernel_sin+0x164>)
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f7f5 fb8e 	bl	8000298 <__aeabi_dsub>
 800ab7c:	4652      	mov	r2, sl
 800ab7e:	465b      	mov	r3, fp
 800ab80:	f7f5 fd42 	bl	8000608 <__aeabi_dmul>
 800ab84:	a337      	add	r3, pc, #220	; (adr r3, 800ac64 <__kernel_sin+0x16c>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	f7f5 fb87 	bl	800029c <__adddf3>
 800ab8e:	9b02      	ldr	r3, [sp, #8]
 800ab90:	4606      	mov	r6, r0
 800ab92:	460f      	mov	r7, r1
 800ab94:	b9db      	cbnz	r3, 800abce <__kernel_sin+0xd6>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4650      	mov	r0, sl
 800ab9c:	4659      	mov	r1, fp
 800ab9e:	f7f5 fd33 	bl	8000608 <__aeabi_dmul>
 800aba2:	a325      	add	r3, pc, #148	; (adr r3, 800ac38 <__kernel_sin+0x140>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	f7f5 fb76 	bl	8000298 <__aeabi_dsub>
 800abac:	4642      	mov	r2, r8
 800abae:	464b      	mov	r3, r9
 800abb0:	f7f5 fd2a 	bl	8000608 <__aeabi_dmul>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4620      	mov	r0, r4
 800abba:	4629      	mov	r1, r5
 800abbc:	f7f5 fb6e 	bl	800029c <__adddf3>
 800abc0:	4604      	mov	r4, r0
 800abc2:	460d      	mov	r5, r1
 800abc4:	ec45 4b10 	vmov	d0, r4, r5
 800abc8:	b005      	add	sp, #20
 800abca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abce:	2200      	movs	r2, #0
 800abd0:	4b1b      	ldr	r3, [pc, #108]	; (800ac40 <__kernel_sin+0x148>)
 800abd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abd6:	f7f5 fd17 	bl	8000608 <__aeabi_dmul>
 800abda:	4632      	mov	r2, r6
 800abdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abe0:	463b      	mov	r3, r7
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 fd0f 	bl	8000608 <__aeabi_dmul>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abf2:	f7f5 fb51 	bl	8000298 <__aeabi_dsub>
 800abf6:	4652      	mov	r2, sl
 800abf8:	465b      	mov	r3, fp
 800abfa:	f7f5 fd05 	bl	8000608 <__aeabi_dmul>
 800abfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac02:	f7f5 fb49 	bl	8000298 <__aeabi_dsub>
 800ac06:	a30c      	add	r3, pc, #48	; (adr r3, 800ac38 <__kernel_sin+0x140>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	460f      	mov	r7, r1
 800ac10:	4640      	mov	r0, r8
 800ac12:	4649      	mov	r1, r9
 800ac14:	f7f5 fcf8 	bl	8000608 <__aeabi_dmul>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f7f5 fb3c 	bl	800029c <__adddf3>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	f7f5 fb34 	bl	8000298 <__aeabi_dsub>
 800ac30:	e7c6      	b.n	800abc0 <__kernel_sin+0xc8>
 800ac32:	bf00      	nop
 800ac34:	f3af 8000 	nop.w
 800ac38:	55555549 	.word	0x55555549
 800ac3c:	3fc55555 	.word	0x3fc55555
 800ac40:	3fe00000 	.word	0x3fe00000
 800ac44:	5acfd57c 	.word	0x5acfd57c
 800ac48:	3de5d93a 	.word	0x3de5d93a
 800ac4c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac50:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac54:	57b1fe7d 	.word	0x57b1fe7d
 800ac58:	3ec71de3 	.word	0x3ec71de3
 800ac5c:	19c161d5 	.word	0x19c161d5
 800ac60:	3f2a01a0 	.word	0x3f2a01a0
 800ac64:	1110f8a6 	.word	0x1110f8a6
 800ac68:	3f811111 	.word	0x3f811111

0800ac6c <fabs>:
 800ac6c:	ec51 0b10 	vmov	r0, r1, d0
 800ac70:	ee10 2a10 	vmov	r2, s0
 800ac74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac78:	ec43 2b10 	vmov	d0, r2, r3
 800ac7c:	4770      	bx	lr
	...

0800ac80 <floor>:
 800ac80:	ec51 0b10 	vmov	r0, r1, d0
 800ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ac8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ac90:	2e13      	cmp	r6, #19
 800ac92:	460c      	mov	r4, r1
 800ac94:	ee10 5a10 	vmov	r5, s0
 800ac98:	4680      	mov	r8, r0
 800ac9a:	dc34      	bgt.n	800ad06 <floor+0x86>
 800ac9c:	2e00      	cmp	r6, #0
 800ac9e:	da16      	bge.n	800acce <floor+0x4e>
 800aca0:	a335      	add	r3, pc, #212	; (adr r3, 800ad78 <floor+0xf8>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 faf9 	bl	800029c <__adddf3>
 800acaa:	2200      	movs	r2, #0
 800acac:	2300      	movs	r3, #0
 800acae:	f7f5 ff3b 	bl	8000b28 <__aeabi_dcmpgt>
 800acb2:	b148      	cbz	r0, 800acc8 <floor+0x48>
 800acb4:	2c00      	cmp	r4, #0
 800acb6:	da59      	bge.n	800ad6c <floor+0xec>
 800acb8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800acbc:	4a30      	ldr	r2, [pc, #192]	; (800ad80 <floor+0x100>)
 800acbe:	432b      	orrs	r3, r5
 800acc0:	2500      	movs	r5, #0
 800acc2:	42ab      	cmp	r3, r5
 800acc4:	bf18      	it	ne
 800acc6:	4614      	movne	r4, r2
 800acc8:	4621      	mov	r1, r4
 800acca:	4628      	mov	r0, r5
 800accc:	e025      	b.n	800ad1a <floor+0x9a>
 800acce:	4f2d      	ldr	r7, [pc, #180]	; (800ad84 <floor+0x104>)
 800acd0:	4137      	asrs	r7, r6
 800acd2:	ea01 0307 	and.w	r3, r1, r7
 800acd6:	4303      	orrs	r3, r0
 800acd8:	d01f      	beq.n	800ad1a <floor+0x9a>
 800acda:	a327      	add	r3, pc, #156	; (adr r3, 800ad78 <floor+0xf8>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f7f5 fadc 	bl	800029c <__adddf3>
 800ace4:	2200      	movs	r2, #0
 800ace6:	2300      	movs	r3, #0
 800ace8:	f7f5 ff1e 	bl	8000b28 <__aeabi_dcmpgt>
 800acec:	2800      	cmp	r0, #0
 800acee:	d0eb      	beq.n	800acc8 <floor+0x48>
 800acf0:	2c00      	cmp	r4, #0
 800acf2:	bfbe      	ittt	lt
 800acf4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800acf8:	fa43 f606 	asrlt.w	r6, r3, r6
 800acfc:	19a4      	addlt	r4, r4, r6
 800acfe:	ea24 0407 	bic.w	r4, r4, r7
 800ad02:	2500      	movs	r5, #0
 800ad04:	e7e0      	b.n	800acc8 <floor+0x48>
 800ad06:	2e33      	cmp	r6, #51	; 0x33
 800ad08:	dd0b      	ble.n	800ad22 <floor+0xa2>
 800ad0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad0e:	d104      	bne.n	800ad1a <floor+0x9a>
 800ad10:	ee10 2a10 	vmov	r2, s0
 800ad14:	460b      	mov	r3, r1
 800ad16:	f7f5 fac1 	bl	800029c <__adddf3>
 800ad1a:	ec41 0b10 	vmov	d0, r0, r1
 800ad1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad22:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ad26:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2a:	fa23 f707 	lsr.w	r7, r3, r7
 800ad2e:	4207      	tst	r7, r0
 800ad30:	d0f3      	beq.n	800ad1a <floor+0x9a>
 800ad32:	a311      	add	r3, pc, #68	; (adr r3, 800ad78 <floor+0xf8>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f7f5 fab0 	bl	800029c <__adddf3>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f7f5 fef2 	bl	8000b28 <__aeabi_dcmpgt>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d0bf      	beq.n	800acc8 <floor+0x48>
 800ad48:	2c00      	cmp	r4, #0
 800ad4a:	da02      	bge.n	800ad52 <floor+0xd2>
 800ad4c:	2e14      	cmp	r6, #20
 800ad4e:	d103      	bne.n	800ad58 <floor+0xd8>
 800ad50:	3401      	adds	r4, #1
 800ad52:	ea25 0507 	bic.w	r5, r5, r7
 800ad56:	e7b7      	b.n	800acc8 <floor+0x48>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ad5e:	fa03 f606 	lsl.w	r6, r3, r6
 800ad62:	4435      	add	r5, r6
 800ad64:	4545      	cmp	r5, r8
 800ad66:	bf38      	it	cc
 800ad68:	18e4      	addcc	r4, r4, r3
 800ad6a:	e7f2      	b.n	800ad52 <floor+0xd2>
 800ad6c:	2500      	movs	r5, #0
 800ad6e:	462c      	mov	r4, r5
 800ad70:	e7aa      	b.n	800acc8 <floor+0x48>
 800ad72:	bf00      	nop
 800ad74:	f3af 8000 	nop.w
 800ad78:	8800759c 	.word	0x8800759c
 800ad7c:	7e37e43c 	.word	0x7e37e43c
 800ad80:	bff00000 	.word	0xbff00000
 800ad84:	000fffff 	.word	0x000fffff

0800ad88 <scalbn>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	ec55 4b10 	vmov	r4, r5, d0
 800ad8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad92:	4606      	mov	r6, r0
 800ad94:	462b      	mov	r3, r5
 800ad96:	b9aa      	cbnz	r2, 800adc4 <scalbn+0x3c>
 800ad98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad9c:	4323      	orrs	r3, r4
 800ad9e:	d03b      	beq.n	800ae18 <scalbn+0x90>
 800ada0:	4b31      	ldr	r3, [pc, #196]	; (800ae68 <scalbn+0xe0>)
 800ada2:	4629      	mov	r1, r5
 800ada4:	2200      	movs	r2, #0
 800ada6:	ee10 0a10 	vmov	r0, s0
 800adaa:	f7f5 fc2d 	bl	8000608 <__aeabi_dmul>
 800adae:	4b2f      	ldr	r3, [pc, #188]	; (800ae6c <scalbn+0xe4>)
 800adb0:	429e      	cmp	r6, r3
 800adb2:	4604      	mov	r4, r0
 800adb4:	460d      	mov	r5, r1
 800adb6:	da12      	bge.n	800adde <scalbn+0x56>
 800adb8:	a327      	add	r3, pc, #156	; (adr r3, 800ae58 <scalbn+0xd0>)
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	f7f5 fc23 	bl	8000608 <__aeabi_dmul>
 800adc2:	e009      	b.n	800add8 <scalbn+0x50>
 800adc4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800adc8:	428a      	cmp	r2, r1
 800adca:	d10c      	bne.n	800ade6 <scalbn+0x5e>
 800adcc:	ee10 2a10 	vmov	r2, s0
 800add0:	4620      	mov	r0, r4
 800add2:	4629      	mov	r1, r5
 800add4:	f7f5 fa62 	bl	800029c <__adddf3>
 800add8:	4604      	mov	r4, r0
 800adda:	460d      	mov	r5, r1
 800addc:	e01c      	b.n	800ae18 <scalbn+0x90>
 800adde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ade2:	460b      	mov	r3, r1
 800ade4:	3a36      	subs	r2, #54	; 0x36
 800ade6:	4432      	add	r2, r6
 800ade8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800adec:	428a      	cmp	r2, r1
 800adee:	dd0b      	ble.n	800ae08 <scalbn+0x80>
 800adf0:	ec45 4b11 	vmov	d1, r4, r5
 800adf4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ae60 <scalbn+0xd8>
 800adf8:	f000 f83c 	bl	800ae74 <copysign>
 800adfc:	a318      	add	r3, pc, #96	; (adr r3, 800ae60 <scalbn+0xd8>)
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	ec51 0b10 	vmov	r0, r1, d0
 800ae06:	e7da      	b.n	800adbe <scalbn+0x36>
 800ae08:	2a00      	cmp	r2, #0
 800ae0a:	dd08      	ble.n	800ae1e <scalbn+0x96>
 800ae0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae18:	ec45 4b10 	vmov	d0, r4, r5
 800ae1c:	bd70      	pop	{r4, r5, r6, pc}
 800ae1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae22:	da0d      	bge.n	800ae40 <scalbn+0xb8>
 800ae24:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae28:	429e      	cmp	r6, r3
 800ae2a:	ec45 4b11 	vmov	d1, r4, r5
 800ae2e:	dce1      	bgt.n	800adf4 <scalbn+0x6c>
 800ae30:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ae58 <scalbn+0xd0>
 800ae34:	f000 f81e 	bl	800ae74 <copysign>
 800ae38:	a307      	add	r3, pc, #28	; (adr r3, 800ae58 <scalbn+0xd0>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	e7e0      	b.n	800ae02 <scalbn+0x7a>
 800ae40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae44:	3236      	adds	r2, #54	; 0x36
 800ae46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	2200      	movs	r2, #0
 800ae54:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <scalbn+0xe8>)
 800ae56:	e7b2      	b.n	800adbe <scalbn+0x36>
 800ae58:	c2f8f359 	.word	0xc2f8f359
 800ae5c:	01a56e1f 	.word	0x01a56e1f
 800ae60:	8800759c 	.word	0x8800759c
 800ae64:	7e37e43c 	.word	0x7e37e43c
 800ae68:	43500000 	.word	0x43500000
 800ae6c:	ffff3cb0 	.word	0xffff3cb0
 800ae70:	3c900000 	.word	0x3c900000

0800ae74 <copysign>:
 800ae74:	ec51 0b10 	vmov	r0, r1, d0
 800ae78:	ee11 0a90 	vmov	r0, s3
 800ae7c:	ee10 2a10 	vmov	r2, s0
 800ae80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ae88:	ea41 0300 	orr.w	r3, r1, r0
 800ae8c:	ec43 2b10 	vmov	d0, r2, r3
 800ae90:	4770      	bx	lr
	...

0800ae94 <_init>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	bf00      	nop
 800ae98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9a:	bc08      	pop	{r3}
 800ae9c:	469e      	mov	lr, r3
 800ae9e:	4770      	bx	lr

0800aea0 <_fini>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	bf00      	nop
 800aea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea6:	bc08      	pop	{r3}
 800aea8:	469e      	mov	lr, r3
 800aeaa:	4770      	bx	lr
