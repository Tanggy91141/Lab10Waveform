
Lab10Waveform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  0800aef0  0800aef0  0001aef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba08  0800ba08  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba08  0800ba08  0001ba08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba10  0800ba10  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba10  0800ba10  0001ba10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba14  0800ba14  0001ba14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ba18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001f8  0800bc0c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800bc0c  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb1d  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f25  00000000  00000000  0002ed41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00030c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00031b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017541  00000000  00000000  000329a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a955  00000000  00000000  00049ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094244  00000000  00000000  00054836  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8a7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f50  00000000  00000000  000e8af8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aed4 	.word	0x0800aed4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800aed4 	.word	0x0800aed4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f001 fdca 	bl	8002b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 ff72 	bl	8001e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f001 f91c 	bl	80021e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fac:	f001 f8fa 	bl	80021a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fb0:	f001 f8ce 	bl	8002150 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fb4:	f000 ffd2 	bl	8001f5c <MX_ADC1_Init>
  MX_SPI3_Init();
 8000fb8:	f001 f822 	bl	8002000 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000fbc:	f001 f858 	bl	8002070 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000fc0:	f001 f8a2 	bl	8002108 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000fc4:	48aa      	ldr	r0, [pc, #680]	; (8001270 <main+0x2d8>)
 8000fc6:	f004 f84a 	bl	800505e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000fca:	48aa      	ldr	r0, [pc, #680]	; (8001274 <main+0x2dc>)
 8000fcc:	f004 f86b 	bl	80050a6 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	49a9      	ldr	r1, [pc, #676]	; (8001278 <main+0x2e0>)
 8000fd4:	48a9      	ldr	r0, [pc, #676]	; (800127c <main+0x2e4>)
 8000fd6:	f001 fe65 	bl	8002ca4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe0:	48a7      	ldr	r0, [pc, #668]	; (8001280 <main+0x2e8>)
 8000fe2:	f003 f83d 	bl	8004060 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	49a6      	ldr	r1, [pc, #664]	; (8001284 <main+0x2ec>)
 8000fea:	48a7      	ldr	r0, [pc, #668]	; (8001288 <main+0x2f0>)
 8000fec:	f004 fba4 	bl	8005738 <HAL_UART_Receive_IT>

		inputchar = UARTRecieveIT();		//Focus on this character
 8000ff0:	f001 f9ee 	bl	80023d0 <UARTRecieveIT>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4ba4      	ldr	r3, [pc, #656]	; (800128c <main+0x2f4>)
 8000ffa:	801a      	strh	r2, [r3, #0]
		if(inputchar!=-1)
 8000ffc:	4ba3      	ldr	r3, [pc, #652]	; (800128c <main+0x2f4>)
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001006:	d012      	beq.n	800102e <main+0x96>
		{
			sprintf(TxDataBuffer, "\r\nYou press:[%c]\r\n\r\n", inputchar);
 8001008:	4ba0      	ldr	r3, [pc, #640]	; (800128c <main+0x2f4>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	461a      	mov	r2, r3
 8001010:	499f      	ldr	r1, [pc, #636]	; (8001290 <main+0x2f8>)
 8001012:	48a0      	ldr	r0, [pc, #640]	; (8001294 <main+0x2fc>)
 8001014:	f006 f864 	bl	80070e0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001018:	489e      	ldr	r0, [pc, #632]	; (8001294 <main+0x2fc>)
 800101a:	f7ff f8e1 	bl	80001e0 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	b29a      	uxth	r2, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	499b      	ldr	r1, [pc, #620]	; (8001294 <main+0x2fc>)
 8001028:	4897      	ldr	r0, [pc, #604]	; (8001288 <main+0x2f0>)
 800102a:	f004 faec 	bl	8005606 <HAL_UART_Transmit>
		}

		static uint64_t timestamp = 0;
		if (micros() - timestamp >= 1000)
 800102e:	f001 f9b5 	bl	800239c <micros>
 8001032:	460a      	mov	r2, r1
 8001034:	4601      	mov	r1, r0
 8001036:	4b98      	ldr	r3, [pc, #608]	; (8001298 <main+0x300>)
 8001038:	e9d3 8900 	ldrd	r8, r9, [r3]
 800103c:	460b      	mov	r3, r1
 800103e:	4614      	mov	r4, r2
 8001040:	ebb3 0308 	subs.w	r3, r3, r8
 8001044:	eb64 0409 	sbc.w	r4, r4, r9
 8001048:	f240 31e7 	movw	r1, #999	; 0x3e7
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	42a2      	cmp	r2, r4
 8001052:	bf08      	it	eq
 8001054:	4299      	cmpeq	r1, r3
 8001056:	f080 82a7 	bcs.w	80015a8 <main+0x610>
		{
			timestamp = micros();
 800105a:	f001 f99f 	bl	800239c <micros>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4a8d      	ldr	r2, [pc, #564]	; (8001298 <main+0x300>)
 8001064:	e9c2 3400 	strd	r3, r4, [r2]
			Time = Time + 0.01;
 8001068:	4b8c      	ldr	r3, [pc, #560]	; (800129c <main+0x304>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa73 	bl	8000558 <__aeabi_f2d>
 8001072:	a37b      	add	r3, pc, #492	; (adr r3, 8001260 <main+0x2c8>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff f910 	bl	800029c <__adddf3>
 800107c:	4603      	mov	r3, r0
 800107e:	460c      	mov	r4, r1
 8001080:	4618      	mov	r0, r3
 8001082:	4621      	mov	r1, r4
 8001084:	f7ff fdb8 	bl	8000bf8 <__aeabi_d2f>
 8001088:	4602      	mov	r2, r0
 800108a:	4b84      	ldr	r3, [pc, #528]	; (800129c <main+0x304>)
 800108c:	601a      	str	r2, [r3, #0]

			if (Mode == 1)
 800108e:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <main+0x308>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	f040 8110 	bne.w	80012b8 <main+0x320>
			{
				float Period = 1/Freq;
 8001098:	4b82      	ldr	r3, [pc, #520]	; (80012a4 <main+0x30c>)
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a6:	edc7 7a01 	vstr	s15, [r7, #4]

				if ((Slope == 1) && (Time <= (Period)))
 80010aa:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <main+0x310>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d162      	bne.n	8001178 <main+0x1e0>
 80010b2:	4b7a      	ldr	r3, [pc, #488]	; (800129c <main+0x304>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80010bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	db58      	blt.n	8001178 <main+0x1e0>
				{
					dataOut = (((H_Volt*(4096.0/3.3))-( L_Volt*(4096.0/3.3)))/(Period))*Time
 80010c6:	4b79      	ldr	r3, [pc, #484]	; (80012ac <main+0x314>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa44 	bl	8000558 <__aeabi_f2d>
 80010d0:	a365      	add	r3, pc, #404	; (adr r3, 8001268 <main+0x2d0>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff fa97 	bl	8000608 <__aeabi_dmul>
 80010da:	4603      	mov	r3, r0
 80010dc:	460c      	mov	r4, r1
 80010de:	4625      	mov	r5, r4
 80010e0:	461c      	mov	r4, r3
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <main+0x318>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa36 	bl	8000558 <__aeabi_f2d>
 80010ec:	a35e      	add	r3, pc, #376	; (adr r3, 8001268 <main+0x2d0>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fa89 	bl	8000608 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff f8cb 	bl	8000298 <__aeabi_dsub>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	4625      	mov	r5, r4
 8001108:	461c      	mov	r4, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fa24 	bl	8000558 <__aeabi_f2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff fba0 	bl	800085c <__aeabi_ddiv>
 800111c:	4603      	mov	r3, r0
 800111e:	460c      	mov	r4, r1
 8001120:	4625      	mov	r5, r4
 8001122:	461c      	mov	r4, r3
 8001124:	4b5d      	ldr	r3, [pc, #372]	; (800129c <main+0x304>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa15 	bl	8000558 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fa67 	bl	8000608 <__aeabi_dmul>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4625      	mov	r5, r4
 8001140:	461c      	mov	r4, r3
							+ (L_Volt *(4096.0/3.3));	//offset
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <main+0x318>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fa06 	bl	8000558 <__aeabi_f2d>
 800114c:	a346      	add	r3, pc, #280	; (adr r3, 8001268 <main+0x2d0>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa59 	bl	8000608 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4620      	mov	r0, r4
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff f89d 	bl	800029c <__adddf3>
 8001162:	4603      	mov	r3, r0
 8001164:	460c      	mov	r4, r1
					dataOut = (((H_Volt*(4096.0/3.3))-( L_Volt*(4096.0/3.3)))/(Period))*Time
 8001166:	4618      	mov	r0, r3
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fd25 	bl	8000bb8 <__aeabi_d2uiz>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <main+0x31c>)
 8001174:	801a      	strh	r2, [r3, #0]
 8001176:	e201      	b.n	800157c <main+0x5e4>
				}

				else if ((Slope == 0) && (Time <= (1/Freq)))
 8001178:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <main+0x310>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d167      	bne.n	8001250 <main+0x2b8>
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <main+0x30c>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800118a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <main+0x304>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	db58      	blt.n	8001250 <main+0x2b8>
				{
					dataOut = (((L_Volt*(4096.0/3.3))-( H_Volt*(4096.0/3.3)))/(Period))*Time
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <main+0x318>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9d8 	bl	8000558 <__aeabi_f2d>
 80011a8:	a32f      	add	r3, pc, #188	; (adr r3, 8001268 <main+0x2d0>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fa2b 	bl	8000608 <__aeabi_dmul>
 80011b2:	4603      	mov	r3, r0
 80011b4:	460c      	mov	r4, r1
 80011b6:	4625      	mov	r5, r4
 80011b8:	461c      	mov	r4, r3
 80011ba:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <main+0x314>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9ca 	bl	8000558 <__aeabi_f2d>
 80011c4:	a328      	add	r3, pc, #160	; (adr r3, 8001268 <main+0x2d0>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fa1d 	bl	8000608 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4620      	mov	r0, r4
 80011d4:	4629      	mov	r1, r5
 80011d6:	f7ff f85f 	bl	8000298 <__aeabi_dsub>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	4625      	mov	r5, r4
 80011e0:	461c      	mov	r4, r3
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff f9b8 	bl	8000558 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7ff fb34 	bl	800085c <__aeabi_ddiv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	4625      	mov	r5, r4
 80011fa:	461c      	mov	r4, r3
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <main+0x304>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9a9 	bl	8000558 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7ff f9fb 	bl	8000608 <__aeabi_dmul>
 8001212:	4603      	mov	r3, r0
 8001214:	460c      	mov	r4, r1
 8001216:	4625      	mov	r5, r4
 8001218:	461c      	mov	r4, r3
							+ (H_Volt *(4096.0/3.3));	//offset
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <main+0x314>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f99a 	bl	8000558 <__aeabi_f2d>
 8001224:	a310      	add	r3, pc, #64	; (adr r3, 8001268 <main+0x2d0>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9ed 	bl	8000608 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4620      	mov	r0, r4
 8001234:	4629      	mov	r1, r5
 8001236:	f7ff f831 	bl	800029c <__adddf3>
 800123a:	4603      	mov	r3, r0
 800123c:	460c      	mov	r4, r1
					dataOut = (((L_Volt*(4096.0/3.3))-( H_Volt*(4096.0/3.3)))/(Period))*Time
 800123e:	4618      	mov	r0, r3
 8001240:	4621      	mov	r1, r4
 8001242:	f7ff fcb9 	bl	8000bb8 <__aeabi_d2uiz>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <main+0x31c>)
 800124c:	801a      	strh	r2, [r3, #0]
 800124e:	e195      	b.n	800157c <main+0x5e4>
				}

				else
				{
					Time = 0.0;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <main+0x304>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e190      	b.n	800157c <main+0x5e4>
 800125a:	bf00      	nop
 800125c:	f3af 8000 	nop.w
 8001260:	47ae147b 	.word	0x47ae147b
 8001264:	3f847ae1 	.word	0x3f847ae1
 8001268:	364d9365 	.word	0x364d9365
 800126c:	409364d9 	.word	0x409364d9
 8001270:	20000338 	.word	0x20000338
 8001274:	20000418 	.word	0x20000418
 8001278:	20000214 	.word	0x20000214
 800127c:	200003d0 	.word	0x200003d0
 8001280:	40020000 	.word	0x40020000
 8001284:	2000025c 	.word	0x2000025c
 8001288:	200004b8 	.word	0x200004b8
 800128c:	20000238 	.word	0x20000238
 8001290:	0800aef0 	.word	0x0800aef0
 8001294:	2000023c 	.word	0x2000023c
 8001298:	20000320 	.word	0x20000320
 800129c:	20000224 	.word	0x20000224
 80012a0:	20000014 	.word	0x20000014
 80012a4:	20000004 	.word	0x20000004
 80012a8:	2000000c 	.word	0x2000000c
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000228 	.word	0x20000228
 80012b4:	20000220 	.word	0x20000220
				}
			}

			else if (Mode == 2)
 80012b8:	4ba3      	ldr	r3, [pc, #652]	; (8001548 <main+0x5b0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	f040 80bf 	bne.w	8001440 <main+0x4a8>
			{
				rad = rad + 0.01;
 80012c2:	4ba2      	ldr	r3, [pc, #648]	; (800154c <main+0x5b4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f946 	bl	8000558 <__aeabi_f2d>
 80012cc:	a398      	add	r3, pc, #608	; (adr r3, 8001530 <main+0x598>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7fe ffe3 	bl	800029c <__adddf3>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	f7ff fc8b 	bl	8000bf8 <__aeabi_d2f>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b99      	ldr	r3, [pc, #612]	; (800154c <main+0x5b4>)
 80012e6:	601a      	str	r2, [r3, #0]
				amp =((H_Volt*(4096.0/3.3))-(L_Volt*(4096.0/3.3)))/2;
 80012e8:	4b99      	ldr	r3, [pc, #612]	; (8001550 <main+0x5b8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f933 	bl	8000558 <__aeabi_f2d>
 80012f2:	a391      	add	r3, pc, #580	; (adr r3, 8001538 <main+0x5a0>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff f986 	bl	8000608 <__aeabi_dmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	4625      	mov	r5, r4
 8001302:	461c      	mov	r4, r3
 8001304:	4b93      	ldr	r3, [pc, #588]	; (8001554 <main+0x5bc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f925 	bl	8000558 <__aeabi_f2d>
 800130e:	a38a      	add	r3, pc, #552	; (adr r3, 8001538 <main+0x5a0>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff f978 	bl	8000608 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe ffba 	bl	8000298 <__aeabi_dsub>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001334:	f7ff fa92 	bl	800085c <__aeabi_ddiv>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	4618      	mov	r0, r3
 800133e:	4621      	mov	r1, r4
 8001340:	f7ff fc5a 	bl	8000bf8 <__aeabi_d2f>
 8001344:	4602      	mov	r2, r0
 8001346:	4b84      	ldr	r3, [pc, #528]	; (8001558 <main+0x5c0>)
 8001348:	601a      	str	r2, [r3, #0]
				offset =((H_Volt*(4096.0/3.3))+(L_Volt*(4096.0/3.3)))/2;
 800134a:	4b81      	ldr	r3, [pc, #516]	; (8001550 <main+0x5b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f902 	bl	8000558 <__aeabi_f2d>
 8001354:	a378      	add	r3, pc, #480	; (adr r3, 8001538 <main+0x5a0>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f955 	bl	8000608 <__aeabi_dmul>
 800135e:	4603      	mov	r3, r0
 8001360:	460c      	mov	r4, r1
 8001362:	4625      	mov	r5, r4
 8001364:	461c      	mov	r4, r3
 8001366:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <main+0x5bc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8f4 	bl	8000558 <__aeabi_f2d>
 8001370:	a371      	add	r3, pc, #452	; (adr r3, 8001538 <main+0x5a0>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f947 	bl	8000608 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4620      	mov	r0, r4
 8001380:	4629      	mov	r1, r5
 8001382:	f7fe ff8b 	bl	800029c <__adddf3>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	4618      	mov	r0, r3
 800138c:	4621      	mov	r1, r4
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001396:	f7ff fa61 	bl	800085c <__aeabi_ddiv>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4618      	mov	r0, r3
 80013a0:	4621      	mov	r1, r4
 80013a2:	f7ff fc29 	bl	8000bf8 <__aeabi_d2f>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b6c      	ldr	r3, [pc, #432]	; (800155c <main+0x5c4>)
 80013aa:	601a      	str	r2, [r3, #0]
				dataOut = (amp)*sin(2*M_PI*Freq*rad)+( offset);
 80013ac:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <main+0x5c0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8d1 	bl	8000558 <__aeabi_f2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	4b69      	ldr	r3, [pc, #420]	; (8001560 <main+0x5c8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8ca 	bl	8000558 <__aeabi_f2d>
 80013c4:	a35e      	add	r3, pc, #376	; (adr r3, 8001540 <main+0x5a8>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f91d 	bl	8000608 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4690      	mov	r8, r2
 80013d4:	4699      	mov	r9, r3
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <main+0x5b4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8bc 	bl	8000558 <__aeabi_f2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4640      	mov	r0, r8
 80013e6:	4649      	mov	r1, r9
 80013e8:	f7ff f90e 	bl	8000608 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	f008 fd58 	bl	8009eb0 <sin>
 8001400:	ec53 2b10 	vmov	r2, r3, d0
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7ff f8fe 	bl	8000608 <__aeabi_dmul>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	4625      	mov	r5, r4
 8001412:	461c      	mov	r4, r3
 8001414:	4b51      	ldr	r3, [pc, #324]	; (800155c <main+0x5c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f89d 	bl	8000558 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4620      	mov	r0, r4
 8001424:	4629      	mov	r1, r5
 8001426:	f7fe ff39 	bl	800029c <__adddf3>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4618      	mov	r0, r3
 8001430:	4621      	mov	r1, r4
 8001432:	f7ff fbc1 	bl	8000bb8 <__aeabi_d2uiz>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <main+0x5cc>)
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	e09d      	b.n	800157c <main+0x5e4>
			}

			else if (Mode == 3)
 8001440:	4b41      	ldr	r3, [pc, #260]	; (8001548 <main+0x5b0>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b03      	cmp	r3, #3
 8001446:	f040 8099 	bne.w	800157c <main+0x5e4>
			{

				float PeriodSub = duty/(Freq*100.0);
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <main+0x5d0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f870 	bl	8000534 <__aeabi_i2d>
 8001454:	4604      	mov	r4, r0
 8001456:	460d      	mov	r5, r1
 8001458:	4b41      	ldr	r3, [pc, #260]	; (8001560 <main+0x5c8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f87b 	bl	8000558 <__aeabi_f2d>
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <main+0x5d4>)
 8001468:	f7ff f8ce 	bl	8000608 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7ff f9f2 	bl	800085c <__aeabi_ddiv>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	4618      	mov	r0, r3
 800147e:	4621      	mov	r1, r4
 8001480:	f7ff fbba 	bl	8000bf8 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]
				float Period = 1/Freq;
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <main+0x5c8>)
 800148a:	ed93 7a00 	vldr	s14, [r3]
 800148e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001496:	edc7 7a02 	vstr	s15, [r7, #8]

				if(Time <= PeriodSub)
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <main+0x5d8>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80014a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	db14      	blt.n	80014d8 <main+0x540>
				{
					dataOut = H_Volt*(4096.0/3.3);
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <main+0x5b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f850 	bl	8000558 <__aeabi_f2d>
 80014b8:	a31f      	add	r3, pc, #124	; (adr r3, 8001538 <main+0x5a0>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff f8a3 	bl	8000608 <__aeabi_dmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	f7ff fb75 	bl	8000bb8 <__aeabi_d2uiz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <main+0x5cc>)
 80014d4:	801a      	strh	r2, [r3, #0]
 80014d6:	e051      	b.n	800157c <main+0x5e4>
				}
				else if ((Time > PeriodSub) && (Time <= (Period)))
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <main+0x5d8>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	d543      	bpl.n	8001574 <main+0x5dc>
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <main+0x5d8>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80014f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	db39      	blt.n	8001574 <main+0x5dc>
				{
					dataOut = L_Volt*(4096.0/3.3);
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <main+0x5bc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f827 	bl	8000558 <__aeabi_f2d>
 800150a:	a30b      	add	r3, pc, #44	; (adr r3, 8001538 <main+0x5a0>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f87a 	bl	8000608 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4618      	mov	r0, r3
 800151a:	4621      	mov	r1, r4
 800151c:	f7ff fb4c 	bl	8000bb8 <__aeabi_d2uiz>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <main+0x5cc>)
 8001526:	801a      	strh	r2, [r3, #0]
 8001528:	e028      	b.n	800157c <main+0x5e4>
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	47ae147b 	.word	0x47ae147b
 8001534:	3f847ae1 	.word	0x3f847ae1
 8001538:	364d9365 	.word	0x364d9365
 800153c:	409364d9 	.word	0x409364d9
 8001540:	54442d18 	.word	0x54442d18
 8001544:	401921fb 	.word	0x401921fb
 8001548:	20000014 	.word	0x20000014
 800154c:	20000230 	.word	0x20000230
 8001550:	20000008 	.word	0x20000008
 8001554:	20000228 	.word	0x20000228
 8001558:	2000022c 	.word	0x2000022c
 800155c:	20000234 	.word	0x20000234
 8001560:	20000004 	.word	0x20000004
 8001564:	20000220 	.word	0x20000220
 8001568:	20000010 	.word	0x20000010
 800156c:	40590000 	.word	0x40590000
 8001570:	20000224 	.word	0x20000224
				}
				else
				{
					Time = 0.0;
 8001574:	4bba      	ldr	r3, [pc, #744]	; (8001860 <main+0x8c8>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
				}
			}


			if (hspi3.State == HAL_SPI_STATE_READY
 800157c:	4bb9      	ldr	r3, [pc, #740]	; (8001864 <main+0x8cc>)
 800157e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10f      	bne.n	80015a8 <main+0x610>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158c:	48b6      	ldr	r0, [pc, #728]	; (8001868 <main+0x8d0>)
 800158e:	f002 fd4f 	bl	8004030 <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d107      	bne.n	80015a8 <main+0x610>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8001598:	4bb4      	ldr	r3, [pc, #720]	; (800186c <main+0x8d4>)
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	4bb4      	ldr	r3, [pc, #720]	; (8001870 <main+0x8d8>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4610      	mov	r0, r2
 80015a4:	f000 febe 	bl	8002324 <MCP4922SetOutput>




		///////////////////////////State
		switch (state)
 80015a8:	4bb2      	ldr	r3, [pc, #712]	; (8001874 <main+0x8dc>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3b0a      	subs	r3, #10
 80015ae:	2b32      	cmp	r3, #50	; 0x32
 80015b0:	f63f ad19 	bhi.w	8000fe6 <main+0x4e>
 80015b4:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <main+0x624>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	08001689 	.word	0x08001689
 80015c0:	08000fe7 	.word	0x08000fe7
 80015c4:	08000fe7 	.word	0x08000fe7
 80015c8:	08000fe7 	.word	0x08000fe7
 80015cc:	08000fe7 	.word	0x08000fe7
 80015d0:	08000fe7 	.word	0x08000fe7
 80015d4:	08000fe7 	.word	0x08000fe7
 80015d8:	08000fe7 	.word	0x08000fe7
 80015dc:	08000fe7 	.word	0x08000fe7
 80015e0:	08000fe7 	.word	0x08000fe7
 80015e4:	080016a7 	.word	0x080016a7
 80015e8:	08000fe7 	.word	0x08000fe7
 80015ec:	08000fe7 	.word	0x08000fe7
 80015f0:	08000fe7 	.word	0x08000fe7
 80015f4:	08000fe7 	.word	0x08000fe7
 80015f8:	08000fe7 	.word	0x08000fe7
 80015fc:	08000fe7 	.word	0x08000fe7
 8001600:	08000fe7 	.word	0x08000fe7
 8001604:	08000fe7 	.word	0x08000fe7
 8001608:	08000fe7 	.word	0x08000fe7
 800160c:	08001939 	.word	0x08001939
 8001610:	08000fe7 	.word	0x08000fe7
 8001614:	08000fe7 	.word	0x08000fe7
 8001618:	08000fe7 	.word	0x08000fe7
 800161c:	08000fe7 	.word	0x08000fe7
 8001620:	08000fe7 	.word	0x08000fe7
 8001624:	08000fe7 	.word	0x08000fe7
 8001628:	08000fe7 	.word	0x08000fe7
 800162c:	08000fe7 	.word	0x08000fe7
 8001630:	08000fe7 	.word	0x08000fe7
 8001634:	08001953 	.word	0x08001953
 8001638:	08000fe7 	.word	0x08000fe7
 800163c:	08000fe7 	.word	0x08000fe7
 8001640:	08000fe7 	.word	0x08000fe7
 8001644:	08000fe7 	.word	0x08000fe7
 8001648:	08000fe7 	.word	0x08000fe7
 800164c:	08000fe7 	.word	0x08000fe7
 8001650:	08000fe7 	.word	0x08000fe7
 8001654:	08000fe7 	.word	0x08000fe7
 8001658:	08000fe7 	.word	0x08000fe7
 800165c:	08001bb3 	.word	0x08001bb3
 8001660:	08000fe7 	.word	0x08000fe7
 8001664:	08000fe7 	.word	0x08000fe7
 8001668:	08000fe7 	.word	0x08000fe7
 800166c:	08000fe7 	.word	0x08000fe7
 8001670:	08000fe7 	.word	0x08000fe7
 8001674:	08000fe7 	.word	0x08000fe7
 8001678:	08000fe7 	.word	0x08000fe7
 800167c:	08000fe7 	.word	0x08000fe7
 8001680:	08000fe7 	.word	0x08000fe7
 8001684:	08001bd1 	.word	0x08001bd1
		{
		case printMenu_Saw:
			Mode = 1;
 8001688:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <main+0x8e0>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
			Print_fq();
 800168e:	f000 ff4b 	bl	8002528 <Print_fq>
			Print_Volt();
 8001692:	f000 ffe5 	bl	8002660 <Print_Volt>
			Print_Slope();
 8001696:	f000 ff8b 	bl	80025b0 <Print_Slope>
			Print_Menu_Saw();
 800169a:	f000 fee3 	bl	8002464 <Print_Menu_Saw>
			state = Saw_WaitInput;
 800169e:	4b75      	ldr	r3, [pc, #468]	; (8001874 <main+0x8dc>)
 80016a0:	2214      	movs	r2, #20
 80016a2:	701a      	strb	r2, [r3, #0]
			break;
 80016a4:	e3eb      	b.n	8001e7e <main+0xee6>
		case Saw_WaitInput:
			switch (inputchar)
 80016a6:	4b75      	ldr	r3, [pc, #468]	; (800187c <main+0x8e4>)
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	2b72      	cmp	r3, #114	; 0x72
 80016ae:	f000 8108 	beq.w	80018c2 <main+0x92a>
 80016b2:	2b72      	cmp	r3, #114	; 0x72
 80016b4:	dc0d      	bgt.n	80016d2 <main+0x73a>
 80016b6:	2b66      	cmp	r3, #102	; 0x66
 80016b8:	d049      	beq.n	800174e <main+0x7b6>
 80016ba:	2b66      	cmp	r3, #102	; 0x66
 80016bc:	dc04      	bgt.n	80016c8 <main+0x730>
 80016be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c2:	f000 8137 	beq.w	8001934 <main+0x99c>
 80016c6:	e12f      	b.n	8001928 <main+0x990>
 80016c8:	2b69      	cmp	r3, #105	; 0x69
 80016ca:	d013      	beq.n	80016f4 <main+0x75c>
 80016cc:	2b71      	cmp	r3, #113	; 0x71
 80016ce:	d015      	beq.n	80016fc <main+0x764>
 80016d0:	e12a      	b.n	8001928 <main+0x990>
 80016d2:	2b76      	cmp	r3, #118	; 0x76
 80016d4:	f000 8087 	beq.w	80017e6 <main+0x84e>
 80016d8:	2b76      	cmp	r3, #118	; 0x76
 80016da:	dc05      	bgt.n	80016e8 <main+0x750>
 80016dc:	2b73      	cmp	r3, #115	; 0x73
 80016de:	d011      	beq.n	8001704 <main+0x76c>
 80016e0:	2b75      	cmp	r3, #117	; 0x75
 80016e2:	f000 8112 	beq.w	800190a <main+0x972>
 80016e6:	e11f      	b.n	8001928 <main+0x990>
 80016e8:	2b77      	cmp	r3, #119	; 0x77
 80016ea:	f000 80a0 	beq.w	800182e <main+0x896>
 80016ee:	2b78      	cmp	r3, #120	; 0x78
 80016f0:	d051      	beq.n	8001796 <main+0x7fe>
 80016f2:	e119      	b.n	8001928 <main+0x990>
				case -1 :
					break;

				//Mode
				case 'i':
					state = printMenu_Sin;
 80016f4:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <main+0x8dc>)
 80016f6:	221e      	movs	r2, #30
 80016f8:	701a      	strb	r2, [r3, #0]
					break;
 80016fa:	e11c      	b.n	8001936 <main+0x99e>
				case 'q':
					state = printMenu_Squ;
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <main+0x8dc>)
 80016fe:	2232      	movs	r2, #50	; 0x32
 8001700:	701a      	strb	r2, [r3, #0]
					break;
 8001702:	e118      	b.n	8001936 <main+0x99e>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 8001704:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <main+0x8e8>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800170e:	eef4 7a47 	vcmp.f32	s15, s14
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	d103      	bne.n	8001720 <main+0x788>
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <main+0x8e8>)
 800171a:	4a5a      	ldr	r2, [pc, #360]	; (8001884 <main+0x8ec>)
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e012      	b.n	8001746 <main+0x7ae>
					else {Freq = Freq + 0.1 ;}
 8001720:	4b57      	ldr	r3, [pc, #348]	; (8001880 <main+0x8e8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff17 	bl	8000558 <__aeabi_f2d>
 800172a:	a349      	add	r3, pc, #292	; (adr r3, 8001850 <main+0x8b8>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe fdb4 	bl	800029c <__adddf3>
 8001734:	4603      	mov	r3, r0
 8001736:	460c      	mov	r4, r1
 8001738:	4618      	mov	r0, r3
 800173a:	4621      	mov	r1, r4
 800173c:	f7ff fa5c 	bl	8000bf8 <__aeabi_d2f>
 8001740:	4602      	mov	r2, r0
 8001742:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <main+0x8e8>)
 8001744:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 8001746:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <main+0x8dc>)
 8001748:	220a      	movs	r2, #10
 800174a:	701a      	strb	r2, [r3, #0]
					break;
 800174c:	e0f3      	b.n	8001936 <main+0x99e>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 800174e:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <main+0x8e8>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	d104      	bne.n	8001768 <main+0x7d0>
 800175e:	4b48      	ldr	r3, [pc, #288]	; (8001880 <main+0x8e8>)
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e012      	b.n	800178e <main+0x7f6>
					else {Freq = Freq - 0.1 ;}
 8001768:	4b45      	ldr	r3, [pc, #276]	; (8001880 <main+0x8e8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fef3 	bl	8000558 <__aeabi_f2d>
 8001772:	a337      	add	r3, pc, #220	; (adr r3, 8001850 <main+0x8b8>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe fd8e 	bl	8000298 <__aeabi_dsub>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4618      	mov	r0, r3
 8001782:	4621      	mov	r1, r4
 8001784:	f7ff fa38 	bl	8000bf8 <__aeabi_d2f>
 8001788:	4602      	mov	r2, r0
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <main+0x8e8>)
 800178c:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <main+0x8dc>)
 8001790:	220a      	movs	r2, #10
 8001792:	701a      	strb	r2, [r3, #0]
					break;
 8001794:	e0cf      	b.n	8001936 <main+0x99e>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <main+0x8f0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fedc 	bl	8000558 <__aeabi_f2d>
 80017a0:	a32d      	add	r3, pc, #180	; (adr r3, 8001858 <main+0x8c0>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <main+0x820>
 80017b0:	4b35      	ldr	r3, [pc, #212]	; (8001888 <main+0x8f0>)
 80017b2:	4a36      	ldr	r2, [pc, #216]	; (800188c <main+0x8f4>)
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e012      	b.n	80017de <main+0x846>
					else {L_Volt = L_Volt + 0.1 ;}
 80017b8:	4b33      	ldr	r3, [pc, #204]	; (8001888 <main+0x8f0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fecb 	bl	8000558 <__aeabi_f2d>
 80017c2:	a323      	add	r3, pc, #140	; (adr r3, 8001850 <main+0x8b8>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fd68 	bl	800029c <__adddf3>
 80017cc:	4603      	mov	r3, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	4618      	mov	r0, r3
 80017d2:	4621      	mov	r1, r4
 80017d4:	f7ff fa10 	bl	8000bf8 <__aeabi_d2f>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <main+0x8f0>)
 80017dc:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <main+0x8dc>)
 80017e0:	220a      	movs	r2, #10
 80017e2:	701a      	strb	r2, [r3, #0]
					break;
 80017e4:	e0a7      	b.n	8001936 <main+0x99e>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <main+0x8f0>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	d104      	bne.n	8001800 <main+0x868>
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <main+0x8f0>)
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e012      	b.n	8001826 <main+0x88e>
					else {L_Volt = L_Volt - 0.1 ;}
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <main+0x8f0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fea7 	bl	8000558 <__aeabi_f2d>
 800180a:	a311      	add	r3, pc, #68	; (adr r3, 8001850 <main+0x8b8>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fd42 	bl	8000298 <__aeabi_dsub>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	4618      	mov	r0, r3
 800181a:	4621      	mov	r1, r4
 800181c:	f7ff f9ec 	bl	8000bf8 <__aeabi_d2f>
 8001820:	4602      	mov	r2, r0
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <main+0x8f0>)
 8001824:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <main+0x8dc>)
 8001828:	220a      	movs	r2, #10
 800182a:	701a      	strb	r2, [r3, #0]
					break;
 800182c:	e083      	b.n	8001936 <main+0x99e>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <main+0x8f8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe90 	bl	8000558 <__aeabi_f2d>
 8001838:	a307      	add	r3, pc, #28	; (adr r3, 8001858 <main+0x8c0>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7ff f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d025      	beq.n	8001894 <main+0x8fc>
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <main+0x8f8>)
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <main+0x8f4>)
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	e034      	b.n	80018ba <main+0x922>
 8001850:	9999999a 	.word	0x9999999a
 8001854:	3fb99999 	.word	0x3fb99999
 8001858:	66666666 	.word	0x66666666
 800185c:	400a6666 	.word	0x400a6666
 8001860:	20000224 	.word	0x20000224
 8001864:	20000378 	.word	0x20000378
 8001868:	40020400 	.word	0x40020400
 800186c:	20000000 	.word	0x20000000
 8001870:	20000220 	.word	0x20000220
 8001874:	20000015 	.word	0x20000015
 8001878:	20000014 	.word	0x20000014
 800187c:	20000238 	.word	0x20000238
 8001880:	20000004 	.word	0x20000004
 8001884:	41200000 	.word	0x41200000
 8001888:	20000228 	.word	0x20000228
 800188c:	40533333 	.word	0x40533333
 8001890:	20000008 	.word	0x20000008
					else {H_Volt = H_Volt + 0.1 ;}
 8001894:	4bae      	ldr	r3, [pc, #696]	; (8001b50 <main+0xbb8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe5d 	bl	8000558 <__aeabi_f2d>
 800189e:	a3a8      	add	r3, pc, #672	; (adr r3, 8001b40 <main+0xba8>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fcfa 	bl	800029c <__adddf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	460c      	mov	r4, r1
 80018ac:	4618      	mov	r0, r3
 80018ae:	4621      	mov	r1, r4
 80018b0:	f7ff f9a2 	bl	8000bf8 <__aeabi_d2f>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4ba6      	ldr	r3, [pc, #664]	; (8001b50 <main+0xbb8>)
 80018b8:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 80018ba:	4ba6      	ldr	r3, [pc, #664]	; (8001b54 <main+0xbbc>)
 80018bc:	220a      	movs	r2, #10
 80018be:	701a      	strb	r2, [r3, #0]
					break;
 80018c0:	e039      	b.n	8001936 <main+0x99e>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 80018c2:	4ba3      	ldr	r3, [pc, #652]	; (8001b50 <main+0xbb8>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d104      	bne.n	80018dc <main+0x944>
 80018d2:	4b9f      	ldr	r3, [pc, #636]	; (8001b50 <main+0xbb8>)
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e012      	b.n	8001902 <main+0x96a>
					else {H_Volt = H_Volt - 0.1 ;}
 80018dc:	4b9c      	ldr	r3, [pc, #624]	; (8001b50 <main+0xbb8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe39 	bl	8000558 <__aeabi_f2d>
 80018e6:	a396      	add	r3, pc, #600	; (adr r3, 8001b40 <main+0xba8>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fcd4 	bl	8000298 <__aeabi_dsub>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	4618      	mov	r0, r3
 80018f6:	4621      	mov	r1, r4
 80018f8:	f7ff f97e 	bl	8000bf8 <__aeabi_d2f>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b94      	ldr	r3, [pc, #592]	; (8001b50 <main+0xbb8>)
 8001900:	601a      	str	r2, [r3, #0]
					state = printMenu_Saw;
 8001902:	4b94      	ldr	r3, [pc, #592]	; (8001b54 <main+0xbbc>)
 8001904:	220a      	movs	r2, #10
 8001906:	701a      	strb	r2, [r3, #0]
					break;
 8001908:	e015      	b.n	8001936 <main+0x99e>

				//Specific
				case 'u':
					if (Slope == 1) {Slope = 0;}
 800190a:	4b93      	ldr	r3, [pc, #588]	; (8001b58 <main+0xbc0>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d103      	bne.n	800191a <main+0x982>
 8001912:	4b91      	ldr	r3, [pc, #580]	; (8001b58 <main+0xbc0>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	e002      	b.n	8001920 <main+0x988>
					else {Slope = 1;}
 800191a:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <main+0xbc0>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
					state = printMenu_Saw;
 8001920:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <main+0xbbc>)
 8001922:	220a      	movs	r2, #10
 8001924:	701a      	strb	r2, [r3, #0]
					break;
 8001926:	e006      	b.n	8001936 <main+0x99e>

				//Error
				default:
					Print_Error();
 8001928:	f000 fe22 	bl	8002570 <Print_Error>
					state = printMenu_Saw;
 800192c:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <main+0xbbc>)
 800192e:	220a      	movs	r2, #10
 8001930:	701a      	strb	r2, [r3, #0]
					break;
 8001932:	e000      	b.n	8001936 <main+0x99e>
					break;
 8001934:	bf00      	nop
			}
			break;
 8001936:	e2a2      	b.n	8001e7e <main+0xee6>

		case printMenu_Sin:
			Mode = 2;
 8001938:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <main+0xbc4>)
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
			Print_fq();
 800193e:	f000 fdf3 	bl	8002528 <Print_fq>
			Print_Volt();
 8001942:	f000 fe8d 	bl	8002660 <Print_Volt>
			Print_Menu_Sin();
 8001946:	f000 fdad 	bl	80024a4 <Print_Menu_Sin>
			state = Sin_WaitInput;
 800194a:	4b82      	ldr	r3, [pc, #520]	; (8001b54 <main+0xbbc>)
 800194c:	2228      	movs	r2, #40	; 0x28
 800194e:	701a      	strb	r2, [r3, #0]
			break;
 8001950:	e295      	b.n	8001e7e <main+0xee6>
		case Sin_WaitInput:
			switch (inputchar)
 8001952:	4b83      	ldr	r3, [pc, #524]	; (8001b60 <main+0xbc8>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	2b72      	cmp	r3, #114	; 0x72
 800195a:	f000 80e3 	beq.w	8001b24 <main+0xb8c>
 800195e:	2b72      	cmp	r3, #114	; 0x72
 8001960:	dc0d      	bgt.n	800197e <main+0x9e6>
 8001962:	2b61      	cmp	r3, #97	; 0x61
 8001964:	d019      	beq.n	800199a <main+0xa02>
 8001966:	2b61      	cmp	r3, #97	; 0x61
 8001968:	dc04      	bgt.n	8001974 <main+0x9dc>
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196e:	f000 811e 	beq.w	8001bae <main+0xc16>
 8001972:	e116      	b.n	8001ba2 <main+0xc0a>
 8001974:	2b66      	cmp	r3, #102	; 0x66
 8001976:	d03d      	beq.n	80019f4 <main+0xa5c>
 8001978:	2b71      	cmp	r3, #113	; 0x71
 800197a:	d012      	beq.n	80019a2 <main+0xa0a>
 800197c:	e111      	b.n	8001ba2 <main+0xc0a>
 800197e:	2b76      	cmp	r3, #118	; 0x76
 8001980:	f000 8084 	beq.w	8001a8c <main+0xaf4>
 8001984:	2b76      	cmp	r3, #118	; 0x76
 8001986:	dc02      	bgt.n	800198e <main+0x9f6>
 8001988:	2b73      	cmp	r3, #115	; 0x73
 800198a:	d00e      	beq.n	80019aa <main+0xa12>
 800198c:	e109      	b.n	8001ba2 <main+0xc0a>
 800198e:	2b77      	cmp	r3, #119	; 0x77
 8001990:	f000 80a0 	beq.w	8001ad4 <main+0xb3c>
 8001994:	2b78      	cmp	r3, #120	; 0x78
 8001996:	d051      	beq.n	8001a3c <main+0xaa4>
 8001998:	e103      	b.n	8001ba2 <main+0xc0a>
				case -1 :
					break;

				//Mode
				case 'a':
					state = printMenu_Saw;
 800199a:	4b6e      	ldr	r3, [pc, #440]	; (8001b54 <main+0xbbc>)
 800199c:	220a      	movs	r2, #10
 800199e:	701a      	strb	r2, [r3, #0]
					break;
 80019a0:	e106      	b.n	8001bb0 <main+0xc18>
				case 'q':
					state = printMenu_Squ;
 80019a2:	4b6c      	ldr	r3, [pc, #432]	; (8001b54 <main+0xbbc>)
 80019a4:	2232      	movs	r2, #50	; 0x32
 80019a6:	701a      	strb	r2, [r3, #0]
					break;
 80019a8:	e102      	b.n	8001bb0 <main+0xc18>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 80019aa:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <main+0xbcc>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019b4:	eef4 7a47 	vcmp.f32	s15, s14
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d103      	bne.n	80019c6 <main+0xa2e>
 80019be:	4b69      	ldr	r3, [pc, #420]	; (8001b64 <main+0xbcc>)
 80019c0:	4a69      	ldr	r2, [pc, #420]	; (8001b68 <main+0xbd0>)
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e012      	b.n	80019ec <main+0xa54>
					else {Freq = Freq + 0.1 ;}
 80019c6:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <main+0xbcc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fdc4 	bl	8000558 <__aeabi_f2d>
 80019d0:	a35b      	add	r3, pc, #364	; (adr r3, 8001b40 <main+0xba8>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fc61 	bl	800029c <__adddf3>
 80019da:	4603      	mov	r3, r0
 80019dc:	460c      	mov	r4, r1
 80019de:	4618      	mov	r0, r3
 80019e0:	4621      	mov	r1, r4
 80019e2:	f7ff f909 	bl	8000bf8 <__aeabi_d2f>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <main+0xbcc>)
 80019ea:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 80019ec:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <main+0xbbc>)
 80019ee:	221e      	movs	r2, #30
 80019f0:	701a      	strb	r2, [r3, #0]
					break;
 80019f2:	e0dd      	b.n	8001bb0 <main+0xc18>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <main+0xbcc>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d104      	bne.n	8001a0e <main+0xa76>
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <main+0xbcc>)
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e012      	b.n	8001a34 <main+0xa9c>
					else {Freq = Freq - 0.1 ;}
 8001a0e:	4b55      	ldr	r3, [pc, #340]	; (8001b64 <main+0xbcc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fda0 	bl	8000558 <__aeabi_f2d>
 8001a18:	a349      	add	r3, pc, #292	; (adr r3, 8001b40 <main+0xba8>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fc3b 	bl	8000298 <__aeabi_dsub>
 8001a22:	4603      	mov	r3, r0
 8001a24:	460c      	mov	r4, r1
 8001a26:	4618      	mov	r0, r3
 8001a28:	4621      	mov	r1, r4
 8001a2a:	f7ff f8e5 	bl	8000bf8 <__aeabi_d2f>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <main+0xbcc>)
 8001a32:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <main+0xbbc>)
 8001a36:	221e      	movs	r2, #30
 8001a38:	701a      	strb	r2, [r3, #0]
					break;
 8001a3a:	e0b9      	b.n	8001bb0 <main+0xc18>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001a3c:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <main+0xbd4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd89 	bl	8000558 <__aeabi_f2d>
 8001a46:	a340      	add	r3, pc, #256	; (adr r3, 8001b48 <main+0xbb0>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7ff f844 	bl	8000ad8 <__aeabi_dcmpeq>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <main+0xac6>
 8001a56:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <main+0xbd4>)
 8001a58:	4a45      	ldr	r2, [pc, #276]	; (8001b70 <main+0xbd8>)
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e012      	b.n	8001a84 <main+0xaec>
					else {L_Volt = L_Volt + 0.1 ;}
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <main+0xbd4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd78 	bl	8000558 <__aeabi_f2d>
 8001a68:	a335      	add	r3, pc, #212	; (adr r3, 8001b40 <main+0xba8>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fc15 	bl	800029c <__adddf3>
 8001a72:	4603      	mov	r3, r0
 8001a74:	460c      	mov	r4, r1
 8001a76:	4618      	mov	r0, r3
 8001a78:	4621      	mov	r1, r4
 8001a7a:	f7ff f8bd 	bl	8000bf8 <__aeabi_d2f>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <main+0xbd4>)
 8001a82:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <main+0xbbc>)
 8001a86:	221e      	movs	r2, #30
 8001a88:	701a      	strb	r2, [r3, #0]
					break;
 8001a8a:	e091      	b.n	8001bb0 <main+0xc18>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 8001a8c:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <main+0xbd4>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	d104      	bne.n	8001aa6 <main+0xb0e>
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <main+0xbd4>)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e012      	b.n	8001acc <main+0xb34>
					else {L_Volt = L_Volt - 0.1 ;}
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <main+0xbd4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd54 	bl	8000558 <__aeabi_f2d>
 8001ab0:	a323      	add	r3, pc, #140	; (adr r3, 8001b40 <main+0xba8>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fbef 	bl	8000298 <__aeabi_dsub>
 8001aba:	4603      	mov	r3, r0
 8001abc:	460c      	mov	r4, r1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	f7ff f899 	bl	8000bf8 <__aeabi_d2f>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <main+0xbd4>)
 8001aca:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <main+0xbbc>)
 8001ace:	221e      	movs	r2, #30
 8001ad0:	701a      	strb	r2, [r3, #0]
					break;
 8001ad2:	e06d      	b.n	8001bb0 <main+0xc18>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <main+0xbb8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd3d 	bl	8000558 <__aeabi_f2d>
 8001ade:	a31a      	add	r3, pc, #104	; (adr r3, 8001b48 <main+0xbb0>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <main+0xb5e>
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <main+0xbb8>)
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <main+0xbd8>)
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e012      	b.n	8001b1c <main+0xb84>
					else {H_Volt = H_Volt + 0.1 ;}
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <main+0xbb8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd2c 	bl	8000558 <__aeabi_f2d>
 8001b00:	a30f      	add	r3, pc, #60	; (adr r3, 8001b40 <main+0xba8>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fbc9 	bl	800029c <__adddf3>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4621      	mov	r1, r4
 8001b12:	f7ff f871 	bl	8000bf8 <__aeabi_d2f>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <main+0xbb8>)
 8001b1a:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <main+0xbbc>)
 8001b1e:	221e      	movs	r2, #30
 8001b20:	701a      	strb	r2, [r3, #0]
					break;
 8001b22:	e045      	b.n	8001bb0 <main+0xc18>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <main+0xbb8>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d11f      	bne.n	8001b74 <main+0xbdc>
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <main+0xbb8>)
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e02d      	b.n	8001b9a <main+0xc02>
 8001b3e:	bf00      	nop
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	3fb99999 	.word	0x3fb99999
 8001b48:	66666666 	.word	0x66666666
 8001b4c:	400a6666 	.word	0x400a6666
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000015 	.word	0x20000015
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000014 	.word	0x20000014
 8001b60:	20000238 	.word	0x20000238
 8001b64:	20000004 	.word	0x20000004
 8001b68:	41200000 	.word	0x41200000
 8001b6c:	20000228 	.word	0x20000228
 8001b70:	40533333 	.word	0x40533333
					else {H_Volt = H_Volt - 0.1 ;}
 8001b74:	4bb0      	ldr	r3, [pc, #704]	; (8001e38 <main+0xea0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fced 	bl	8000558 <__aeabi_f2d>
 8001b7e:	a3aa      	add	r3, pc, #680	; (adr r3, 8001e28 <main+0xe90>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fb88 	bl	8000298 <__aeabi_dsub>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4621      	mov	r1, r4
 8001b90:	f7ff f832 	bl	8000bf8 <__aeabi_d2f>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4ba8      	ldr	r3, [pc, #672]	; (8001e38 <main+0xea0>)
 8001b98:	601a      	str	r2, [r3, #0]
					state = printMenu_Sin;
 8001b9a:	4ba8      	ldr	r3, [pc, #672]	; (8001e3c <main+0xea4>)
 8001b9c:	221e      	movs	r2, #30
 8001b9e:	701a      	strb	r2, [r3, #0]
					break;
 8001ba0:	e006      	b.n	8001bb0 <main+0xc18>
				//case '':
					//break;

				//Error
				default:
					Print_Error();
 8001ba2:	f000 fce5 	bl	8002570 <Print_Error>
					state = printMenu_Sin;
 8001ba6:	4ba5      	ldr	r3, [pc, #660]	; (8001e3c <main+0xea4>)
 8001ba8:	221e      	movs	r2, #30
 8001baa:	701a      	strb	r2, [r3, #0]
					break;
 8001bac:	e000      	b.n	8001bb0 <main+0xc18>
					break;
 8001bae:	bf00      	nop
			}
			break;
 8001bb0:	e165      	b.n	8001e7e <main+0xee6>

		case printMenu_Squ:
			Mode = 3;
 8001bb2:	4ba3      	ldr	r3, [pc, #652]	; (8001e40 <main+0xea8>)
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	701a      	strb	r2, [r3, #0]
			Print_fq();
 8001bb8:	f000 fcb6 	bl	8002528 <Print_fq>
			Print_Volt();
 8001bbc:	f000 fd50 	bl	8002660 <Print_Volt>
			Print_Duty();
 8001bc0:	f000 fd30 	bl	8002624 <Print_Duty>
			Print_Menu_Squ();
 8001bc4:	f000 fc8e 	bl	80024e4 <Print_Menu_Squ>
			state = Squ_WaitInput;
 8001bc8:	4b9c      	ldr	r3, [pc, #624]	; (8001e3c <main+0xea4>)
 8001bca:	223c      	movs	r2, #60	; 0x3c
 8001bcc:	701a      	strb	r2, [r3, #0]
			break;
 8001bce:	e156      	b.n	8001e7e <main+0xee6>
		case Squ_WaitInput:
			switch (inputchar)
 8001bd0:	4b9c      	ldr	r3, [pc, #624]	; (8001e44 <main+0xeac>)
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	2b6c      	cmp	r3, #108	; 0x6c
 8001bd8:	f000 811e 	beq.w	8001e18 <main+0xe80>
 8001bdc:	2b6c      	cmp	r3, #108	; 0x6c
 8001bde:	dc10      	bgt.n	8001c02 <main+0xc6a>
 8001be0:	2b66      	cmp	r3, #102	; 0x66
 8001be2:	d04c      	beq.n	8001c7e <main+0xce6>
 8001be4:	2b66      	cmp	r3, #102	; 0x66
 8001be6:	dc06      	bgt.n	8001bf6 <main+0xc5e>
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	f000 8145 	beq.w	8001e7a <main+0xee2>
 8001bf0:	2b61      	cmp	r3, #97	; 0x61
 8001bf2:	d017      	beq.n	8001c24 <main+0xc8c>
 8001bf4:	e13b      	b.n	8001e6e <main+0xed6>
 8001bf6:	2b69      	cmp	r3, #105	; 0x69
 8001bf8:	d018      	beq.n	8001c2c <main+0xc94>
 8001bfa:	2b6a      	cmp	r3, #106	; 0x6a
 8001bfc:	f000 80fb 	beq.w	8001df6 <main+0xe5e>
 8001c00:	e135      	b.n	8001e6e <main+0xed6>
 8001c02:	2b76      	cmp	r3, #118	; 0x76
 8001c04:	f000 8087 	beq.w	8001d16 <main+0xd7e>
 8001c08:	2b76      	cmp	r3, #118	; 0x76
 8001c0a:	dc05      	bgt.n	8001c18 <main+0xc80>
 8001c0c:	2b72      	cmp	r3, #114	; 0x72
 8001c0e:	f000 80ce 	beq.w	8001dae <main+0xe16>
 8001c12:	2b73      	cmp	r3, #115	; 0x73
 8001c14:	d00e      	beq.n	8001c34 <main+0xc9c>
 8001c16:	e12a      	b.n	8001e6e <main+0xed6>
 8001c18:	2b77      	cmp	r3, #119	; 0x77
 8001c1a:	f000 80a0 	beq.w	8001d5e <main+0xdc6>
 8001c1e:	2b78      	cmp	r3, #120	; 0x78
 8001c20:	d051      	beq.n	8001cc6 <main+0xd2e>
 8001c22:	e124      	b.n	8001e6e <main+0xed6>
				case -1 :
					break;

				//Mode
				case 'a':
					state = printMenu_Saw;
 8001c24:	4b85      	ldr	r3, [pc, #532]	; (8001e3c <main+0xea4>)
 8001c26:	220a      	movs	r2, #10
 8001c28:	701a      	strb	r2, [r3, #0]
					break;
 8001c2a:	e127      	b.n	8001e7c <main+0xee4>
				case 'i':
					state = printMenu_Sin;
 8001c2c:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <main+0xea4>)
 8001c2e:	221e      	movs	r2, #30
 8001c30:	701a      	strb	r2, [r3, #0]
					break;
 8001c32:	e123      	b.n	8001e7c <main+0xee4>

				//Freq
				case 's':
					if (Freq == 10) {Freq = 10;}
 8001c34:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <main+0xeb0>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c3e:	eef4 7a47 	vcmp.f32	s15, s14
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d103      	bne.n	8001c50 <main+0xcb8>
 8001c48:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <main+0xeb0>)
 8001c4a:	4a80      	ldr	r2, [pc, #512]	; (8001e4c <main+0xeb4>)
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e012      	b.n	8001c76 <main+0xcde>
					else {Freq = Freq + 0.1 ;}
 8001c50:	4b7d      	ldr	r3, [pc, #500]	; (8001e48 <main+0xeb0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc7f 	bl	8000558 <__aeabi_f2d>
 8001c5a:	a373      	add	r3, pc, #460	; (adr r3, 8001e28 <main+0xe90>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fb1c 	bl	800029c <__adddf3>
 8001c64:	4603      	mov	r3, r0
 8001c66:	460c      	mov	r4, r1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	f7fe ffc4 	bl	8000bf8 <__aeabi_d2f>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <main+0xeb0>)
 8001c74:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001c76:	4b71      	ldr	r3, [pc, #452]	; (8001e3c <main+0xea4>)
 8001c78:	2232      	movs	r2, #50	; 0x32
 8001c7a:	701a      	strb	r2, [r3, #0]
					break;
 8001c7c:	e0fe      	b.n	8001e7c <main+0xee4>
				case 'f':
					if (Freq == 0) {Freq = 0;}
 8001c7e:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <main+0xeb0>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d104      	bne.n	8001c98 <main+0xd00>
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <main+0xeb0>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e012      	b.n	8001cbe <main+0xd26>
					else {Freq = Freq - 0.1 ;}
 8001c98:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <main+0xeb0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc5b 	bl	8000558 <__aeabi_f2d>
 8001ca2:	a361      	add	r3, pc, #388	; (adr r3, 8001e28 <main+0xe90>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe faf6 	bl	8000298 <__aeabi_dsub>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	f7fe ffa0 	bl	8000bf8 <__aeabi_d2f>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <main+0xeb0>)
 8001cbc:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <main+0xea4>)
 8001cc0:	2232      	movs	r2, #50	; 0x32
 8001cc2:	701a      	strb	r2, [r3, #0]
					break;
 8001cc4:	e0da      	b.n	8001e7c <main+0xee4>

				//Low Volt
				case 'x':
					if (L_Volt == 3.3) {L_Volt = 3.3;}
 8001cc6:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <main+0xeb8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc44 	bl	8000558 <__aeabi_f2d>
 8001cd0:	a357      	add	r3, pc, #348	; (adr r3, 8001e30 <main+0xe98>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe feff 	bl	8000ad8 <__aeabi_dcmpeq>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <main+0xd50>
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <main+0xeb8>)
 8001ce2:	4a5c      	ldr	r2, [pc, #368]	; (8001e54 <main+0xebc>)
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e012      	b.n	8001d0e <main+0xd76>
					else {L_Volt = L_Volt + 0.1 ;}
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <main+0xeb8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc33 	bl	8000558 <__aeabi_f2d>
 8001cf2:	a34d      	add	r3, pc, #308	; (adr r3, 8001e28 <main+0xe90>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fad0 	bl	800029c <__adddf3>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4618      	mov	r0, r3
 8001d02:	4621      	mov	r1, r4
 8001d04:	f7fe ff78 	bl	8000bf8 <__aeabi_d2f>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <main+0xeb8>)
 8001d0c:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <main+0xea4>)
 8001d10:	2232      	movs	r2, #50	; 0x32
 8001d12:	701a      	strb	r2, [r3, #0]
					break;
 8001d14:	e0b2      	b.n	8001e7c <main+0xee4>
				case 'v':
					if (L_Volt == 0) {L_Volt = 0;}
 8001d16:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <main+0xeb8>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	d104      	bne.n	8001d30 <main+0xd98>
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <main+0xeb8>)
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e012      	b.n	8001d56 <main+0xdbe>
					else {L_Volt = L_Volt - 0.1 ;}
 8001d30:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <main+0xeb8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fc0f 	bl	8000558 <__aeabi_f2d>
 8001d3a:	a33b      	add	r3, pc, #236	; (adr r3, 8001e28 <main+0xe90>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe faaa 	bl	8000298 <__aeabi_dsub>
 8001d44:	4603      	mov	r3, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	f7fe ff54 	bl	8000bf8 <__aeabi_d2f>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <main+0xeb8>)
 8001d54:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001d56:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <main+0xea4>)
 8001d58:	2232      	movs	r2, #50	; 0x32
 8001d5a:	701a      	strb	r2, [r3, #0]
					break;
 8001d5c:	e08e      	b.n	8001e7c <main+0xee4>

				//High Volt
				case 'w':
					if (H_Volt == 3.3) {H_Volt = 3.3;}
 8001d5e:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <main+0xea0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbf8 	bl	8000558 <__aeabi_f2d>
 8001d68:	a331      	add	r3, pc, #196	; (adr r3, 8001e30 <main+0xe98>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe feb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <main+0xde8>
 8001d78:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <main+0xea0>)
 8001d7a:	4a36      	ldr	r2, [pc, #216]	; (8001e54 <main+0xebc>)
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e012      	b.n	8001da6 <main+0xe0e>
					else {H_Volt = H_Volt + 0.1 ;}
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <main+0xea0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbe7 	bl	8000558 <__aeabi_f2d>
 8001d8a:	a327      	add	r3, pc, #156	; (adr r3, 8001e28 <main+0xe90>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fa84 	bl	800029c <__adddf3>
 8001d94:	4603      	mov	r3, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	f7fe ff2c 	bl	8000bf8 <__aeabi_d2f>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <main+0xea0>)
 8001da4:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <main+0xea4>)
 8001da8:	2232      	movs	r2, #50	; 0x32
 8001daa:	701a      	strb	r2, [r3, #0]
					break;
 8001dac:	e066      	b.n	8001e7c <main+0xee4>
				case 'r':
					if (H_Volt == 0) {H_Volt = 0;}
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <main+0xea0>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	d104      	bne.n	8001dc8 <main+0xe30>
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <main+0xea0>)
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e012      	b.n	8001dee <main+0xe56>
					else {H_Volt = H_Volt - 0.1 ;}
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <main+0xea0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbc3 	bl	8000558 <__aeabi_f2d>
 8001dd2:	a315      	add	r3, pc, #84	; (adr r3, 8001e28 <main+0xe90>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fa5e 	bl	8000298 <__aeabi_dsub>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	4618      	mov	r0, r3
 8001de2:	4621      	mov	r1, r4
 8001de4:	f7fe ff08 	bl	8000bf8 <__aeabi_d2f>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <main+0xea0>)
 8001dec:	601a      	str	r2, [r3, #0]
					state = printMenu_Squ;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <main+0xea4>)
 8001df0:	2232      	movs	r2, #50	; 0x32
 8001df2:	701a      	strb	r2, [r3, #0]
					break;
 8001df4:	e042      	b.n	8001e7c <main+0xee4>

				//Specific
				case 'j':
					if (duty == 100) {duty = 100;}
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <main+0xec0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d103      	bne.n	8001e06 <main+0xe6e>
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <main+0xec0>)
 8001e00:	2264      	movs	r2, #100	; 0x64
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e004      	b.n	8001e10 <main+0xe78>
					else {duty = duty + 10 ;}
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <main+0xec0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	330a      	adds	r3, #10
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <main+0xec0>)
 8001e0e:	6013      	str	r3, [r2, #0]
					state = printMenu_Squ;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <main+0xea4>)
 8001e12:	2232      	movs	r2, #50	; 0x32
 8001e14:	701a      	strb	r2, [r3, #0]
					break;
 8001e16:	e031      	b.n	8001e7c <main+0xee4>
				case 'l':
					if (duty == 0) {duty = 0;}
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <main+0xec0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11d      	bne.n	8001e5c <main+0xec4>
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <main+0xec0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e01e      	b.n	8001e66 <main+0xece>
 8001e28:	9999999a 	.word	0x9999999a
 8001e2c:	3fb99999 	.word	0x3fb99999
 8001e30:	66666666 	.word	0x66666666
 8001e34:	400a6666 	.word	0x400a6666
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20000015 	.word	0x20000015
 8001e40:	20000014 	.word	0x20000014
 8001e44:	20000238 	.word	0x20000238
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	41200000 	.word	0x41200000
 8001e50:	20000228 	.word	0x20000228
 8001e54:	40533333 	.word	0x40533333
 8001e58:	20000010 	.word	0x20000010
					else {duty = duty - 10 ;}
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <main+0xeec>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3b0a      	subs	r3, #10
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <main+0xeec>)
 8001e64:	6013      	str	r3, [r2, #0]
					state = printMenu_Squ;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <main+0xef0>)
 8001e68:	2232      	movs	r2, #50	; 0x32
 8001e6a:	701a      	strb	r2, [r3, #0]
					break;
 8001e6c:	e006      	b.n	8001e7c <main+0xee4>

				//Error
				default:
					Print_Error();
 8001e6e:	f000 fb7f 	bl	8002570 <Print_Error>
					state = printMenu_Squ;
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <main+0xef0>)
 8001e74:	2232      	movs	r2, #50	; 0x32
 8001e76:	701a      	strb	r2, [r3, #0]
					break;
 8001e78:	e000      	b.n	8001e7c <main+0xee4>
					break;
 8001e7a:	bf00      	nop
			}
			break;
 8001e7c:	bf00      	nop
	{
 8001e7e:	f7ff b8b2 	b.w	8000fe6 <main+0x4e>
 8001e82:	bf00      	nop
 8001e84:	20000010 	.word	0x20000010
 8001e88:	20000015 	.word	0x20000015

08001e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b094      	sub	sp, #80	; 0x50
 8001e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2230      	movs	r2, #48	; 0x30
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f004 fad3 	bl	8006446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <SystemClock_Config+0xc8>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <SystemClock_Config+0xc8>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec0:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <SystemClock_Config+0xc8>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <SystemClock_Config+0xcc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <SystemClock_Config+0xcc>)
 8001ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <SystemClock_Config+0xcc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eec:	2301      	movs	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001efc:	2308      	movs	r3, #8
 8001efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f00:	2364      	movs	r3, #100	; 0x64
 8001f02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0c:	f107 0320 	add.w	r3, r7, #32
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 f8bf 	bl	8004094 <HAL_RCC_OscConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f1c:	f000 fbd2 	bl	80026c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f20:	230f      	movs	r3, #15
 8001f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f24:	2302      	movs	r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	2103      	movs	r1, #3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 fb19 	bl	8004574 <HAL_RCC_ClockConfig>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f48:	f000 fbbc 	bl	80026c4 <Error_Handler>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3750      	adds	r7, #80	; 0x50
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000

08001f5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f62:	463b      	mov	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f6e:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <MX_ADC1_Init+0xa0>)
 8001f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001f76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001fc2:	f000 fe2b 	bl	8002c1c <HAL_ADC_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001fcc:	f000 fb7a 	bl	80026c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_ADC1_Init+0x9c>)
 8001fe2:	f000 ff51 	bl	8002e88 <HAL_ADC_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001fec:	f000 fb6a 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200003d0 	.word	0x200003d0
 8001ffc:	40012000 	.word	0x40012000

08002000 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_SPI3_Init+0x68>)
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <MX_SPI3_Init+0x6c>)
 8002008:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_SPI3_Init+0x68>)
 800200c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002010:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_SPI3_Init+0x68>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <MX_SPI3_Init+0x68>)
 800201a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800201e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <MX_SPI3_Init+0x68>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <MX_SPI3_Init+0x68>)
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <MX_SPI3_Init+0x68>)
 800202e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002032:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <MX_SPI3_Init+0x68>)
 8002036:	2208      	movs	r2, #8
 8002038:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <MX_SPI3_Init+0x68>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <MX_SPI3_Init+0x68>)
 8002042:	2200      	movs	r2, #0
 8002044:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <MX_SPI3_Init+0x68>)
 8002048:	2200      	movs	r2, #0
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <MX_SPI3_Init+0x68>)
 800204e:	220a      	movs	r2, #10
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_SPI3_Init+0x68>)
 8002054:	f002 fc80 	bl	8004958 <HAL_SPI_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800205e:	f000 fb31 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000378 	.word	0x20000378
 800206c:	40003c00 	.word	0x40003c00

08002070 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	463b      	mov	r3, r7
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MX_TIM3_Init+0x90>)
 800208e:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <MX_TIM3_Init+0x94>)
 8002090:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <MX_TIM3_Init+0x90>)
 8002094:	2263      	movs	r2, #99	; 0x63
 8002096:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <MX_TIM3_Init+0x90>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <MX_TIM3_Init+0x90>)
 80020a0:	2264      	movs	r2, #100	; 0x64
 80020a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_TIM3_Init+0x90>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_TIM3_Init+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020b0:	4813      	ldr	r0, [pc, #76]	; (8002100 <MX_TIM3_Init+0x90>)
 80020b2:	f002 ffa9 	bl	8005008 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80020bc:	f000 fb02 	bl	80026c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	4619      	mov	r1, r3
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <MX_TIM3_Init+0x90>)
 80020ce:	f003 f80e 	bl	80050ee <HAL_TIM_ConfigClockSource>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80020d8:	f000 faf4 	bl	80026c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020dc:	2320      	movs	r3, #32
 80020de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020e4:	463b      	mov	r3, r7
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <MX_TIM3_Init+0x90>)
 80020ea:	f003 f9d1 	bl	8005490 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80020f4:	f000 fae6 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000338 	.word	0x20000338
 8002104:	40000400 	.word	0x40000400

08002108 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MX_TIM11_Init+0x40>)
 800210e:	4a0f      	ldr	r2, [pc, #60]	; (800214c <MX_TIM11_Init+0x44>)
 8002110:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <MX_TIM11_Init+0x40>)
 8002114:	2263      	movs	r2, #99	; 0x63
 8002116:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <MX_TIM11_Init+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <MX_TIM11_Init+0x40>)
 8002120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002124:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <MX_TIM11_Init+0x40>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <MX_TIM11_Init+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_TIM11_Init+0x40>)
 8002134:	f002 ff68 	bl	8005008 <HAL_TIM_Base_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800213e:	f000 fac1 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000418 	.word	0x20000418
 800214c:	40014800 	.word	0x40014800

08002150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <MX_USART2_UART_Init+0x4c>)
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <MX_USART2_UART_Init+0x50>)
 8002158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <MX_USART2_UART_Init+0x4c>)
 800215c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <MX_USART2_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <MX_USART2_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <MX_USART2_UART_Init+0x4c>)
 8002176:	220c      	movs	r2, #12
 8002178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <MX_USART2_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <MX_USART2_UART_Init+0x4c>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <MX_USART2_UART_Init+0x4c>)
 8002188:	f003 f9f0 	bl	800556c <HAL_UART_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002192:	f000 fa97 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200004b8 	.word	0x200004b8
 80021a0:	40004400 	.word	0x40004400

080021a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_DMA_Init+0x3c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <MX_DMA_Init+0x3c>)
 80021b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_DMA_Init+0x3c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2038      	movs	r0, #56	; 0x38
 80021cc:	f001 f9e7 	bl	800359e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021d0:	2038      	movs	r0, #56	; 0x38
 80021d2:	f001 fa00 	bl	80035d6 <HAL_NVIC_EnableIRQ>

}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b44      	ldr	r3, [pc, #272]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a43      	ldr	r2, [pc, #268]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <MX_GPIO_Init+0x12c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <MX_GPIO_Init+0x12c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a3c      	ldr	r2, [pc, #240]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a35      	ldr	r2, [pc, #212]	; (8002310 <MX_GPIO_Init+0x12c>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <MX_GPIO_Init+0x12c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	2120      	movs	r1, #32
 800226e:	4829      	ldr	r0, [pc, #164]	; (8002314 <MX_GPIO_Init+0x130>)
 8002270:	f001 fef6 	bl	8004060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227a:	4827      	ldr	r0, [pc, #156]	; (8002318 <MX_GPIO_Init+0x134>)
 800227c:	f001 fef0 	bl	8004060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002280:	2201      	movs	r2, #1
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	4825      	ldr	r0, [pc, #148]	; (800231c <MX_GPIO_Init+0x138>)
 8002286:	f001 feeb 	bl	8004060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002290:	4820      	ldr	r0, [pc, #128]	; (8002314 <MX_GPIO_Init+0x130>)
 8002292:	f001 fee5 	bl	8004060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <MX_GPIO_Init+0x13c>)
 800229e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	481c      	ldr	r0, [pc, #112]	; (800231c <MX_GPIO_Init+0x138>)
 80022ac:	f001 fd3e 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 80022b0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4812      	ldr	r0, [pc, #72]	; (8002314 <MX_GPIO_Init+0x130>)
 80022ca:	f001 fd2f 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80022ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	480c      	ldr	r0, [pc, #48]	; (8002318 <MX_GPIO_Init+0x134>)
 80022e8:	f001 fd20 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <MX_GPIO_Init+0x138>)
 8002304:	f001 fd12 	bl	8003d2c <HAL_GPIO_Init>

}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	10210000 	.word	0x10210000

08002324 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	460a      	mov	r2, r1
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	4613      	mov	r3, r2
 8002332:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002334:	88bb      	ldrh	r3, [r7, #4]
 8002336:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	031b      	lsls	r3, r3, #12
 800233e:	b29b      	uxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800234a:	4807      	ldr	r0, [pc, #28]	; (8002368 <MCP4922SetOutput+0x44>)
 800234c:	f001 fe88 	bl	8004060 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2201      	movs	r2, #1
 8002356:	4619      	mov	r1, r3
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <MCP4922SetOutput+0x48>)
 800235a:	f002 fb61 	bl	8004a20 <HAL_SPI_Transmit_IT>
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40020400 	.word	0x40020400
 800236c:	20000378 	.word	0x20000378

08002370 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <HAL_SPI_TxCpltCallback+0x24>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d105      	bne.n	800238c <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002386:	4804      	ldr	r0, [pc, #16]	; (8002398 <HAL_SPI_TxCpltCallback+0x28>)
 8002388:	f001 fe6a 	bl	8004060 <HAL_GPIO_WritePin>
	}
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000378 	.word	0x20000378
 8002398:	40020400 	.word	0x40020400

0800239c <micros>:
		_micro += 65535;
	}
}

inline uint64_t micros()
{
 800239c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80023a0:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <micros+0x2c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <micros+0x30>)
 80023b0:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80023b4:	eb1b 0301 	adds.w	r3, fp, r1
 80023b8:	eb4c 0402 	adc.w	r4, ip, r2
}
 80023bc:	4618      	mov	r0, r3
 80023be:	4621      	mov	r1, r4
 80023c0:	46bd      	mov	sp, r7
 80023c2:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80023c6:	4770      	bx	lr
 80023c8:	20000418 	.word	0x20000418
 80023cc:	20000218 	.word	0x20000218

080023d0 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data = -1 ;
 80023d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023da:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <UARTRecieveIT+0x58>)
 80023de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <UARTRecieveIT+0x58>)
 80023e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <UARTRecieveIT+0x5c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d010      	beq.n	8002416 <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <UARTRecieveIT+0x5c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <UARTRecieveIT+0x60>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <UARTRecieveIT+0x5c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	4a08      	ldr	r2, [pc, #32]	; (8002428 <UARTRecieveIT+0x58>)
 8002406:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002408:	fbb3 f1f2 	udiv	r1, r3, r2
 800240c:	fb02 f201 	mul.w	r2, r2, r1
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	4a06      	ldr	r2, [pc, #24]	; (800242c <UARTRecieveIT+0x5c>)
 8002414:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200004b8 	.word	0x200004b8
 800242c:	20000328 	.word	0x20000328
 8002430:	2000025c 	.word	0x2000025c

08002434 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800243c:	4807      	ldr	r0, [pc, #28]	; (800245c <HAL_UART_RxCpltCallback+0x28>)
 800243e:	f7fd fecf 	bl	80001e0 <strlen>
 8002442:	4603      	mov	r3, r0
 8002444:	b29a      	uxth	r2, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_UART_RxCpltCallback+0x28>)
 800244c:	4804      	ldr	r0, [pc, #16]	; (8002460 <HAL_UART_RxCpltCallback+0x2c>)
 800244e:	f003 f8da 	bl	8005606 <HAL_UART_Transmit>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000023c 	.word	0x2000023c
 8002460:	200004b8 	.word	0x200004b8

08002464 <Print_Menu_Saw>:

//////////////////////////////////////////Print

void Print_Menu_Saw()
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b0fc      	sub	sp, #496	; 0x1f0
 8002468:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Sawtooth Wave Menu---  \r\n\r\n"
 800246a:	463b      	mov	r3, r7
 800246c:	4a0b      	ldr	r2, [pc, #44]	; (800249c <Print_Menu_Saw+0x38>)
 800246e:	4618      	mov	r0, r3
 8002470:	4611      	mov	r1, r2
 8002472:	f240 13ed 	movw	r3, #493	; 0x1ed
 8002476:	461a      	mov	r2, r3
 8002478:	f003 ffda 	bl	8006430 <memcpy>

			  "Parameter_specific\r\n"
			  "__press [u] for slopeUp/slopeDown\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 800247c:	463b      	mov	r3, r7
 800247e:	4618      	mov	r0, r3
 8002480:	f7fd feae 	bl	80001e0 <strlen>
 8002484:	4603      	mov	r3, r0
 8002486:	b29a      	uxth	r2, r3
 8002488:	4639      	mov	r1, r7
 800248a:	2364      	movs	r3, #100	; 0x64
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <Print_Menu_Saw+0x3c>)
 800248e:	f003 f8ba 	bl	8005606 <HAL_UART_Transmit>
}
 8002492:	bf00      	nop
 8002494:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	0800af08 	.word	0x0800af08
 80024a0:	200004b8 	.word	0x200004b8

080024a4 <Print_Menu_Sin>:

void Print_Menu_Sin()
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0ee      	sub	sp, #440	; 0x1b8
 80024a8:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Sine Wave Menu---  \r\n\r\n"
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <Print_Menu_Sin+0x38>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	4611      	mov	r1, r2
 80024b2:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 80024b6:	461a      	mov	r2, r3
 80024b8:	f003 ffba 	bl	8006430 <memcpy>
			  "Parameter_High Volt (0-3.3V)\r\n"
			  "__press [w] for High Volt + 0.1V\r\n"
			  "__press [r] for High Volt - 0.1V\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fe8e 	bl	80001e0 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	1d39      	adds	r1, r7, #4
 80024ca:	2364      	movs	r3, #100	; 0x64
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <Print_Menu_Sin+0x3c>)
 80024ce:	f003 f89a 	bl	8005606 <HAL_UART_Transmit>
}
 80024d2:	bf00      	nop
 80024d4:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	0800b0f8 	.word	0x0800b0f8
 80024e0:	200004b8 	.word	0x200004b8

080024e4 <Print_Menu_Squ>:

void Print_Menu_Squ()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80024ea:	af00      	add	r7, sp, #0
	  char Menu[]="\r\n  ---Square Wave Menu---  \r\n\r\n"
 80024ec:	463b      	mov	r3, r7
 80024ee:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <Print_Menu_Squ+0x3c>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	4611      	mov	r1, r2
 80024f4:	f240 2317 	movw	r3, #535	; 0x217
 80024f8:	461a      	mov	r2, r3
 80024fa:	f003 ff99 	bl	8006430 <memcpy>
			  "Parameter_specific (0-100%)\r\n"
			  "__press [j] for duty cycle + 10%\r\n"
			  "__press [l] for duty cycle - 10%\r\n"

			  "\r\n-----------------------------\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu),100);
 80024fe:	463b      	mov	r3, r7
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd fe6d 	bl	80001e0 <strlen>
 8002506:	4603      	mov	r3, r0
 8002508:	b29a      	uxth	r2, r3
 800250a:	4639      	mov	r1, r7
 800250c:	2364      	movs	r3, #100	; 0x64
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <Print_Menu_Squ+0x40>)
 8002510:	f003 f879 	bl	8005606 <HAL_UART_Transmit>
}
 8002514:	bf00      	nop
 8002516:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	0800b2ac 	.word	0x0800b2ac
 8002524:	200004b8 	.word	0x200004b8

08002528 <Print_fq>:

void Print_fq()
{
 8002528:	b598      	push	{r3, r4, r7, lr}
 800252a:	af00      	add	r7, sp, #0
//	  Period = (1.0/Freq)*1000.0 ;		//millisecond
//	  Half_Period = Period/2.0 ;

      //char fq[]= ("frequency of LED is: %d \r\n", Freq);
	  sprintf(fq, "frequency of LED is: %.1f \r\n", Freq);
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <Print_fq+0x38>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f811 	bl	8000558 <__aeabi_f2d>
 8002536:	4603      	mov	r3, r0
 8002538:	460c      	mov	r4, r1
 800253a:	461a      	mov	r2, r3
 800253c:	4623      	mov	r3, r4
 800253e:	4909      	ldr	r1, [pc, #36]	; (8002564 <Print_fq+0x3c>)
 8002540:	4809      	ldr	r0, [pc, #36]	; (8002568 <Print_fq+0x40>)
 8002542:	f004 fdcd 	bl	80070e0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)fq, strlen(fq),100);
 8002546:	4808      	ldr	r0, [pc, #32]	; (8002568 <Print_fq+0x40>)
 8002548:	f7fd fe4a 	bl	80001e0 <strlen>
 800254c:	4603      	mov	r3, r0
 800254e:	b29a      	uxth	r2, r3
 8002550:	2364      	movs	r3, #100	; 0x64
 8002552:	4905      	ldr	r1, [pc, #20]	; (8002568 <Print_fq+0x40>)
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <Print_fq+0x44>)
 8002556:	f003 f856 	bl	8005606 <HAL_UART_Transmit>

}
 800255a:	bf00      	nop
 800255c:	bd98      	pop	{r3, r4, r7, pc}
 800255e:	bf00      	nop
 8002560:	20000004 	.word	0x20000004
 8002564:	0800b4c4 	.word	0x0800b4c4
 8002568:	2000027c 	.word	0x2000027c
 800256c:	200004b8 	.word	0x200004b8

08002570 <Print_Error>:

void Print_Error()
{
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
	  char Eror[]="Error : Out of choice\r\n";
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <Print_Error+0x38>)
 8002578:	463c      	mov	r4, r7
 800257a:	461d      	mov	r5, r3
 800257c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002580:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002584:	e884 0003 	stmia.w	r4, {r0, r1}
	  HAL_UART_Transmit(&huart2, (uint8_t*)Eror, strlen(Eror),100);
 8002588:	463b      	mov	r3, r7
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd fe28 	bl	80001e0 <strlen>
 8002590:	4603      	mov	r3, r0
 8002592:	b29a      	uxth	r2, r3
 8002594:	4639      	mov	r1, r7
 8002596:	2364      	movs	r3, #100	; 0x64
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <Print_Error+0x3c>)
 800259a:	f003 f834 	bl	8005606 <HAL_UART_Transmit>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bdb0      	pop	{r4, r5, r7, pc}
 80025a6:	bf00      	nop
 80025a8:	0800b4e4 	.word	0x0800b4e4
 80025ac:	200004b8 	.word	0x200004b8

080025b0 <Print_Slope>:

void Print_Slope()
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
	if (Slope == 1)
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <Print_Slope+0x64>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d116      	bne.n	80025ec <Print_Slope+0x3c>
	{
		char D[]="Slope Up\r\n";
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <Print_Slope+0x68>)
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80025c6:	c303      	stmia	r3!, {r0, r1}
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	3302      	adds	r3, #2
 80025cc:	0c12      	lsrs	r2, r2, #16
 80025ce:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd fe03 	bl	80001e0 <strlen>
 80025da:	4603      	mov	r3, r0
 80025dc:	b29a      	uxth	r2, r3
 80025de:	f107 0114 	add.w	r1, r7, #20
 80025e2:	2364      	movs	r3, #100	; 0x64
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <Print_Slope+0x6c>)
 80025e6:	f003 f80e 	bl	8005606 <HAL_UART_Transmit>
	{
		char D[]="Slope Down\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
	}

}
 80025ea:	e00f      	b.n	800260c <Print_Slope+0x5c>
		char D[]="Slope Down\r\n";
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <Print_Slope+0x70>)
 80025ee:	1d3c      	adds	r4, r7, #4
 80025f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f2:	c407      	stmia	r4!, {r0, r1, r2}
 80025f4:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)D, strlen(D),100);
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd fdf1 	bl	80001e0 <strlen>
 80025fe:	4603      	mov	r3, r0
 8002600:	b29a      	uxth	r2, r3
 8002602:	1d39      	adds	r1, r7, #4
 8002604:	2364      	movs	r3, #100	; 0x64
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <Print_Slope+0x6c>)
 8002608:	f002 fffd 	bl	8005606 <HAL_UART_Transmit>
}
 800260c:	bf00      	nop
 800260e:	3724      	adds	r7, #36	; 0x24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}
 8002614:	2000000c 	.word	0x2000000c
 8002618:	0800b4fc 	.word	0x0800b4fc
 800261c:	200004b8 	.word	0x200004b8
 8002620:	0800b508 	.word	0x0800b508

08002624 <Print_Duty>:

void Print_Duty()
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	  sprintf(Duty, "Duty cycle is: %d% \r\n",duty);
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <Print_Duty+0x2c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4909      	ldr	r1, [pc, #36]	; (8002654 <Print_Duty+0x30>)
 8002630:	4809      	ldr	r0, [pc, #36]	; (8002658 <Print_Duty+0x34>)
 8002632:	f004 fd55 	bl	80070e0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)Duty, strlen(Duty),100);
 8002636:	4808      	ldr	r0, [pc, #32]	; (8002658 <Print_Duty+0x34>)
 8002638:	f7fd fdd2 	bl	80001e0 <strlen>
 800263c:	4603      	mov	r3, r0
 800263e:	b29a      	uxth	r2, r3
 8002640:	2364      	movs	r3, #100	; 0x64
 8002642:	4905      	ldr	r1, [pc, #20]	; (8002658 <Print_Duty+0x34>)
 8002644:	4805      	ldr	r0, [pc, #20]	; (800265c <Print_Duty+0x38>)
 8002646:	f002 ffde 	bl	8005606 <HAL_UART_Transmit>
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000010 	.word	0x20000010
 8002654:	0800b518 	.word	0x0800b518
 8002658:	200002dc 	.word	0x200002dc
 800265c:	200004b8 	.word	0x200004b8

08002660 <Print_Volt>:

void Print_Volt()
{
 8002660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002662:	b083      	sub	sp, #12
 8002664:	af02      	add	r7, sp, #8
	  sprintf(Volt, "Low Volt is: %.1f \r\n"
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <Print_Volt+0x50>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff74 	bl	8000558 <__aeabi_f2d>
 8002670:	4605      	mov	r5, r0
 8002672:	460e      	mov	r6, r1
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <Print_Volt+0x54>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff6d 	bl	8000558 <__aeabi_f2d>
 800267e:	4603      	mov	r3, r0
 8002680:	460c      	mov	r4, r1
 8002682:	e9cd 3400 	strd	r3, r4, [sp]
 8002686:	462a      	mov	r2, r5
 8002688:	4633      	mov	r3, r6
 800268a:	490b      	ldr	r1, [pc, #44]	; (80026b8 <Print_Volt+0x58>)
 800268c:	480b      	ldr	r0, [pc, #44]	; (80026bc <Print_Volt+0x5c>)
 800268e:	f004 fd27 	bl	80070e0 <siprintf>
			  	  	"High Volt is: %.1f \r\n", L_Volt,H_Volt);
	  HAL_UART_Transmit(&huart2, (uint8_t*)Volt, strlen(Volt),100);
 8002692:	480a      	ldr	r0, [pc, #40]	; (80026bc <Print_Volt+0x5c>)
 8002694:	f7fd fda4 	bl	80001e0 <strlen>
 8002698:	4603      	mov	r3, r0
 800269a:	b29a      	uxth	r2, r3
 800269c:	2364      	movs	r3, #100	; 0x64
 800269e:	4907      	ldr	r1, [pc, #28]	; (80026bc <Print_Volt+0x5c>)
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <Print_Volt+0x60>)
 80026a2:	f002 ffb0 	bl	8005606 <HAL_UART_Transmit>
}
 80026a6:	bf00      	nop
 80026a8:	3704      	adds	r7, #4
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000228 	.word	0x20000228
 80026b4:	20000008 	.word	0x20000008
 80026b8:	0800b530 	.word	0x0800b530
 80026bc:	2000029c 	.word	0x2000029c
 80026c0:	200004b8 	.word	0x200004b8

080026c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80026ca:	e7fe      	b.n	80026ca <Error_Handler+0x6>

080026cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <HAL_MspInit+0x4c>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_MspInit+0x4c>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_MspInit+0x4c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a08      	ldr	r2, [pc, #32]	; (8002718 <HAL_MspInit+0x4c>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_MspInit+0x4c>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800270a:	2007      	movs	r0, #7
 800270c:	f000 ff3c 	bl	8003588 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <HAL_ADC_MspInit+0xdc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d157      	bne.n	80027ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <HAL_ADC_MspInit+0xe0>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a2d      	ldr	r2, [pc, #180]	; (80027fc <HAL_ADC_MspInit+0xe0>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_ADC_MspInit+0xe0>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_ADC_MspInit+0xe0>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_ADC_MspInit+0xe0>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_ADC_MspInit+0xe0>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002776:	2301      	movs	r3, #1
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277a:	2303      	movs	r3, #3
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	481d      	ldr	r0, [pc, #116]	; (8002800 <HAL_ADC_MspInit+0xe4>)
 800278a:	f001 facf 	bl	8003d2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <HAL_ADC_MspInit+0xec>)
 8002792:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 8002796:	2200      	movs	r2, #0
 8002798:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027d2:	480c      	ldr	r0, [pc, #48]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027d4:	f000 ff1a 	bl	800360c <HAL_DMA_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027de:	f7ff ff71 	bl	80026c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027e6:	639a      	str	r2, [r3, #56]	; 0x38
 80027e8:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_ADC_MspInit+0xe8>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027ee:	bf00      	nop
 80027f0:	3728      	adds	r7, #40	; 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40012000 	.word	0x40012000
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020000 	.word	0x40020000
 8002804:	20000458 	.word	0x20000458
 8002808:	40026410 	.word	0x40026410

0800280c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_SPI_MspInit+0x94>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d133      	bne.n	8002896 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <HAL_SPI_MspInit+0x98>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_SPI_MspInit+0x98>)
 8002838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_SPI_MspInit+0x98>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_SPI_MspInit+0x98>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <HAL_SPI_MspInit+0x98>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_SPI_MspInit+0x98>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002866:	2338      	movs	r3, #56	; 0x38
 8002868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002876:	2306      	movs	r3, #6
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	4809      	ldr	r0, [pc, #36]	; (80028a8 <HAL_SPI_MspInit+0x9c>)
 8002882:	f001 fa53 	bl	8003d2c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	2033      	movs	r0, #51	; 0x33
 800288c:	f000 fe87 	bl	800359e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002890:	2033      	movs	r0, #51	; 0x33
 8002892:	f000 fea0 	bl	80035d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3728      	adds	r7, #40	; 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40003c00 	.word	0x40003c00
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020400 	.word	0x40020400

080028ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a15      	ldr	r2, [pc, #84]	; (8002910 <HAL_TIM_Base_MspInit+0x64>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80028da:	e012      	b.n	8002902 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <HAL_TIM_Base_MspInit+0x6c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10d      	bne.n	8002902 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40000400 	.word	0x40000400
 8002914:	40023800 	.word	0x40023800
 8002918:	40014800 	.word	0x40014800

0800291c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <HAL_UART_MspInit+0x94>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d133      	bne.n	80029a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_UART_MspInit+0x98>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_UART_MspInit+0x98>)
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_UART_MspInit+0x98>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_UART_MspInit+0x98>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <HAL_UART_MspInit+0x98>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_UART_MspInit+0x98>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002976:	230c      	movs	r3, #12
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002986:	2307      	movs	r3, #7
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4809      	ldr	r0, [pc, #36]	; (80029b8 <HAL_UART_MspInit+0x9c>)
 8002992:	f001 f9cb 	bl	8003d2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2026      	movs	r0, #38	; 0x26
 800299c:	f000 fdff 	bl	800359e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029a0:	2026      	movs	r0, #38	; 0x26
 80029a2:	f000 fe18 	bl	80035d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <NMI_Handler+0x4>

080029c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <HardFault_Handler+0x4>

080029c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <MemManage_Handler+0x4>

080029ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <UsageFault_Handler+0x4>

080029da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 f8e8 	bl	8002bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <USART2_IRQHandler+0x10>)
 8002a16:	f002 fee5 	bl	80057e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200004b8 	.word	0x200004b8

08002a24 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <SPI3_IRQHandler+0x10>)
 8002a2a:	f002 f87b 	bl	8004b24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000378 	.word	0x20000378

08002a38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <DMA2_Stream0_IRQHandler+0x10>)
 8002a3e:	f000 ff0d 	bl	800385c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000458 	.word	0x20000458

08002a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <_sbrk+0x5c>)
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <_sbrk+0x60>)
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <_sbrk+0x64>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <_sbrk+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a7c:	f003 fcae 	bl	80063dc <__errno>
 8002a80:	4602      	mov	r2, r0
 8002a82:	230c      	movs	r3, #12
 8002a84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e009      	b.n	8002aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <_sbrk+0x64>)
 8002a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20020000 	.word	0x20020000
 8002aac:	00000400 	.word	0x00000400
 8002ab0:	2000032c 	.word	0x2000032c
 8002ab4:	20000500 	.word	0x20000500

08002ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <SystemInit+0x28>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <SystemInit+0x28>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <SystemInit+0x28>)
 8002ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ad2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ae8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002aea:	e003      	b.n	8002af4 <LoopCopyDataInit>

08002aec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002aee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002af0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002af2:	3104      	adds	r1, #4

08002af4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002af4:	480b      	ldr	r0, [pc, #44]	; (8002b24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002af8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002afa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002afc:	d3f6      	bcc.n	8002aec <CopyDataInit>
  ldr  r2, =_sbss
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b00:	e002      	b.n	8002b08 <LoopFillZerobss>

08002b02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b04:	f842 3b04 	str.w	r3, [r2], #4

08002b08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b0c:	d3f9      	bcc.n	8002b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b0e:	f7ff ffd3 	bl	8002ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b12:	f003 fc69 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b16:	f7fe fa3f 	bl	8000f98 <main>
  bx  lr    
 8002b1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b20:	0800ba18 	.word	0x0800ba18
  ldr  r0, =_sdata
 8002b24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b28:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002b2c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8002b30:	20000500 	.word	0x20000500

08002b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b34:	e7fe      	b.n	8002b34 <ADC_IRQHandler>
	...

08002b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_Init+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <HAL_Init+0x40>)
 8002b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <HAL_Init+0x40>)
 8002b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a07      	ldr	r2, [pc, #28]	; (8002b78 <HAL_Init+0x40>)
 8002b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b60:	2003      	movs	r0, #3
 8002b62:	f000 fd11 	bl	8003588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 f808 	bl	8002b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b6c:	f7ff fdae 	bl	80026cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00

08002b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_InitTick+0x54>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_InitTick+0x58>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fd29 	bl	80035f2 <HAL_SYSTICK_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00e      	b.n	8002bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b0f      	cmp	r3, #15
 8002bae:	d80a      	bhi.n	8002bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f000 fcf1 	bl	800359e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bbc:	4a06      	ldr	r2, [pc, #24]	; (8002bd8 <HAL_InitTick+0x5c>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000018 	.word	0x20000018
 8002bd4:	20000020 	.word	0x20000020
 8002bd8:	2000001c 	.word	0x2000001c

08002bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_IncTick+0x20>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_IncTick+0x24>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4413      	add	r3, r2
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_IncTick+0x24>)
 8002bee:	6013      	str	r3, [r2, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000020 	.word	0x20000020
 8002c00:	200004f8 	.word	0x200004f8

08002c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return uwTick;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_GetTick+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	200004f8 	.word	0x200004f8

08002c1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e033      	b.n	8002c9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fd6e 	bl	800271c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c62:	f023 0302 	bic.w	r3, r3, #2
 8002c66:	f043 0202 	orr.w	r2, r3, #2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa3c 	bl	80030ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8a:	e001      	b.n	8002c90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Start_DMA+0x1e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0b1      	b.n	8002e26 <HAL_ADC_Start_DMA+0x182>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d018      	beq.n	8002d0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce8:	4b51      	ldr	r3, [pc, #324]	; (8002e30 <HAL_ADC_Start_DMA+0x18c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a51      	ldr	r2, [pc, #324]	; (8002e34 <HAL_ADC_Start_DMA+0x190>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9a      	lsrs	r2, r3, #18
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f9      	bne.n	8002cfe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	f040 8085 	bne.w	8002e24 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d58:	d106      	bne.n	8002d68 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f023 0206 	bic.w	r2, r3, #6
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
 8002d66:	e002      	b.n	8002d6e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_ADC_Start_DMA+0x194>)
 8002d78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <HAL_ADC_Start_DMA+0x198>)
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <HAL_ADC_Start_DMA+0x19c>)
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <HAL_ADC_Start_DMA+0x1a0>)
 8002d90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002daa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	334c      	adds	r3, #76	; 0x4c
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f000 fccc 	bl	8003768 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10f      	bne.n	8002dfc <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11c      	bne.n	8002e24 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	e013      	b.n	8002e24 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <HAL_ADC_Start_DMA+0x1a4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10e      	bne.n	8002e24 <HAL_ADC_Start_DMA+0x180>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e22:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000018 	.word	0x20000018
 8002e34:	431bde83 	.word	0x431bde83
 8002e38:	40012300 	.word	0x40012300
 8002e3c:	080032e5 	.word	0x080032e5
 8002e40:	0800339f 	.word	0x0800339f
 8002e44:	080033bb 	.word	0x080033bb
 8002e48:	40012000 	.word	0x40012000

08002e4c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x1c>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e113      	b.n	80030cc <HAL_ADC_ConfigChannel+0x244>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d925      	bls.n	8002f00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68d9      	ldr	r1, [r3, #12]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b1e      	subs	r3, #30
 8002eca:	2207      	movs	r2, #7
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	400a      	ands	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68d9      	ldr	r1, [r3, #12]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	4603      	mov	r3, r0
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4403      	add	r3, r0
 8002ef2:	3b1e      	subs	r3, #30
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	e022      	b.n	8002f46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6919      	ldr	r1, [r3, #16]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	2207      	movs	r2, #7
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	400a      	ands	r2, r1
 8002f22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4403      	add	r3, r0
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d824      	bhi.n	8002f98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3b05      	subs	r3, #5
 8002f60:	221f      	movs	r2, #31
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	3b05      	subs	r3, #5
 8002f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	635a      	str	r2, [r3, #52]	; 0x34
 8002f96:	e04c      	b.n	8003032 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	d824      	bhi.n	8002fea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b23      	subs	r3, #35	; 0x23
 8002fb2:	221f      	movs	r2, #31
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b23      	subs	r3, #35	; 0x23
 8002fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe8:	e023      	b.n	8003032 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3b41      	subs	r3, #65	; 0x41
 8002ffc:	221f      	movs	r2, #31
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	400a      	ands	r2, r1
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	4618      	mov	r0, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	3b41      	subs	r3, #65	; 0x41
 8003026:	fa00 f203 	lsl.w	r2, r0, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_ADC_ConfigChannel+0x250>)
 8003034:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_ADC_ConfigChannel+0x254>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10f      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x1d8>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b12      	cmp	r3, #18
 8003046:	d10b      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_ADC_ConfigChannel+0x254>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d12b      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x23a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_ADC_ConfigChannel+0x258>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <HAL_ADC_ConfigChannel+0x1f4>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b11      	cmp	r3, #17
 800307a:	d122      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <HAL_ADC_ConfigChannel+0x258>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d111      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_ADC_ConfigChannel+0x25c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_ADC_ConfigChannel+0x260>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	0c9a      	lsrs	r2, r3, #18
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030b4:	e002      	b.n	80030bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f9      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40012300 	.word	0x40012300
 80030dc:	40012000 	.word	0x40012000
 80030e0:	10000012 	.word	0x10000012
 80030e4:	20000018 	.word	0x20000018
 80030e8:	431bde83 	.word	0x431bde83

080030ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f4:	4b79      	ldr	r3, [pc, #484]	; (80032dc <ADC_Init+0x1f0>)
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <ADC_Init+0x1f4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d022      	beq.n	80031ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003192:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6899      	ldr	r1, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e00f      	b.n	80031ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0202 	bic.w	r2, r2, #2
 80031f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7e1b      	ldrb	r3, [r3, #24]
 8003204:	005a      	lsls	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003226:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003236:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	3b01      	subs	r3, #1
 8003244:	035a      	lsls	r2, r3, #13
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	e007      	b.n	8003260 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	3b01      	subs	r3, #1
 800327c:	051a      	lsls	r2, r3, #20
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a2:	025a      	lsls	r2, r3, #9
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	029a      	lsls	r2, r3, #10
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40012300 	.word	0x40012300
 80032e0:	0f000001 	.word	0x0f000001

080032e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d13c      	bne.n	8003378 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d12b      	bne.n	8003370 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800331c:	2b00      	cmp	r3, #0
 800331e:	d127      	bne.n	8003370 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003338:	2b00      	cmp	r3, #0
 800333a:	d119      	bne.n	8003370 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0220 	bic.w	r2, r2, #32
 800334a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff fd6b 	bl	8002e4c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003376:	e00e      	b.n	8003396 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fd75 	bl	8002e74 <HAL_ADC_ErrorCallback>
}
 800338a:	e004      	b.n	8003396 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff fd57 	bl	8002e60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff fd4a 	bl	8002e74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <__NVIC_SetPriorityGrouping+0x44>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003404:	4013      	ands	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <__NVIC_SetPriorityGrouping+0x44>)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	60d3      	str	r3, [r2, #12]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <__NVIC_GetPriorityGrouping+0x18>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 0307 	and.w	r3, r3, #7
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db0b      	blt.n	8003476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4907      	ldr	r1, [pc, #28]	; (8003484 <__NVIC_EnableIRQ+0x38>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2001      	movs	r0, #1
 800346e:	fa00 f202 	lsl.w	r2, r0, r2
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000e100 	.word	0xe000e100

08003488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	2b00      	cmp	r3, #0
 800349a:	db0a      	blt.n	80034b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	490c      	ldr	r1, [pc, #48]	; (80034d4 <__NVIC_SetPriority+0x4c>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	440b      	add	r3, r1
 80034ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b0:	e00a      	b.n	80034c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4908      	ldr	r1, [pc, #32]	; (80034d8 <__NVIC_SetPriority+0x50>)
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	3b04      	subs	r3, #4
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	440b      	add	r3, r1
 80034c6:	761a      	strb	r2, [r3, #24]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000e100 	.word	0xe000e100
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f1c3 0307 	rsb	r3, r3, #7
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf28      	it	cs
 80034fa:	2304      	movcs	r3, #4
 80034fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3304      	adds	r3, #4
 8003502:	2b06      	cmp	r3, #6
 8003504:	d902      	bls.n	800350c <NVIC_EncodePriority+0x30>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3b03      	subs	r3, #3
 800350a:	e000      	b.n	800350e <NVIC_EncodePriority+0x32>
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	f04f 32ff 	mov.w	r2, #4294967295
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	401a      	ands	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003524:	f04f 31ff 	mov.w	r1, #4294967295
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43d9      	mvns	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	4313      	orrs	r3, r2
         );
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003554:	d301      	bcc.n	800355a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003556:	2301      	movs	r3, #1
 8003558:	e00f      	b.n	800357a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <SysTick_Config+0x40>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003562:	210f      	movs	r1, #15
 8003564:	f04f 30ff 	mov.w	r0, #4294967295
 8003568:	f7ff ff8e 	bl	8003488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <SysTick_Config+0x40>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003572:	4b04      	ldr	r3, [pc, #16]	; (8003584 <SysTick_Config+0x40>)
 8003574:	2207      	movs	r2, #7
 8003576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	e000e010 	.word	0xe000e010

08003588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff29 	bl	80033e8 <__NVIC_SetPriorityGrouping>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b0:	f7ff ff3e 	bl	8003430 <__NVIC_GetPriorityGrouping>
 80035b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff ff8e 	bl	80034dc <NVIC_EncodePriority>
 80035c0:	4602      	mov	r2, r0
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff5d 	bl	8003488 <__NVIC_SetPriority>
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff31 	bl	800344c <__NVIC_EnableIRQ>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ffa2 	bl	8003544 <SysTick_Config>
 8003600:	4603      	mov	r3, r0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff faf4 	bl	8002c04 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e099      	b.n	800375c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003648:	e00f      	b.n	800366a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800364a:	f7ff fadb 	bl	8002c04 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b05      	cmp	r3, #5
 8003656:	d908      	bls.n	800366a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e078      	b.n	800375c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e8      	bne.n	800364a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <HAL_DMA_Init+0x158>)
 8003684:	4013      	ands	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	4313      	orrs	r3, r2
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d117      	bne.n	800372e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00e      	beq.n	800372e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa91 	bl	8003c38 <DMA_CheckFifoParam>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800372a:	2301      	movs	r3, #1
 800372c:	e016      	b.n	800375c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fa48 	bl	8003bcc <DMA_CalcBaseAndBitshift>
 800373c:	4603      	mov	r3, r0
 800373e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	223f      	movs	r2, #63	; 0x3f
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	f010803f 	.word	0xf010803f

08003768 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_DMA_Start_IT+0x26>
 800378a:	2302      	movs	r3, #2
 800378c:	e040      	b.n	8003810 <HAL_DMA_Start_IT+0xa8>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d12f      	bne.n	8003802 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f9da 	bl	8003b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	223f      	movs	r2, #63	; 0x3f
 80037c2:	409a      	lsls	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0216 	orr.w	r2, r2, #22
 80037d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e005      	b.n	800380e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800380a:	2302      	movs	r3, #2
 800380c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800380e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d004      	beq.n	8003836 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e00c      	b.n	8003850 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2205      	movs	r2, #5
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003868:	4b92      	ldr	r3, [pc, #584]	; (8003ab4 <HAL_DMA_IRQHandler+0x258>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a92      	ldr	r2, [pc, #584]	; (8003ab8 <HAL_DMA_IRQHandler+0x25c>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	2208      	movs	r2, #8
 8003888:	409a      	lsls	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01a      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0204 	bic.w	r2, r2, #4
 80038ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	2208      	movs	r2, #8
 80038b6:	409a      	lsls	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 0201 	orr.w	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	2201      	movs	r2, #1
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d012      	beq.n	80038fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	2201      	movs	r2, #1
 80038ec:	409a      	lsls	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	2204      	movs	r2, #4
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d012      	beq.n	8003934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	2204      	movs	r2, #4
 8003922:	409a      	lsls	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f043 0204 	orr.w	r2, r3, #4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	2210      	movs	r2, #16
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d043      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d03c      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	2210      	movs	r2, #16
 8003958:	409a      	lsls	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d018      	beq.n	800399e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d024      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
 800398a:	e01f      	b.n	80039cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01b      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
 800399c:	e016      	b.n	80039cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0208 	bic.w	r2, r2, #8
 80039ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	2220      	movs	r2, #32
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 808e 	beq.w	8003afa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8086 	beq.w	8003afa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2220      	movs	r2, #32
 80039f4:	409a      	lsls	r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d136      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0216 	bic.w	r2, r2, #22
 8003a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_DMA_IRQHandler+0x1da>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0208 	bic.w	r2, r2, #8
 8003a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4a:	223f      	movs	r2, #63	; 0x3f
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d07d      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
        }
        return;
 8003a72:	e078      	b.n	8003b66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01c      	beq.n	8003abc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d030      	beq.n	8003afa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
 8003aa0:	e02b      	b.n	8003afa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d027      	beq.n	8003afa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
 8003ab2:	e022      	b.n	8003afa <HAL_DMA_IRQHandler+0x29e>
 8003ab4:	20000018 	.word	0x20000018
 8003ab8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0210 	bic.w	r2, r2, #16
 8003ad8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d032      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d022      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2205      	movs	r2, #5
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d307      	bcc.n	8003b42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f2      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x2ca>
 8003b40:	e000      	b.n	8003b44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
 8003b64:	e000      	b.n	8003b68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b66:	bf00      	nop
    }
  }
}
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop

08003b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d108      	bne.n	8003bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bae:	e007      	b.n	8003bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	3b10      	subs	r3, #16
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <DMA_CalcBaseAndBitshift+0x64>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003be6:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <DMA_CalcBaseAndBitshift+0x68>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d909      	bls.n	8003c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	1d1a      	adds	r2, r3, #4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c0c:	e007      	b.n	8003c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	aaaaaaab 	.word	0xaaaaaaab
 8003c34:	0800b574 	.word	0x0800b574

08003c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11f      	bne.n	8003c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d855      	bhi.n	8003d04 <DMA_CheckFifoParam+0xcc>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <DMA_CheckFifoParam+0x28>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c83 	.word	0x08003c83
 8003c68:	08003c71 	.word	0x08003c71
 8003c6c:	08003d05 	.word	0x08003d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d045      	beq.n	8003d08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c80:	e042      	b.n	8003d08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c8a:	d13f      	bne.n	8003d0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c90:	e03c      	b.n	8003d0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9a:	d121      	bne.n	8003ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d836      	bhi.n	8003d10 <DMA_CheckFifoParam+0xd8>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <DMA_CheckFifoParam+0x70>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cbf 	.word	0x08003cbf
 8003cb0:	08003cb9 	.word	0x08003cb9
 8003cb4:	08003cd1 	.word	0x08003cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e02f      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d024      	beq.n	8003d14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cce:	e021      	b.n	8003d14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd8:	d11e      	bne.n	8003d18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cde:	e01b      	b.n	8003d18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <DMA_CheckFifoParam+0xb4>
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d003      	beq.n	8003cf2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cea:	e018      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e015      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00e      	beq.n	8003d1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
      break;
 8003d02:	e00b      	b.n	8003d1c <DMA_CheckFifoParam+0xe4>
      break;
 8003d04:	bf00      	nop
 8003d06:	e00a      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      break;
 8003d08:	bf00      	nop
 8003d0a:	e008      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      break;
 8003d0c:	bf00      	nop
 8003d0e:	e006      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      break;
 8003d10:	bf00      	nop
 8003d12:	e004      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      break;
 8003d14:	bf00      	nop
 8003d16:	e002      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      break;   
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      break;
 8003d1c:	bf00      	nop
    }
  } 
  
  return status; 
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b089      	sub	sp, #36	; 0x24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	e159      	b.n	8003ffc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d48:	2201      	movs	r2, #1
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	f040 8148 	bne.w	8003ff6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d00b      	beq.n	8003d86 <HAL_GPIO_Init+0x5a>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d007      	beq.n	8003d86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d7a:	2b11      	cmp	r3, #17
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b12      	cmp	r3, #18
 8003d84:	d130      	bne.n	8003de8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	2203      	movs	r2, #3
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 0201 	and.w	r2, r3, #1
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2203      	movs	r2, #3
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0xfc>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b12      	cmp	r3, #18
 8003e26:	d123      	bne.n	8003e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	08da      	lsrs	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3208      	adds	r2, #8
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0203 	and.w	r2, r3, #3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a2 	beq.w	8003ff6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	4b56      	ldr	r3, [pc, #344]	; (8004010 <HAL_GPIO_Init+0x2e4>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	4a55      	ldr	r2, [pc, #340]	; (8004010 <HAL_GPIO_Init+0x2e4>)
 8003ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec2:	4b53      	ldr	r3, [pc, #332]	; (8004010 <HAL_GPIO_Init+0x2e4>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ece:	4a51      	ldr	r2, [pc, #324]	; (8004014 <HAL_GPIO_Init+0x2e8>)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	220f      	movs	r2, #15
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a48      	ldr	r2, [pc, #288]	; (8004018 <HAL_GPIO_Init+0x2ec>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d019      	beq.n	8003f2e <HAL_GPIO_Init+0x202>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a47      	ldr	r2, [pc, #284]	; (800401c <HAL_GPIO_Init+0x2f0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_GPIO_Init+0x1fe>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a46      	ldr	r2, [pc, #280]	; (8004020 <HAL_GPIO_Init+0x2f4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00d      	beq.n	8003f26 <HAL_GPIO_Init+0x1fa>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a45      	ldr	r2, [pc, #276]	; (8004024 <HAL_GPIO_Init+0x2f8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <HAL_GPIO_Init+0x1f6>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a44      	ldr	r2, [pc, #272]	; (8004028 <HAL_GPIO_Init+0x2fc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <HAL_GPIO_Init+0x1f2>
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	e008      	b.n	8003f30 <HAL_GPIO_Init+0x204>
 8003f1e:	2307      	movs	r3, #7
 8003f20:	e006      	b.n	8003f30 <HAL_GPIO_Init+0x204>
 8003f22:	2303      	movs	r3, #3
 8003f24:	e004      	b.n	8003f30 <HAL_GPIO_Init+0x204>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e002      	b.n	8003f30 <HAL_GPIO_Init+0x204>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_GPIO_Init+0x204>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	f002 0203 	and.w	r2, r2, #3
 8003f36:	0092      	lsls	r2, r2, #2
 8003f38:	4093      	lsls	r3, r2
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f40:	4934      	ldr	r1, [pc, #208]	; (8004014 <HAL_GPIO_Init+0x2e8>)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	3302      	adds	r3, #2
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f4e:	4b37      	ldr	r3, [pc, #220]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f72:	4a2e      	ldr	r2, [pc, #184]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f78:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f9c:	4a23      	ldr	r2, [pc, #140]	; (800402c <HAL_GPIO_Init+0x300>)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fa2:	4b22      	ldr	r3, [pc, #136]	; (800402c <HAL_GPIO_Init+0x300>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fc6:	4a19      	ldr	r2, [pc, #100]	; (800402c <HAL_GPIO_Init+0x300>)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <HAL_GPIO_Init+0x300>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff0:	4a0e      	ldr	r2, [pc, #56]	; (800402c <HAL_GPIO_Init+0x300>)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	f67f aea2 	bls.w	8003d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004004:	bf00      	nop
 8004006:	3724      	adds	r7, #36	; 0x24
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40023800 	.word	0x40023800
 8004014:	40013800 	.word	0x40013800
 8004018:	40020000 	.word	0x40020000
 800401c:	40020400 	.word	0x40020400
 8004020:	40020800 	.word	0x40020800
 8004024:	40020c00 	.word	0x40020c00
 8004028:	40021000 	.word	0x40021000
 800402c:	40013c00 	.word	0x40013c00

08004030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e001      	b.n	8004052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004052:	7bfb      	ldrb	r3, [r7, #15]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	807b      	strh	r3, [r7, #2]
 800406c:	4613      	mov	r3, r2
 800406e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004070:	787b      	ldrb	r3, [r7, #1]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800407c:	e003      	b.n	8004086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800407e:	887b      	ldrh	r3, [r7, #2]
 8004080:	041a      	lsls	r2, r3, #16
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	619a      	str	r2, [r3, #24]
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e25b      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d075      	beq.n	800419e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	4ba3      	ldr	r3, [pc, #652]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d00c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040be:	4ba0      	ldr	r3, [pc, #640]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d112      	bne.n	80040f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ca:	4b9d      	ldr	r3, [pc, #628]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d6:	d10b      	bne.n	80040f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	4b99      	ldr	r3, [pc, #612]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d05b      	beq.n	800419c <HAL_RCC_OscConfig+0x108>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d157      	bne.n	800419c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e236      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d106      	bne.n	8004108 <HAL_RCC_OscConfig+0x74>
 80040fa:	4b91      	ldr	r3, [pc, #580]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a90      	ldr	r2, [pc, #576]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e01d      	b.n	8004144 <HAL_RCC_OscConfig+0xb0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004110:	d10c      	bne.n	800412c <HAL_RCC_OscConfig+0x98>
 8004112:	4b8b      	ldr	r3, [pc, #556]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a8a      	ldr	r2, [pc, #552]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b88      	ldr	r3, [pc, #544]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a87      	ldr	r2, [pc, #540]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	e00b      	b.n	8004144 <HAL_RCC_OscConfig+0xb0>
 800412c:	4b84      	ldr	r3, [pc, #528]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a83      	ldr	r2, [pc, #524]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a80      	ldr	r2, [pc, #512]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fe fd5a 	bl	8002c04 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004154:	f7fe fd56 	bl	8002c04 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1fb      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b76      	ldr	r3, [pc, #472]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0xc0>
 8004172:	e014      	b.n	800419e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fe fd46 	bl	8002c04 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800417c:	f7fe fd42 	bl	8002c04 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1e7      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418e:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0xe8>
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d063      	beq.n	8004272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	4b65      	ldr	r3, [pc, #404]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b6:	4b62      	ldr	r3, [pc, #392]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d11c      	bne.n	80041fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b5f      	ldr	r3, [pc, #380]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d116      	bne.n	80041fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	4b5c      	ldr	r3, [pc, #368]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_RCC_OscConfig+0x152>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e1bb      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e6:	4b56      	ldr	r3, [pc, #344]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4952      	ldr	r1, [pc, #328]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	e03a      	b.n	8004272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d020      	beq.n	8004246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004204:	4b4f      	ldr	r3, [pc, #316]	; (8004344 <HAL_RCC_OscConfig+0x2b0>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fe fcfb 	bl	8002c04 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004212:	f7fe fcf7 	bl	8002c04 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e19c      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004224:	4b46      	ldr	r3, [pc, #280]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004230:	4b43      	ldr	r3, [pc, #268]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4940      	ldr	r1, [pc, #256]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]
 8004244:	e015      	b.n	8004272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004246:	4b3f      	ldr	r3, [pc, #252]	; (8004344 <HAL_RCC_OscConfig+0x2b0>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe fcda 	bl	8002c04 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004254:	f7fe fcd6 	bl	8002c04 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e17b      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d030      	beq.n	80042e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004286:	4b30      	ldr	r3, [pc, #192]	; (8004348 <HAL_RCC_OscConfig+0x2b4>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fe fcba 	bl	8002c04 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004294:	f7fe fcb6 	bl	8002c04 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e15b      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a6:	4b26      	ldr	r3, [pc, #152]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x200>
 80042b2:	e015      	b.n	80042e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCC_OscConfig+0x2b4>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ba:	f7fe fca3 	bl	8002c04 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c2:	f7fe fc9f 	bl	8002c04 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e144      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a0 	beq.w	800442e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f2:	4b13      	ldr	r3, [pc, #76]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10f      	bne.n	800431e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430c:	6413      	str	r3, [r2, #64]	; 0x40
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_OscConfig+0x2b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d121      	bne.n	800436e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_RCC_OscConfig+0x2b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a07      	ldr	r2, [pc, #28]	; (800434c <HAL_RCC_OscConfig+0x2b8>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004336:	f7fe fc65 	bl	8002c04 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	e011      	b.n	8004362 <HAL_RCC_OscConfig+0x2ce>
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800
 8004344:	42470000 	.word	0x42470000
 8004348:	42470e80 	.word	0x42470e80
 800434c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fe fc58 	bl	8002c04 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0fd      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b81      	ldr	r3, [pc, #516]	; (8004568 <HAL_RCC_OscConfig+0x4d4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d106      	bne.n	8004384 <HAL_RCC_OscConfig+0x2f0>
 8004376:	4b7d      	ldr	r3, [pc, #500]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a7c      	ldr	r2, [pc, #496]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6713      	str	r3, [r2, #112]	; 0x70
 8004382:	e01c      	b.n	80043be <HAL_RCC_OscConfig+0x32a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d10c      	bne.n	80043a6 <HAL_RCC_OscConfig+0x312>
 800438c:	4b77      	ldr	r3, [pc, #476]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a76      	ldr	r2, [pc, #472]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004392:	f043 0304 	orr.w	r3, r3, #4
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	4b74      	ldr	r3, [pc, #464]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a73      	ldr	r2, [pc, #460]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
 80043a4:	e00b      	b.n	80043be <HAL_RCC_OscConfig+0x32a>
 80043a6:	4b71      	ldr	r3, [pc, #452]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	4a70      	ldr	r2, [pc, #448]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
 80043b2:	4b6e      	ldr	r3, [pc, #440]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a6d      	ldr	r2, [pc, #436]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d015      	beq.n	80043f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fe fc1d 	bl	8002c04 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fe fc19 	bl	8002c04 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0bc      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	4b61      	ldr	r3, [pc, #388]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ee      	beq.n	80043ce <HAL_RCC_OscConfig+0x33a>
 80043f0:	e014      	b.n	800441c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fe fc07 	bl	8002c04 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fe fc03 	bl	8002c04 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0a6      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004410:	4b56      	ldr	r3, [pc, #344]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ee      	bne.n	80043fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d105      	bne.n	800442e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004422:	4b52      	ldr	r3, [pc, #328]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a51      	ldr	r2, [pc, #324]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8092 	beq.w	800455c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004438:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d05c      	beq.n	80044fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d141      	bne.n	80044d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444c:	4b48      	ldr	r3, [pc, #288]	; (8004570 <HAL_RCC_OscConfig+0x4dc>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fe fbd7 	bl	8002c04 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445a:	f7fe fbd3 	bl	8002c04 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e078      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446c:	4b3f      	ldr	r3, [pc, #252]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	019b      	lsls	r3, r3, #6
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	3b01      	subs	r3, #1
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	061b      	lsls	r3, r3, #24
 800449c:	4933      	ldr	r1, [pc, #204]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a2:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_RCC_OscConfig+0x4dc>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fe fbac 	bl	8002c04 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fe fba8 	bl	8002c04 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e04d      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c2:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x41c>
 80044ce:	e045      	b.n	800455c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x4dc>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fe fb95 	bl	8002c04 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044de:	f7fe fb91 	bl	8002c04 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e036      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x44a>
 80044fc:	e02e      	b.n	800455c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e029      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	429a      	cmp	r2, r3
 800451c:	d11c      	bne.n	8004558 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d115      	bne.n	8004558 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004538:	4293      	cmp	r3, r2
 800453a:	d10d      	bne.n	8004558 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d106      	bne.n	8004558 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40007000 	.word	0x40007000
 800456c:	40023800 	.word	0x40023800
 8004570:	42470060 	.word	0x42470060

08004574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0cc      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b68      	ldr	r3, [pc, #416]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d90c      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b65      	ldr	r3, [pc, #404]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b63      	ldr	r3, [pc, #396]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0b8      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c8:	4b59      	ldr	r3, [pc, #356]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a58      	ldr	r2, [pc, #352]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e0:	4b53      	ldr	r3, [pc, #332]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ec:	4b50      	ldr	r3, [pc, #320]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	494d      	ldr	r1, [pc, #308]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d044      	beq.n	8004694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	4b47      	ldr	r3, [pc, #284]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d119      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d003      	beq.n	8004632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462e:	2b03      	cmp	r3, #3
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b3f      	ldr	r3, [pc, #252]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e06f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	4b3b      	ldr	r3, [pc, #236]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e067      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004652:	4b37      	ldr	r3, [pc, #220]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 0203 	bic.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4934      	ldr	r1, [pc, #208]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004664:	f7fe face 	bl	8002c04 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	e00a      	b.n	8004682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fe faca 	bl	8002c04 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e04f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 020c 	and.w	r2, r3, #12
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	429a      	cmp	r2, r3
 8004692:	d1eb      	bne.n	800466c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d20c      	bcs.n	80046bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e032      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4916      	ldr	r1, [pc, #88]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	490e      	ldr	r1, [pc, #56]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046fa:	f000 f821 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046fe:	4601      	mov	r1, r0
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	5cd3      	ldrb	r3, [r2, r3]
 800470e:	fa21 f303 	lsr.w	r3, r1, r3
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fa2e 	bl	8002b7c <HAL_InitTick>

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023c00 	.word	0x40023c00
 8004730:	40023800 	.word	0x40023800
 8004734:	0800b55c 	.word	0x0800b55c
 8004738:	20000018 	.word	0x20000018
 800473c:	2000001c 	.word	0x2000001c

08004740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	2300      	movs	r3, #0
 8004750:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004756:	4b63      	ldr	r3, [pc, #396]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b04      	cmp	r3, #4
 8004760:	d007      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x32>
 8004762:	2b08      	cmp	r3, #8
 8004764:	d008      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x38>
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 80b4 	bne.w	80048d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800476e:	60bb      	str	r3, [r7, #8]
       break;
 8004770:	e0b3      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004772:	4b5e      	ldr	r3, [pc, #376]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004774:	60bb      	str	r3, [r7, #8]
      break;
 8004776:	e0b0      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004778:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004780:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004782:	4b58      	ldr	r3, [pc, #352]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04a      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478e:	4b55      	ldr	r3, [pc, #340]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	f04f 0400 	mov.w	r4, #0
 8004798:	f240 11ff 	movw	r1, #511	; 0x1ff
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	ea03 0501 	and.w	r5, r3, r1
 80047a4:	ea04 0602 	and.w	r6, r4, r2
 80047a8:	4629      	mov	r1, r5
 80047aa:	4632      	mov	r2, r6
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	0154      	lsls	r4, r2, #5
 80047b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047ba:	014b      	lsls	r3, r1, #5
 80047bc:	4619      	mov	r1, r3
 80047be:	4622      	mov	r2, r4
 80047c0:	1b49      	subs	r1, r1, r5
 80047c2:	eb62 0206 	sbc.w	r2, r2, r6
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	f04f 0400 	mov.w	r4, #0
 80047ce:	0194      	lsls	r4, r2, #6
 80047d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047d4:	018b      	lsls	r3, r1, #6
 80047d6:	1a5b      	subs	r3, r3, r1
 80047d8:	eb64 0402 	sbc.w	r4, r4, r2
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	00e2      	lsls	r2, r4, #3
 80047e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047ea:	00d9      	lsls	r1, r3, #3
 80047ec:	460b      	mov	r3, r1
 80047ee:	4614      	mov	r4, r2
 80047f0:	195b      	adds	r3, r3, r5
 80047f2:	eb44 0406 	adc.w	r4, r4, r6
 80047f6:	f04f 0100 	mov.w	r1, #0
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	0262      	lsls	r2, r4, #9
 8004800:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004804:	0259      	lsls	r1, r3, #9
 8004806:	460b      	mov	r3, r1
 8004808:	4614      	mov	r4, r2
 800480a:	4618      	mov	r0, r3
 800480c:	4621      	mov	r1, r4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f04f 0400 	mov.w	r4, #0
 8004814:	461a      	mov	r2, r3
 8004816:	4623      	mov	r3, r4
 8004818:	f7fc fa3e 	bl	8000c98 <__aeabi_uldivmod>
 800481c:	4603      	mov	r3, r0
 800481e:	460c      	mov	r4, r1
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e049      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004824:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	f04f 0400 	mov.w	r4, #0
 800482e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	ea03 0501 	and.w	r5, r3, r1
 800483a:	ea04 0602 	and.w	r6, r4, r2
 800483e:	4629      	mov	r1, r5
 8004840:	4632      	mov	r2, r6
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	f04f 0400 	mov.w	r4, #0
 800484a:	0154      	lsls	r4, r2, #5
 800484c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004850:	014b      	lsls	r3, r1, #5
 8004852:	4619      	mov	r1, r3
 8004854:	4622      	mov	r2, r4
 8004856:	1b49      	subs	r1, r1, r5
 8004858:	eb62 0206 	sbc.w	r2, r2, r6
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	f04f 0400 	mov.w	r4, #0
 8004864:	0194      	lsls	r4, r2, #6
 8004866:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800486a:	018b      	lsls	r3, r1, #6
 800486c:	1a5b      	subs	r3, r3, r1
 800486e:	eb64 0402 	sbc.w	r4, r4, r2
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	00e2      	lsls	r2, r4, #3
 800487c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004880:	00d9      	lsls	r1, r3, #3
 8004882:	460b      	mov	r3, r1
 8004884:	4614      	mov	r4, r2
 8004886:	195b      	adds	r3, r3, r5
 8004888:	eb44 0406 	adc.w	r4, r4, r6
 800488c:	f04f 0100 	mov.w	r1, #0
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	02a2      	lsls	r2, r4, #10
 8004896:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800489a:	0299      	lsls	r1, r3, #10
 800489c:	460b      	mov	r3, r1
 800489e:	4614      	mov	r4, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	4621      	mov	r1, r4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f04f 0400 	mov.w	r4, #0
 80048aa:	461a      	mov	r2, r3
 80048ac:	4623      	mov	r3, r4
 80048ae:	f7fc f9f3 	bl	8000c98 <__aeabi_uldivmod>
 80048b2:	4603      	mov	r3, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	60bb      	str	r3, [r7, #8]
      break;
 80048d2:	e002      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048d6:	60bb      	str	r3, [r7, #8]
      break;
 80048d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048da:	68bb      	ldr	r3, [r7, #8]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	007a1200 	.word	0x007a1200

080048f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f4:	4b03      	ldr	r3, [pc, #12]	; (8004904 <HAL_RCC_GetHCLKFreq+0x14>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000018 	.word	0x20000018

08004908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800490c:	f7ff fff0 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004910:	4601      	mov	r1, r0
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0a9b      	lsrs	r3, r3, #10
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4a03      	ldr	r2, [pc, #12]	; (800492c <HAL_RCC_GetPCLK1Freq+0x24>)
 800491e:	5cd3      	ldrb	r3, [r2, r3]
 8004920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	0800b56c 	.word	0x0800b56c

08004930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004934:	f7ff ffdc 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004938:	4601      	mov	r1, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	0b5b      	lsrs	r3, r3, #13
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4a03      	ldr	r2, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40023800 	.word	0x40023800
 8004954:	0800b56c 	.word	0x0800b56c

08004958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e056      	b.n	8004a18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fd ff41 	bl	800280c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	ea42 0103 	orr.w	r1, r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 0104 	and.w	r1, r3, #4
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_SPI_Transmit_IT+0x20>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e067      	b.n	8004b10 <HAL_SPI_Transmit_IT+0xf0>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Transmit_IT+0x34>
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a58:	e055      	b.n	8004b06 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a6a:	e04c      	b.n	8004b06 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2203      	movs	r2, #3
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a1b      	ldr	r2, [pc, #108]	; (8004b1c <HAL_SPI_Transmit_IT+0xfc>)
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ab2:	e002      	b.n	8004aba <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <HAL_SPI_Transmit_IT+0x100>)
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac2:	d107      	bne.n	8004ad4 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004ae2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	d008      	beq.n	8004b04 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e000      	b.n	8004b06 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004b04:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	08004da7 	.word	0x08004da7
 8004b20:	08004d61 	.word	0x08004d61

08004b24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	099b      	lsrs	r3, r3, #6
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
    return;
 8004b66:	e0d8      	b.n	8004d1a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_SPI_IRQHandler+0x66>
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	09db      	lsrs	r3, r3, #7
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
    return;
 8004b88:	e0c7      	b.n	8004d1a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <HAL_SPI_IRQHandler+0x8c>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	099b      	lsrs	r3, r3, #6
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80b5 	beq.w	8004d1a <HAL_SPI_IRQHandler+0x1f6>
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80ae 	beq.w	8004d1a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d023      	beq.n	8004c12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d011      	beq.n	8004bfa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bda:	f043 0204 	orr.w	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	e00b      	b.n	8004c12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]
        return;
 8004c10:	e083      	b.n	8004d1a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d014      	beq.n	8004c48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f043 0208 	orr.w	r2, r3, #8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c60:	2300      	movs	r3, #0
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d050      	beq.n	8004d18 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <HAL_SPI_IRQHandler+0x17e>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d034      	beq.n	8004d0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0203 	bic.w	r2, r2, #3
 8004cb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d011      	beq.n	8004cde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <HAL_SPI_IRQHandler+0x1fc>)
 8004cc0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fda6 	bl	8003818 <HAL_DMA_Abort_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <HAL_SPI_IRQHandler+0x1fc>)
 8004cec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe fd90 	bl	8003818 <HAL_DMA_Abort_IT>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004d0a:	e003      	b.n	8004d14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f809 	bl	8004d24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d12:	e000      	b.n	8004d16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004d14:	bf00      	nop
    return;
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
  }
}
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	08004d39 	.word	0x08004d39

08004d24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff ffe6 	bl	8004d24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	7812      	ldrb	r2, [r2, #0]
 8004d74:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f8d3 	bl	8004f44 <SPI_CloseTx_ISR>
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f8b1 	bl	8004f44 <SPI_CloseTx_ISR>
  }
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dfa:	e04c      	b.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d048      	beq.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e04:	f7fd fefe 	bl	8002c04 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d902      	bls.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d13d      	bne.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e32:	d111      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3c:	d004      	beq.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e46:	d107      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e60:	d10f      	bne.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e00f      	b.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	bf0c      	ite	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	2300      	movne	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d1a3      	bne.n	8004dfc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <SPI_EndRxTxTransaction+0x7c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <SPI_EndRxTxTransaction+0x80>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	0d5b      	lsrs	r3, r3, #21
 8004ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eea:	d112      	bne.n	8004f12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff ff77 	bl	8004dea <SPI_WaitFlagStateUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	f043 0220 	orr.w	r2, r3, #32
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e00f      	b.n	8004f32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d0f2      	beq.n	8004f12 <SPI_EndRxTxTransaction+0x52>
 8004f2c:	e000      	b.n	8004f30 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f2e:	bf00      	nop
  }

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000018 	.word	0x20000018
 8004f40:	165e9f81 	.word	0x165e9f81

08004f44 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004f4c:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <SPI_CloseTx_ISR+0xbc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <SPI_CloseTx_ISR+0xc0>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0a5b      	lsrs	r3, r3, #9
 8004f58:	2264      	movs	r2, #100	; 0x64
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f60:	f7fd fe50 	bl	8002c04 <HAL_GetTick>
 8004f64:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	f043 0220 	orr.w	r2, r3, #32
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f78:	e009      	b.n	8004f8e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0eb      	beq.n	8004f66 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	2164      	movs	r1, #100	; 0x64
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff ff8c 	bl	8004ec0 <SPI_EndRxTxTransaction>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fe9b 	bl	8004d24 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004fee:	e002      	b.n	8004ff6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fd f9bd 	bl	8002370 <HAL_SPI_TxCpltCallback>
}
 8004ff6:	bf00      	nop
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000018 	.word	0x20000018
 8005004:	057619f1 	.word	0x057619f1

08005008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e01d      	b.n	8005056 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fd fc3c 	bl	80028ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f000 f908 	bl	800525c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b06      	cmp	r3, #6
 800507e:	d007      	beq.n	8005090 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	d007      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_TIM_ConfigClockSource+0x18>
 8005102:	2302      	movs	r3, #2
 8005104:	e0a6      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x166>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005124:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d067      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x120>
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d80b      	bhi.n	800515a <HAL_TIM_ConfigClockSource+0x6c>
 8005142:	2b10      	cmp	r3, #16
 8005144:	d073      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x140>
 8005146:	2b10      	cmp	r3, #16
 8005148:	d802      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x62>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d06f      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800514e:	e078      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005150:	2b20      	cmp	r3, #32
 8005152:	d06c      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x140>
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	d06a      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005158:	e073      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800515a:	2b70      	cmp	r3, #112	; 0x70
 800515c:	d00d      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x8c>
 800515e:	2b70      	cmp	r3, #112	; 0x70
 8005160:	d804      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x7e>
 8005162:	2b50      	cmp	r3, #80	; 0x50
 8005164:	d033      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0xe0>
 8005166:	2b60      	cmp	r3, #96	; 0x60
 8005168:	d041      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0x100>
      break;
 800516a:	e06a      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d066      	beq.n	8005240 <HAL_TIM_ConfigClockSource+0x152>
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005176:	d017      	beq.n	80051a8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005178:	e063      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6899      	ldr	r1, [r3, #8]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f000 f961 	bl	8005450 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800519c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	609a      	str	r2, [r3, #8]
      break;
 80051a6:	e04c      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	6899      	ldr	r1, [r3, #8]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f000 f94a 	bl	8005450 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ca:	609a      	str	r2, [r3, #8]
      break;
 80051cc:	e039      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6859      	ldr	r1, [r3, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	461a      	mov	r2, r3
 80051dc:	f000 f8be 	bl	800535c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2150      	movs	r1, #80	; 0x50
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f917 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 80051ec:	e029      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6859      	ldr	r1, [r3, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f000 f8dd 	bl	80053ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2160      	movs	r1, #96	; 0x60
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f907 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 800520c:	e019      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	461a      	mov	r2, r3
 800521c:	f000 f89e 	bl	800535c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2140      	movs	r1, #64	; 0x40
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f8f7 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 800522c:	e009      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f000 f8ee 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 800523e:	e000      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005240:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a34      	ldr	r2, [pc, #208]	; (8005340 <TIM_Base_SetConfig+0xe4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00f      	beq.n	8005294 <TIM_Base_SetConfig+0x38>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527a:	d00b      	beq.n	8005294 <TIM_Base_SetConfig+0x38>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a31      	ldr	r2, [pc, #196]	; (8005344 <TIM_Base_SetConfig+0xe8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d007      	beq.n	8005294 <TIM_Base_SetConfig+0x38>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a30      	ldr	r2, [pc, #192]	; (8005348 <TIM_Base_SetConfig+0xec>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_Base_SetConfig+0x38>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a2f      	ldr	r2, [pc, #188]	; (800534c <TIM_Base_SetConfig+0xf0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d108      	bne.n	80052a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a25      	ldr	r2, [pc, #148]	; (8005340 <TIM_Base_SetConfig+0xe4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d01b      	beq.n	80052e6 <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b4:	d017      	beq.n	80052e6 <TIM_Base_SetConfig+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a22      	ldr	r2, [pc, #136]	; (8005344 <TIM_Base_SetConfig+0xe8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a21      	ldr	r2, [pc, #132]	; (8005348 <TIM_Base_SetConfig+0xec>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00f      	beq.n	80052e6 <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a20      	ldr	r2, [pc, #128]	; (800534c <TIM_Base_SetConfig+0xf0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_Base_SetConfig+0x8a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1f      	ldr	r2, [pc, #124]	; (8005350 <TIM_Base_SetConfig+0xf4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <TIM_Base_SetConfig+0xf8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_Base_SetConfig+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <TIM_Base_SetConfig+0xfc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d108      	bne.n	80052f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a08      	ldr	r2, [pc, #32]	; (8005340 <TIM_Base_SetConfig+0xe4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0201 	bic.w	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 030a 	bic.w	r3, r3, #10
 8005398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b087      	sub	sp, #28
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0210 	bic.w	r2, r3, #16
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	f043 0307 	orr.w	r3, r3, #7
 800543c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	609a      	str	r2, [r3, #8]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800546a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	431a      	orrs	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e050      	b.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d018      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f4:	d013      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a18      	ldr	r2, [pc, #96]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a16      	ldr	r2, [pc, #88]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a15      	ldr	r2, [pc, #84]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a13      	ldr	r2, [pc, #76]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10c      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4313      	orrs	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40014000 	.word	0x40014000

0800556c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e03f      	b.n	80055fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fd f9c2 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2224      	movs	r2, #36	; 0x24
 800559c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fb97 	bl	8005ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b088      	sub	sp, #32
 800560a:	af02      	add	r7, sp, #8
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b20      	cmp	r3, #32
 8005624:	f040 8083 	bne.w	800572e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_UART_Transmit+0x2e>
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e07b      	b.n	8005730 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_UART_Transmit+0x40>
 8005642:	2302      	movs	r3, #2
 8005644:	e074      	b.n	8005730 <HAL_UART_Transmit+0x12a>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2221      	movs	r2, #33	; 0x21
 8005658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800565c:	f7fd fad2 	bl	8002c04 <HAL_GetTick>
 8005660:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	88fa      	ldrh	r2, [r7, #6]
 8005666:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005676:	e042      	b.n	80056fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568e:	d122      	bne.n	80056d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2200      	movs	r2, #0
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f9b6 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e042      	b.n	8005730 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3302      	adds	r3, #2
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	e017      	b.n	80056fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3301      	adds	r3, #1
 80056d2:	60bb      	str	r3, [r7, #8]
 80056d4:	e013      	b.n	80056fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	2180      	movs	r1, #128	; 0x80
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f993 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e01f      	b.n	8005730 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	60ba      	str	r2, [r7, #8]
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1b7      	bne.n	8005678 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2200      	movs	r2, #0
 8005710:	2140      	movs	r1, #64	; 0x40
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f97a 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e006      	b.n	8005730 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e000      	b.n	8005730 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800572e:	2302      	movs	r3, #2
  }
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b20      	cmp	r3, #32
 8005750:	d140      	bne.n	80057d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_UART_Receive_IT+0x26>
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e039      	b.n	80057d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_UART_Receive_IT+0x38>
 800576c:	2302      	movs	r3, #2
 800576e:	e032      	b.n	80057d6 <HAL_UART_Receive_IT+0x9e>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2222      	movs	r2, #34	; 0x22
 8005794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0220 	orr.w	r2, r2, #32
 80057ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10d      	bne.n	8005836 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_UART_IRQHandler+0x52>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f9d6 	bl	8005be0 <UART_Receive_IT>
      return;
 8005834:	e0d1      	b.n	80059da <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80b0 	beq.w	800599e <HAL_UART_IRQHandler+0x1ba>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <HAL_UART_IRQHandler+0x70>
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 80a5 	beq.w	800599e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <HAL_UART_IRQHandler+0x90>
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586c:	f043 0201 	orr.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_UART_IRQHandler+0xb0>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588c:	f043 0202 	orr.w	r2, r3, #2
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_UART_IRQHandler+0xd0>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ac:	f043 0204 	orr.w	r2, r3, #4
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00f      	beq.n	80058de <HAL_UART_IRQHandler+0xfa>
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_UART_IRQHandler+0xee>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	f043 0208 	orr.w	r2, r3, #8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d078      	beq.n	80059d8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <HAL_UART_IRQHandler+0x11c>
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f970 	bl	8005be0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <HAL_UART_IRQHandler+0x144>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d031      	beq.n	800598c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f8b9 	bl	8005aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d123      	bne.n	8005984 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695a      	ldr	r2, [r3, #20]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	4a21      	ldr	r2, [pc, #132]	; (80059e0 <HAL_UART_IRQHandler+0x1fc>)
 800595a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	4618      	mov	r0, r3
 8005962:	f7fd ff59 	bl	8003818 <HAL_DMA_Abort_IT>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005976:	4610      	mov	r0, r2
 8005978:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597a:	e00e      	b.n	800599a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f83b 	bl	80059f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005982:	e00a      	b.n	800599a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f837 	bl	80059f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598a:	e006      	b.n	800599a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f833 	bl	80059f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005998:	e01e      	b.n	80059d8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599a:	bf00      	nop
    return;
 800599c:	e01c      	b.n	80059d8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_UART_IRQHandler+0x1d6>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f8a6 	bl	8005b04 <UART_Transmit_IT>
    return;
 80059b8:	e00f      	b.n	80059da <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_UART_IRQHandler+0x1f6>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f8ee 	bl	8005bb0 <UART_EndTransmit_IT>
    return;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <HAL_UART_IRQHandler+0x1f6>
    return;
 80059d8:	bf00      	nop
  }
}
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	08005add 	.word	0x08005add

080059e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1c:	e02c      	b.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d028      	beq.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2c:	f7fd f8ea 	bl	8002c04 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d21d      	bcs.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e00f      	b.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4013      	ands	r3, r2
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	bf0c      	ite	eq
 8005a88:	2301      	moveq	r3, #1
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d0c3      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ab6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0201 	bic.w	r2, r2, #1
 8005ac6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ff7e 	bl	80059f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b21      	cmp	r3, #33	; 0x21
 8005b16:	d144      	bne.n	8005ba2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d11a      	bne.n	8005b58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	621a      	str	r2, [r3, #32]
 8005b4a:	e00e      	b.n	8005b6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]
 8005b56:	e008      	b.n	8005b6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6211      	str	r1, [r2, #32]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4619      	mov	r1, r3
 8005b78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e000      	b.n	8005ba4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ba2:	2302      	movs	r3, #2
  }
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff07 	bl	80059e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b22      	cmp	r3, #34	; 0x22
 8005bf2:	d171      	bne.n	8005cd8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d123      	bne.n	8005c46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10e      	bne.n	8005c2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	1c9a      	adds	r2, r3, #2
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28
 8005c28:	e029      	b.n	8005c7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28
 8005c44:	e01b      	b.n	8005c7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6858      	ldr	r0, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6291      	str	r1, [r2, #40]	; 0x28
 8005c5e:	b2c2      	uxtb	r2, r0
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e00c      	b.n	8005c7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	1c58      	adds	r0, r3, #1
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	6288      	str	r0, [r1, #40]	; 0x28
 8005c76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d120      	bne.n	8005cd4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0220 	bic.w	r2, r2, #32
 8005ca0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc fbb2 	bl	8002434 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e002      	b.n	8005cda <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e000      	b.n	8005cda <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d26:	f023 030c 	bic.w	r3, r3, #12
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	430b      	orrs	r3, r1
 8005d32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d52:	f040 818b 	bne.w	800606c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4ac1      	ldr	r2, [pc, #772]	; (8006060 <UART_SetConfig+0x37c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d005      	beq.n	8005d6c <UART_SetConfig+0x88>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4abf      	ldr	r2, [pc, #764]	; (8006064 <UART_SetConfig+0x380>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	f040 80bd 	bne.w	8005ee6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fe fde0 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 8005d70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	461d      	mov	r5, r3
 8005d76:	f04f 0600 	mov.w	r6, #0
 8005d7a:	46a8      	mov	r8, r5
 8005d7c:	46b1      	mov	r9, r6
 8005d7e:	eb18 0308 	adds.w	r3, r8, r8
 8005d82:	eb49 0409 	adc.w	r4, r9, r9
 8005d86:	4698      	mov	r8, r3
 8005d88:	46a1      	mov	r9, r4
 8005d8a:	eb18 0805 	adds.w	r8, r8, r5
 8005d8e:	eb49 0906 	adc.w	r9, r9, r6
 8005d92:	f04f 0100 	mov.w	r1, #0
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005da2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005da6:	4688      	mov	r8, r1
 8005da8:	4691      	mov	r9, r2
 8005daa:	eb18 0005 	adds.w	r0, r8, r5
 8005dae:	eb49 0106 	adc.w	r1, r9, r6
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	461d      	mov	r5, r3
 8005db8:	f04f 0600 	mov.w	r6, #0
 8005dbc:	196b      	adds	r3, r5, r5
 8005dbe:	eb46 0406 	adc.w	r4, r6, r6
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	f7fa ff67 	bl	8000c98 <__aeabi_uldivmod>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	461a      	mov	r2, r3
 8005dd0:	4ba5      	ldr	r3, [pc, #660]	; (8006068 <UART_SetConfig+0x384>)
 8005dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	461d      	mov	r5, r3
 8005de0:	f04f 0600 	mov.w	r6, #0
 8005de4:	46a9      	mov	r9, r5
 8005de6:	46b2      	mov	sl, r6
 8005de8:	eb19 0309 	adds.w	r3, r9, r9
 8005dec:	eb4a 040a 	adc.w	r4, sl, sl
 8005df0:	4699      	mov	r9, r3
 8005df2:	46a2      	mov	sl, r4
 8005df4:	eb19 0905 	adds.w	r9, r9, r5
 8005df8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dfc:	f04f 0100 	mov.w	r1, #0
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e10:	4689      	mov	r9, r1
 8005e12:	4692      	mov	sl, r2
 8005e14:	eb19 0005 	adds.w	r0, r9, r5
 8005e18:	eb4a 0106 	adc.w	r1, sl, r6
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	461d      	mov	r5, r3
 8005e22:	f04f 0600 	mov.w	r6, #0
 8005e26:	196b      	adds	r3, r5, r5
 8005e28:	eb46 0406 	adc.w	r4, r6, r6
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4623      	mov	r3, r4
 8005e30:	f7fa ff32 	bl	8000c98 <__aeabi_uldivmod>
 8005e34:	4603      	mov	r3, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4b8b      	ldr	r3, [pc, #556]	; (8006068 <UART_SetConfig+0x384>)
 8005e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	2164      	movs	r1, #100	; 0x64
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	3332      	adds	r3, #50	; 0x32
 8005e4e:	4a86      	ldr	r2, [pc, #536]	; (8006068 <UART_SetConfig+0x384>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e5c:	4498      	add	r8, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	461d      	mov	r5, r3
 8005e62:	f04f 0600 	mov.w	r6, #0
 8005e66:	46a9      	mov	r9, r5
 8005e68:	46b2      	mov	sl, r6
 8005e6a:	eb19 0309 	adds.w	r3, r9, r9
 8005e6e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e72:	4699      	mov	r9, r3
 8005e74:	46a2      	mov	sl, r4
 8005e76:	eb19 0905 	adds.w	r9, r9, r5
 8005e7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e7e:	f04f 0100 	mov.w	r1, #0
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e92:	4689      	mov	r9, r1
 8005e94:	4692      	mov	sl, r2
 8005e96:	eb19 0005 	adds.w	r0, r9, r5
 8005e9a:	eb4a 0106 	adc.w	r1, sl, r6
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	461d      	mov	r5, r3
 8005ea4:	f04f 0600 	mov.w	r6, #0
 8005ea8:	196b      	adds	r3, r5, r5
 8005eaa:	eb46 0406 	adc.w	r4, r6, r6
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	f7fa fef1 	bl	8000c98 <__aeabi_uldivmod>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	460c      	mov	r4, r1
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4b6a      	ldr	r3, [pc, #424]	; (8006068 <UART_SetConfig+0x384>)
 8005ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	2164      	movs	r1, #100	; 0x64
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	3332      	adds	r3, #50	; 0x32
 8005ed0:	4a65      	ldr	r2, [pc, #404]	; (8006068 <UART_SetConfig+0x384>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	f003 0207 	and.w	r2, r3, #7
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4442      	add	r2, r8
 8005ee2:	609a      	str	r2, [r3, #8]
 8005ee4:	e26f      	b.n	80063c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ee6:	f7fe fd0f 	bl	8004908 <HAL_RCC_GetPCLK1Freq>
 8005eea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	461d      	mov	r5, r3
 8005ef0:	f04f 0600 	mov.w	r6, #0
 8005ef4:	46a8      	mov	r8, r5
 8005ef6:	46b1      	mov	r9, r6
 8005ef8:	eb18 0308 	adds.w	r3, r8, r8
 8005efc:	eb49 0409 	adc.w	r4, r9, r9
 8005f00:	4698      	mov	r8, r3
 8005f02:	46a1      	mov	r9, r4
 8005f04:	eb18 0805 	adds.w	r8, r8, r5
 8005f08:	eb49 0906 	adc.w	r9, r9, r6
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f20:	4688      	mov	r8, r1
 8005f22:	4691      	mov	r9, r2
 8005f24:	eb18 0005 	adds.w	r0, r8, r5
 8005f28:	eb49 0106 	adc.w	r1, r9, r6
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	461d      	mov	r5, r3
 8005f32:	f04f 0600 	mov.w	r6, #0
 8005f36:	196b      	adds	r3, r5, r5
 8005f38:	eb46 0406 	adc.w	r4, r6, r6
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4623      	mov	r3, r4
 8005f40:	f7fa feaa 	bl	8000c98 <__aeabi_uldivmod>
 8005f44:	4603      	mov	r3, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b47      	ldr	r3, [pc, #284]	; (8006068 <UART_SetConfig+0x384>)
 8005f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	461d      	mov	r5, r3
 8005f5a:	f04f 0600 	mov.w	r6, #0
 8005f5e:	46a9      	mov	r9, r5
 8005f60:	46b2      	mov	sl, r6
 8005f62:	eb19 0309 	adds.w	r3, r9, r9
 8005f66:	eb4a 040a 	adc.w	r4, sl, sl
 8005f6a:	4699      	mov	r9, r3
 8005f6c:	46a2      	mov	sl, r4
 8005f6e:	eb19 0905 	adds.w	r9, r9, r5
 8005f72:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f76:	f04f 0100 	mov.w	r1, #0
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f8a:	4689      	mov	r9, r1
 8005f8c:	4692      	mov	sl, r2
 8005f8e:	eb19 0005 	adds.w	r0, r9, r5
 8005f92:	eb4a 0106 	adc.w	r1, sl, r6
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	461d      	mov	r5, r3
 8005f9c:	f04f 0600 	mov.w	r6, #0
 8005fa0:	196b      	adds	r3, r5, r5
 8005fa2:	eb46 0406 	adc.w	r4, r6, r6
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4623      	mov	r3, r4
 8005faa:	f7fa fe75 	bl	8000c98 <__aeabi_uldivmod>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <UART_SetConfig+0x384>)
 8005fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	2164      	movs	r1, #100	; 0x64
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	3332      	adds	r3, #50	; 0x32
 8005fc8:	4a27      	ldr	r2, [pc, #156]	; (8006068 <UART_SetConfig+0x384>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fd6:	4498      	add	r8, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	461d      	mov	r5, r3
 8005fdc:	f04f 0600 	mov.w	r6, #0
 8005fe0:	46a9      	mov	r9, r5
 8005fe2:	46b2      	mov	sl, r6
 8005fe4:	eb19 0309 	adds.w	r3, r9, r9
 8005fe8:	eb4a 040a 	adc.w	r4, sl, sl
 8005fec:	4699      	mov	r9, r3
 8005fee:	46a2      	mov	sl, r4
 8005ff0:	eb19 0905 	adds.w	r9, r9, r5
 8005ff4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ff8:	f04f 0100 	mov.w	r1, #0
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006004:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006008:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800600c:	4689      	mov	r9, r1
 800600e:	4692      	mov	sl, r2
 8006010:	eb19 0005 	adds.w	r0, r9, r5
 8006014:	eb4a 0106 	adc.w	r1, sl, r6
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	461d      	mov	r5, r3
 800601e:	f04f 0600 	mov.w	r6, #0
 8006022:	196b      	adds	r3, r5, r5
 8006024:	eb46 0406 	adc.w	r4, r6, r6
 8006028:	461a      	mov	r2, r3
 800602a:	4623      	mov	r3, r4
 800602c:	f7fa fe34 	bl	8000c98 <__aeabi_uldivmod>
 8006030:	4603      	mov	r3, r0
 8006032:	460c      	mov	r4, r1
 8006034:	461a      	mov	r2, r3
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <UART_SetConfig+0x384>)
 8006038:	fba3 1302 	umull	r1, r3, r3, r2
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	2164      	movs	r1, #100	; 0x64
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	3332      	adds	r3, #50	; 0x32
 800604a:	4a07      	ldr	r2, [pc, #28]	; (8006068 <UART_SetConfig+0x384>)
 800604c:	fba2 2303 	umull	r2, r3, r2, r3
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f003 0207 	and.w	r2, r3, #7
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4442      	add	r2, r8
 800605c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800605e:	e1b2      	b.n	80063c6 <UART_SetConfig+0x6e2>
 8006060:	40011000 	.word	0x40011000
 8006064:	40011400 	.word	0x40011400
 8006068:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4ad7      	ldr	r2, [pc, #860]	; (80063d0 <UART_SetConfig+0x6ec>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d005      	beq.n	8006082 <UART_SetConfig+0x39e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4ad6      	ldr	r2, [pc, #856]	; (80063d4 <UART_SetConfig+0x6f0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	f040 80d1 	bne.w	8006224 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006082:	f7fe fc55 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 8006086:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	469a      	mov	sl, r3
 800608c:	f04f 0b00 	mov.w	fp, #0
 8006090:	46d0      	mov	r8, sl
 8006092:	46d9      	mov	r9, fp
 8006094:	eb18 0308 	adds.w	r3, r8, r8
 8006098:	eb49 0409 	adc.w	r4, r9, r9
 800609c:	4698      	mov	r8, r3
 800609e:	46a1      	mov	r9, r4
 80060a0:	eb18 080a 	adds.w	r8, r8, sl
 80060a4:	eb49 090b 	adc.w	r9, r9, fp
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060bc:	4688      	mov	r8, r1
 80060be:	4691      	mov	r9, r2
 80060c0:	eb1a 0508 	adds.w	r5, sl, r8
 80060c4:	eb4b 0609 	adc.w	r6, fp, r9
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	4619      	mov	r1, r3
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	f04f 0400 	mov.w	r4, #0
 80060da:	0094      	lsls	r4, r2, #2
 80060dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060e0:	008b      	lsls	r3, r1, #2
 80060e2:	461a      	mov	r2, r3
 80060e4:	4623      	mov	r3, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	4631      	mov	r1, r6
 80060ea:	f7fa fdd5 	bl	8000c98 <__aeabi_uldivmod>
 80060ee:	4603      	mov	r3, r0
 80060f0:	460c      	mov	r4, r1
 80060f2:	461a      	mov	r2, r3
 80060f4:	4bb8      	ldr	r3, [pc, #736]	; (80063d8 <UART_SetConfig+0x6f4>)
 80060f6:	fba3 2302 	umull	r2, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	469b      	mov	fp, r3
 8006104:	f04f 0c00 	mov.w	ip, #0
 8006108:	46d9      	mov	r9, fp
 800610a:	46e2      	mov	sl, ip
 800610c:	eb19 0309 	adds.w	r3, r9, r9
 8006110:	eb4a 040a 	adc.w	r4, sl, sl
 8006114:	4699      	mov	r9, r3
 8006116:	46a2      	mov	sl, r4
 8006118:	eb19 090b 	adds.w	r9, r9, fp
 800611c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800612c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006130:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006134:	4689      	mov	r9, r1
 8006136:	4692      	mov	sl, r2
 8006138:	eb1b 0509 	adds.w	r5, fp, r9
 800613c:	eb4c 060a 	adc.w	r6, ip, sl
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4619      	mov	r1, r3
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	f04f 0400 	mov.w	r4, #0
 8006152:	0094      	lsls	r4, r2, #2
 8006154:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006158:	008b      	lsls	r3, r1, #2
 800615a:	461a      	mov	r2, r3
 800615c:	4623      	mov	r3, r4
 800615e:	4628      	mov	r0, r5
 8006160:	4631      	mov	r1, r6
 8006162:	f7fa fd99 	bl	8000c98 <__aeabi_uldivmod>
 8006166:	4603      	mov	r3, r0
 8006168:	460c      	mov	r4, r1
 800616a:	461a      	mov	r2, r3
 800616c:	4b9a      	ldr	r3, [pc, #616]	; (80063d8 <UART_SetConfig+0x6f4>)
 800616e:	fba3 1302 	umull	r1, r3, r3, r2
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	2164      	movs	r1, #100	; 0x64
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	3332      	adds	r3, #50	; 0x32
 8006180:	4a95      	ldr	r2, [pc, #596]	; (80063d8 <UART_SetConfig+0x6f4>)
 8006182:	fba2 2303 	umull	r2, r3, r2, r3
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800618c:	4498      	add	r8, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	469b      	mov	fp, r3
 8006192:	f04f 0c00 	mov.w	ip, #0
 8006196:	46d9      	mov	r9, fp
 8006198:	46e2      	mov	sl, ip
 800619a:	eb19 0309 	adds.w	r3, r9, r9
 800619e:	eb4a 040a 	adc.w	r4, sl, sl
 80061a2:	4699      	mov	r9, r3
 80061a4:	46a2      	mov	sl, r4
 80061a6:	eb19 090b 	adds.w	r9, r9, fp
 80061aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061ae:	f04f 0100 	mov.w	r1, #0
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061c2:	4689      	mov	r9, r1
 80061c4:	4692      	mov	sl, r2
 80061c6:	eb1b 0509 	adds.w	r5, fp, r9
 80061ca:	eb4c 060a 	adc.w	r6, ip, sl
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4619      	mov	r1, r3
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	f04f 0400 	mov.w	r4, #0
 80061e0:	0094      	lsls	r4, r2, #2
 80061e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061e6:	008b      	lsls	r3, r1, #2
 80061e8:	461a      	mov	r2, r3
 80061ea:	4623      	mov	r3, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	4631      	mov	r1, r6
 80061f0:	f7fa fd52 	bl	8000c98 <__aeabi_uldivmod>
 80061f4:	4603      	mov	r3, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	461a      	mov	r2, r3
 80061fa:	4b77      	ldr	r3, [pc, #476]	; (80063d8 <UART_SetConfig+0x6f4>)
 80061fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	2164      	movs	r1, #100	; 0x64
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	3332      	adds	r3, #50	; 0x32
 800620e:	4a72      	ldr	r2, [pc, #456]	; (80063d8 <UART_SetConfig+0x6f4>)
 8006210:	fba2 2303 	umull	r2, r3, r2, r3
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f003 020f 	and.w	r2, r3, #15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4442      	add	r2, r8
 8006220:	609a      	str	r2, [r3, #8]
 8006222:	e0d0      	b.n	80063c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006224:	f7fe fb70 	bl	8004908 <HAL_RCC_GetPCLK1Freq>
 8006228:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	469a      	mov	sl, r3
 800622e:	f04f 0b00 	mov.w	fp, #0
 8006232:	46d0      	mov	r8, sl
 8006234:	46d9      	mov	r9, fp
 8006236:	eb18 0308 	adds.w	r3, r8, r8
 800623a:	eb49 0409 	adc.w	r4, r9, r9
 800623e:	4698      	mov	r8, r3
 8006240:	46a1      	mov	r9, r4
 8006242:	eb18 080a 	adds.w	r8, r8, sl
 8006246:	eb49 090b 	adc.w	r9, r9, fp
 800624a:	f04f 0100 	mov.w	r1, #0
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006256:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800625a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800625e:	4688      	mov	r8, r1
 8006260:	4691      	mov	r9, r2
 8006262:	eb1a 0508 	adds.w	r5, sl, r8
 8006266:	eb4b 0609 	adc.w	r6, fp, r9
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4619      	mov	r1, r3
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	f04f 0400 	mov.w	r4, #0
 800627c:	0094      	lsls	r4, r2, #2
 800627e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006282:	008b      	lsls	r3, r1, #2
 8006284:	461a      	mov	r2, r3
 8006286:	4623      	mov	r3, r4
 8006288:	4628      	mov	r0, r5
 800628a:	4631      	mov	r1, r6
 800628c:	f7fa fd04 	bl	8000c98 <__aeabi_uldivmod>
 8006290:	4603      	mov	r3, r0
 8006292:	460c      	mov	r4, r1
 8006294:	461a      	mov	r2, r3
 8006296:	4b50      	ldr	r3, [pc, #320]	; (80063d8 <UART_SetConfig+0x6f4>)
 8006298:	fba3 2302 	umull	r2, r3, r3, r2
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	469b      	mov	fp, r3
 80062a6:	f04f 0c00 	mov.w	ip, #0
 80062aa:	46d9      	mov	r9, fp
 80062ac:	46e2      	mov	sl, ip
 80062ae:	eb19 0309 	adds.w	r3, r9, r9
 80062b2:	eb4a 040a 	adc.w	r4, sl, sl
 80062b6:	4699      	mov	r9, r3
 80062b8:	46a2      	mov	sl, r4
 80062ba:	eb19 090b 	adds.w	r9, r9, fp
 80062be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062c2:	f04f 0100 	mov.w	r1, #0
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062d6:	4689      	mov	r9, r1
 80062d8:	4692      	mov	sl, r2
 80062da:	eb1b 0509 	adds.w	r5, fp, r9
 80062de:	eb4c 060a 	adc.w	r6, ip, sl
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4619      	mov	r1, r3
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	f04f 0400 	mov.w	r4, #0
 80062f4:	0094      	lsls	r4, r2, #2
 80062f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062fa:	008b      	lsls	r3, r1, #2
 80062fc:	461a      	mov	r2, r3
 80062fe:	4623      	mov	r3, r4
 8006300:	4628      	mov	r0, r5
 8006302:	4631      	mov	r1, r6
 8006304:	f7fa fcc8 	bl	8000c98 <__aeabi_uldivmod>
 8006308:	4603      	mov	r3, r0
 800630a:	460c      	mov	r4, r1
 800630c:	461a      	mov	r2, r3
 800630e:	4b32      	ldr	r3, [pc, #200]	; (80063d8 <UART_SetConfig+0x6f4>)
 8006310:	fba3 1302 	umull	r1, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2164      	movs	r1, #100	; 0x64
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	3332      	adds	r3, #50	; 0x32
 8006322:	4a2d      	ldr	r2, [pc, #180]	; (80063d8 <UART_SetConfig+0x6f4>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800632e:	4498      	add	r8, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	469b      	mov	fp, r3
 8006334:	f04f 0c00 	mov.w	ip, #0
 8006338:	46d9      	mov	r9, fp
 800633a:	46e2      	mov	sl, ip
 800633c:	eb19 0309 	adds.w	r3, r9, r9
 8006340:	eb4a 040a 	adc.w	r4, sl, sl
 8006344:	4699      	mov	r9, r3
 8006346:	46a2      	mov	sl, r4
 8006348:	eb19 090b 	adds.w	r9, r9, fp
 800634c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006350:	f04f 0100 	mov.w	r1, #0
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800635c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006360:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006364:	4689      	mov	r9, r1
 8006366:	4692      	mov	sl, r2
 8006368:	eb1b 0509 	adds.w	r5, fp, r9
 800636c:	eb4c 060a 	adc.w	r6, ip, sl
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4619      	mov	r1, r3
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	f04f 0400 	mov.w	r4, #0
 8006382:	0094      	lsls	r4, r2, #2
 8006384:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006388:	008b      	lsls	r3, r1, #2
 800638a:	461a      	mov	r2, r3
 800638c:	4623      	mov	r3, r4
 800638e:	4628      	mov	r0, r5
 8006390:	4631      	mov	r1, r6
 8006392:	f7fa fc81 	bl	8000c98 <__aeabi_uldivmod>
 8006396:	4603      	mov	r3, r0
 8006398:	460c      	mov	r4, r1
 800639a:	461a      	mov	r2, r3
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <UART_SetConfig+0x6f4>)
 800639e:	fba3 1302 	umull	r1, r3, r3, r2
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	2164      	movs	r1, #100	; 0x64
 80063a6:	fb01 f303 	mul.w	r3, r1, r3
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	3332      	adds	r3, #50	; 0x32
 80063b0:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <UART_SetConfig+0x6f4>)
 80063b2:	fba2 2303 	umull	r2, r3, r2, r3
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4442      	add	r2, r8
 80063c2:	609a      	str	r2, [r3, #8]
}
 80063c4:	e7ff      	b.n	80063c6 <UART_SetConfig+0x6e2>
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d0:	40011000 	.word	0x40011000
 80063d4:	40011400 	.word	0x40011400
 80063d8:	51eb851f 	.word	0x51eb851f

080063dc <__errno>:
 80063dc:	4b01      	ldr	r3, [pc, #4]	; (80063e4 <__errno+0x8>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20000024 	.word	0x20000024

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4e0d      	ldr	r6, [pc, #52]	; (8006420 <__libc_init_array+0x38>)
 80063ec:	4c0d      	ldr	r4, [pc, #52]	; (8006424 <__libc_init_array+0x3c>)
 80063ee:	1ba4      	subs	r4, r4, r6
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	2500      	movs	r5, #0
 80063f4:	42a5      	cmp	r5, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	4e0b      	ldr	r6, [pc, #44]	; (8006428 <__libc_init_array+0x40>)
 80063fa:	4c0c      	ldr	r4, [pc, #48]	; (800642c <__libc_init_array+0x44>)
 80063fc:	f004 fd6a 	bl	800aed4 <_init>
 8006400:	1ba4      	subs	r4, r4, r6
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	2500      	movs	r5, #0
 8006406:	42a5      	cmp	r5, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006410:	4798      	blx	r3
 8006412:	3501      	adds	r5, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800641a:	4798      	blx	r3
 800641c:	3501      	adds	r5, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	0800ba10 	.word	0x0800ba10
 8006424:	0800ba10 	.word	0x0800ba10
 8006428:	0800ba10 	.word	0x0800ba10
 800642c:	0800ba14 	.word	0x0800ba14

08006430 <memcpy>:
 8006430:	b510      	push	{r4, lr}
 8006432:	1e43      	subs	r3, r0, #1
 8006434:	440a      	add	r2, r1
 8006436:	4291      	cmp	r1, r2
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	bd10      	pop	{r4, pc}
 800643c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006444:	e7f7      	b.n	8006436 <memcpy+0x6>

08006446 <memset>:
 8006446:	4402      	add	r2, r0
 8006448:	4603      	mov	r3, r0
 800644a:	4293      	cmp	r3, r2
 800644c:	d100      	bne.n	8006450 <memset+0xa>
 800644e:	4770      	bx	lr
 8006450:	f803 1b01 	strb.w	r1, [r3], #1
 8006454:	e7f9      	b.n	800644a <memset+0x4>

08006456 <__cvt>:
 8006456:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800645a:	ec55 4b10 	vmov	r4, r5, d0
 800645e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006460:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006464:	2d00      	cmp	r5, #0
 8006466:	460e      	mov	r6, r1
 8006468:	4691      	mov	r9, r2
 800646a:	4619      	mov	r1, r3
 800646c:	bfb8      	it	lt
 800646e:	4622      	movlt	r2, r4
 8006470:	462b      	mov	r3, r5
 8006472:	f027 0720 	bic.w	r7, r7, #32
 8006476:	bfbb      	ittet	lt
 8006478:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800647c:	461d      	movlt	r5, r3
 800647e:	2300      	movge	r3, #0
 8006480:	232d      	movlt	r3, #45	; 0x2d
 8006482:	bfb8      	it	lt
 8006484:	4614      	movlt	r4, r2
 8006486:	2f46      	cmp	r7, #70	; 0x46
 8006488:	700b      	strb	r3, [r1, #0]
 800648a:	d004      	beq.n	8006496 <__cvt+0x40>
 800648c:	2f45      	cmp	r7, #69	; 0x45
 800648e:	d100      	bne.n	8006492 <__cvt+0x3c>
 8006490:	3601      	adds	r6, #1
 8006492:	2102      	movs	r1, #2
 8006494:	e000      	b.n	8006498 <__cvt+0x42>
 8006496:	2103      	movs	r1, #3
 8006498:	ab03      	add	r3, sp, #12
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	ab02      	add	r3, sp, #8
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4632      	mov	r2, r6
 80064a2:	4653      	mov	r3, sl
 80064a4:	ec45 4b10 	vmov	d0, r4, r5
 80064a8:	f001 fd76 	bl	8007f98 <_dtoa_r>
 80064ac:	2f47      	cmp	r7, #71	; 0x47
 80064ae:	4680      	mov	r8, r0
 80064b0:	d102      	bne.n	80064b8 <__cvt+0x62>
 80064b2:	f019 0f01 	tst.w	r9, #1
 80064b6:	d026      	beq.n	8006506 <__cvt+0xb0>
 80064b8:	2f46      	cmp	r7, #70	; 0x46
 80064ba:	eb08 0906 	add.w	r9, r8, r6
 80064be:	d111      	bne.n	80064e4 <__cvt+0x8e>
 80064c0:	f898 3000 	ldrb.w	r3, [r8]
 80064c4:	2b30      	cmp	r3, #48	; 0x30
 80064c6:	d10a      	bne.n	80064de <__cvt+0x88>
 80064c8:	2200      	movs	r2, #0
 80064ca:	2300      	movs	r3, #0
 80064cc:	4620      	mov	r0, r4
 80064ce:	4629      	mov	r1, r5
 80064d0:	f7fa fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80064d4:	b918      	cbnz	r0, 80064de <__cvt+0x88>
 80064d6:	f1c6 0601 	rsb	r6, r6, #1
 80064da:	f8ca 6000 	str.w	r6, [sl]
 80064de:	f8da 3000 	ldr.w	r3, [sl]
 80064e2:	4499      	add	r9, r3
 80064e4:	2200      	movs	r2, #0
 80064e6:	2300      	movs	r3, #0
 80064e8:	4620      	mov	r0, r4
 80064ea:	4629      	mov	r1, r5
 80064ec:	f7fa faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80064f0:	b938      	cbnz	r0, 8006502 <__cvt+0xac>
 80064f2:	2230      	movs	r2, #48	; 0x30
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	454b      	cmp	r3, r9
 80064f8:	d205      	bcs.n	8006506 <__cvt+0xb0>
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	9103      	str	r1, [sp, #12]
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e7f8      	b.n	80064f4 <__cvt+0x9e>
 8006502:	f8cd 900c 	str.w	r9, [sp, #12]
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800650a:	eba3 0308 	sub.w	r3, r3, r8
 800650e:	4640      	mov	r0, r8
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	b004      	add	sp, #16
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006518 <__exponent>:
 8006518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800651a:	2900      	cmp	r1, #0
 800651c:	4604      	mov	r4, r0
 800651e:	bfba      	itte	lt
 8006520:	4249      	neglt	r1, r1
 8006522:	232d      	movlt	r3, #45	; 0x2d
 8006524:	232b      	movge	r3, #43	; 0x2b
 8006526:	2909      	cmp	r1, #9
 8006528:	f804 2b02 	strb.w	r2, [r4], #2
 800652c:	7043      	strb	r3, [r0, #1]
 800652e:	dd20      	ble.n	8006572 <__exponent+0x5a>
 8006530:	f10d 0307 	add.w	r3, sp, #7
 8006534:	461f      	mov	r7, r3
 8006536:	260a      	movs	r6, #10
 8006538:	fb91 f5f6 	sdiv	r5, r1, r6
 800653c:	fb06 1115 	mls	r1, r6, r5, r1
 8006540:	3130      	adds	r1, #48	; 0x30
 8006542:	2d09      	cmp	r5, #9
 8006544:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006548:	f103 32ff 	add.w	r2, r3, #4294967295
 800654c:	4629      	mov	r1, r5
 800654e:	dc09      	bgt.n	8006564 <__exponent+0x4c>
 8006550:	3130      	adds	r1, #48	; 0x30
 8006552:	3b02      	subs	r3, #2
 8006554:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006558:	42bb      	cmp	r3, r7
 800655a:	4622      	mov	r2, r4
 800655c:	d304      	bcc.n	8006568 <__exponent+0x50>
 800655e:	1a10      	subs	r0, r2, r0
 8006560:	b003      	add	sp, #12
 8006562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006564:	4613      	mov	r3, r2
 8006566:	e7e7      	b.n	8006538 <__exponent+0x20>
 8006568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656c:	f804 2b01 	strb.w	r2, [r4], #1
 8006570:	e7f2      	b.n	8006558 <__exponent+0x40>
 8006572:	2330      	movs	r3, #48	; 0x30
 8006574:	4419      	add	r1, r3
 8006576:	7083      	strb	r3, [r0, #2]
 8006578:	1d02      	adds	r2, r0, #4
 800657a:	70c1      	strb	r1, [r0, #3]
 800657c:	e7ef      	b.n	800655e <__exponent+0x46>
	...

08006580 <_printf_float>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	b08d      	sub	sp, #52	; 0x34
 8006586:	460c      	mov	r4, r1
 8006588:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800658c:	4616      	mov	r6, r2
 800658e:	461f      	mov	r7, r3
 8006590:	4605      	mov	r5, r0
 8006592:	f002 fde5 	bl	8009160 <_localeconv_r>
 8006596:	6803      	ldr	r3, [r0, #0]
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	4618      	mov	r0, r3
 800659c:	f7f9 fe20 	bl	80001e0 <strlen>
 80065a0:	2300      	movs	r3, #0
 80065a2:	930a      	str	r3, [sp, #40]	; 0x28
 80065a4:	f8d8 3000 	ldr.w	r3, [r8]
 80065a8:	9005      	str	r0, [sp, #20]
 80065aa:	3307      	adds	r3, #7
 80065ac:	f023 0307 	bic.w	r3, r3, #7
 80065b0:	f103 0208 	add.w	r2, r3, #8
 80065b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065b8:	f8d4 b000 	ldr.w	fp, [r4]
 80065bc:	f8c8 2000 	str.w	r2, [r8]
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065c8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065d0:	9307      	str	r3, [sp, #28]
 80065d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	4ba7      	ldr	r3, [pc, #668]	; (8006878 <_printf_float+0x2f8>)
 80065dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065e0:	f7fa faac 	bl	8000b3c <__aeabi_dcmpun>
 80065e4:	bb70      	cbnz	r0, 8006644 <_printf_float+0xc4>
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	4ba3      	ldr	r3, [pc, #652]	; (8006878 <_printf_float+0x2f8>)
 80065ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065f0:	f7fa fa86 	bl	8000b00 <__aeabi_dcmple>
 80065f4:	bb30      	cbnz	r0, 8006644 <_printf_float+0xc4>
 80065f6:	2200      	movs	r2, #0
 80065f8:	2300      	movs	r3, #0
 80065fa:	4640      	mov	r0, r8
 80065fc:	4649      	mov	r1, r9
 80065fe:	f7fa fa75 	bl	8000aec <__aeabi_dcmplt>
 8006602:	b110      	cbz	r0, 800660a <_printf_float+0x8a>
 8006604:	232d      	movs	r3, #45	; 0x2d
 8006606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660a:	4a9c      	ldr	r2, [pc, #624]	; (800687c <_printf_float+0x2fc>)
 800660c:	4b9c      	ldr	r3, [pc, #624]	; (8006880 <_printf_float+0x300>)
 800660e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006612:	bf8c      	ite	hi
 8006614:	4690      	movhi	r8, r2
 8006616:	4698      	movls	r8, r3
 8006618:	2303      	movs	r3, #3
 800661a:	f02b 0204 	bic.w	r2, fp, #4
 800661e:	6123      	str	r3, [r4, #16]
 8006620:	6022      	str	r2, [r4, #0]
 8006622:	f04f 0900 	mov.w	r9, #0
 8006626:	9700      	str	r7, [sp, #0]
 8006628:	4633      	mov	r3, r6
 800662a:	aa0b      	add	r2, sp, #44	; 0x2c
 800662c:	4621      	mov	r1, r4
 800662e:	4628      	mov	r0, r5
 8006630:	f000 f9e6 	bl	8006a00 <_printf_common>
 8006634:	3001      	adds	r0, #1
 8006636:	f040 808d 	bne.w	8006754 <_printf_float+0x1d4>
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	b00d      	add	sp, #52	; 0x34
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	4640      	mov	r0, r8
 800664a:	4649      	mov	r1, r9
 800664c:	f7fa fa76 	bl	8000b3c <__aeabi_dcmpun>
 8006650:	b110      	cbz	r0, 8006658 <_printf_float+0xd8>
 8006652:	4a8c      	ldr	r2, [pc, #560]	; (8006884 <_printf_float+0x304>)
 8006654:	4b8c      	ldr	r3, [pc, #560]	; (8006888 <_printf_float+0x308>)
 8006656:	e7da      	b.n	800660e <_printf_float+0x8e>
 8006658:	6861      	ldr	r1, [r4, #4]
 800665a:	1c4b      	adds	r3, r1, #1
 800665c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006660:	a80a      	add	r0, sp, #40	; 0x28
 8006662:	d13e      	bne.n	80066e2 <_printf_float+0x162>
 8006664:	2306      	movs	r3, #6
 8006666:	6063      	str	r3, [r4, #4]
 8006668:	2300      	movs	r3, #0
 800666a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800666e:	ab09      	add	r3, sp, #36	; 0x24
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	ec49 8b10 	vmov	d0, r8, r9
 8006676:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	f8cd a004 	str.w	sl, [sp, #4]
 8006680:	6861      	ldr	r1, [r4, #4]
 8006682:	4628      	mov	r0, r5
 8006684:	f7ff fee7 	bl	8006456 <__cvt>
 8006688:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800668c:	2b47      	cmp	r3, #71	; 0x47
 800668e:	4680      	mov	r8, r0
 8006690:	d109      	bne.n	80066a6 <_printf_float+0x126>
 8006692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006694:	1cd8      	adds	r0, r3, #3
 8006696:	db02      	blt.n	800669e <_printf_float+0x11e>
 8006698:	6862      	ldr	r2, [r4, #4]
 800669a:	4293      	cmp	r3, r2
 800669c:	dd47      	ble.n	800672e <_printf_float+0x1ae>
 800669e:	f1aa 0a02 	sub.w	sl, sl, #2
 80066a2:	fa5f fa8a 	uxtb.w	sl, sl
 80066a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80066aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ac:	d824      	bhi.n	80066f8 <_printf_float+0x178>
 80066ae:	3901      	subs	r1, #1
 80066b0:	4652      	mov	r2, sl
 80066b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066b6:	9109      	str	r1, [sp, #36]	; 0x24
 80066b8:	f7ff ff2e 	bl	8006518 <__exponent>
 80066bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066be:	1813      	adds	r3, r2, r0
 80066c0:	2a01      	cmp	r2, #1
 80066c2:	4681      	mov	r9, r0
 80066c4:	6123      	str	r3, [r4, #16]
 80066c6:	dc02      	bgt.n	80066ce <_printf_float+0x14e>
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	07d1      	lsls	r1, r2, #31
 80066cc:	d501      	bpl.n	80066d2 <_printf_float+0x152>
 80066ce:	3301      	adds	r3, #1
 80066d0:	6123      	str	r3, [r4, #16]
 80066d2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0a5      	beq.n	8006626 <_printf_float+0xa6>
 80066da:	232d      	movs	r3, #45	; 0x2d
 80066dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e0:	e7a1      	b.n	8006626 <_printf_float+0xa6>
 80066e2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80066e6:	f000 8177 	beq.w	80069d8 <_printf_float+0x458>
 80066ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066ee:	d1bb      	bne.n	8006668 <_printf_float+0xe8>
 80066f0:	2900      	cmp	r1, #0
 80066f2:	d1b9      	bne.n	8006668 <_printf_float+0xe8>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e7b6      	b.n	8006666 <_printf_float+0xe6>
 80066f8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80066fc:	d119      	bne.n	8006732 <_printf_float+0x1b2>
 80066fe:	2900      	cmp	r1, #0
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	dd0c      	ble.n	800671e <_printf_float+0x19e>
 8006704:	6121      	str	r1, [r4, #16]
 8006706:	b913      	cbnz	r3, 800670e <_printf_float+0x18e>
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	07d2      	lsls	r2, r2, #31
 800670c:	d502      	bpl.n	8006714 <_printf_float+0x194>
 800670e:	3301      	adds	r3, #1
 8006710:	440b      	add	r3, r1
 8006712:	6123      	str	r3, [r4, #16]
 8006714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006716:	65a3      	str	r3, [r4, #88]	; 0x58
 8006718:	f04f 0900 	mov.w	r9, #0
 800671c:	e7d9      	b.n	80066d2 <_printf_float+0x152>
 800671e:	b913      	cbnz	r3, 8006726 <_printf_float+0x1a6>
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	07d0      	lsls	r0, r2, #31
 8006724:	d501      	bpl.n	800672a <_printf_float+0x1aa>
 8006726:	3302      	adds	r3, #2
 8006728:	e7f3      	b.n	8006712 <_printf_float+0x192>
 800672a:	2301      	movs	r3, #1
 800672c:	e7f1      	b.n	8006712 <_printf_float+0x192>
 800672e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006732:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006736:	4293      	cmp	r3, r2
 8006738:	db05      	blt.n	8006746 <_printf_float+0x1c6>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	6123      	str	r3, [r4, #16]
 800673e:	07d1      	lsls	r1, r2, #31
 8006740:	d5e8      	bpl.n	8006714 <_printf_float+0x194>
 8006742:	3301      	adds	r3, #1
 8006744:	e7e5      	b.n	8006712 <_printf_float+0x192>
 8006746:	2b00      	cmp	r3, #0
 8006748:	bfd4      	ite	le
 800674a:	f1c3 0302 	rsble	r3, r3, #2
 800674e:	2301      	movgt	r3, #1
 8006750:	4413      	add	r3, r2
 8006752:	e7de      	b.n	8006712 <_printf_float+0x192>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	055a      	lsls	r2, r3, #21
 8006758:	d407      	bmi.n	800676a <_printf_float+0x1ea>
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	4642      	mov	r2, r8
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	d12b      	bne.n	80067c0 <_printf_float+0x240>
 8006768:	e767      	b.n	800663a <_printf_float+0xba>
 800676a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800676e:	f240 80dc 	bls.w	800692a <_printf_float+0x3aa>
 8006772:	2200      	movs	r2, #0
 8006774:	2300      	movs	r3, #0
 8006776:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800677a:	f7fa f9ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800677e:	2800      	cmp	r0, #0
 8006780:	d033      	beq.n	80067ea <_printf_float+0x26a>
 8006782:	2301      	movs	r3, #1
 8006784:	4a41      	ldr	r2, [pc, #260]	; (800688c <_printf_float+0x30c>)
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	f43f af54 	beq.w	800663a <_printf_float+0xba>
 8006792:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006796:	429a      	cmp	r2, r3
 8006798:	db02      	blt.n	80067a0 <_printf_float+0x220>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	07d8      	lsls	r0, r3, #31
 800679e:	d50f      	bpl.n	80067c0 <_printf_float+0x240>
 80067a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f af45 	beq.w	800663a <_printf_float+0xba>
 80067b0:	f04f 0800 	mov.w	r8, #0
 80067b4:	f104 091a 	add.w	r9, r4, #26
 80067b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ba:	3b01      	subs	r3, #1
 80067bc:	4543      	cmp	r3, r8
 80067be:	dc09      	bgt.n	80067d4 <_printf_float+0x254>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	079b      	lsls	r3, r3, #30
 80067c4:	f100 8103 	bmi.w	80069ce <_printf_float+0x44e>
 80067c8:	68e0      	ldr	r0, [r4, #12]
 80067ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067cc:	4298      	cmp	r0, r3
 80067ce:	bfb8      	it	lt
 80067d0:	4618      	movlt	r0, r3
 80067d2:	e734      	b.n	800663e <_printf_float+0xbe>
 80067d4:	2301      	movs	r3, #1
 80067d6:	464a      	mov	r2, r9
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f af2b 	beq.w	800663a <_printf_float+0xba>
 80067e4:	f108 0801 	add.w	r8, r8, #1
 80067e8:	e7e6      	b.n	80067b8 <_printf_float+0x238>
 80067ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dc2b      	bgt.n	8006848 <_printf_float+0x2c8>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4a26      	ldr	r2, [pc, #152]	; (800688c <_printf_float+0x30c>)
 80067f4:	4631      	mov	r1, r6
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b8      	blx	r7
 80067fa:	3001      	adds	r0, #1
 80067fc:	f43f af1d 	beq.w	800663a <_printf_float+0xba>
 8006800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006802:	b923      	cbnz	r3, 800680e <_printf_float+0x28e>
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	b913      	cbnz	r3, 800680e <_printf_float+0x28e>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	07d9      	lsls	r1, r3, #31
 800680c:	d5d8      	bpl.n	80067c0 <_printf_float+0x240>
 800680e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	f43f af0e 	beq.w	800663a <_printf_float+0xba>
 800681e:	f04f 0900 	mov.w	r9, #0
 8006822:	f104 0a1a 	add.w	sl, r4, #26
 8006826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006828:	425b      	negs	r3, r3
 800682a:	454b      	cmp	r3, r9
 800682c:	dc01      	bgt.n	8006832 <_printf_float+0x2b2>
 800682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006830:	e794      	b.n	800675c <_printf_float+0x1dc>
 8006832:	2301      	movs	r3, #1
 8006834:	4652      	mov	r2, sl
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	f43f aefc 	beq.w	800663a <_printf_float+0xba>
 8006842:	f109 0901 	add.w	r9, r9, #1
 8006846:	e7ee      	b.n	8006826 <_printf_float+0x2a6>
 8006848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800684c:	429a      	cmp	r2, r3
 800684e:	bfa8      	it	ge
 8006850:	461a      	movge	r2, r3
 8006852:	2a00      	cmp	r2, #0
 8006854:	4691      	mov	r9, r2
 8006856:	dd07      	ble.n	8006868 <_printf_float+0x2e8>
 8006858:	4613      	mov	r3, r2
 800685a:	4631      	mov	r1, r6
 800685c:	4642      	mov	r2, r8
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f aee9 	beq.w	800663a <_printf_float+0xba>
 8006868:	f104 031a 	add.w	r3, r4, #26
 800686c:	f04f 0b00 	mov.w	fp, #0
 8006870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006874:	9306      	str	r3, [sp, #24]
 8006876:	e015      	b.n	80068a4 <_printf_float+0x324>
 8006878:	7fefffff 	.word	0x7fefffff
 800687c:	0800b580 	.word	0x0800b580
 8006880:	0800b57c 	.word	0x0800b57c
 8006884:	0800b588 	.word	0x0800b588
 8006888:	0800b584 	.word	0x0800b584
 800688c:	0800b58c 	.word	0x0800b58c
 8006890:	2301      	movs	r3, #1
 8006892:	9a06      	ldr	r2, [sp, #24]
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f aecd 	beq.w	800663a <_printf_float+0xba>
 80068a0:	f10b 0b01 	add.w	fp, fp, #1
 80068a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80068a8:	ebaa 0309 	sub.w	r3, sl, r9
 80068ac:	455b      	cmp	r3, fp
 80068ae:	dcef      	bgt.n	8006890 <_printf_float+0x310>
 80068b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068b4:	429a      	cmp	r2, r3
 80068b6:	44d0      	add	r8, sl
 80068b8:	db15      	blt.n	80068e6 <_printf_float+0x366>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	07da      	lsls	r2, r3, #31
 80068be:	d412      	bmi.n	80068e6 <_printf_float+0x366>
 80068c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068c4:	eba3 020a 	sub.w	r2, r3, sl
 80068c8:	eba3 0a01 	sub.w	sl, r3, r1
 80068cc:	4592      	cmp	sl, r2
 80068ce:	bfa8      	it	ge
 80068d0:	4692      	movge	sl, r2
 80068d2:	f1ba 0f00 	cmp.w	sl, #0
 80068d6:	dc0e      	bgt.n	80068f6 <_printf_float+0x376>
 80068d8:	f04f 0800 	mov.w	r8, #0
 80068dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068e0:	f104 091a 	add.w	r9, r4, #26
 80068e4:	e019      	b.n	800691a <_printf_float+0x39a>
 80068e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	d1e5      	bne.n	80068c0 <_printf_float+0x340>
 80068f4:	e6a1      	b.n	800663a <_printf_float+0xba>
 80068f6:	4653      	mov	r3, sl
 80068f8:	4642      	mov	r2, r8
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b8      	blx	r7
 8006900:	3001      	adds	r0, #1
 8006902:	d1e9      	bne.n	80068d8 <_printf_float+0x358>
 8006904:	e699      	b.n	800663a <_printf_float+0xba>
 8006906:	2301      	movs	r3, #1
 8006908:	464a      	mov	r2, r9
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	f43f ae92 	beq.w	800663a <_printf_float+0xba>
 8006916:	f108 0801 	add.w	r8, r8, #1
 800691a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	eba3 030a 	sub.w	r3, r3, sl
 8006924:	4543      	cmp	r3, r8
 8006926:	dcee      	bgt.n	8006906 <_printf_float+0x386>
 8006928:	e74a      	b.n	80067c0 <_printf_float+0x240>
 800692a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800692c:	2a01      	cmp	r2, #1
 800692e:	dc01      	bgt.n	8006934 <_printf_float+0x3b4>
 8006930:	07db      	lsls	r3, r3, #31
 8006932:	d53a      	bpl.n	80069aa <_printf_float+0x42a>
 8006934:	2301      	movs	r3, #1
 8006936:	4642      	mov	r2, r8
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	f43f ae7b 	beq.w	800663a <_printf_float+0xba>
 8006944:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f108 0801 	add.w	r8, r8, #1
 8006954:	f43f ae71 	beq.w	800663a <_printf_float+0xba>
 8006958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695a:	2200      	movs	r2, #0
 800695c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006964:	2300      	movs	r3, #0
 8006966:	f7fa f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800696a:	b9c8      	cbnz	r0, 80069a0 <_printf_float+0x420>
 800696c:	4653      	mov	r3, sl
 800696e:	4642      	mov	r2, r8
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	d10e      	bne.n	8006998 <_printf_float+0x418>
 800697a:	e65e      	b.n	800663a <_printf_float+0xba>
 800697c:	2301      	movs	r3, #1
 800697e:	4652      	mov	r2, sl
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	f43f ae57 	beq.w	800663a <_printf_float+0xba>
 800698c:	f108 0801 	add.w	r8, r8, #1
 8006990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006992:	3b01      	subs	r3, #1
 8006994:	4543      	cmp	r3, r8
 8006996:	dcf1      	bgt.n	800697c <_printf_float+0x3fc>
 8006998:	464b      	mov	r3, r9
 800699a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800699e:	e6de      	b.n	800675e <_printf_float+0x1de>
 80069a0:	f04f 0800 	mov.w	r8, #0
 80069a4:	f104 0a1a 	add.w	sl, r4, #26
 80069a8:	e7f2      	b.n	8006990 <_printf_float+0x410>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e7df      	b.n	800696e <_printf_float+0x3ee>
 80069ae:	2301      	movs	r3, #1
 80069b0:	464a      	mov	r2, r9
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae3e 	beq.w	800663a <_printf_float+0xba>
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	4543      	cmp	r3, r8
 80069ca:	dcf0      	bgt.n	80069ae <_printf_float+0x42e>
 80069cc:	e6fc      	b.n	80067c8 <_printf_float+0x248>
 80069ce:	f04f 0800 	mov.w	r8, #0
 80069d2:	f104 0919 	add.w	r9, r4, #25
 80069d6:	e7f4      	b.n	80069c2 <_printf_float+0x442>
 80069d8:	2900      	cmp	r1, #0
 80069da:	f43f ae8b 	beq.w	80066f4 <_printf_float+0x174>
 80069de:	2300      	movs	r3, #0
 80069e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80069e4:	ab09      	add	r3, sp, #36	; 0x24
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	ec49 8b10 	vmov	d0, r8, r9
 80069ec:	6022      	str	r2, [r4, #0]
 80069ee:	f8cd a004 	str.w	sl, [sp, #4]
 80069f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7ff fd2d 	bl	8006456 <__cvt>
 80069fc:	4680      	mov	r8, r0
 80069fe:	e648      	b.n	8006692 <_printf_float+0x112>

08006a00 <_printf_common>:
 8006a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	4691      	mov	r9, r2
 8006a06:	461f      	mov	r7, r3
 8006a08:	688a      	ldr	r2, [r1, #8]
 8006a0a:	690b      	ldr	r3, [r1, #16]
 8006a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	bfb8      	it	lt
 8006a14:	4613      	movlt	r3, r2
 8006a16:	f8c9 3000 	str.w	r3, [r9]
 8006a1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460c      	mov	r4, r1
 8006a22:	b112      	cbz	r2, 8006a2a <_printf_common+0x2a>
 8006a24:	3301      	adds	r3, #1
 8006a26:	f8c9 3000 	str.w	r3, [r9]
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	0699      	lsls	r1, r3, #26
 8006a2e:	bf42      	ittt	mi
 8006a30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a34:	3302      	addmi	r3, #2
 8006a36:	f8c9 3000 	strmi.w	r3, [r9]
 8006a3a:	6825      	ldr	r5, [r4, #0]
 8006a3c:	f015 0506 	ands.w	r5, r5, #6
 8006a40:	d107      	bne.n	8006a52 <_printf_common+0x52>
 8006a42:	f104 0a19 	add.w	sl, r4, #25
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	f8d9 2000 	ldr.w	r2, [r9]
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	42ab      	cmp	r3, r5
 8006a50:	dc28      	bgt.n	8006aa4 <_printf_common+0xa4>
 8006a52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	3300      	adds	r3, #0
 8006a5a:	bf18      	it	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	0692      	lsls	r2, r2, #26
 8006a60:	d42d      	bmi.n	8006abe <_printf_common+0xbe>
 8006a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a66:	4639      	mov	r1, r7
 8006a68:	4630      	mov	r0, r6
 8006a6a:	47c0      	blx	r8
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d020      	beq.n	8006ab2 <_printf_common+0xb2>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	68e5      	ldr	r5, [r4, #12]
 8006a74:	f8d9 2000 	ldr.w	r2, [r9]
 8006a78:	f003 0306 	and.w	r3, r3, #6
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	bf08      	it	eq
 8006a80:	1aad      	subeq	r5, r5, r2
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	bf0c      	ite	eq
 8006a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a8c:	2500      	movne	r5, #0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bfc4      	itt	gt
 8006a92:	1a9b      	subgt	r3, r3, r2
 8006a94:	18ed      	addgt	r5, r5, r3
 8006a96:	f04f 0900 	mov.w	r9, #0
 8006a9a:	341a      	adds	r4, #26
 8006a9c:	454d      	cmp	r5, r9
 8006a9e:	d11a      	bne.n	8006ad6 <_printf_common+0xd6>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	e008      	b.n	8006ab6 <_printf_common+0xb6>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4652      	mov	r2, sl
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	4630      	mov	r0, r6
 8006aac:	47c0      	blx	r8
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d103      	bne.n	8006aba <_printf_common+0xba>
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	3501      	adds	r5, #1
 8006abc:	e7c3      	b.n	8006a46 <_printf_common+0x46>
 8006abe:	18e1      	adds	r1, r4, r3
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	2030      	movs	r0, #48	; 0x30
 8006ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ac8:	4422      	add	r2, r4
 8006aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ace:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ad2:	3302      	adds	r3, #2
 8006ad4:	e7c5      	b.n	8006a62 <_printf_common+0x62>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4622      	mov	r2, r4
 8006ada:	4639      	mov	r1, r7
 8006adc:	4630      	mov	r0, r6
 8006ade:	47c0      	blx	r8
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d0e6      	beq.n	8006ab2 <_printf_common+0xb2>
 8006ae4:	f109 0901 	add.w	r9, r9, #1
 8006ae8:	e7d8      	b.n	8006a9c <_printf_common+0x9c>
	...

08006aec <_printf_i>:
 8006aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006af0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006af4:	460c      	mov	r4, r1
 8006af6:	7e09      	ldrb	r1, [r1, #24]
 8006af8:	b085      	sub	sp, #20
 8006afa:	296e      	cmp	r1, #110	; 0x6e
 8006afc:	4617      	mov	r7, r2
 8006afe:	4606      	mov	r6, r0
 8006b00:	4698      	mov	r8, r3
 8006b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b04:	f000 80b3 	beq.w	8006c6e <_printf_i+0x182>
 8006b08:	d822      	bhi.n	8006b50 <_printf_i+0x64>
 8006b0a:	2963      	cmp	r1, #99	; 0x63
 8006b0c:	d036      	beq.n	8006b7c <_printf_i+0x90>
 8006b0e:	d80a      	bhi.n	8006b26 <_printf_i+0x3a>
 8006b10:	2900      	cmp	r1, #0
 8006b12:	f000 80b9 	beq.w	8006c88 <_printf_i+0x19c>
 8006b16:	2958      	cmp	r1, #88	; 0x58
 8006b18:	f000 8083 	beq.w	8006c22 <_printf_i+0x136>
 8006b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b24:	e032      	b.n	8006b8c <_printf_i+0xa0>
 8006b26:	2964      	cmp	r1, #100	; 0x64
 8006b28:	d001      	beq.n	8006b2e <_printf_i+0x42>
 8006b2a:	2969      	cmp	r1, #105	; 0x69
 8006b2c:	d1f6      	bne.n	8006b1c <_printf_i+0x30>
 8006b2e:	6820      	ldr	r0, [r4, #0]
 8006b30:	6813      	ldr	r3, [r2, #0]
 8006b32:	0605      	lsls	r5, r0, #24
 8006b34:	f103 0104 	add.w	r1, r3, #4
 8006b38:	d52a      	bpl.n	8006b90 <_printf_i+0xa4>
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6011      	str	r1, [r2, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	da03      	bge.n	8006b4a <_printf_i+0x5e>
 8006b42:	222d      	movs	r2, #45	; 0x2d
 8006b44:	425b      	negs	r3, r3
 8006b46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b4a:	486f      	ldr	r0, [pc, #444]	; (8006d08 <_printf_i+0x21c>)
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	e039      	b.n	8006bc4 <_printf_i+0xd8>
 8006b50:	2973      	cmp	r1, #115	; 0x73
 8006b52:	f000 809d 	beq.w	8006c90 <_printf_i+0x1a4>
 8006b56:	d808      	bhi.n	8006b6a <_printf_i+0x7e>
 8006b58:	296f      	cmp	r1, #111	; 0x6f
 8006b5a:	d020      	beq.n	8006b9e <_printf_i+0xb2>
 8006b5c:	2970      	cmp	r1, #112	; 0x70
 8006b5e:	d1dd      	bne.n	8006b1c <_printf_i+0x30>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	f043 0320 	orr.w	r3, r3, #32
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	e003      	b.n	8006b72 <_printf_i+0x86>
 8006b6a:	2975      	cmp	r1, #117	; 0x75
 8006b6c:	d017      	beq.n	8006b9e <_printf_i+0xb2>
 8006b6e:	2978      	cmp	r1, #120	; 0x78
 8006b70:	d1d4      	bne.n	8006b1c <_printf_i+0x30>
 8006b72:	2378      	movs	r3, #120	; 0x78
 8006b74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b78:	4864      	ldr	r0, [pc, #400]	; (8006d0c <_printf_i+0x220>)
 8006b7a:	e055      	b.n	8006c28 <_printf_i+0x13c>
 8006b7c:	6813      	ldr	r3, [r2, #0]
 8006b7e:	1d19      	adds	r1, r3, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6011      	str	r1, [r2, #0]
 8006b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e08c      	b.n	8006caa <_printf_i+0x1be>
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b98:	bf18      	it	ne
 8006b9a:	b21b      	sxthne	r3, r3
 8006b9c:	e7cf      	b.n	8006b3e <_printf_i+0x52>
 8006b9e:	6813      	ldr	r3, [r2, #0]
 8006ba0:	6825      	ldr	r5, [r4, #0]
 8006ba2:	1d18      	adds	r0, r3, #4
 8006ba4:	6010      	str	r0, [r2, #0]
 8006ba6:	0628      	lsls	r0, r5, #24
 8006ba8:	d501      	bpl.n	8006bae <_printf_i+0xc2>
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	e002      	b.n	8006bb4 <_printf_i+0xc8>
 8006bae:	0668      	lsls	r0, r5, #25
 8006bb0:	d5fb      	bpl.n	8006baa <_printf_i+0xbe>
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	4854      	ldr	r0, [pc, #336]	; (8006d08 <_printf_i+0x21c>)
 8006bb6:	296f      	cmp	r1, #111	; 0x6f
 8006bb8:	bf14      	ite	ne
 8006bba:	220a      	movne	r2, #10
 8006bbc:	2208      	moveq	r2, #8
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bc4:	6865      	ldr	r5, [r4, #4]
 8006bc6:	60a5      	str	r5, [r4, #8]
 8006bc8:	2d00      	cmp	r5, #0
 8006bca:	f2c0 8095 	blt.w	8006cf8 <_printf_i+0x20c>
 8006bce:	6821      	ldr	r1, [r4, #0]
 8006bd0:	f021 0104 	bic.w	r1, r1, #4
 8006bd4:	6021      	str	r1, [r4, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d13d      	bne.n	8006c56 <_printf_i+0x16a>
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	f040 808e 	bne.w	8006cfc <_printf_i+0x210>
 8006be0:	4665      	mov	r5, ip
 8006be2:	2a08      	cmp	r2, #8
 8006be4:	d10b      	bne.n	8006bfe <_printf_i+0x112>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	07db      	lsls	r3, r3, #31
 8006bea:	d508      	bpl.n	8006bfe <_printf_i+0x112>
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	6862      	ldr	r2, [r4, #4]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	bfde      	ittt	le
 8006bf4:	2330      	movle	r3, #48	; 0x30
 8006bf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bfe:	ebac 0305 	sub.w	r3, ip, r5
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	f8cd 8000 	str.w	r8, [sp]
 8006c08:	463b      	mov	r3, r7
 8006c0a:	aa03      	add	r2, sp, #12
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f7ff fef6 	bl	8006a00 <_printf_common>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d14d      	bne.n	8006cb4 <_printf_i+0x1c8>
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	b005      	add	sp, #20
 8006c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c22:	4839      	ldr	r0, [pc, #228]	; (8006d08 <_printf_i+0x21c>)
 8006c24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c28:	6813      	ldr	r3, [r2, #0]
 8006c2a:	6821      	ldr	r1, [r4, #0]
 8006c2c:	1d1d      	adds	r5, r3, #4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6015      	str	r5, [r2, #0]
 8006c32:	060a      	lsls	r2, r1, #24
 8006c34:	d50b      	bpl.n	8006c4e <_printf_i+0x162>
 8006c36:	07ca      	lsls	r2, r1, #31
 8006c38:	bf44      	itt	mi
 8006c3a:	f041 0120 	orrmi.w	r1, r1, #32
 8006c3e:	6021      	strmi	r1, [r4, #0]
 8006c40:	b91b      	cbnz	r3, 8006c4a <_printf_i+0x15e>
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	f022 0220 	bic.w	r2, r2, #32
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	2210      	movs	r2, #16
 8006c4c:	e7b7      	b.n	8006bbe <_printf_i+0xd2>
 8006c4e:	064d      	lsls	r5, r1, #25
 8006c50:	bf48      	it	mi
 8006c52:	b29b      	uxthmi	r3, r3
 8006c54:	e7ef      	b.n	8006c36 <_printf_i+0x14a>
 8006c56:	4665      	mov	r5, ip
 8006c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c5c:	fb02 3311 	mls	r3, r2, r1, r3
 8006c60:	5cc3      	ldrb	r3, [r0, r3]
 8006c62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c66:	460b      	mov	r3, r1
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	d1f5      	bne.n	8006c58 <_printf_i+0x16c>
 8006c6c:	e7b9      	b.n	8006be2 <_printf_i+0xf6>
 8006c6e:	6813      	ldr	r3, [r2, #0]
 8006c70:	6825      	ldr	r5, [r4, #0]
 8006c72:	6961      	ldr	r1, [r4, #20]
 8006c74:	1d18      	adds	r0, r3, #4
 8006c76:	6010      	str	r0, [r2, #0]
 8006c78:	0628      	lsls	r0, r5, #24
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	d501      	bpl.n	8006c82 <_printf_i+0x196>
 8006c7e:	6019      	str	r1, [r3, #0]
 8006c80:	e002      	b.n	8006c88 <_printf_i+0x19c>
 8006c82:	066a      	lsls	r2, r5, #25
 8006c84:	d5fb      	bpl.n	8006c7e <_printf_i+0x192>
 8006c86:	8019      	strh	r1, [r3, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	6123      	str	r3, [r4, #16]
 8006c8c:	4665      	mov	r5, ip
 8006c8e:	e7b9      	b.n	8006c04 <_printf_i+0x118>
 8006c90:	6813      	ldr	r3, [r2, #0]
 8006c92:	1d19      	adds	r1, r3, #4
 8006c94:	6011      	str	r1, [r2, #0]
 8006c96:	681d      	ldr	r5, [r3, #0]
 8006c98:	6862      	ldr	r2, [r4, #4]
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f7f9 faa7 	bl	80001f0 <memchr>
 8006ca2:	b108      	cbz	r0, 8006ca8 <_printf_i+0x1bc>
 8006ca4:	1b40      	subs	r0, r0, r5
 8006ca6:	6060      	str	r0, [r4, #4]
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	2300      	movs	r3, #0
 8006cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb2:	e7a7      	b.n	8006c04 <_printf_i+0x118>
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	4639      	mov	r1, r7
 8006cba:	4630      	mov	r0, r6
 8006cbc:	47c0      	blx	r8
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d0aa      	beq.n	8006c18 <_printf_i+0x12c>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	079b      	lsls	r3, r3, #30
 8006cc6:	d413      	bmi.n	8006cf0 <_printf_i+0x204>
 8006cc8:	68e0      	ldr	r0, [r4, #12]
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	4298      	cmp	r0, r3
 8006cce:	bfb8      	it	lt
 8006cd0:	4618      	movlt	r0, r3
 8006cd2:	e7a3      	b.n	8006c1c <_printf_i+0x130>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	464a      	mov	r2, r9
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	47c0      	blx	r8
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d09a      	beq.n	8006c18 <_printf_i+0x12c>
 8006ce2:	3501      	adds	r5, #1
 8006ce4:	68e3      	ldr	r3, [r4, #12]
 8006ce6:	9a03      	ldr	r2, [sp, #12]
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	42ab      	cmp	r3, r5
 8006cec:	dcf2      	bgt.n	8006cd4 <_printf_i+0x1e8>
 8006cee:	e7eb      	b.n	8006cc8 <_printf_i+0x1dc>
 8006cf0:	2500      	movs	r5, #0
 8006cf2:	f104 0919 	add.w	r9, r4, #25
 8006cf6:	e7f5      	b.n	8006ce4 <_printf_i+0x1f8>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ac      	bne.n	8006c56 <_printf_i+0x16a>
 8006cfc:	7803      	ldrb	r3, [r0, #0]
 8006cfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d06:	e76c      	b.n	8006be2 <_printf_i+0xf6>
 8006d08:	0800b58e 	.word	0x0800b58e
 8006d0c:	0800b59f 	.word	0x0800b59f

08006d10 <_scanf_float>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	469a      	mov	sl, r3
 8006d16:	688b      	ldr	r3, [r1, #8]
 8006d18:	4616      	mov	r6, r2
 8006d1a:	1e5a      	subs	r2, r3, #1
 8006d1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006d20:	b087      	sub	sp, #28
 8006d22:	bf83      	ittte	hi
 8006d24:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006d28:	189b      	addhi	r3, r3, r2
 8006d2a:	9301      	strhi	r3, [sp, #4]
 8006d2c:	2300      	movls	r3, #0
 8006d2e:	bf86      	itte	hi
 8006d30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006d34:	608b      	strhi	r3, [r1, #8]
 8006d36:	9301      	strls	r3, [sp, #4]
 8006d38:	680b      	ldr	r3, [r1, #0]
 8006d3a:	4688      	mov	r8, r1
 8006d3c:	f04f 0b00 	mov.w	fp, #0
 8006d40:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006d44:	f848 3b1c 	str.w	r3, [r8], #28
 8006d48:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4645      	mov	r5, r8
 8006d52:	465a      	mov	r2, fp
 8006d54:	46d9      	mov	r9, fp
 8006d56:	f8cd b008 	str.w	fp, [sp, #8]
 8006d5a:	68a1      	ldr	r1, [r4, #8]
 8006d5c:	b181      	cbz	r1, 8006d80 <_scanf_float+0x70>
 8006d5e:	6833      	ldr	r3, [r6, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b49      	cmp	r3, #73	; 0x49
 8006d64:	d071      	beq.n	8006e4a <_scanf_float+0x13a>
 8006d66:	d84d      	bhi.n	8006e04 <_scanf_float+0xf4>
 8006d68:	2b39      	cmp	r3, #57	; 0x39
 8006d6a:	d840      	bhi.n	8006dee <_scanf_float+0xde>
 8006d6c:	2b31      	cmp	r3, #49	; 0x31
 8006d6e:	f080 8088 	bcs.w	8006e82 <_scanf_float+0x172>
 8006d72:	2b2d      	cmp	r3, #45	; 0x2d
 8006d74:	f000 8090 	beq.w	8006e98 <_scanf_float+0x188>
 8006d78:	d815      	bhi.n	8006da6 <_scanf_float+0x96>
 8006d7a:	2b2b      	cmp	r3, #43	; 0x2b
 8006d7c:	f000 808c 	beq.w	8006e98 <_scanf_float+0x188>
 8006d80:	f1b9 0f00 	cmp.w	r9, #0
 8006d84:	d003      	beq.n	8006d8e <_scanf_float+0x7e>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	3a01      	subs	r2, #1
 8006d90:	2a01      	cmp	r2, #1
 8006d92:	f200 80ea 	bhi.w	8006f6a <_scanf_float+0x25a>
 8006d96:	4545      	cmp	r5, r8
 8006d98:	f200 80dc 	bhi.w	8006f54 <_scanf_float+0x244>
 8006d9c:	2601      	movs	r6, #1
 8006d9e:	4630      	mov	r0, r6
 8006da0:	b007      	add	sp, #28
 8006da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da6:	2b2e      	cmp	r3, #46	; 0x2e
 8006da8:	f000 809f 	beq.w	8006eea <_scanf_float+0x1da>
 8006dac:	2b30      	cmp	r3, #48	; 0x30
 8006dae:	d1e7      	bne.n	8006d80 <_scanf_float+0x70>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006db6:	d064      	beq.n	8006e82 <_scanf_float+0x172>
 8006db8:	9b01      	ldr	r3, [sp, #4]
 8006dba:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006dbe:	6020      	str	r0, [r4, #0]
 8006dc0:	f109 0901 	add.w	r9, r9, #1
 8006dc4:	b11b      	cbz	r3, 8006dce <_scanf_float+0xbe>
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	3101      	adds	r1, #1
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	60a1      	str	r1, [r4, #8]
 8006dce:	68a3      	ldr	r3, [r4, #8]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	60a3      	str	r3, [r4, #8]
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	6123      	str	r3, [r4, #16]
 8006dda:	6873      	ldr	r3, [r6, #4]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	6073      	str	r3, [r6, #4]
 8006de2:	f340 80ac 	ble.w	8006f3e <_scanf_float+0x22e>
 8006de6:	6833      	ldr	r3, [r6, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	6033      	str	r3, [r6, #0]
 8006dec:	e7b5      	b.n	8006d5a <_scanf_float+0x4a>
 8006dee:	2b45      	cmp	r3, #69	; 0x45
 8006df0:	f000 8085 	beq.w	8006efe <_scanf_float+0x1ee>
 8006df4:	2b46      	cmp	r3, #70	; 0x46
 8006df6:	d06a      	beq.n	8006ece <_scanf_float+0x1be>
 8006df8:	2b41      	cmp	r3, #65	; 0x41
 8006dfa:	d1c1      	bne.n	8006d80 <_scanf_float+0x70>
 8006dfc:	2a01      	cmp	r2, #1
 8006dfe:	d1bf      	bne.n	8006d80 <_scanf_float+0x70>
 8006e00:	2202      	movs	r2, #2
 8006e02:	e046      	b.n	8006e92 <_scanf_float+0x182>
 8006e04:	2b65      	cmp	r3, #101	; 0x65
 8006e06:	d07a      	beq.n	8006efe <_scanf_float+0x1ee>
 8006e08:	d818      	bhi.n	8006e3c <_scanf_float+0x12c>
 8006e0a:	2b54      	cmp	r3, #84	; 0x54
 8006e0c:	d066      	beq.n	8006edc <_scanf_float+0x1cc>
 8006e0e:	d811      	bhi.n	8006e34 <_scanf_float+0x124>
 8006e10:	2b4e      	cmp	r3, #78	; 0x4e
 8006e12:	d1b5      	bne.n	8006d80 <_scanf_float+0x70>
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	d146      	bne.n	8006ea6 <_scanf_float+0x196>
 8006e18:	f1b9 0f00 	cmp.w	r9, #0
 8006e1c:	d145      	bne.n	8006eaa <_scanf_float+0x19a>
 8006e1e:	6821      	ldr	r1, [r4, #0]
 8006e20:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006e24:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006e28:	d13f      	bne.n	8006eaa <_scanf_float+0x19a>
 8006e2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e2e:	6021      	str	r1, [r4, #0]
 8006e30:	2201      	movs	r2, #1
 8006e32:	e02e      	b.n	8006e92 <_scanf_float+0x182>
 8006e34:	2b59      	cmp	r3, #89	; 0x59
 8006e36:	d01e      	beq.n	8006e76 <_scanf_float+0x166>
 8006e38:	2b61      	cmp	r3, #97	; 0x61
 8006e3a:	e7de      	b.n	8006dfa <_scanf_float+0xea>
 8006e3c:	2b6e      	cmp	r3, #110	; 0x6e
 8006e3e:	d0e9      	beq.n	8006e14 <_scanf_float+0x104>
 8006e40:	d815      	bhi.n	8006e6e <_scanf_float+0x15e>
 8006e42:	2b66      	cmp	r3, #102	; 0x66
 8006e44:	d043      	beq.n	8006ece <_scanf_float+0x1be>
 8006e46:	2b69      	cmp	r3, #105	; 0x69
 8006e48:	d19a      	bne.n	8006d80 <_scanf_float+0x70>
 8006e4a:	f1bb 0f00 	cmp.w	fp, #0
 8006e4e:	d138      	bne.n	8006ec2 <_scanf_float+0x1b2>
 8006e50:	f1b9 0f00 	cmp.w	r9, #0
 8006e54:	d197      	bne.n	8006d86 <_scanf_float+0x76>
 8006e56:	6821      	ldr	r1, [r4, #0]
 8006e58:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006e5c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006e60:	d195      	bne.n	8006d8e <_scanf_float+0x7e>
 8006e62:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e66:	6021      	str	r1, [r4, #0]
 8006e68:	f04f 0b01 	mov.w	fp, #1
 8006e6c:	e011      	b.n	8006e92 <_scanf_float+0x182>
 8006e6e:	2b74      	cmp	r3, #116	; 0x74
 8006e70:	d034      	beq.n	8006edc <_scanf_float+0x1cc>
 8006e72:	2b79      	cmp	r3, #121	; 0x79
 8006e74:	d184      	bne.n	8006d80 <_scanf_float+0x70>
 8006e76:	f1bb 0f07 	cmp.w	fp, #7
 8006e7a:	d181      	bne.n	8006d80 <_scanf_float+0x70>
 8006e7c:	f04f 0b08 	mov.w	fp, #8
 8006e80:	e007      	b.n	8006e92 <_scanf_float+0x182>
 8006e82:	eb12 0f0b 	cmn.w	r2, fp
 8006e86:	f47f af7b 	bne.w	8006d80 <_scanf_float+0x70>
 8006e8a:	6821      	ldr	r1, [r4, #0]
 8006e8c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006e90:	6021      	str	r1, [r4, #0]
 8006e92:	702b      	strb	r3, [r5, #0]
 8006e94:	3501      	adds	r5, #1
 8006e96:	e79a      	b.n	8006dce <_scanf_float+0xbe>
 8006e98:	6821      	ldr	r1, [r4, #0]
 8006e9a:	0608      	lsls	r0, r1, #24
 8006e9c:	f57f af70 	bpl.w	8006d80 <_scanf_float+0x70>
 8006ea0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ea4:	e7f4      	b.n	8006e90 <_scanf_float+0x180>
 8006ea6:	2a02      	cmp	r2, #2
 8006ea8:	d047      	beq.n	8006f3a <_scanf_float+0x22a>
 8006eaa:	f1bb 0f01 	cmp.w	fp, #1
 8006eae:	d003      	beq.n	8006eb8 <_scanf_float+0x1a8>
 8006eb0:	f1bb 0f04 	cmp.w	fp, #4
 8006eb4:	f47f af64 	bne.w	8006d80 <_scanf_float+0x70>
 8006eb8:	f10b 0b01 	add.w	fp, fp, #1
 8006ebc:	fa5f fb8b 	uxtb.w	fp, fp
 8006ec0:	e7e7      	b.n	8006e92 <_scanf_float+0x182>
 8006ec2:	f1bb 0f03 	cmp.w	fp, #3
 8006ec6:	d0f7      	beq.n	8006eb8 <_scanf_float+0x1a8>
 8006ec8:	f1bb 0f05 	cmp.w	fp, #5
 8006ecc:	e7f2      	b.n	8006eb4 <_scanf_float+0x1a4>
 8006ece:	f1bb 0f02 	cmp.w	fp, #2
 8006ed2:	f47f af55 	bne.w	8006d80 <_scanf_float+0x70>
 8006ed6:	f04f 0b03 	mov.w	fp, #3
 8006eda:	e7da      	b.n	8006e92 <_scanf_float+0x182>
 8006edc:	f1bb 0f06 	cmp.w	fp, #6
 8006ee0:	f47f af4e 	bne.w	8006d80 <_scanf_float+0x70>
 8006ee4:	f04f 0b07 	mov.w	fp, #7
 8006ee8:	e7d3      	b.n	8006e92 <_scanf_float+0x182>
 8006eea:	6821      	ldr	r1, [r4, #0]
 8006eec:	0588      	lsls	r0, r1, #22
 8006eee:	f57f af47 	bpl.w	8006d80 <_scanf_float+0x70>
 8006ef2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006ef6:	6021      	str	r1, [r4, #0]
 8006ef8:	f8cd 9008 	str.w	r9, [sp, #8]
 8006efc:	e7c9      	b.n	8006e92 <_scanf_float+0x182>
 8006efe:	6821      	ldr	r1, [r4, #0]
 8006f00:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006f04:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006f08:	d006      	beq.n	8006f18 <_scanf_float+0x208>
 8006f0a:	0548      	lsls	r0, r1, #21
 8006f0c:	f57f af38 	bpl.w	8006d80 <_scanf_float+0x70>
 8006f10:	f1b9 0f00 	cmp.w	r9, #0
 8006f14:	f43f af3b 	beq.w	8006d8e <_scanf_float+0x7e>
 8006f18:	0588      	lsls	r0, r1, #22
 8006f1a:	bf58      	it	pl
 8006f1c:	9802      	ldrpl	r0, [sp, #8]
 8006f1e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f22:	bf58      	it	pl
 8006f24:	eba9 0000 	subpl.w	r0, r9, r0
 8006f28:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006f2c:	bf58      	it	pl
 8006f2e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006f32:	6021      	str	r1, [r4, #0]
 8006f34:	f04f 0900 	mov.w	r9, #0
 8006f38:	e7ab      	b.n	8006e92 <_scanf_float+0x182>
 8006f3a:	2203      	movs	r2, #3
 8006f3c:	e7a9      	b.n	8006e92 <_scanf_float+0x182>
 8006f3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f42:	9205      	str	r2, [sp, #20]
 8006f44:	4631      	mov	r1, r6
 8006f46:	4638      	mov	r0, r7
 8006f48:	4798      	blx	r3
 8006f4a:	9a05      	ldr	r2, [sp, #20]
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f43f af04 	beq.w	8006d5a <_scanf_float+0x4a>
 8006f52:	e715      	b.n	8006d80 <_scanf_float+0x70>
 8006f54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f5c:	4632      	mov	r2, r6
 8006f5e:	4638      	mov	r0, r7
 8006f60:	4798      	blx	r3
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	e715      	b.n	8006d96 <_scanf_float+0x86>
 8006f6a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006f6e:	2b06      	cmp	r3, #6
 8006f70:	d80a      	bhi.n	8006f88 <_scanf_float+0x278>
 8006f72:	f1bb 0f02 	cmp.w	fp, #2
 8006f76:	d968      	bls.n	800704a <_scanf_float+0x33a>
 8006f78:	f1ab 0b03 	sub.w	fp, fp, #3
 8006f7c:	fa5f fb8b 	uxtb.w	fp, fp
 8006f80:	eba5 0b0b 	sub.w	fp, r5, fp
 8006f84:	455d      	cmp	r5, fp
 8006f86:	d14b      	bne.n	8007020 <_scanf_float+0x310>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	05da      	lsls	r2, r3, #23
 8006f8c:	d51f      	bpl.n	8006fce <_scanf_float+0x2be>
 8006f8e:	055b      	lsls	r3, r3, #21
 8006f90:	d468      	bmi.n	8007064 <_scanf_float+0x354>
 8006f92:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	2965      	cmp	r1, #101	; 0x65
 8006f9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f9e:	f105 3bff 	add.w	fp, r5, #4294967295
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	d00d      	beq.n	8006fc2 <_scanf_float+0x2b2>
 8006fa6:	2945      	cmp	r1, #69	; 0x45
 8006fa8:	d00b      	beq.n	8006fc2 <_scanf_float+0x2b2>
 8006faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fae:	4632      	mov	r2, r6
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	4798      	blx	r3
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	f1a5 0b02 	sub.w	fp, r5, #2
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	4638      	mov	r0, r7
 8006fca:	4798      	blx	r3
 8006fcc:	465d      	mov	r5, fp
 8006fce:	6826      	ldr	r6, [r4, #0]
 8006fd0:	f016 0610 	ands.w	r6, r6, #16
 8006fd4:	d17a      	bne.n	80070cc <_scanf_float+0x3bc>
 8006fd6:	702e      	strb	r6, [r5, #0]
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe2:	d142      	bne.n	800706a <_scanf_float+0x35a>
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	eba9 0303 	sub.w	r3, r9, r3
 8006fea:	425a      	negs	r2, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d149      	bne.n	8007084 <_scanf_float+0x374>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4641      	mov	r1, r8
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f000 fea3 	bl	8007d40 <_strtod_r>
 8006ffa:	6825      	ldr	r5, [r4, #0]
 8006ffc:	f8da 3000 	ldr.w	r3, [sl]
 8007000:	f015 0f02 	tst.w	r5, #2
 8007004:	f103 0204 	add.w	r2, r3, #4
 8007008:	ec59 8b10 	vmov	r8, r9, d0
 800700c:	f8ca 2000 	str.w	r2, [sl]
 8007010:	d043      	beq.n	800709a <_scanf_float+0x38a>
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	e9c3 8900 	strd	r8, r9, [r3]
 8007018:	68e3      	ldr	r3, [r4, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60e3      	str	r3, [r4, #12]
 800701e:	e6be      	b.n	8006d9e <_scanf_float+0x8e>
 8007020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007024:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007028:	4632      	mov	r2, r6
 800702a:	4638      	mov	r0, r7
 800702c:	4798      	blx	r3
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	3b01      	subs	r3, #1
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	e7a6      	b.n	8006f84 <_scanf_float+0x274>
 8007036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800703a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800703e:	4632      	mov	r2, r6
 8007040:	4638      	mov	r0, r7
 8007042:	4798      	blx	r3
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	3b01      	subs	r3, #1
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	4545      	cmp	r5, r8
 800704c:	d8f3      	bhi.n	8007036 <_scanf_float+0x326>
 800704e:	e6a5      	b.n	8006d9c <_scanf_float+0x8c>
 8007050:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007054:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007058:	4632      	mov	r2, r6
 800705a:	4638      	mov	r0, r7
 800705c:	4798      	blx	r3
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	3b01      	subs	r3, #1
 8007062:	6123      	str	r3, [r4, #16]
 8007064:	4545      	cmp	r5, r8
 8007066:	d8f3      	bhi.n	8007050 <_scanf_float+0x340>
 8007068:	e698      	b.n	8006d9c <_scanf_float+0x8c>
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0bf      	beq.n	8006ff0 <_scanf_float+0x2e0>
 8007070:	9904      	ldr	r1, [sp, #16]
 8007072:	230a      	movs	r3, #10
 8007074:	4632      	mov	r2, r6
 8007076:	3101      	adds	r1, #1
 8007078:	4638      	mov	r0, r7
 800707a:	f000 feed 	bl	8007e58 <_strtol_r>
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	9d04      	ldr	r5, [sp, #16]
 8007082:	1ac2      	subs	r2, r0, r3
 8007084:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007088:	429d      	cmp	r5, r3
 800708a:	bf28      	it	cs
 800708c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007090:	490f      	ldr	r1, [pc, #60]	; (80070d0 <_scanf_float+0x3c0>)
 8007092:	4628      	mov	r0, r5
 8007094:	f000 f824 	bl	80070e0 <siprintf>
 8007098:	e7aa      	b.n	8006ff0 <_scanf_float+0x2e0>
 800709a:	f015 0504 	ands.w	r5, r5, #4
 800709e:	d1b8      	bne.n	8007012 <_scanf_float+0x302>
 80070a0:	681f      	ldr	r7, [r3, #0]
 80070a2:	ee10 2a10 	vmov	r2, s0
 80070a6:	464b      	mov	r3, r9
 80070a8:	ee10 0a10 	vmov	r0, s0
 80070ac:	4649      	mov	r1, r9
 80070ae:	f7f9 fd45 	bl	8000b3c <__aeabi_dcmpun>
 80070b2:	b128      	cbz	r0, 80070c0 <_scanf_float+0x3b0>
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 f80d 	bl	80070d4 <nanf>
 80070ba:	ed87 0a00 	vstr	s0, [r7]
 80070be:	e7ab      	b.n	8007018 <_scanf_float+0x308>
 80070c0:	4640      	mov	r0, r8
 80070c2:	4649      	mov	r1, r9
 80070c4:	f7f9 fd98 	bl	8000bf8 <__aeabi_d2f>
 80070c8:	6038      	str	r0, [r7, #0]
 80070ca:	e7a5      	b.n	8007018 <_scanf_float+0x308>
 80070cc:	2600      	movs	r6, #0
 80070ce:	e666      	b.n	8006d9e <_scanf_float+0x8e>
 80070d0:	0800b5b0 	.word	0x0800b5b0

080070d4 <nanf>:
 80070d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070dc <nanf+0x8>
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	7fc00000 	.word	0x7fc00000

080070e0 <siprintf>:
 80070e0:	b40e      	push	{r1, r2, r3}
 80070e2:	b500      	push	{lr}
 80070e4:	b09c      	sub	sp, #112	; 0x70
 80070e6:	ab1d      	add	r3, sp, #116	; 0x74
 80070e8:	9002      	str	r0, [sp, #8]
 80070ea:	9006      	str	r0, [sp, #24]
 80070ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070f0:	4809      	ldr	r0, [pc, #36]	; (8007118 <siprintf+0x38>)
 80070f2:	9107      	str	r1, [sp, #28]
 80070f4:	9104      	str	r1, [sp, #16]
 80070f6:	4909      	ldr	r1, [pc, #36]	; (800711c <siprintf+0x3c>)
 80070f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fc:	9105      	str	r1, [sp, #20]
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	a902      	add	r1, sp, #8
 8007104:	f002 fd64 	bl	8009bd0 <_svfiprintf_r>
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	b01c      	add	sp, #112	; 0x70
 8007110:	f85d eb04 	ldr.w	lr, [sp], #4
 8007114:	b003      	add	sp, #12
 8007116:	4770      	bx	lr
 8007118:	20000024 	.word	0x20000024
 800711c:	ffff0208 	.word	0xffff0208

08007120 <sulp>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4604      	mov	r4, r0
 8007124:	460d      	mov	r5, r1
 8007126:	ec45 4b10 	vmov	d0, r4, r5
 800712a:	4616      	mov	r6, r2
 800712c:	f002 fb0c 	bl	8009748 <__ulp>
 8007130:	ec51 0b10 	vmov	r0, r1, d0
 8007134:	b17e      	cbz	r6, 8007156 <sulp+0x36>
 8007136:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800713a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800713e:	2b00      	cmp	r3, #0
 8007140:	dd09      	ble.n	8007156 <sulp+0x36>
 8007142:	051b      	lsls	r3, r3, #20
 8007144:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007148:	2400      	movs	r4, #0
 800714a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800714e:	4622      	mov	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	f7f9 fa59 	bl	8000608 <__aeabi_dmul>
 8007156:	bd70      	pop	{r4, r5, r6, pc}

08007158 <_strtod_l>:
 8007158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	461f      	mov	r7, r3
 800715e:	b0a1      	sub	sp, #132	; 0x84
 8007160:	2300      	movs	r3, #0
 8007162:	4681      	mov	r9, r0
 8007164:	4638      	mov	r0, r7
 8007166:	460e      	mov	r6, r1
 8007168:	9217      	str	r2, [sp, #92]	; 0x5c
 800716a:	931c      	str	r3, [sp, #112]	; 0x70
 800716c:	f001 fff5 	bl	800915a <__localeconv_l>
 8007170:	4680      	mov	r8, r0
 8007172:	6800      	ldr	r0, [r0, #0]
 8007174:	f7f9 f834 	bl	80001e0 <strlen>
 8007178:	f04f 0a00 	mov.w	sl, #0
 800717c:	4604      	mov	r4, r0
 800717e:	f04f 0b00 	mov.w	fp, #0
 8007182:	961b      	str	r6, [sp, #108]	; 0x6c
 8007184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007186:	781a      	ldrb	r2, [r3, #0]
 8007188:	2a0d      	cmp	r2, #13
 800718a:	d832      	bhi.n	80071f2 <_strtod_l+0x9a>
 800718c:	2a09      	cmp	r2, #9
 800718e:	d236      	bcs.n	80071fe <_strtod_l+0xa6>
 8007190:	2a00      	cmp	r2, #0
 8007192:	d03e      	beq.n	8007212 <_strtod_l+0xba>
 8007194:	2300      	movs	r3, #0
 8007196:	930d      	str	r3, [sp, #52]	; 0x34
 8007198:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800719a:	782b      	ldrb	r3, [r5, #0]
 800719c:	2b30      	cmp	r3, #48	; 0x30
 800719e:	f040 80ac 	bne.w	80072fa <_strtod_l+0x1a2>
 80071a2:	786b      	ldrb	r3, [r5, #1]
 80071a4:	2b58      	cmp	r3, #88	; 0x58
 80071a6:	d001      	beq.n	80071ac <_strtod_l+0x54>
 80071a8:	2b78      	cmp	r3, #120	; 0x78
 80071aa:	d167      	bne.n	800727c <_strtod_l+0x124>
 80071ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	ab1c      	add	r3, sp, #112	; 0x70
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	9702      	str	r7, [sp, #8]
 80071b6:	ab1d      	add	r3, sp, #116	; 0x74
 80071b8:	4a88      	ldr	r2, [pc, #544]	; (80073dc <_strtod_l+0x284>)
 80071ba:	a91b      	add	r1, sp, #108	; 0x6c
 80071bc:	4648      	mov	r0, r9
 80071be:	f001 fcf2 	bl	8008ba6 <__gethex>
 80071c2:	f010 0407 	ands.w	r4, r0, #7
 80071c6:	4606      	mov	r6, r0
 80071c8:	d005      	beq.n	80071d6 <_strtod_l+0x7e>
 80071ca:	2c06      	cmp	r4, #6
 80071cc:	d12b      	bne.n	8007226 <_strtod_l+0xce>
 80071ce:	3501      	adds	r5, #1
 80071d0:	2300      	movs	r3, #0
 80071d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80071d4:	930d      	str	r3, [sp, #52]	; 0x34
 80071d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 859a 	bne.w	8007d12 <_strtod_l+0xbba>
 80071de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071e0:	b1e3      	cbz	r3, 800721c <_strtod_l+0xc4>
 80071e2:	4652      	mov	r2, sl
 80071e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071e8:	ec43 2b10 	vmov	d0, r2, r3
 80071ec:	b021      	add	sp, #132	; 0x84
 80071ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f2:	2a2b      	cmp	r2, #43	; 0x2b
 80071f4:	d015      	beq.n	8007222 <_strtod_l+0xca>
 80071f6:	2a2d      	cmp	r2, #45	; 0x2d
 80071f8:	d004      	beq.n	8007204 <_strtod_l+0xac>
 80071fa:	2a20      	cmp	r2, #32
 80071fc:	d1ca      	bne.n	8007194 <_strtod_l+0x3c>
 80071fe:	3301      	adds	r3, #1
 8007200:	931b      	str	r3, [sp, #108]	; 0x6c
 8007202:	e7bf      	b.n	8007184 <_strtod_l+0x2c>
 8007204:	2201      	movs	r2, #1
 8007206:	920d      	str	r2, [sp, #52]	; 0x34
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	921b      	str	r2, [sp, #108]	; 0x6c
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1c2      	bne.n	8007198 <_strtod_l+0x40>
 8007212:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007214:	961b      	str	r6, [sp, #108]	; 0x6c
 8007216:	2b00      	cmp	r3, #0
 8007218:	f040 8579 	bne.w	8007d0e <_strtod_l+0xbb6>
 800721c:	4652      	mov	r2, sl
 800721e:	465b      	mov	r3, fp
 8007220:	e7e2      	b.n	80071e8 <_strtod_l+0x90>
 8007222:	2200      	movs	r2, #0
 8007224:	e7ef      	b.n	8007206 <_strtod_l+0xae>
 8007226:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007228:	b13a      	cbz	r2, 800723a <_strtod_l+0xe2>
 800722a:	2135      	movs	r1, #53	; 0x35
 800722c:	a81e      	add	r0, sp, #120	; 0x78
 800722e:	f002 fb83 	bl	8009938 <__copybits>
 8007232:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007234:	4648      	mov	r0, r9
 8007236:	f001 ffef 	bl	8009218 <_Bfree>
 800723a:	3c01      	subs	r4, #1
 800723c:	2c04      	cmp	r4, #4
 800723e:	d806      	bhi.n	800724e <_strtod_l+0xf6>
 8007240:	e8df f004 	tbb	[pc, r4]
 8007244:	1714030a 	.word	0x1714030a
 8007248:	0a          	.byte	0x0a
 8007249:	00          	.byte	0x00
 800724a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800724e:	0730      	lsls	r0, r6, #28
 8007250:	d5c1      	bpl.n	80071d6 <_strtod_l+0x7e>
 8007252:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007256:	e7be      	b.n	80071d6 <_strtod_l+0x7e>
 8007258:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800725c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800725e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007262:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007266:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800726a:	e7f0      	b.n	800724e <_strtod_l+0xf6>
 800726c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80073e0 <_strtod_l+0x288>
 8007270:	e7ed      	b.n	800724e <_strtod_l+0xf6>
 8007272:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007276:	f04f 3aff 	mov.w	sl, #4294967295
 800727a:	e7e8      	b.n	800724e <_strtod_l+0xf6>
 800727c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	921b      	str	r2, [sp, #108]	; 0x6c
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b30      	cmp	r3, #48	; 0x30
 8007286:	d0f9      	beq.n	800727c <_strtod_l+0x124>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0a4      	beq.n	80071d6 <_strtod_l+0x7e>
 800728c:	2301      	movs	r3, #1
 800728e:	2500      	movs	r5, #0
 8007290:	9306      	str	r3, [sp, #24]
 8007292:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007294:	9308      	str	r3, [sp, #32]
 8007296:	9507      	str	r5, [sp, #28]
 8007298:	9505      	str	r5, [sp, #20]
 800729a:	220a      	movs	r2, #10
 800729c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800729e:	7807      	ldrb	r7, [r0, #0]
 80072a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80072a4:	b2d9      	uxtb	r1, r3
 80072a6:	2909      	cmp	r1, #9
 80072a8:	d929      	bls.n	80072fe <_strtod_l+0x1a6>
 80072aa:	4622      	mov	r2, r4
 80072ac:	f8d8 1000 	ldr.w	r1, [r8]
 80072b0:	f002 fd96 	bl	8009de0 <strncmp>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d031      	beq.n	800731c <_strtod_l+0x1c4>
 80072b8:	2000      	movs	r0, #0
 80072ba:	9c05      	ldr	r4, [sp, #20]
 80072bc:	9004      	str	r0, [sp, #16]
 80072be:	463b      	mov	r3, r7
 80072c0:	4602      	mov	r2, r0
 80072c2:	2b65      	cmp	r3, #101	; 0x65
 80072c4:	d001      	beq.n	80072ca <_strtod_l+0x172>
 80072c6:	2b45      	cmp	r3, #69	; 0x45
 80072c8:	d114      	bne.n	80072f4 <_strtod_l+0x19c>
 80072ca:	b924      	cbnz	r4, 80072d6 <_strtod_l+0x17e>
 80072cc:	b910      	cbnz	r0, 80072d4 <_strtod_l+0x17c>
 80072ce:	9b06      	ldr	r3, [sp, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d09e      	beq.n	8007212 <_strtod_l+0xba>
 80072d4:	2400      	movs	r4, #0
 80072d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80072d8:	1c73      	adds	r3, r6, #1
 80072da:	931b      	str	r3, [sp, #108]	; 0x6c
 80072dc:	7873      	ldrb	r3, [r6, #1]
 80072de:	2b2b      	cmp	r3, #43	; 0x2b
 80072e0:	d078      	beq.n	80073d4 <_strtod_l+0x27c>
 80072e2:	2b2d      	cmp	r3, #45	; 0x2d
 80072e4:	d070      	beq.n	80073c8 <_strtod_l+0x270>
 80072e6:	f04f 0c00 	mov.w	ip, #0
 80072ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80072ee:	2f09      	cmp	r7, #9
 80072f0:	d97c      	bls.n	80073ec <_strtod_l+0x294>
 80072f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80072f4:	f04f 0e00 	mov.w	lr, #0
 80072f8:	e09a      	b.n	8007430 <_strtod_l+0x2d8>
 80072fa:	2300      	movs	r3, #0
 80072fc:	e7c7      	b.n	800728e <_strtod_l+0x136>
 80072fe:	9905      	ldr	r1, [sp, #20]
 8007300:	2908      	cmp	r1, #8
 8007302:	bfdd      	ittte	le
 8007304:	9907      	ldrle	r1, [sp, #28]
 8007306:	fb02 3301 	mlale	r3, r2, r1, r3
 800730a:	9307      	strle	r3, [sp, #28]
 800730c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007310:	9b05      	ldr	r3, [sp, #20]
 8007312:	3001      	adds	r0, #1
 8007314:	3301      	adds	r3, #1
 8007316:	9305      	str	r3, [sp, #20]
 8007318:	901b      	str	r0, [sp, #108]	; 0x6c
 800731a:	e7bf      	b.n	800729c <_strtod_l+0x144>
 800731c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800731e:	191a      	adds	r2, r3, r4
 8007320:	921b      	str	r2, [sp, #108]	; 0x6c
 8007322:	9a05      	ldr	r2, [sp, #20]
 8007324:	5d1b      	ldrb	r3, [r3, r4]
 8007326:	2a00      	cmp	r2, #0
 8007328:	d037      	beq.n	800739a <_strtod_l+0x242>
 800732a:	9c05      	ldr	r4, [sp, #20]
 800732c:	4602      	mov	r2, r0
 800732e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007332:	2909      	cmp	r1, #9
 8007334:	d913      	bls.n	800735e <_strtod_l+0x206>
 8007336:	2101      	movs	r1, #1
 8007338:	9104      	str	r1, [sp, #16]
 800733a:	e7c2      	b.n	80072c2 <_strtod_l+0x16a>
 800733c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	921b      	str	r2, [sp, #108]	; 0x6c
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	3001      	adds	r0, #1
 8007346:	2b30      	cmp	r3, #48	; 0x30
 8007348:	d0f8      	beq.n	800733c <_strtod_l+0x1e4>
 800734a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800734e:	2a08      	cmp	r2, #8
 8007350:	f200 84e4 	bhi.w	8007d1c <_strtod_l+0xbc4>
 8007354:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007356:	9208      	str	r2, [sp, #32]
 8007358:	4602      	mov	r2, r0
 800735a:	2000      	movs	r0, #0
 800735c:	4604      	mov	r4, r0
 800735e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007362:	f100 0101 	add.w	r1, r0, #1
 8007366:	d012      	beq.n	800738e <_strtod_l+0x236>
 8007368:	440a      	add	r2, r1
 800736a:	eb00 0c04 	add.w	ip, r0, r4
 800736e:	4621      	mov	r1, r4
 8007370:	270a      	movs	r7, #10
 8007372:	458c      	cmp	ip, r1
 8007374:	d113      	bne.n	800739e <_strtod_l+0x246>
 8007376:	1821      	adds	r1, r4, r0
 8007378:	2908      	cmp	r1, #8
 800737a:	f104 0401 	add.w	r4, r4, #1
 800737e:	4404      	add	r4, r0
 8007380:	dc19      	bgt.n	80073b6 <_strtod_l+0x25e>
 8007382:	9b07      	ldr	r3, [sp, #28]
 8007384:	210a      	movs	r1, #10
 8007386:	fb01 e303 	mla	r3, r1, r3, lr
 800738a:	9307      	str	r3, [sp, #28]
 800738c:	2100      	movs	r1, #0
 800738e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007390:	1c58      	adds	r0, r3, #1
 8007392:	901b      	str	r0, [sp, #108]	; 0x6c
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	4608      	mov	r0, r1
 8007398:	e7c9      	b.n	800732e <_strtod_l+0x1d6>
 800739a:	9805      	ldr	r0, [sp, #20]
 800739c:	e7d3      	b.n	8007346 <_strtod_l+0x1ee>
 800739e:	2908      	cmp	r1, #8
 80073a0:	f101 0101 	add.w	r1, r1, #1
 80073a4:	dc03      	bgt.n	80073ae <_strtod_l+0x256>
 80073a6:	9b07      	ldr	r3, [sp, #28]
 80073a8:	437b      	muls	r3, r7
 80073aa:	9307      	str	r3, [sp, #28]
 80073ac:	e7e1      	b.n	8007372 <_strtod_l+0x21a>
 80073ae:	2910      	cmp	r1, #16
 80073b0:	bfd8      	it	le
 80073b2:	437d      	mulle	r5, r7
 80073b4:	e7dd      	b.n	8007372 <_strtod_l+0x21a>
 80073b6:	2c10      	cmp	r4, #16
 80073b8:	bfdc      	itt	le
 80073ba:	210a      	movle	r1, #10
 80073bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80073c0:	e7e4      	b.n	800738c <_strtod_l+0x234>
 80073c2:	2301      	movs	r3, #1
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	e781      	b.n	80072cc <_strtod_l+0x174>
 80073c8:	f04f 0c01 	mov.w	ip, #1
 80073cc:	1cb3      	adds	r3, r6, #2
 80073ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80073d0:	78b3      	ldrb	r3, [r6, #2]
 80073d2:	e78a      	b.n	80072ea <_strtod_l+0x192>
 80073d4:	f04f 0c00 	mov.w	ip, #0
 80073d8:	e7f8      	b.n	80073cc <_strtod_l+0x274>
 80073da:	bf00      	nop
 80073dc:	0800b5b8 	.word	0x0800b5b8
 80073e0:	7ff00000 	.word	0x7ff00000
 80073e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073e6:	1c5f      	adds	r7, r3, #1
 80073e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80073ea:	785b      	ldrb	r3, [r3, #1]
 80073ec:	2b30      	cmp	r3, #48	; 0x30
 80073ee:	d0f9      	beq.n	80073e4 <_strtod_l+0x28c>
 80073f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80073f4:	2f08      	cmp	r7, #8
 80073f6:	f63f af7d 	bhi.w	80072f4 <_strtod_l+0x19c>
 80073fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80073fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007400:	930a      	str	r3, [sp, #40]	; 0x28
 8007402:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007404:	1c5f      	adds	r7, r3, #1
 8007406:	971b      	str	r7, [sp, #108]	; 0x6c
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800740e:	f1b8 0f09 	cmp.w	r8, #9
 8007412:	d937      	bls.n	8007484 <_strtod_l+0x32c>
 8007414:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007416:	1a7f      	subs	r7, r7, r1
 8007418:	2f08      	cmp	r7, #8
 800741a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800741e:	dc37      	bgt.n	8007490 <_strtod_l+0x338>
 8007420:	45be      	cmp	lr, r7
 8007422:	bfa8      	it	ge
 8007424:	46be      	movge	lr, r7
 8007426:	f1bc 0f00 	cmp.w	ip, #0
 800742a:	d001      	beq.n	8007430 <_strtod_l+0x2d8>
 800742c:	f1ce 0e00 	rsb	lr, lr, #0
 8007430:	2c00      	cmp	r4, #0
 8007432:	d151      	bne.n	80074d8 <_strtod_l+0x380>
 8007434:	2800      	cmp	r0, #0
 8007436:	f47f aece 	bne.w	80071d6 <_strtod_l+0x7e>
 800743a:	9a06      	ldr	r2, [sp, #24]
 800743c:	2a00      	cmp	r2, #0
 800743e:	f47f aeca 	bne.w	80071d6 <_strtod_l+0x7e>
 8007442:	9a04      	ldr	r2, [sp, #16]
 8007444:	2a00      	cmp	r2, #0
 8007446:	f47f aee4 	bne.w	8007212 <_strtod_l+0xba>
 800744a:	2b4e      	cmp	r3, #78	; 0x4e
 800744c:	d027      	beq.n	800749e <_strtod_l+0x346>
 800744e:	dc21      	bgt.n	8007494 <_strtod_l+0x33c>
 8007450:	2b49      	cmp	r3, #73	; 0x49
 8007452:	f47f aede 	bne.w	8007212 <_strtod_l+0xba>
 8007456:	49a0      	ldr	r1, [pc, #640]	; (80076d8 <_strtod_l+0x580>)
 8007458:	a81b      	add	r0, sp, #108	; 0x6c
 800745a:	f001 fdd7 	bl	800900c <__match>
 800745e:	2800      	cmp	r0, #0
 8007460:	f43f aed7 	beq.w	8007212 <_strtod_l+0xba>
 8007464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007466:	499d      	ldr	r1, [pc, #628]	; (80076dc <_strtod_l+0x584>)
 8007468:	3b01      	subs	r3, #1
 800746a:	a81b      	add	r0, sp, #108	; 0x6c
 800746c:	931b      	str	r3, [sp, #108]	; 0x6c
 800746e:	f001 fdcd 	bl	800900c <__match>
 8007472:	b910      	cbnz	r0, 800747a <_strtod_l+0x322>
 8007474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007476:	3301      	adds	r3, #1
 8007478:	931b      	str	r3, [sp, #108]	; 0x6c
 800747a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80076f0 <_strtod_l+0x598>
 800747e:	f04f 0a00 	mov.w	sl, #0
 8007482:	e6a8      	b.n	80071d6 <_strtod_l+0x7e>
 8007484:	210a      	movs	r1, #10
 8007486:	fb01 3e0e 	mla	lr, r1, lr, r3
 800748a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800748e:	e7b8      	b.n	8007402 <_strtod_l+0x2aa>
 8007490:	46be      	mov	lr, r7
 8007492:	e7c8      	b.n	8007426 <_strtod_l+0x2ce>
 8007494:	2b69      	cmp	r3, #105	; 0x69
 8007496:	d0de      	beq.n	8007456 <_strtod_l+0x2fe>
 8007498:	2b6e      	cmp	r3, #110	; 0x6e
 800749a:	f47f aeba 	bne.w	8007212 <_strtod_l+0xba>
 800749e:	4990      	ldr	r1, [pc, #576]	; (80076e0 <_strtod_l+0x588>)
 80074a0:	a81b      	add	r0, sp, #108	; 0x6c
 80074a2:	f001 fdb3 	bl	800900c <__match>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f aeb3 	beq.w	8007212 <_strtod_l+0xba>
 80074ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b28      	cmp	r3, #40	; 0x28
 80074b2:	d10e      	bne.n	80074d2 <_strtod_l+0x37a>
 80074b4:	aa1e      	add	r2, sp, #120	; 0x78
 80074b6:	498b      	ldr	r1, [pc, #556]	; (80076e4 <_strtod_l+0x58c>)
 80074b8:	a81b      	add	r0, sp, #108	; 0x6c
 80074ba:	f001 fdbb 	bl	8009034 <__hexnan>
 80074be:	2805      	cmp	r0, #5
 80074c0:	d107      	bne.n	80074d2 <_strtod_l+0x37a>
 80074c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074c4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80074c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80074cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80074d0:	e681      	b.n	80071d6 <_strtod_l+0x7e>
 80074d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80076f8 <_strtod_l+0x5a0>
 80074d6:	e7d2      	b.n	800747e <_strtod_l+0x326>
 80074d8:	ebae 0302 	sub.w	r3, lr, r2
 80074dc:	9306      	str	r3, [sp, #24]
 80074de:	9b05      	ldr	r3, [sp, #20]
 80074e0:	9807      	ldr	r0, [sp, #28]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bf08      	it	eq
 80074e6:	4623      	moveq	r3, r4
 80074e8:	2c10      	cmp	r4, #16
 80074ea:	9305      	str	r3, [sp, #20]
 80074ec:	46a0      	mov	r8, r4
 80074ee:	bfa8      	it	ge
 80074f0:	f04f 0810 	movge.w	r8, #16
 80074f4:	f7f9 f80e 	bl	8000514 <__aeabi_ui2d>
 80074f8:	2c09      	cmp	r4, #9
 80074fa:	4682      	mov	sl, r0
 80074fc:	468b      	mov	fp, r1
 80074fe:	dc13      	bgt.n	8007528 <_strtod_l+0x3d0>
 8007500:	9b06      	ldr	r3, [sp, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f43f ae67 	beq.w	80071d6 <_strtod_l+0x7e>
 8007508:	9b06      	ldr	r3, [sp, #24]
 800750a:	dd7a      	ble.n	8007602 <_strtod_l+0x4aa>
 800750c:	2b16      	cmp	r3, #22
 800750e:	dc61      	bgt.n	80075d4 <_strtod_l+0x47c>
 8007510:	4a75      	ldr	r2, [pc, #468]	; (80076e8 <_strtod_l+0x590>)
 8007512:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007516:	e9de 0100 	ldrd	r0, r1, [lr]
 800751a:	4652      	mov	r2, sl
 800751c:	465b      	mov	r3, fp
 800751e:	f7f9 f873 	bl	8000608 <__aeabi_dmul>
 8007522:	4682      	mov	sl, r0
 8007524:	468b      	mov	fp, r1
 8007526:	e656      	b.n	80071d6 <_strtod_l+0x7e>
 8007528:	4b6f      	ldr	r3, [pc, #444]	; (80076e8 <_strtod_l+0x590>)
 800752a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800752e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007532:	f7f9 f869 	bl	8000608 <__aeabi_dmul>
 8007536:	4606      	mov	r6, r0
 8007538:	4628      	mov	r0, r5
 800753a:	460f      	mov	r7, r1
 800753c:	f7f8 ffea 	bl	8000514 <__aeabi_ui2d>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4630      	mov	r0, r6
 8007546:	4639      	mov	r1, r7
 8007548:	f7f8 fea8 	bl	800029c <__adddf3>
 800754c:	2c0f      	cmp	r4, #15
 800754e:	4682      	mov	sl, r0
 8007550:	468b      	mov	fp, r1
 8007552:	ddd5      	ble.n	8007500 <_strtod_l+0x3a8>
 8007554:	9b06      	ldr	r3, [sp, #24]
 8007556:	eba4 0808 	sub.w	r8, r4, r8
 800755a:	4498      	add	r8, r3
 800755c:	f1b8 0f00 	cmp.w	r8, #0
 8007560:	f340 8096 	ble.w	8007690 <_strtod_l+0x538>
 8007564:	f018 030f 	ands.w	r3, r8, #15
 8007568:	d00a      	beq.n	8007580 <_strtod_l+0x428>
 800756a:	495f      	ldr	r1, [pc, #380]	; (80076e8 <_strtod_l+0x590>)
 800756c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007570:	4652      	mov	r2, sl
 8007572:	465b      	mov	r3, fp
 8007574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007578:	f7f9 f846 	bl	8000608 <__aeabi_dmul>
 800757c:	4682      	mov	sl, r0
 800757e:	468b      	mov	fp, r1
 8007580:	f038 080f 	bics.w	r8, r8, #15
 8007584:	d073      	beq.n	800766e <_strtod_l+0x516>
 8007586:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800758a:	dd47      	ble.n	800761c <_strtod_l+0x4c4>
 800758c:	2400      	movs	r4, #0
 800758e:	46a0      	mov	r8, r4
 8007590:	9407      	str	r4, [sp, #28]
 8007592:	9405      	str	r4, [sp, #20]
 8007594:	2322      	movs	r3, #34	; 0x22
 8007596:	f8df b158 	ldr.w	fp, [pc, #344]	; 80076f0 <_strtod_l+0x598>
 800759a:	f8c9 3000 	str.w	r3, [r9]
 800759e:	f04f 0a00 	mov.w	sl, #0
 80075a2:	9b07      	ldr	r3, [sp, #28]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f43f ae16 	beq.w	80071d6 <_strtod_l+0x7e>
 80075aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80075ac:	4648      	mov	r0, r9
 80075ae:	f001 fe33 	bl	8009218 <_Bfree>
 80075b2:	9905      	ldr	r1, [sp, #20]
 80075b4:	4648      	mov	r0, r9
 80075b6:	f001 fe2f 	bl	8009218 <_Bfree>
 80075ba:	4641      	mov	r1, r8
 80075bc:	4648      	mov	r0, r9
 80075be:	f001 fe2b 	bl	8009218 <_Bfree>
 80075c2:	9907      	ldr	r1, [sp, #28]
 80075c4:	4648      	mov	r0, r9
 80075c6:	f001 fe27 	bl	8009218 <_Bfree>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4648      	mov	r0, r9
 80075ce:	f001 fe23 	bl	8009218 <_Bfree>
 80075d2:	e600      	b.n	80071d6 <_strtod_l+0x7e>
 80075d4:	9a06      	ldr	r2, [sp, #24]
 80075d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80075da:	4293      	cmp	r3, r2
 80075dc:	dbba      	blt.n	8007554 <_strtod_l+0x3fc>
 80075de:	4d42      	ldr	r5, [pc, #264]	; (80076e8 <_strtod_l+0x590>)
 80075e0:	f1c4 040f 	rsb	r4, r4, #15
 80075e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80075e8:	4652      	mov	r2, sl
 80075ea:	465b      	mov	r3, fp
 80075ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075f0:	f7f9 f80a 	bl	8000608 <__aeabi_dmul>
 80075f4:	9b06      	ldr	r3, [sp, #24]
 80075f6:	1b1c      	subs	r4, r3, r4
 80075f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80075fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007600:	e78d      	b.n	800751e <_strtod_l+0x3c6>
 8007602:	f113 0f16 	cmn.w	r3, #22
 8007606:	dba5      	blt.n	8007554 <_strtod_l+0x3fc>
 8007608:	4a37      	ldr	r2, [pc, #220]	; (80076e8 <_strtod_l+0x590>)
 800760a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800760e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007612:	4650      	mov	r0, sl
 8007614:	4659      	mov	r1, fp
 8007616:	f7f9 f921 	bl	800085c <__aeabi_ddiv>
 800761a:	e782      	b.n	8007522 <_strtod_l+0x3ca>
 800761c:	2300      	movs	r3, #0
 800761e:	4e33      	ldr	r6, [pc, #204]	; (80076ec <_strtod_l+0x594>)
 8007620:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007624:	4650      	mov	r0, sl
 8007626:	4659      	mov	r1, fp
 8007628:	461d      	mov	r5, r3
 800762a:	f1b8 0f01 	cmp.w	r8, #1
 800762e:	dc21      	bgt.n	8007674 <_strtod_l+0x51c>
 8007630:	b10b      	cbz	r3, 8007636 <_strtod_l+0x4de>
 8007632:	4682      	mov	sl, r0
 8007634:	468b      	mov	fp, r1
 8007636:	4b2d      	ldr	r3, [pc, #180]	; (80076ec <_strtod_l+0x594>)
 8007638:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800763c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007640:	4652      	mov	r2, sl
 8007642:	465b      	mov	r3, fp
 8007644:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007648:	f7f8 ffde 	bl	8000608 <__aeabi_dmul>
 800764c:	4b28      	ldr	r3, [pc, #160]	; (80076f0 <_strtod_l+0x598>)
 800764e:	460a      	mov	r2, r1
 8007650:	400b      	ands	r3, r1
 8007652:	4928      	ldr	r1, [pc, #160]	; (80076f4 <_strtod_l+0x59c>)
 8007654:	428b      	cmp	r3, r1
 8007656:	4682      	mov	sl, r0
 8007658:	d898      	bhi.n	800758c <_strtod_l+0x434>
 800765a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800765e:	428b      	cmp	r3, r1
 8007660:	bf86      	itte	hi
 8007662:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80076fc <_strtod_l+0x5a4>
 8007666:	f04f 3aff 	movhi.w	sl, #4294967295
 800766a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800766e:	2300      	movs	r3, #0
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	e077      	b.n	8007764 <_strtod_l+0x60c>
 8007674:	f018 0f01 	tst.w	r8, #1
 8007678:	d006      	beq.n	8007688 <_strtod_l+0x530>
 800767a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f7f8 ffc1 	bl	8000608 <__aeabi_dmul>
 8007686:	2301      	movs	r3, #1
 8007688:	3501      	adds	r5, #1
 800768a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800768e:	e7cc      	b.n	800762a <_strtod_l+0x4d2>
 8007690:	d0ed      	beq.n	800766e <_strtod_l+0x516>
 8007692:	f1c8 0800 	rsb	r8, r8, #0
 8007696:	f018 020f 	ands.w	r2, r8, #15
 800769a:	d00a      	beq.n	80076b2 <_strtod_l+0x55a>
 800769c:	4b12      	ldr	r3, [pc, #72]	; (80076e8 <_strtod_l+0x590>)
 800769e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076a2:	4650      	mov	r0, sl
 80076a4:	4659      	mov	r1, fp
 80076a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076aa:	f7f9 f8d7 	bl	800085c <__aeabi_ddiv>
 80076ae:	4682      	mov	sl, r0
 80076b0:	468b      	mov	fp, r1
 80076b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80076b6:	d0da      	beq.n	800766e <_strtod_l+0x516>
 80076b8:	f1b8 0f1f 	cmp.w	r8, #31
 80076bc:	dd20      	ble.n	8007700 <_strtod_l+0x5a8>
 80076be:	2400      	movs	r4, #0
 80076c0:	46a0      	mov	r8, r4
 80076c2:	9407      	str	r4, [sp, #28]
 80076c4:	9405      	str	r4, [sp, #20]
 80076c6:	2322      	movs	r3, #34	; 0x22
 80076c8:	f04f 0a00 	mov.w	sl, #0
 80076cc:	f04f 0b00 	mov.w	fp, #0
 80076d0:	f8c9 3000 	str.w	r3, [r9]
 80076d4:	e765      	b.n	80075a2 <_strtod_l+0x44a>
 80076d6:	bf00      	nop
 80076d8:	0800b581 	.word	0x0800b581
 80076dc:	0800b60b 	.word	0x0800b60b
 80076e0:	0800b589 	.word	0x0800b589
 80076e4:	0800b5cc 	.word	0x0800b5cc
 80076e8:	0800b648 	.word	0x0800b648
 80076ec:	0800b620 	.word	0x0800b620
 80076f0:	7ff00000 	.word	0x7ff00000
 80076f4:	7ca00000 	.word	0x7ca00000
 80076f8:	fff80000 	.word	0xfff80000
 80076fc:	7fefffff 	.word	0x7fefffff
 8007700:	f018 0310 	ands.w	r3, r8, #16
 8007704:	bf18      	it	ne
 8007706:	236a      	movne	r3, #106	; 0x6a
 8007708:	4da0      	ldr	r5, [pc, #640]	; (800798c <_strtod_l+0x834>)
 800770a:	9304      	str	r3, [sp, #16]
 800770c:	4650      	mov	r0, sl
 800770e:	4659      	mov	r1, fp
 8007710:	2300      	movs	r3, #0
 8007712:	f1b8 0f00 	cmp.w	r8, #0
 8007716:	f300 810a 	bgt.w	800792e <_strtod_l+0x7d6>
 800771a:	b10b      	cbz	r3, 8007720 <_strtod_l+0x5c8>
 800771c:	4682      	mov	sl, r0
 800771e:	468b      	mov	fp, r1
 8007720:	9b04      	ldr	r3, [sp, #16]
 8007722:	b1bb      	cbz	r3, 8007754 <_strtod_l+0x5fc>
 8007724:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007728:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800772c:	2b00      	cmp	r3, #0
 800772e:	4659      	mov	r1, fp
 8007730:	dd10      	ble.n	8007754 <_strtod_l+0x5fc>
 8007732:	2b1f      	cmp	r3, #31
 8007734:	f340 8107 	ble.w	8007946 <_strtod_l+0x7ee>
 8007738:	2b34      	cmp	r3, #52	; 0x34
 800773a:	bfde      	ittt	le
 800773c:	3b20      	suble	r3, #32
 800773e:	f04f 32ff 	movle.w	r2, #4294967295
 8007742:	fa02 f303 	lslle.w	r3, r2, r3
 8007746:	f04f 0a00 	mov.w	sl, #0
 800774a:	bfcc      	ite	gt
 800774c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007750:	ea03 0b01 	andle.w	fp, r3, r1
 8007754:	2200      	movs	r2, #0
 8007756:	2300      	movs	r3, #0
 8007758:	4650      	mov	r0, sl
 800775a:	4659      	mov	r1, fp
 800775c:	f7f9 f9bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007760:	2800      	cmp	r0, #0
 8007762:	d1ac      	bne.n	80076be <_strtod_l+0x566>
 8007764:	9b07      	ldr	r3, [sp, #28]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	9a05      	ldr	r2, [sp, #20]
 800776a:	9908      	ldr	r1, [sp, #32]
 800776c:	4623      	mov	r3, r4
 800776e:	4648      	mov	r0, r9
 8007770:	f001 fda4 	bl	80092bc <__s2b>
 8007774:	9007      	str	r0, [sp, #28]
 8007776:	2800      	cmp	r0, #0
 8007778:	f43f af08 	beq.w	800758c <_strtod_l+0x434>
 800777c:	9a06      	ldr	r2, [sp, #24]
 800777e:	9b06      	ldr	r3, [sp, #24]
 8007780:	2a00      	cmp	r2, #0
 8007782:	f1c3 0300 	rsb	r3, r3, #0
 8007786:	bfa8      	it	ge
 8007788:	2300      	movge	r3, #0
 800778a:	930e      	str	r3, [sp, #56]	; 0x38
 800778c:	2400      	movs	r4, #0
 800778e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007792:	9316      	str	r3, [sp, #88]	; 0x58
 8007794:	46a0      	mov	r8, r4
 8007796:	9b07      	ldr	r3, [sp, #28]
 8007798:	4648      	mov	r0, r9
 800779a:	6859      	ldr	r1, [r3, #4]
 800779c:	f001 fd08 	bl	80091b0 <_Balloc>
 80077a0:	9005      	str	r0, [sp, #20]
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f43f aef6 	beq.w	8007594 <_strtod_l+0x43c>
 80077a8:	9b07      	ldr	r3, [sp, #28]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	3202      	adds	r2, #2
 80077ae:	f103 010c 	add.w	r1, r3, #12
 80077b2:	0092      	lsls	r2, r2, #2
 80077b4:	300c      	adds	r0, #12
 80077b6:	f7fe fe3b 	bl	8006430 <memcpy>
 80077ba:	aa1e      	add	r2, sp, #120	; 0x78
 80077bc:	a91d      	add	r1, sp, #116	; 0x74
 80077be:	ec4b ab10 	vmov	d0, sl, fp
 80077c2:	4648      	mov	r0, r9
 80077c4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80077c8:	f002 f834 	bl	8009834 <__d2b>
 80077cc:	901c      	str	r0, [sp, #112]	; 0x70
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f43f aee0 	beq.w	8007594 <_strtod_l+0x43c>
 80077d4:	2101      	movs	r1, #1
 80077d6:	4648      	mov	r0, r9
 80077d8:	f001 fdfc 	bl	80093d4 <__i2b>
 80077dc:	4680      	mov	r8, r0
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f aed8 	beq.w	8007594 <_strtod_l+0x43c>
 80077e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80077e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80077e8:	2e00      	cmp	r6, #0
 80077ea:	bfab      	itete	ge
 80077ec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80077ee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80077f0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80077f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80077f4:	bfac      	ite	ge
 80077f6:	18f7      	addge	r7, r6, r3
 80077f8:	1b9d      	sublt	r5, r3, r6
 80077fa:	9b04      	ldr	r3, [sp, #16]
 80077fc:	1af6      	subs	r6, r6, r3
 80077fe:	4416      	add	r6, r2
 8007800:	4b63      	ldr	r3, [pc, #396]	; (8007990 <_strtod_l+0x838>)
 8007802:	3e01      	subs	r6, #1
 8007804:	429e      	cmp	r6, r3
 8007806:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800780a:	f280 80af 	bge.w	800796c <_strtod_l+0x814>
 800780e:	1b9b      	subs	r3, r3, r6
 8007810:	2b1f      	cmp	r3, #31
 8007812:	eba2 0203 	sub.w	r2, r2, r3
 8007816:	f04f 0101 	mov.w	r1, #1
 800781a:	f300 809b 	bgt.w	8007954 <_strtod_l+0x7fc>
 800781e:	fa01 f303 	lsl.w	r3, r1, r3
 8007822:	930f      	str	r3, [sp, #60]	; 0x3c
 8007824:	2300      	movs	r3, #0
 8007826:	930a      	str	r3, [sp, #40]	; 0x28
 8007828:	18be      	adds	r6, r7, r2
 800782a:	9b04      	ldr	r3, [sp, #16]
 800782c:	42b7      	cmp	r7, r6
 800782e:	4415      	add	r5, r2
 8007830:	441d      	add	r5, r3
 8007832:	463b      	mov	r3, r7
 8007834:	bfa8      	it	ge
 8007836:	4633      	movge	r3, r6
 8007838:	42ab      	cmp	r3, r5
 800783a:	bfa8      	it	ge
 800783c:	462b      	movge	r3, r5
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfc2      	ittt	gt
 8007842:	1af6      	subgt	r6, r6, r3
 8007844:	1aed      	subgt	r5, r5, r3
 8007846:	1aff      	subgt	r7, r7, r3
 8007848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800784a:	b1bb      	cbz	r3, 800787c <_strtod_l+0x724>
 800784c:	4641      	mov	r1, r8
 800784e:	461a      	mov	r2, r3
 8007850:	4648      	mov	r0, r9
 8007852:	f001 fe5f 	bl	8009514 <__pow5mult>
 8007856:	4680      	mov	r8, r0
 8007858:	2800      	cmp	r0, #0
 800785a:	f43f ae9b 	beq.w	8007594 <_strtod_l+0x43c>
 800785e:	4601      	mov	r1, r0
 8007860:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007862:	4648      	mov	r0, r9
 8007864:	f001 fdbf 	bl	80093e6 <__multiply>
 8007868:	900c      	str	r0, [sp, #48]	; 0x30
 800786a:	2800      	cmp	r0, #0
 800786c:	f43f ae92 	beq.w	8007594 <_strtod_l+0x43c>
 8007870:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007872:	4648      	mov	r0, r9
 8007874:	f001 fcd0 	bl	8009218 <_Bfree>
 8007878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800787a:	931c      	str	r3, [sp, #112]	; 0x70
 800787c:	2e00      	cmp	r6, #0
 800787e:	dc7a      	bgt.n	8007976 <_strtod_l+0x81e>
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	dd08      	ble.n	8007898 <_strtod_l+0x740>
 8007886:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007888:	9905      	ldr	r1, [sp, #20]
 800788a:	4648      	mov	r0, r9
 800788c:	f001 fe42 	bl	8009514 <__pow5mult>
 8007890:	9005      	str	r0, [sp, #20]
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f ae7e 	beq.w	8007594 <_strtod_l+0x43c>
 8007898:	2d00      	cmp	r5, #0
 800789a:	dd08      	ble.n	80078ae <_strtod_l+0x756>
 800789c:	462a      	mov	r2, r5
 800789e:	9905      	ldr	r1, [sp, #20]
 80078a0:	4648      	mov	r0, r9
 80078a2:	f001 fe85 	bl	80095b0 <__lshift>
 80078a6:	9005      	str	r0, [sp, #20]
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f43f ae73 	beq.w	8007594 <_strtod_l+0x43c>
 80078ae:	2f00      	cmp	r7, #0
 80078b0:	dd08      	ble.n	80078c4 <_strtod_l+0x76c>
 80078b2:	4641      	mov	r1, r8
 80078b4:	463a      	mov	r2, r7
 80078b6:	4648      	mov	r0, r9
 80078b8:	f001 fe7a 	bl	80095b0 <__lshift>
 80078bc:	4680      	mov	r8, r0
 80078be:	2800      	cmp	r0, #0
 80078c0:	f43f ae68 	beq.w	8007594 <_strtod_l+0x43c>
 80078c4:	9a05      	ldr	r2, [sp, #20]
 80078c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80078c8:	4648      	mov	r0, r9
 80078ca:	f001 fedf 	bl	800968c <__mdiff>
 80078ce:	4604      	mov	r4, r0
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f43f ae5f 	beq.w	8007594 <_strtod_l+0x43c>
 80078d6:	68c3      	ldr	r3, [r0, #12]
 80078d8:	930c      	str	r3, [sp, #48]	; 0x30
 80078da:	2300      	movs	r3, #0
 80078dc:	60c3      	str	r3, [r0, #12]
 80078de:	4641      	mov	r1, r8
 80078e0:	f001 feba 	bl	8009658 <__mcmp>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	da55      	bge.n	8007994 <_strtod_l+0x83c>
 80078e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ea:	b9e3      	cbnz	r3, 8007926 <_strtod_l+0x7ce>
 80078ec:	f1ba 0f00 	cmp.w	sl, #0
 80078f0:	d119      	bne.n	8007926 <_strtod_l+0x7ce>
 80078f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078f6:	b9b3      	cbnz	r3, 8007926 <_strtod_l+0x7ce>
 80078f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078fc:	0d1b      	lsrs	r3, r3, #20
 80078fe:	051b      	lsls	r3, r3, #20
 8007900:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007904:	d90f      	bls.n	8007926 <_strtod_l+0x7ce>
 8007906:	6963      	ldr	r3, [r4, #20]
 8007908:	b913      	cbnz	r3, 8007910 <_strtod_l+0x7b8>
 800790a:	6923      	ldr	r3, [r4, #16]
 800790c:	2b01      	cmp	r3, #1
 800790e:	dd0a      	ble.n	8007926 <_strtod_l+0x7ce>
 8007910:	4621      	mov	r1, r4
 8007912:	2201      	movs	r2, #1
 8007914:	4648      	mov	r0, r9
 8007916:	f001 fe4b 	bl	80095b0 <__lshift>
 800791a:	4641      	mov	r1, r8
 800791c:	4604      	mov	r4, r0
 800791e:	f001 fe9b 	bl	8009658 <__mcmp>
 8007922:	2800      	cmp	r0, #0
 8007924:	dc67      	bgt.n	80079f6 <_strtod_l+0x89e>
 8007926:	9b04      	ldr	r3, [sp, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d171      	bne.n	8007a10 <_strtod_l+0x8b8>
 800792c:	e63d      	b.n	80075aa <_strtod_l+0x452>
 800792e:	f018 0f01 	tst.w	r8, #1
 8007932:	d004      	beq.n	800793e <_strtod_l+0x7e6>
 8007934:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007938:	f7f8 fe66 	bl	8000608 <__aeabi_dmul>
 800793c:	2301      	movs	r3, #1
 800793e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007942:	3508      	adds	r5, #8
 8007944:	e6e5      	b.n	8007712 <_strtod_l+0x5ba>
 8007946:	f04f 32ff 	mov.w	r2, #4294967295
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	ea03 0a0a 	and.w	sl, r3, sl
 8007952:	e6ff      	b.n	8007754 <_strtod_l+0x5fc>
 8007954:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007958:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800795c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007960:	36e2      	adds	r6, #226	; 0xe2
 8007962:	fa01 f306 	lsl.w	r3, r1, r6
 8007966:	930a      	str	r3, [sp, #40]	; 0x28
 8007968:	910f      	str	r1, [sp, #60]	; 0x3c
 800796a:	e75d      	b.n	8007828 <_strtod_l+0x6d0>
 800796c:	2300      	movs	r3, #0
 800796e:	930a      	str	r3, [sp, #40]	; 0x28
 8007970:	2301      	movs	r3, #1
 8007972:	930f      	str	r3, [sp, #60]	; 0x3c
 8007974:	e758      	b.n	8007828 <_strtod_l+0x6d0>
 8007976:	4632      	mov	r2, r6
 8007978:	991c      	ldr	r1, [sp, #112]	; 0x70
 800797a:	4648      	mov	r0, r9
 800797c:	f001 fe18 	bl	80095b0 <__lshift>
 8007980:	901c      	str	r0, [sp, #112]	; 0x70
 8007982:	2800      	cmp	r0, #0
 8007984:	f47f af7c 	bne.w	8007880 <_strtod_l+0x728>
 8007988:	e604      	b.n	8007594 <_strtod_l+0x43c>
 800798a:	bf00      	nop
 800798c:	0800b5e0 	.word	0x0800b5e0
 8007990:	fffffc02 	.word	0xfffffc02
 8007994:	465d      	mov	r5, fp
 8007996:	f040 8086 	bne.w	8007aa6 <_strtod_l+0x94e>
 800799a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800799c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079a0:	b32a      	cbz	r2, 80079ee <_strtod_l+0x896>
 80079a2:	4aaf      	ldr	r2, [pc, #700]	; (8007c60 <_strtod_l+0xb08>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d153      	bne.n	8007a50 <_strtod_l+0x8f8>
 80079a8:	9b04      	ldr	r3, [sp, #16]
 80079aa:	4650      	mov	r0, sl
 80079ac:	b1d3      	cbz	r3, 80079e4 <_strtod_l+0x88c>
 80079ae:	4aad      	ldr	r2, [pc, #692]	; (8007c64 <_strtod_l+0xb0c>)
 80079b0:	402a      	ands	r2, r5
 80079b2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80079b6:	f04f 31ff 	mov.w	r1, #4294967295
 80079ba:	d816      	bhi.n	80079ea <_strtod_l+0x892>
 80079bc:	0d12      	lsrs	r2, r2, #20
 80079be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80079c2:	fa01 f303 	lsl.w	r3, r1, r3
 80079c6:	4298      	cmp	r0, r3
 80079c8:	d142      	bne.n	8007a50 <_strtod_l+0x8f8>
 80079ca:	4ba7      	ldr	r3, [pc, #668]	; (8007c68 <_strtod_l+0xb10>)
 80079cc:	429d      	cmp	r5, r3
 80079ce:	d102      	bne.n	80079d6 <_strtod_l+0x87e>
 80079d0:	3001      	adds	r0, #1
 80079d2:	f43f addf 	beq.w	8007594 <_strtod_l+0x43c>
 80079d6:	4ba3      	ldr	r3, [pc, #652]	; (8007c64 <_strtod_l+0xb0c>)
 80079d8:	402b      	ands	r3, r5
 80079da:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079de:	f04f 0a00 	mov.w	sl, #0
 80079e2:	e7a0      	b.n	8007926 <_strtod_l+0x7ce>
 80079e4:	f04f 33ff 	mov.w	r3, #4294967295
 80079e8:	e7ed      	b.n	80079c6 <_strtod_l+0x86e>
 80079ea:	460b      	mov	r3, r1
 80079ec:	e7eb      	b.n	80079c6 <_strtod_l+0x86e>
 80079ee:	bb7b      	cbnz	r3, 8007a50 <_strtod_l+0x8f8>
 80079f0:	f1ba 0f00 	cmp.w	sl, #0
 80079f4:	d12c      	bne.n	8007a50 <_strtod_l+0x8f8>
 80079f6:	9904      	ldr	r1, [sp, #16]
 80079f8:	4a9a      	ldr	r2, [pc, #616]	; (8007c64 <_strtod_l+0xb0c>)
 80079fa:	465b      	mov	r3, fp
 80079fc:	b1f1      	cbz	r1, 8007a3c <_strtod_l+0x8e4>
 80079fe:	ea02 010b 	and.w	r1, r2, fp
 8007a02:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a06:	dc19      	bgt.n	8007a3c <_strtod_l+0x8e4>
 8007a08:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a0c:	f77f ae5b 	ble.w	80076c6 <_strtod_l+0x56e>
 8007a10:	4a96      	ldr	r2, [pc, #600]	; (8007c6c <_strtod_l+0xb14>)
 8007a12:	2300      	movs	r3, #0
 8007a14:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007a18:	4650      	mov	r0, sl
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a20:	f7f8 fdf2 	bl	8000608 <__aeabi_dmul>
 8007a24:	4682      	mov	sl, r0
 8007a26:	468b      	mov	fp, r1
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	f47f adbe 	bne.w	80075aa <_strtod_l+0x452>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f47f adbb 	bne.w	80075aa <_strtod_l+0x452>
 8007a34:	2322      	movs	r3, #34	; 0x22
 8007a36:	f8c9 3000 	str.w	r3, [r9]
 8007a3a:	e5b6      	b.n	80075aa <_strtod_l+0x452>
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a42:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a4a:	f04f 3aff 	mov.w	sl, #4294967295
 8007a4e:	e76a      	b.n	8007926 <_strtod_l+0x7ce>
 8007a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a52:	b193      	cbz	r3, 8007a7a <_strtod_l+0x922>
 8007a54:	422b      	tst	r3, r5
 8007a56:	f43f af66 	beq.w	8007926 <_strtod_l+0x7ce>
 8007a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a5c:	9a04      	ldr	r2, [sp, #16]
 8007a5e:	4650      	mov	r0, sl
 8007a60:	4659      	mov	r1, fp
 8007a62:	b173      	cbz	r3, 8007a82 <_strtod_l+0x92a>
 8007a64:	f7ff fb5c 	bl	8007120 <sulp>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a70:	f7f8 fc14 	bl	800029c <__adddf3>
 8007a74:	4682      	mov	sl, r0
 8007a76:	468b      	mov	fp, r1
 8007a78:	e755      	b.n	8007926 <_strtod_l+0x7ce>
 8007a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a7c:	ea13 0f0a 	tst.w	r3, sl
 8007a80:	e7e9      	b.n	8007a56 <_strtod_l+0x8fe>
 8007a82:	f7ff fb4d 	bl	8007120 <sulp>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a8e:	f7f8 fc03 	bl	8000298 <__aeabi_dsub>
 8007a92:	2200      	movs	r2, #0
 8007a94:	2300      	movs	r3, #0
 8007a96:	4682      	mov	sl, r0
 8007a98:	468b      	mov	fp, r1
 8007a9a:	f7f9 f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f47f ae11 	bne.w	80076c6 <_strtod_l+0x56e>
 8007aa4:	e73f      	b.n	8007926 <_strtod_l+0x7ce>
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f001 ff12 	bl	80098d2 <__ratio>
 8007aae:	ec57 6b10 	vmov	r6, r7, d0
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ab8:	ee10 0a10 	vmov	r0, s0
 8007abc:	4639      	mov	r1, r7
 8007abe:	f7f9 f81f 	bl	8000b00 <__aeabi_dcmple>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d077      	beq.n	8007bb6 <_strtod_l+0xa5e>
 8007ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d04a      	beq.n	8007b62 <_strtod_l+0xa0a>
 8007acc:	4b68      	ldr	r3, [pc, #416]	; (8007c70 <_strtod_l+0xb18>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007ad4:	4f66      	ldr	r7, [pc, #408]	; (8007c70 <_strtod_l+0xb18>)
 8007ad6:	2600      	movs	r6, #0
 8007ad8:	4b62      	ldr	r3, [pc, #392]	; (8007c64 <_strtod_l+0xb0c>)
 8007ada:	402b      	ands	r3, r5
 8007adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ae0:	4b64      	ldr	r3, [pc, #400]	; (8007c74 <_strtod_l+0xb1c>)
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	f040 80ce 	bne.w	8007c84 <_strtod_l+0xb2c>
 8007ae8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007aec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007af0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007af4:	ec4b ab10 	vmov	d0, sl, fp
 8007af8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007afc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b00:	f001 fe22 	bl	8009748 <__ulp>
 8007b04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b08:	ec53 2b10 	vmov	r2, r3, d0
 8007b0c:	f7f8 fd7c 	bl	8000608 <__aeabi_dmul>
 8007b10:	4652      	mov	r2, sl
 8007b12:	465b      	mov	r3, fp
 8007b14:	f7f8 fbc2 	bl	800029c <__adddf3>
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4952      	ldr	r1, [pc, #328]	; (8007c64 <_strtod_l+0xb0c>)
 8007b1c:	4a56      	ldr	r2, [pc, #344]	; (8007c78 <_strtod_l+0xb20>)
 8007b1e:	4019      	ands	r1, r3
 8007b20:	4291      	cmp	r1, r2
 8007b22:	4682      	mov	sl, r0
 8007b24:	d95b      	bls.n	8007bde <_strtod_l+0xa86>
 8007b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d103      	bne.n	8007b38 <_strtod_l+0x9e0>
 8007b30:	9b08      	ldr	r3, [sp, #32]
 8007b32:	3301      	adds	r3, #1
 8007b34:	f43f ad2e 	beq.w	8007594 <_strtod_l+0x43c>
 8007b38:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007c68 <_strtod_l+0xb10>
 8007b3c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b42:	4648      	mov	r0, r9
 8007b44:	f001 fb68 	bl	8009218 <_Bfree>
 8007b48:	9905      	ldr	r1, [sp, #20]
 8007b4a:	4648      	mov	r0, r9
 8007b4c:	f001 fb64 	bl	8009218 <_Bfree>
 8007b50:	4641      	mov	r1, r8
 8007b52:	4648      	mov	r0, r9
 8007b54:	f001 fb60 	bl	8009218 <_Bfree>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4648      	mov	r0, r9
 8007b5c:	f001 fb5c 	bl	8009218 <_Bfree>
 8007b60:	e619      	b.n	8007796 <_strtod_l+0x63e>
 8007b62:	f1ba 0f00 	cmp.w	sl, #0
 8007b66:	d11a      	bne.n	8007b9e <_strtod_l+0xa46>
 8007b68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b6c:	b9eb      	cbnz	r3, 8007baa <_strtod_l+0xa52>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4b3f      	ldr	r3, [pc, #252]	; (8007c70 <_strtod_l+0xb18>)
 8007b72:	4630      	mov	r0, r6
 8007b74:	4639      	mov	r1, r7
 8007b76:	f7f8 ffb9 	bl	8000aec <__aeabi_dcmplt>
 8007b7a:	b9c8      	cbnz	r0, 8007bb0 <_strtod_l+0xa58>
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	4639      	mov	r1, r7
 8007b80:	2200      	movs	r2, #0
 8007b82:	4b3e      	ldr	r3, [pc, #248]	; (8007c7c <_strtod_l+0xb24>)
 8007b84:	f7f8 fd40 	bl	8000608 <__aeabi_dmul>
 8007b88:	4606      	mov	r6, r0
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b90:	9618      	str	r6, [sp, #96]	; 0x60
 8007b92:	9319      	str	r3, [sp, #100]	; 0x64
 8007b94:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007b98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b9c:	e79c      	b.n	8007ad8 <_strtod_l+0x980>
 8007b9e:	f1ba 0f01 	cmp.w	sl, #1
 8007ba2:	d102      	bne.n	8007baa <_strtod_l+0xa52>
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	f43f ad8e 	beq.w	80076c6 <_strtod_l+0x56e>
 8007baa:	2200      	movs	r2, #0
 8007bac:	4b34      	ldr	r3, [pc, #208]	; (8007c80 <_strtod_l+0xb28>)
 8007bae:	e78f      	b.n	8007ad0 <_strtod_l+0x978>
 8007bb0:	2600      	movs	r6, #0
 8007bb2:	4f32      	ldr	r7, [pc, #200]	; (8007c7c <_strtod_l+0xb24>)
 8007bb4:	e7ea      	b.n	8007b8c <_strtod_l+0xa34>
 8007bb6:	4b31      	ldr	r3, [pc, #196]	; (8007c7c <_strtod_l+0xb24>)
 8007bb8:	4630      	mov	r0, r6
 8007bba:	4639      	mov	r1, r7
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f7f8 fd23 	bl	8000608 <__aeabi_dmul>
 8007bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460f      	mov	r7, r1
 8007bc8:	b933      	cbnz	r3, 8007bd8 <_strtod_l+0xa80>
 8007bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bce:	9010      	str	r0, [sp, #64]	; 0x40
 8007bd0:	9311      	str	r3, [sp, #68]	; 0x44
 8007bd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bd6:	e7df      	b.n	8007b98 <_strtod_l+0xa40>
 8007bd8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007bdc:	e7f9      	b.n	8007bd2 <_strtod_l+0xa7a>
 8007bde:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007be2:	9b04      	ldr	r3, [sp, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1ab      	bne.n	8007b40 <_strtod_l+0x9e8>
 8007be8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bec:	0d1b      	lsrs	r3, r3, #20
 8007bee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bf0:	051b      	lsls	r3, r3, #20
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	465d      	mov	r5, fp
 8007bf6:	d1a3      	bne.n	8007b40 <_strtod_l+0x9e8>
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7f8 ffb4 	bl	8000b68 <__aeabi_d2iz>
 8007c00:	f7f8 fc98 	bl	8000534 <__aeabi_i2d>
 8007c04:	460b      	mov	r3, r1
 8007c06:	4602      	mov	r2, r0
 8007c08:	4639      	mov	r1, r7
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7f8 fb44 	bl	8000298 <__aeabi_dsub>
 8007c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c12:	4606      	mov	r6, r0
 8007c14:	460f      	mov	r7, r1
 8007c16:	b933      	cbnz	r3, 8007c26 <_strtod_l+0xace>
 8007c18:	f1ba 0f00 	cmp.w	sl, #0
 8007c1c:	d103      	bne.n	8007c26 <_strtod_l+0xace>
 8007c1e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007c22:	2d00      	cmp	r5, #0
 8007c24:	d06d      	beq.n	8007d02 <_strtod_l+0xbaa>
 8007c26:	a30a      	add	r3, pc, #40	; (adr r3, 8007c50 <_strtod_l+0xaf8>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	4639      	mov	r1, r7
 8007c30:	f7f8 ff5c 	bl	8000aec <__aeabi_dcmplt>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f47f acb8 	bne.w	80075aa <_strtod_l+0x452>
 8007c3a:	a307      	add	r3, pc, #28	; (adr r3, 8007c58 <_strtod_l+0xb00>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 ff70 	bl	8000b28 <__aeabi_dcmpgt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f43f af79 	beq.w	8007b40 <_strtod_l+0x9e8>
 8007c4e:	e4ac      	b.n	80075aa <_strtod_l+0x452>
 8007c50:	94a03595 	.word	0x94a03595
 8007c54:	3fdfffff 	.word	0x3fdfffff
 8007c58:	35afe535 	.word	0x35afe535
 8007c5c:	3fe00000 	.word	0x3fe00000
 8007c60:	000fffff 	.word	0x000fffff
 8007c64:	7ff00000 	.word	0x7ff00000
 8007c68:	7fefffff 	.word	0x7fefffff
 8007c6c:	39500000 	.word	0x39500000
 8007c70:	3ff00000 	.word	0x3ff00000
 8007c74:	7fe00000 	.word	0x7fe00000
 8007c78:	7c9fffff 	.word	0x7c9fffff
 8007c7c:	3fe00000 	.word	0x3fe00000
 8007c80:	bff00000 	.word	0xbff00000
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	b333      	cbz	r3, 8007cd6 <_strtod_l+0xb7e>
 8007c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c8e:	d822      	bhi.n	8007cd6 <_strtod_l+0xb7e>
 8007c90:	a327      	add	r3, pc, #156	; (adr r3, 8007d30 <_strtod_l+0xbd8>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 ff31 	bl	8000b00 <__aeabi_dcmple>
 8007c9e:	b1a0      	cbz	r0, 8007cca <_strtod_l+0xb72>
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7f8 ff88 	bl	8000bb8 <__aeabi_d2uiz>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	bf08      	it	eq
 8007cac:	2001      	moveq	r0, #1
 8007cae:	f7f8 fc31 	bl	8000514 <__aeabi_ui2d>
 8007cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	bb03      	cbnz	r3, 8007cfc <_strtod_l+0xba4>
 8007cba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cbe:	9012      	str	r0, [sp, #72]	; 0x48
 8007cc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cc2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007cc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ccc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007cda:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007cde:	f001 fd33 	bl	8009748 <__ulp>
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	ec53 2b10 	vmov	r2, r3, d0
 8007ce8:	4659      	mov	r1, fp
 8007cea:	f7f8 fc8d 	bl	8000608 <__aeabi_dmul>
 8007cee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007cf2:	f7f8 fad3 	bl	800029c <__adddf3>
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	e772      	b.n	8007be2 <_strtod_l+0xa8a>
 8007cfc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007d00:	e7df      	b.n	8007cc2 <_strtod_l+0xb6a>
 8007d02:	a30d      	add	r3, pc, #52	; (adr r3, 8007d38 <_strtod_l+0xbe0>)
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	f7f8 fef0 	bl	8000aec <__aeabi_dcmplt>
 8007d0c:	e79c      	b.n	8007c48 <_strtod_l+0xaf0>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	930d      	str	r3, [sp, #52]	; 0x34
 8007d12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	f7ff ba61 	b.w	80071de <_strtod_l+0x86>
 8007d1c:	2b65      	cmp	r3, #101	; 0x65
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	f43f ab4e 	beq.w	80073c2 <_strtod_l+0x26a>
 8007d26:	2101      	movs	r1, #1
 8007d28:	4614      	mov	r4, r2
 8007d2a:	9104      	str	r1, [sp, #16]
 8007d2c:	f7ff bacb 	b.w	80072c6 <_strtod_l+0x16e>
 8007d30:	ffc00000 	.word	0xffc00000
 8007d34:	41dfffff 	.word	0x41dfffff
 8007d38:	94a03595 	.word	0x94a03595
 8007d3c:	3fcfffff 	.word	0x3fcfffff

08007d40 <_strtod_r>:
 8007d40:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <_strtod_r+0x18>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	b410      	push	{r4}
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	4c04      	ldr	r4, [pc, #16]	; (8007d5c <_strtod_r+0x1c>)
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bf08      	it	eq
 8007d4e:	4623      	moveq	r3, r4
 8007d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d54:	f7ff ba00 	b.w	8007158 <_strtod_l>
 8007d58:	20000024 	.word	0x20000024
 8007d5c:	20000088 	.word	0x20000088

08007d60 <_strtol_l.isra.0>:
 8007d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	4680      	mov	r8, r0
 8007d66:	4689      	mov	r9, r1
 8007d68:	4692      	mov	sl, r2
 8007d6a:	461e      	mov	r6, r3
 8007d6c:	460f      	mov	r7, r1
 8007d6e:	463d      	mov	r5, r7
 8007d70:	9808      	ldr	r0, [sp, #32]
 8007d72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d76:	f001 f9ed 	bl	8009154 <__locale_ctype_ptr_l>
 8007d7a:	4420      	add	r0, r4
 8007d7c:	7843      	ldrb	r3, [r0, #1]
 8007d7e:	f013 0308 	ands.w	r3, r3, #8
 8007d82:	d132      	bne.n	8007dea <_strtol_l.isra.0+0x8a>
 8007d84:	2c2d      	cmp	r4, #45	; 0x2d
 8007d86:	d132      	bne.n	8007dee <_strtol_l.isra.0+0x8e>
 8007d88:	787c      	ldrb	r4, [r7, #1]
 8007d8a:	1cbd      	adds	r5, r7, #2
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d05d      	beq.n	8007e4e <_strtol_l.isra.0+0xee>
 8007d92:	2e10      	cmp	r6, #16
 8007d94:	d109      	bne.n	8007daa <_strtol_l.isra.0+0x4a>
 8007d96:	2c30      	cmp	r4, #48	; 0x30
 8007d98:	d107      	bne.n	8007daa <_strtol_l.isra.0+0x4a>
 8007d9a:	782b      	ldrb	r3, [r5, #0]
 8007d9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007da0:	2b58      	cmp	r3, #88	; 0x58
 8007da2:	d14f      	bne.n	8007e44 <_strtol_l.isra.0+0xe4>
 8007da4:	786c      	ldrb	r4, [r5, #1]
 8007da6:	2610      	movs	r6, #16
 8007da8:	3502      	adds	r5, #2
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	bf14      	ite	ne
 8007dae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007db2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007db6:	2700      	movs	r7, #0
 8007db8:	fbb1 fcf6 	udiv	ip, r1, r6
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007dc2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	d817      	bhi.n	8007dfa <_strtol_l.isra.0+0x9a>
 8007dca:	461c      	mov	r4, r3
 8007dcc:	42a6      	cmp	r6, r4
 8007dce:	dd23      	ble.n	8007e18 <_strtol_l.isra.0+0xb8>
 8007dd0:	1c7b      	adds	r3, r7, #1
 8007dd2:	d007      	beq.n	8007de4 <_strtol_l.isra.0+0x84>
 8007dd4:	4584      	cmp	ip, r0
 8007dd6:	d31c      	bcc.n	8007e12 <_strtol_l.isra.0+0xb2>
 8007dd8:	d101      	bne.n	8007dde <_strtol_l.isra.0+0x7e>
 8007dda:	45a6      	cmp	lr, r4
 8007ddc:	db19      	blt.n	8007e12 <_strtol_l.isra.0+0xb2>
 8007dde:	fb00 4006 	mla	r0, r0, r6, r4
 8007de2:	2701      	movs	r7, #1
 8007de4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007de8:	e7eb      	b.n	8007dc2 <_strtol_l.isra.0+0x62>
 8007dea:	462f      	mov	r7, r5
 8007dec:	e7bf      	b.n	8007d6e <_strtol_l.isra.0+0xe>
 8007dee:	2c2b      	cmp	r4, #43	; 0x2b
 8007df0:	bf04      	itt	eq
 8007df2:	1cbd      	addeq	r5, r7, #2
 8007df4:	787c      	ldrbeq	r4, [r7, #1]
 8007df6:	461a      	mov	r2, r3
 8007df8:	e7c9      	b.n	8007d8e <_strtol_l.isra.0+0x2e>
 8007dfa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007dfe:	2b19      	cmp	r3, #25
 8007e00:	d801      	bhi.n	8007e06 <_strtol_l.isra.0+0xa6>
 8007e02:	3c37      	subs	r4, #55	; 0x37
 8007e04:	e7e2      	b.n	8007dcc <_strtol_l.isra.0+0x6c>
 8007e06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007e0a:	2b19      	cmp	r3, #25
 8007e0c:	d804      	bhi.n	8007e18 <_strtol_l.isra.0+0xb8>
 8007e0e:	3c57      	subs	r4, #87	; 0x57
 8007e10:	e7dc      	b.n	8007dcc <_strtol_l.isra.0+0x6c>
 8007e12:	f04f 37ff 	mov.w	r7, #4294967295
 8007e16:	e7e5      	b.n	8007de4 <_strtol_l.isra.0+0x84>
 8007e18:	1c7b      	adds	r3, r7, #1
 8007e1a:	d108      	bne.n	8007e2e <_strtol_l.isra.0+0xce>
 8007e1c:	2322      	movs	r3, #34	; 0x22
 8007e1e:	f8c8 3000 	str.w	r3, [r8]
 8007e22:	4608      	mov	r0, r1
 8007e24:	f1ba 0f00 	cmp.w	sl, #0
 8007e28:	d107      	bne.n	8007e3a <_strtol_l.isra.0+0xda>
 8007e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2e:	b102      	cbz	r2, 8007e32 <_strtol_l.isra.0+0xd2>
 8007e30:	4240      	negs	r0, r0
 8007e32:	f1ba 0f00 	cmp.w	sl, #0
 8007e36:	d0f8      	beq.n	8007e2a <_strtol_l.isra.0+0xca>
 8007e38:	b10f      	cbz	r7, 8007e3e <_strtol_l.isra.0+0xde>
 8007e3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007e3e:	f8ca 9000 	str.w	r9, [sl]
 8007e42:	e7f2      	b.n	8007e2a <_strtol_l.isra.0+0xca>
 8007e44:	2430      	movs	r4, #48	; 0x30
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	d1af      	bne.n	8007daa <_strtol_l.isra.0+0x4a>
 8007e4a:	2608      	movs	r6, #8
 8007e4c:	e7ad      	b.n	8007daa <_strtol_l.isra.0+0x4a>
 8007e4e:	2c30      	cmp	r4, #48	; 0x30
 8007e50:	d0a3      	beq.n	8007d9a <_strtol_l.isra.0+0x3a>
 8007e52:	260a      	movs	r6, #10
 8007e54:	e7a9      	b.n	8007daa <_strtol_l.isra.0+0x4a>
	...

08007e58 <_strtol_r>:
 8007e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e5a:	4c06      	ldr	r4, [pc, #24]	; (8007e74 <_strtol_r+0x1c>)
 8007e5c:	4d06      	ldr	r5, [pc, #24]	; (8007e78 <_strtol_r+0x20>)
 8007e5e:	6824      	ldr	r4, [r4, #0]
 8007e60:	6a24      	ldr	r4, [r4, #32]
 8007e62:	2c00      	cmp	r4, #0
 8007e64:	bf08      	it	eq
 8007e66:	462c      	moveq	r4, r5
 8007e68:	9400      	str	r4, [sp, #0]
 8007e6a:	f7ff ff79 	bl	8007d60 <_strtol_l.isra.0>
 8007e6e:	b003      	add	sp, #12
 8007e70:	bd30      	pop	{r4, r5, pc}
 8007e72:	bf00      	nop
 8007e74:	20000024 	.word	0x20000024
 8007e78:	20000088 	.word	0x20000088

08007e7c <quorem>:
 8007e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	6903      	ldr	r3, [r0, #16]
 8007e82:	690c      	ldr	r4, [r1, #16]
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	4680      	mov	r8, r0
 8007e88:	f2c0 8082 	blt.w	8007f90 <quorem+0x114>
 8007e8c:	3c01      	subs	r4, #1
 8007e8e:	f101 0714 	add.w	r7, r1, #20
 8007e92:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e96:	f100 0614 	add.w	r6, r0, #20
 8007e9a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e9e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007ea2:	eb06 030c 	add.w	r3, r6, ip
 8007ea6:	3501      	adds	r5, #1
 8007ea8:	eb07 090c 	add.w	r9, r7, ip
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	fbb0 f5f5 	udiv	r5, r0, r5
 8007eb2:	b395      	cbz	r5, 8007f1a <quorem+0x9e>
 8007eb4:	f04f 0a00 	mov.w	sl, #0
 8007eb8:	4638      	mov	r0, r7
 8007eba:	46b6      	mov	lr, r6
 8007ebc:	46d3      	mov	fp, sl
 8007ebe:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ec2:	b293      	uxth	r3, r2
 8007ec4:	fb05 a303 	mla	r3, r5, r3, sl
 8007ec8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	ebab 0303 	sub.w	r3, fp, r3
 8007ed2:	0c12      	lsrs	r2, r2, #16
 8007ed4:	f8de b000 	ldr.w	fp, [lr]
 8007ed8:	fb05 a202 	mla	r2, r5, r2, sl
 8007edc:	fa13 f38b 	uxtah	r3, r3, fp
 8007ee0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ee4:	fa1f fb82 	uxth.w	fp, r2
 8007ee8:	f8de 2000 	ldr.w	r2, [lr]
 8007eec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007efa:	4581      	cmp	r9, r0
 8007efc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f00:	f84e 3b04 	str.w	r3, [lr], #4
 8007f04:	d2db      	bcs.n	8007ebe <quorem+0x42>
 8007f06:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f0a:	b933      	cbnz	r3, 8007f1a <quorem+0x9e>
 8007f0c:	9b01      	ldr	r3, [sp, #4]
 8007f0e:	3b04      	subs	r3, #4
 8007f10:	429e      	cmp	r6, r3
 8007f12:	461a      	mov	r2, r3
 8007f14:	d330      	bcc.n	8007f78 <quorem+0xfc>
 8007f16:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	f001 fb9c 	bl	8009658 <__mcmp>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	db25      	blt.n	8007f70 <quorem+0xf4>
 8007f24:	3501      	adds	r5, #1
 8007f26:	4630      	mov	r0, r6
 8007f28:	f04f 0c00 	mov.w	ip, #0
 8007f2c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f30:	f8d0 e000 	ldr.w	lr, [r0]
 8007f34:	b293      	uxth	r3, r2
 8007f36:	ebac 0303 	sub.w	r3, ip, r3
 8007f3a:	0c12      	lsrs	r2, r2, #16
 8007f3c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f4e:	45b9      	cmp	r9, r7
 8007f50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f54:	f840 3b04 	str.w	r3, [r0], #4
 8007f58:	d2e8      	bcs.n	8007f2c <quorem+0xb0>
 8007f5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f62:	b92a      	cbnz	r2, 8007f70 <quorem+0xf4>
 8007f64:	3b04      	subs	r3, #4
 8007f66:	429e      	cmp	r6, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	d30b      	bcc.n	8007f84 <quorem+0x108>
 8007f6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f70:	4628      	mov	r0, r5
 8007f72:	b003      	add	sp, #12
 8007f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f78:	6812      	ldr	r2, [r2, #0]
 8007f7a:	3b04      	subs	r3, #4
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	d1ca      	bne.n	8007f16 <quorem+0x9a>
 8007f80:	3c01      	subs	r4, #1
 8007f82:	e7c5      	b.n	8007f10 <quorem+0x94>
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	3b04      	subs	r3, #4
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	d1ef      	bne.n	8007f6c <quorem+0xf0>
 8007f8c:	3c01      	subs	r4, #1
 8007f8e:	e7ea      	b.n	8007f66 <quorem+0xea>
 8007f90:	2000      	movs	r0, #0
 8007f92:	e7ee      	b.n	8007f72 <quorem+0xf6>
 8007f94:	0000      	movs	r0, r0
	...

08007f98 <_dtoa_r>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	ec57 6b10 	vmov	r6, r7, d0
 8007fa0:	b097      	sub	sp, #92	; 0x5c
 8007fa2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fa4:	9106      	str	r1, [sp, #24]
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007faa:	9312      	str	r3, [sp, #72]	; 0x48
 8007fac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fb0:	e9cd 6700 	strd	r6, r7, [sp]
 8007fb4:	b93d      	cbnz	r5, 8007fc6 <_dtoa_r+0x2e>
 8007fb6:	2010      	movs	r0, #16
 8007fb8:	f001 f8e0 	bl	800917c <malloc>
 8007fbc:	6260      	str	r0, [r4, #36]	; 0x24
 8007fbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fc2:	6005      	str	r5, [r0, #0]
 8007fc4:	60c5      	str	r5, [r0, #12]
 8007fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc8:	6819      	ldr	r1, [r3, #0]
 8007fca:	b151      	cbz	r1, 8007fe2 <_dtoa_r+0x4a>
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	604a      	str	r2, [r1, #4]
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4093      	lsls	r3, r2
 8007fd4:	608b      	str	r3, [r1, #8]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f001 f91e 	bl	8009218 <_Bfree>
 8007fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	1e3b      	subs	r3, r7, #0
 8007fe4:	bfbb      	ittet	lt
 8007fe6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fea:	9301      	strlt	r3, [sp, #4]
 8007fec:	2300      	movge	r3, #0
 8007fee:	2201      	movlt	r2, #1
 8007ff0:	bfac      	ite	ge
 8007ff2:	f8c8 3000 	strge.w	r3, [r8]
 8007ff6:	f8c8 2000 	strlt.w	r2, [r8]
 8007ffa:	4baf      	ldr	r3, [pc, #700]	; (80082b8 <_dtoa_r+0x320>)
 8007ffc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008000:	ea33 0308 	bics.w	r3, r3, r8
 8008004:	d114      	bne.n	8008030 <_dtoa_r+0x98>
 8008006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008008:	f242 730f 	movw	r3, #9999	; 0x270f
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	9b00      	ldr	r3, [sp, #0]
 8008010:	b923      	cbnz	r3, 800801c <_dtoa_r+0x84>
 8008012:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008016:	2800      	cmp	r0, #0
 8008018:	f000 8542 	beq.w	8008aa0 <_dtoa_r+0xb08>
 800801c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800801e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80082cc <_dtoa_r+0x334>
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 8544 	beq.w	8008ab0 <_dtoa_r+0xb18>
 8008028:	f10b 0303 	add.w	r3, fp, #3
 800802c:	f000 bd3e 	b.w	8008aac <_dtoa_r+0xb14>
 8008030:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008034:	2200      	movs	r2, #0
 8008036:	2300      	movs	r3, #0
 8008038:	4630      	mov	r0, r6
 800803a:	4639      	mov	r1, r7
 800803c:	f7f8 fd4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008040:	4681      	mov	r9, r0
 8008042:	b168      	cbz	r0, 8008060 <_dtoa_r+0xc8>
 8008044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008046:	2301      	movs	r3, #1
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8524 	beq.w	8008a9a <_dtoa_r+0xb02>
 8008052:	4b9a      	ldr	r3, [pc, #616]	; (80082bc <_dtoa_r+0x324>)
 8008054:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008056:	f103 3bff 	add.w	fp, r3, #4294967295
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	f000 bd28 	b.w	8008ab0 <_dtoa_r+0xb18>
 8008060:	aa14      	add	r2, sp, #80	; 0x50
 8008062:	a915      	add	r1, sp, #84	; 0x54
 8008064:	ec47 6b10 	vmov	d0, r6, r7
 8008068:	4620      	mov	r0, r4
 800806a:	f001 fbe3 	bl	8009834 <__d2b>
 800806e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008072:	9004      	str	r0, [sp, #16]
 8008074:	2d00      	cmp	r5, #0
 8008076:	d07c      	beq.n	8008172 <_dtoa_r+0x1da>
 8008078:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800807c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008080:	46b2      	mov	sl, r6
 8008082:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800808a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800808e:	2200      	movs	r2, #0
 8008090:	4b8b      	ldr	r3, [pc, #556]	; (80082c0 <_dtoa_r+0x328>)
 8008092:	4650      	mov	r0, sl
 8008094:	4659      	mov	r1, fp
 8008096:	f7f8 f8ff 	bl	8000298 <__aeabi_dsub>
 800809a:	a381      	add	r3, pc, #516	; (adr r3, 80082a0 <_dtoa_r+0x308>)
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 fab2 	bl	8000608 <__aeabi_dmul>
 80080a4:	a380      	add	r3, pc, #512	; (adr r3, 80082a8 <_dtoa_r+0x310>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f8f7 	bl	800029c <__adddf3>
 80080ae:	4606      	mov	r6, r0
 80080b0:	4628      	mov	r0, r5
 80080b2:	460f      	mov	r7, r1
 80080b4:	f7f8 fa3e 	bl	8000534 <__aeabi_i2d>
 80080b8:	a37d      	add	r3, pc, #500	; (adr r3, 80082b0 <_dtoa_r+0x318>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 faa3 	bl	8000608 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4630      	mov	r0, r6
 80080c8:	4639      	mov	r1, r7
 80080ca:	f7f8 f8e7 	bl	800029c <__adddf3>
 80080ce:	4606      	mov	r6, r0
 80080d0:	460f      	mov	r7, r1
 80080d2:	f7f8 fd49 	bl	8000b68 <__aeabi_d2iz>
 80080d6:	2200      	movs	r2, #0
 80080d8:	4682      	mov	sl, r0
 80080da:	2300      	movs	r3, #0
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fd04 	bl	8000aec <__aeabi_dcmplt>
 80080e4:	b148      	cbz	r0, 80080fa <_dtoa_r+0x162>
 80080e6:	4650      	mov	r0, sl
 80080e8:	f7f8 fa24 	bl	8000534 <__aeabi_i2d>
 80080ec:	4632      	mov	r2, r6
 80080ee:	463b      	mov	r3, r7
 80080f0:	f7f8 fcf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80080f4:	b908      	cbnz	r0, 80080fa <_dtoa_r+0x162>
 80080f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fa:	f1ba 0f16 	cmp.w	sl, #22
 80080fe:	d859      	bhi.n	80081b4 <_dtoa_r+0x21c>
 8008100:	4970      	ldr	r1, [pc, #448]	; (80082c4 <_dtoa_r+0x32c>)
 8008102:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800810a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800810e:	f7f8 fd0b 	bl	8000b28 <__aeabi_dcmpgt>
 8008112:	2800      	cmp	r0, #0
 8008114:	d050      	beq.n	80081b8 <_dtoa_r+0x220>
 8008116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800811a:	2300      	movs	r3, #0
 800811c:	930f      	str	r3, [sp, #60]	; 0x3c
 800811e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008120:	1b5d      	subs	r5, r3, r5
 8008122:	f1b5 0801 	subs.w	r8, r5, #1
 8008126:	bf49      	itett	mi
 8008128:	f1c5 0301 	rsbmi	r3, r5, #1
 800812c:	2300      	movpl	r3, #0
 800812e:	9305      	strmi	r3, [sp, #20]
 8008130:	f04f 0800 	movmi.w	r8, #0
 8008134:	bf58      	it	pl
 8008136:	9305      	strpl	r3, [sp, #20]
 8008138:	f1ba 0f00 	cmp.w	sl, #0
 800813c:	db3e      	blt.n	80081bc <_dtoa_r+0x224>
 800813e:	2300      	movs	r3, #0
 8008140:	44d0      	add	r8, sl
 8008142:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008146:	9307      	str	r3, [sp, #28]
 8008148:	9b06      	ldr	r3, [sp, #24]
 800814a:	2b09      	cmp	r3, #9
 800814c:	f200 8090 	bhi.w	8008270 <_dtoa_r+0x2d8>
 8008150:	2b05      	cmp	r3, #5
 8008152:	bfc4      	itt	gt
 8008154:	3b04      	subgt	r3, #4
 8008156:	9306      	strgt	r3, [sp, #24]
 8008158:	9b06      	ldr	r3, [sp, #24]
 800815a:	f1a3 0302 	sub.w	r3, r3, #2
 800815e:	bfcc      	ite	gt
 8008160:	2500      	movgt	r5, #0
 8008162:	2501      	movle	r5, #1
 8008164:	2b03      	cmp	r3, #3
 8008166:	f200 808f 	bhi.w	8008288 <_dtoa_r+0x2f0>
 800816a:	e8df f003 	tbb	[pc, r3]
 800816e:	7f7d      	.short	0x7f7d
 8008170:	7131      	.short	0x7131
 8008172:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008176:	441d      	add	r5, r3
 8008178:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800817c:	2820      	cmp	r0, #32
 800817e:	dd13      	ble.n	80081a8 <_dtoa_r+0x210>
 8008180:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008184:	9b00      	ldr	r3, [sp, #0]
 8008186:	fa08 f800 	lsl.w	r8, r8, r0
 800818a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800818e:	fa23 f000 	lsr.w	r0, r3, r0
 8008192:	ea48 0000 	orr.w	r0, r8, r0
 8008196:	f7f8 f9bd 	bl	8000514 <__aeabi_ui2d>
 800819a:	2301      	movs	r3, #1
 800819c:	4682      	mov	sl, r0
 800819e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80081a2:	3d01      	subs	r5, #1
 80081a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80081a6:	e772      	b.n	800808e <_dtoa_r+0xf6>
 80081a8:	9b00      	ldr	r3, [sp, #0]
 80081aa:	f1c0 0020 	rsb	r0, r0, #32
 80081ae:	fa03 f000 	lsl.w	r0, r3, r0
 80081b2:	e7f0      	b.n	8008196 <_dtoa_r+0x1fe>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e7b1      	b.n	800811c <_dtoa_r+0x184>
 80081b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80081ba:	e7b0      	b.n	800811e <_dtoa_r+0x186>
 80081bc:	9b05      	ldr	r3, [sp, #20]
 80081be:	eba3 030a 	sub.w	r3, r3, sl
 80081c2:	9305      	str	r3, [sp, #20]
 80081c4:	f1ca 0300 	rsb	r3, sl, #0
 80081c8:	9307      	str	r3, [sp, #28]
 80081ca:	2300      	movs	r3, #0
 80081cc:	930e      	str	r3, [sp, #56]	; 0x38
 80081ce:	e7bb      	b.n	8008148 <_dtoa_r+0x1b0>
 80081d0:	2301      	movs	r3, #1
 80081d2:	930a      	str	r3, [sp, #40]	; 0x28
 80081d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dd59      	ble.n	800828e <_dtoa_r+0x2f6>
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	4699      	mov	r9, r3
 80081de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081e0:	2200      	movs	r2, #0
 80081e2:	6072      	str	r2, [r6, #4]
 80081e4:	2204      	movs	r2, #4
 80081e6:	f102 0014 	add.w	r0, r2, #20
 80081ea:	4298      	cmp	r0, r3
 80081ec:	6871      	ldr	r1, [r6, #4]
 80081ee:	d953      	bls.n	8008298 <_dtoa_r+0x300>
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 ffdd 	bl	80091b0 <_Balloc>
 80081f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f8:	6030      	str	r0, [r6, #0]
 80081fa:	f1b9 0f0e 	cmp.w	r9, #14
 80081fe:	f8d3 b000 	ldr.w	fp, [r3]
 8008202:	f200 80e6 	bhi.w	80083d2 <_dtoa_r+0x43a>
 8008206:	2d00      	cmp	r5, #0
 8008208:	f000 80e3 	beq.w	80083d2 <_dtoa_r+0x43a>
 800820c:	ed9d 7b00 	vldr	d7, [sp]
 8008210:	f1ba 0f00 	cmp.w	sl, #0
 8008214:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008218:	dd74      	ble.n	8008304 <_dtoa_r+0x36c>
 800821a:	4a2a      	ldr	r2, [pc, #168]	; (80082c4 <_dtoa_r+0x32c>)
 800821c:	f00a 030f 	and.w	r3, sl, #15
 8008220:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008224:	ed93 7b00 	vldr	d7, [r3]
 8008228:	ea4f 162a 	mov.w	r6, sl, asr #4
 800822c:	06f0      	lsls	r0, r6, #27
 800822e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008232:	d565      	bpl.n	8008300 <_dtoa_r+0x368>
 8008234:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <_dtoa_r+0x330>)
 8008236:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800823a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800823e:	f7f8 fb0d 	bl	800085c <__aeabi_ddiv>
 8008242:	e9cd 0100 	strd	r0, r1, [sp]
 8008246:	f006 060f 	and.w	r6, r6, #15
 800824a:	2503      	movs	r5, #3
 800824c:	4f1e      	ldr	r7, [pc, #120]	; (80082c8 <_dtoa_r+0x330>)
 800824e:	e04c      	b.n	80082ea <_dtoa_r+0x352>
 8008250:	2301      	movs	r3, #1
 8008252:	930a      	str	r3, [sp, #40]	; 0x28
 8008254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008256:	4453      	add	r3, sl
 8008258:	f103 0901 	add.w	r9, r3, #1
 800825c:	9302      	str	r3, [sp, #8]
 800825e:	464b      	mov	r3, r9
 8008260:	2b01      	cmp	r3, #1
 8008262:	bfb8      	it	lt
 8008264:	2301      	movlt	r3, #1
 8008266:	e7ba      	b.n	80081de <_dtoa_r+0x246>
 8008268:	2300      	movs	r3, #0
 800826a:	e7b2      	b.n	80081d2 <_dtoa_r+0x23a>
 800826c:	2300      	movs	r3, #0
 800826e:	e7f0      	b.n	8008252 <_dtoa_r+0x2ba>
 8008270:	2501      	movs	r5, #1
 8008272:	2300      	movs	r3, #0
 8008274:	9306      	str	r3, [sp, #24]
 8008276:	950a      	str	r5, [sp, #40]	; 0x28
 8008278:	f04f 33ff 	mov.w	r3, #4294967295
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	4699      	mov	r9, r3
 8008280:	2200      	movs	r2, #0
 8008282:	2312      	movs	r3, #18
 8008284:	920b      	str	r2, [sp, #44]	; 0x2c
 8008286:	e7aa      	b.n	80081de <_dtoa_r+0x246>
 8008288:	2301      	movs	r3, #1
 800828a:	930a      	str	r3, [sp, #40]	; 0x28
 800828c:	e7f4      	b.n	8008278 <_dtoa_r+0x2e0>
 800828e:	2301      	movs	r3, #1
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	4699      	mov	r9, r3
 8008294:	461a      	mov	r2, r3
 8008296:	e7f5      	b.n	8008284 <_dtoa_r+0x2ec>
 8008298:	3101      	adds	r1, #1
 800829a:	6071      	str	r1, [r6, #4]
 800829c:	0052      	lsls	r2, r2, #1
 800829e:	e7a2      	b.n	80081e6 <_dtoa_r+0x24e>
 80082a0:	636f4361 	.word	0x636f4361
 80082a4:	3fd287a7 	.word	0x3fd287a7
 80082a8:	8b60c8b3 	.word	0x8b60c8b3
 80082ac:	3fc68a28 	.word	0x3fc68a28
 80082b0:	509f79fb 	.word	0x509f79fb
 80082b4:	3fd34413 	.word	0x3fd34413
 80082b8:	7ff00000 	.word	0x7ff00000
 80082bc:	0800b58d 	.word	0x0800b58d
 80082c0:	3ff80000 	.word	0x3ff80000
 80082c4:	0800b648 	.word	0x0800b648
 80082c8:	0800b620 	.word	0x0800b620
 80082cc:	0800b611 	.word	0x0800b611
 80082d0:	07f1      	lsls	r1, r6, #31
 80082d2:	d508      	bpl.n	80082e6 <_dtoa_r+0x34e>
 80082d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082dc:	f7f8 f994 	bl	8000608 <__aeabi_dmul>
 80082e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082e4:	3501      	adds	r5, #1
 80082e6:	1076      	asrs	r6, r6, #1
 80082e8:	3708      	adds	r7, #8
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	d1f0      	bne.n	80082d0 <_dtoa_r+0x338>
 80082ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082f6:	f7f8 fab1 	bl	800085c <__aeabi_ddiv>
 80082fa:	e9cd 0100 	strd	r0, r1, [sp]
 80082fe:	e01a      	b.n	8008336 <_dtoa_r+0x39e>
 8008300:	2502      	movs	r5, #2
 8008302:	e7a3      	b.n	800824c <_dtoa_r+0x2b4>
 8008304:	f000 80a0 	beq.w	8008448 <_dtoa_r+0x4b0>
 8008308:	f1ca 0600 	rsb	r6, sl, #0
 800830c:	4b9f      	ldr	r3, [pc, #636]	; (800858c <_dtoa_r+0x5f4>)
 800830e:	4fa0      	ldr	r7, [pc, #640]	; (8008590 <_dtoa_r+0x5f8>)
 8008310:	f006 020f 	and.w	r2, r6, #15
 8008314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008320:	f7f8 f972 	bl	8000608 <__aeabi_dmul>
 8008324:	e9cd 0100 	strd	r0, r1, [sp]
 8008328:	1136      	asrs	r6, r6, #4
 800832a:	2300      	movs	r3, #0
 800832c:	2502      	movs	r5, #2
 800832e:	2e00      	cmp	r6, #0
 8008330:	d17f      	bne.n	8008432 <_dtoa_r+0x49a>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e1      	bne.n	80082fa <_dtoa_r+0x362>
 8008336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 8087 	beq.w	800844c <_dtoa_r+0x4b4>
 800833e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008342:	2200      	movs	r2, #0
 8008344:	4b93      	ldr	r3, [pc, #588]	; (8008594 <_dtoa_r+0x5fc>)
 8008346:	4630      	mov	r0, r6
 8008348:	4639      	mov	r1, r7
 800834a:	f7f8 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	d07c      	beq.n	800844c <_dtoa_r+0x4b4>
 8008352:	f1b9 0f00 	cmp.w	r9, #0
 8008356:	d079      	beq.n	800844c <_dtoa_r+0x4b4>
 8008358:	9b02      	ldr	r3, [sp, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	dd35      	ble.n	80083ca <_dtoa_r+0x432>
 800835e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008362:	9308      	str	r3, [sp, #32]
 8008364:	4639      	mov	r1, r7
 8008366:	2200      	movs	r2, #0
 8008368:	4b8b      	ldr	r3, [pc, #556]	; (8008598 <_dtoa_r+0x600>)
 800836a:	4630      	mov	r0, r6
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	e9cd 0100 	strd	r0, r1, [sp]
 8008374:	9f02      	ldr	r7, [sp, #8]
 8008376:	3501      	adds	r5, #1
 8008378:	4628      	mov	r0, r5
 800837a:	f7f8 f8db 	bl	8000534 <__aeabi_i2d>
 800837e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008382:	f7f8 f941 	bl	8000608 <__aeabi_dmul>
 8008386:	2200      	movs	r2, #0
 8008388:	4b84      	ldr	r3, [pc, #528]	; (800859c <_dtoa_r+0x604>)
 800838a:	f7f7 ff87 	bl	800029c <__adddf3>
 800838e:	4605      	mov	r5, r0
 8008390:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008394:	2f00      	cmp	r7, #0
 8008396:	d15d      	bne.n	8008454 <_dtoa_r+0x4bc>
 8008398:	2200      	movs	r2, #0
 800839a:	4b81      	ldr	r3, [pc, #516]	; (80085a0 <_dtoa_r+0x608>)
 800839c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083a0:	f7f7 ff7a 	bl	8000298 <__aeabi_dsub>
 80083a4:	462a      	mov	r2, r5
 80083a6:	4633      	mov	r3, r6
 80083a8:	e9cd 0100 	strd	r0, r1, [sp]
 80083ac:	f7f8 fbbc 	bl	8000b28 <__aeabi_dcmpgt>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	f040 8288 	bne.w	80088c6 <_dtoa_r+0x92e>
 80083b6:	462a      	mov	r2, r5
 80083b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083c0:	f7f8 fb94 	bl	8000aec <__aeabi_dcmplt>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f040 827c 	bne.w	80088c2 <_dtoa_r+0x92a>
 80083ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083ce:	e9cd 2300 	strd	r2, r3, [sp]
 80083d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f2c0 8150 	blt.w	800867a <_dtoa_r+0x6e2>
 80083da:	f1ba 0f0e 	cmp.w	sl, #14
 80083de:	f300 814c 	bgt.w	800867a <_dtoa_r+0x6e2>
 80083e2:	4b6a      	ldr	r3, [pc, #424]	; (800858c <_dtoa_r+0x5f4>)
 80083e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083e8:	ed93 7b00 	vldr	d7, [r3]
 80083ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083f4:	f280 80d8 	bge.w	80085a8 <_dtoa_r+0x610>
 80083f8:	f1b9 0f00 	cmp.w	r9, #0
 80083fc:	f300 80d4 	bgt.w	80085a8 <_dtoa_r+0x610>
 8008400:	f040 825e 	bne.w	80088c0 <_dtoa_r+0x928>
 8008404:	2200      	movs	r2, #0
 8008406:	4b66      	ldr	r3, [pc, #408]	; (80085a0 <_dtoa_r+0x608>)
 8008408:	ec51 0b17 	vmov	r0, r1, d7
 800840c:	f7f8 f8fc 	bl	8000608 <__aeabi_dmul>
 8008410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008414:	f7f8 fb7e 	bl	8000b14 <__aeabi_dcmpge>
 8008418:	464f      	mov	r7, r9
 800841a:	464e      	mov	r6, r9
 800841c:	2800      	cmp	r0, #0
 800841e:	f040 8234 	bne.w	800888a <_dtoa_r+0x8f2>
 8008422:	2331      	movs	r3, #49	; 0x31
 8008424:	f10b 0501 	add.w	r5, fp, #1
 8008428:	f88b 3000 	strb.w	r3, [fp]
 800842c:	f10a 0a01 	add.w	sl, sl, #1
 8008430:	e22f      	b.n	8008892 <_dtoa_r+0x8fa>
 8008432:	07f2      	lsls	r2, r6, #31
 8008434:	d505      	bpl.n	8008442 <_dtoa_r+0x4aa>
 8008436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843a:	f7f8 f8e5 	bl	8000608 <__aeabi_dmul>
 800843e:	3501      	adds	r5, #1
 8008440:	2301      	movs	r3, #1
 8008442:	1076      	asrs	r6, r6, #1
 8008444:	3708      	adds	r7, #8
 8008446:	e772      	b.n	800832e <_dtoa_r+0x396>
 8008448:	2502      	movs	r5, #2
 800844a:	e774      	b.n	8008336 <_dtoa_r+0x39e>
 800844c:	f8cd a020 	str.w	sl, [sp, #32]
 8008450:	464f      	mov	r7, r9
 8008452:	e791      	b.n	8008378 <_dtoa_r+0x3e0>
 8008454:	4b4d      	ldr	r3, [pc, #308]	; (800858c <_dtoa_r+0x5f4>)
 8008456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800845a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800845e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008460:	2b00      	cmp	r3, #0
 8008462:	d047      	beq.n	80084f4 <_dtoa_r+0x55c>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	2000      	movs	r0, #0
 800846a:	494e      	ldr	r1, [pc, #312]	; (80085a4 <_dtoa_r+0x60c>)
 800846c:	f7f8 f9f6 	bl	800085c <__aeabi_ddiv>
 8008470:	462a      	mov	r2, r5
 8008472:	4633      	mov	r3, r6
 8008474:	f7f7 ff10 	bl	8000298 <__aeabi_dsub>
 8008478:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800847c:	465d      	mov	r5, fp
 800847e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008482:	f7f8 fb71 	bl	8000b68 <__aeabi_d2iz>
 8008486:	4606      	mov	r6, r0
 8008488:	f7f8 f854 	bl	8000534 <__aeabi_i2d>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008494:	f7f7 ff00 	bl	8000298 <__aeabi_dsub>
 8008498:	3630      	adds	r6, #48	; 0x30
 800849a:	f805 6b01 	strb.w	r6, [r5], #1
 800849e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084a2:	e9cd 0100 	strd	r0, r1, [sp]
 80084a6:	f7f8 fb21 	bl	8000aec <__aeabi_dcmplt>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d163      	bne.n	8008576 <_dtoa_r+0x5de>
 80084ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084b2:	2000      	movs	r0, #0
 80084b4:	4937      	ldr	r1, [pc, #220]	; (8008594 <_dtoa_r+0x5fc>)
 80084b6:	f7f7 feef 	bl	8000298 <__aeabi_dsub>
 80084ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084be:	f7f8 fb15 	bl	8000aec <__aeabi_dcmplt>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f040 80b7 	bne.w	8008636 <_dtoa_r+0x69e>
 80084c8:	eba5 030b 	sub.w	r3, r5, fp
 80084cc:	429f      	cmp	r7, r3
 80084ce:	f77f af7c 	ble.w	80083ca <_dtoa_r+0x432>
 80084d2:	2200      	movs	r2, #0
 80084d4:	4b30      	ldr	r3, [pc, #192]	; (8008598 <_dtoa_r+0x600>)
 80084d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084da:	f7f8 f895 	bl	8000608 <__aeabi_dmul>
 80084de:	2200      	movs	r2, #0
 80084e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084e4:	4b2c      	ldr	r3, [pc, #176]	; (8008598 <_dtoa_r+0x600>)
 80084e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ea:	f7f8 f88d 	bl	8000608 <__aeabi_dmul>
 80084ee:	e9cd 0100 	strd	r0, r1, [sp]
 80084f2:	e7c4      	b.n	800847e <_dtoa_r+0x4e6>
 80084f4:	462a      	mov	r2, r5
 80084f6:	4633      	mov	r3, r6
 80084f8:	f7f8 f886 	bl	8000608 <__aeabi_dmul>
 80084fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008500:	eb0b 0507 	add.w	r5, fp, r7
 8008504:	465e      	mov	r6, fp
 8008506:	e9dd 0100 	ldrd	r0, r1, [sp]
 800850a:	f7f8 fb2d 	bl	8000b68 <__aeabi_d2iz>
 800850e:	4607      	mov	r7, r0
 8008510:	f7f8 f810 	bl	8000534 <__aeabi_i2d>
 8008514:	3730      	adds	r7, #48	; 0x30
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800851e:	f7f7 febb 	bl	8000298 <__aeabi_dsub>
 8008522:	f806 7b01 	strb.w	r7, [r6], #1
 8008526:	42ae      	cmp	r6, r5
 8008528:	e9cd 0100 	strd	r0, r1, [sp]
 800852c:	f04f 0200 	mov.w	r2, #0
 8008530:	d126      	bne.n	8008580 <_dtoa_r+0x5e8>
 8008532:	4b1c      	ldr	r3, [pc, #112]	; (80085a4 <_dtoa_r+0x60c>)
 8008534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008538:	f7f7 feb0 	bl	800029c <__adddf3>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008544:	f7f8 faf0 	bl	8000b28 <__aeabi_dcmpgt>
 8008548:	2800      	cmp	r0, #0
 800854a:	d174      	bne.n	8008636 <_dtoa_r+0x69e>
 800854c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008550:	2000      	movs	r0, #0
 8008552:	4914      	ldr	r1, [pc, #80]	; (80085a4 <_dtoa_r+0x60c>)
 8008554:	f7f7 fea0 	bl	8000298 <__aeabi_dsub>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008560:	f7f8 fac4 	bl	8000aec <__aeabi_dcmplt>
 8008564:	2800      	cmp	r0, #0
 8008566:	f43f af30 	beq.w	80083ca <_dtoa_r+0x432>
 800856a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800856e:	2b30      	cmp	r3, #48	; 0x30
 8008570:	f105 32ff 	add.w	r2, r5, #4294967295
 8008574:	d002      	beq.n	800857c <_dtoa_r+0x5e4>
 8008576:	f8dd a020 	ldr.w	sl, [sp, #32]
 800857a:	e04a      	b.n	8008612 <_dtoa_r+0x67a>
 800857c:	4615      	mov	r5, r2
 800857e:	e7f4      	b.n	800856a <_dtoa_r+0x5d2>
 8008580:	4b05      	ldr	r3, [pc, #20]	; (8008598 <_dtoa_r+0x600>)
 8008582:	f7f8 f841 	bl	8000608 <__aeabi_dmul>
 8008586:	e9cd 0100 	strd	r0, r1, [sp]
 800858a:	e7bc      	b.n	8008506 <_dtoa_r+0x56e>
 800858c:	0800b648 	.word	0x0800b648
 8008590:	0800b620 	.word	0x0800b620
 8008594:	3ff00000 	.word	0x3ff00000
 8008598:	40240000 	.word	0x40240000
 800859c:	401c0000 	.word	0x401c0000
 80085a0:	40140000 	.word	0x40140000
 80085a4:	3fe00000 	.word	0x3fe00000
 80085a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085ac:	465d      	mov	r5, fp
 80085ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085b2:	4630      	mov	r0, r6
 80085b4:	4639      	mov	r1, r7
 80085b6:	f7f8 f951 	bl	800085c <__aeabi_ddiv>
 80085ba:	f7f8 fad5 	bl	8000b68 <__aeabi_d2iz>
 80085be:	4680      	mov	r8, r0
 80085c0:	f7f7 ffb8 	bl	8000534 <__aeabi_i2d>
 80085c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c8:	f7f8 f81e 	bl	8000608 <__aeabi_dmul>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085d8:	f7f7 fe5e 	bl	8000298 <__aeabi_dsub>
 80085dc:	f805 6b01 	strb.w	r6, [r5], #1
 80085e0:	eba5 060b 	sub.w	r6, r5, fp
 80085e4:	45b1      	cmp	r9, r6
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	d139      	bne.n	8008660 <_dtoa_r+0x6c8>
 80085ec:	f7f7 fe56 	bl	800029c <__adddf3>
 80085f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085f4:	4606      	mov	r6, r0
 80085f6:	460f      	mov	r7, r1
 80085f8:	f7f8 fa96 	bl	8000b28 <__aeabi_dcmpgt>
 80085fc:	b9c8      	cbnz	r0, 8008632 <_dtoa_r+0x69a>
 80085fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008602:	4630      	mov	r0, r6
 8008604:	4639      	mov	r1, r7
 8008606:	f7f8 fa67 	bl	8000ad8 <__aeabi_dcmpeq>
 800860a:	b110      	cbz	r0, 8008612 <_dtoa_r+0x67a>
 800860c:	f018 0f01 	tst.w	r8, #1
 8008610:	d10f      	bne.n	8008632 <_dtoa_r+0x69a>
 8008612:	9904      	ldr	r1, [sp, #16]
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fdff 	bl	8009218 <_Bfree>
 800861a:	2300      	movs	r3, #0
 800861c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800861e:	702b      	strb	r3, [r5, #0]
 8008620:	f10a 0301 	add.w	r3, sl, #1
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 8241 	beq.w	8008ab0 <_dtoa_r+0xb18>
 800862e:	601d      	str	r5, [r3, #0]
 8008630:	e23e      	b.n	8008ab0 <_dtoa_r+0xb18>
 8008632:	f8cd a020 	str.w	sl, [sp, #32]
 8008636:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800863a:	2a39      	cmp	r2, #57	; 0x39
 800863c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008640:	d108      	bne.n	8008654 <_dtoa_r+0x6bc>
 8008642:	459b      	cmp	fp, r3
 8008644:	d10a      	bne.n	800865c <_dtoa_r+0x6c4>
 8008646:	9b08      	ldr	r3, [sp, #32]
 8008648:	3301      	adds	r3, #1
 800864a:	9308      	str	r3, [sp, #32]
 800864c:	2330      	movs	r3, #48	; 0x30
 800864e:	f88b 3000 	strb.w	r3, [fp]
 8008652:	465b      	mov	r3, fp
 8008654:	781a      	ldrb	r2, [r3, #0]
 8008656:	3201      	adds	r2, #1
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	e78c      	b.n	8008576 <_dtoa_r+0x5de>
 800865c:	461d      	mov	r5, r3
 800865e:	e7ea      	b.n	8008636 <_dtoa_r+0x69e>
 8008660:	2200      	movs	r2, #0
 8008662:	4b9b      	ldr	r3, [pc, #620]	; (80088d0 <_dtoa_r+0x938>)
 8008664:	f7f7 ffd0 	bl	8000608 <__aeabi_dmul>
 8008668:	2200      	movs	r2, #0
 800866a:	2300      	movs	r3, #0
 800866c:	4606      	mov	r6, r0
 800866e:	460f      	mov	r7, r1
 8008670:	f7f8 fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 8008674:	2800      	cmp	r0, #0
 8008676:	d09a      	beq.n	80085ae <_dtoa_r+0x616>
 8008678:	e7cb      	b.n	8008612 <_dtoa_r+0x67a>
 800867a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800867c:	2a00      	cmp	r2, #0
 800867e:	f000 808b 	beq.w	8008798 <_dtoa_r+0x800>
 8008682:	9a06      	ldr	r2, [sp, #24]
 8008684:	2a01      	cmp	r2, #1
 8008686:	dc6e      	bgt.n	8008766 <_dtoa_r+0x7ce>
 8008688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800868a:	2a00      	cmp	r2, #0
 800868c:	d067      	beq.n	800875e <_dtoa_r+0x7c6>
 800868e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008692:	9f07      	ldr	r7, [sp, #28]
 8008694:	9d05      	ldr	r5, [sp, #20]
 8008696:	9a05      	ldr	r2, [sp, #20]
 8008698:	2101      	movs	r1, #1
 800869a:	441a      	add	r2, r3
 800869c:	4620      	mov	r0, r4
 800869e:	9205      	str	r2, [sp, #20]
 80086a0:	4498      	add	r8, r3
 80086a2:	f000 fe97 	bl	80093d4 <__i2b>
 80086a6:	4606      	mov	r6, r0
 80086a8:	2d00      	cmp	r5, #0
 80086aa:	dd0c      	ble.n	80086c6 <_dtoa_r+0x72e>
 80086ac:	f1b8 0f00 	cmp.w	r8, #0
 80086b0:	dd09      	ble.n	80086c6 <_dtoa_r+0x72e>
 80086b2:	4545      	cmp	r5, r8
 80086b4:	9a05      	ldr	r2, [sp, #20]
 80086b6:	462b      	mov	r3, r5
 80086b8:	bfa8      	it	ge
 80086ba:	4643      	movge	r3, r8
 80086bc:	1ad2      	subs	r2, r2, r3
 80086be:	9205      	str	r2, [sp, #20]
 80086c0:	1aed      	subs	r5, r5, r3
 80086c2:	eba8 0803 	sub.w	r8, r8, r3
 80086c6:	9b07      	ldr	r3, [sp, #28]
 80086c8:	b1eb      	cbz	r3, 8008706 <_dtoa_r+0x76e>
 80086ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d067      	beq.n	80087a0 <_dtoa_r+0x808>
 80086d0:	b18f      	cbz	r7, 80086f6 <_dtoa_r+0x75e>
 80086d2:	4631      	mov	r1, r6
 80086d4:	463a      	mov	r2, r7
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 ff1c 	bl	8009514 <__pow5mult>
 80086dc:	9a04      	ldr	r2, [sp, #16]
 80086de:	4601      	mov	r1, r0
 80086e0:	4606      	mov	r6, r0
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 fe7f 	bl	80093e6 <__multiply>
 80086e8:	9904      	ldr	r1, [sp, #16]
 80086ea:	9008      	str	r0, [sp, #32]
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 fd93 	bl	8009218 <_Bfree>
 80086f2:	9b08      	ldr	r3, [sp, #32]
 80086f4:	9304      	str	r3, [sp, #16]
 80086f6:	9b07      	ldr	r3, [sp, #28]
 80086f8:	1bda      	subs	r2, r3, r7
 80086fa:	d004      	beq.n	8008706 <_dtoa_r+0x76e>
 80086fc:	9904      	ldr	r1, [sp, #16]
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 ff08 	bl	8009514 <__pow5mult>
 8008704:	9004      	str	r0, [sp, #16]
 8008706:	2101      	movs	r1, #1
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fe63 	bl	80093d4 <__i2b>
 800870e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008710:	4607      	mov	r7, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 81d0 	beq.w	8008ab8 <_dtoa_r+0xb20>
 8008718:	461a      	mov	r2, r3
 800871a:	4601      	mov	r1, r0
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fef9 	bl	8009514 <__pow5mult>
 8008722:	9b06      	ldr	r3, [sp, #24]
 8008724:	2b01      	cmp	r3, #1
 8008726:	4607      	mov	r7, r0
 8008728:	dc40      	bgt.n	80087ac <_dtoa_r+0x814>
 800872a:	9b00      	ldr	r3, [sp, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d139      	bne.n	80087a4 <_dtoa_r+0x80c>
 8008730:	9b01      	ldr	r3, [sp, #4]
 8008732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008736:	2b00      	cmp	r3, #0
 8008738:	d136      	bne.n	80087a8 <_dtoa_r+0x810>
 800873a:	9b01      	ldr	r3, [sp, #4]
 800873c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008740:	0d1b      	lsrs	r3, r3, #20
 8008742:	051b      	lsls	r3, r3, #20
 8008744:	b12b      	cbz	r3, 8008752 <_dtoa_r+0x7ba>
 8008746:	9b05      	ldr	r3, [sp, #20]
 8008748:	3301      	adds	r3, #1
 800874a:	9305      	str	r3, [sp, #20]
 800874c:	f108 0801 	add.w	r8, r8, #1
 8008750:	2301      	movs	r3, #1
 8008752:	9307      	str	r3, [sp, #28]
 8008754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008756:	2b00      	cmp	r3, #0
 8008758:	d12a      	bne.n	80087b0 <_dtoa_r+0x818>
 800875a:	2001      	movs	r0, #1
 800875c:	e030      	b.n	80087c0 <_dtoa_r+0x828>
 800875e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008760:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008764:	e795      	b.n	8008692 <_dtoa_r+0x6fa>
 8008766:	9b07      	ldr	r3, [sp, #28]
 8008768:	f109 37ff 	add.w	r7, r9, #4294967295
 800876c:	42bb      	cmp	r3, r7
 800876e:	bfbf      	itttt	lt
 8008770:	9b07      	ldrlt	r3, [sp, #28]
 8008772:	9707      	strlt	r7, [sp, #28]
 8008774:	1afa      	sublt	r2, r7, r3
 8008776:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008778:	bfbb      	ittet	lt
 800877a:	189b      	addlt	r3, r3, r2
 800877c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800877e:	1bdf      	subge	r7, r3, r7
 8008780:	2700      	movlt	r7, #0
 8008782:	f1b9 0f00 	cmp.w	r9, #0
 8008786:	bfb5      	itete	lt
 8008788:	9b05      	ldrlt	r3, [sp, #20]
 800878a:	9d05      	ldrge	r5, [sp, #20]
 800878c:	eba3 0509 	sublt.w	r5, r3, r9
 8008790:	464b      	movge	r3, r9
 8008792:	bfb8      	it	lt
 8008794:	2300      	movlt	r3, #0
 8008796:	e77e      	b.n	8008696 <_dtoa_r+0x6fe>
 8008798:	9f07      	ldr	r7, [sp, #28]
 800879a:	9d05      	ldr	r5, [sp, #20]
 800879c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800879e:	e783      	b.n	80086a8 <_dtoa_r+0x710>
 80087a0:	9a07      	ldr	r2, [sp, #28]
 80087a2:	e7ab      	b.n	80086fc <_dtoa_r+0x764>
 80087a4:	2300      	movs	r3, #0
 80087a6:	e7d4      	b.n	8008752 <_dtoa_r+0x7ba>
 80087a8:	9b00      	ldr	r3, [sp, #0]
 80087aa:	e7d2      	b.n	8008752 <_dtoa_r+0x7ba>
 80087ac:	2300      	movs	r3, #0
 80087ae:	9307      	str	r3, [sp, #28]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087b6:	6918      	ldr	r0, [r3, #16]
 80087b8:	f000 fdbe 	bl	8009338 <__hi0bits>
 80087bc:	f1c0 0020 	rsb	r0, r0, #32
 80087c0:	4440      	add	r0, r8
 80087c2:	f010 001f 	ands.w	r0, r0, #31
 80087c6:	d047      	beq.n	8008858 <_dtoa_r+0x8c0>
 80087c8:	f1c0 0320 	rsb	r3, r0, #32
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	dd3b      	ble.n	8008848 <_dtoa_r+0x8b0>
 80087d0:	9b05      	ldr	r3, [sp, #20]
 80087d2:	f1c0 001c 	rsb	r0, r0, #28
 80087d6:	4403      	add	r3, r0
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	4405      	add	r5, r0
 80087dc:	4480      	add	r8, r0
 80087de:	9b05      	ldr	r3, [sp, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dd05      	ble.n	80087f0 <_dtoa_r+0x858>
 80087e4:	461a      	mov	r2, r3
 80087e6:	9904      	ldr	r1, [sp, #16]
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fee1 	bl	80095b0 <__lshift>
 80087ee:	9004      	str	r0, [sp, #16]
 80087f0:	f1b8 0f00 	cmp.w	r8, #0
 80087f4:	dd05      	ble.n	8008802 <_dtoa_r+0x86a>
 80087f6:	4639      	mov	r1, r7
 80087f8:	4642      	mov	r2, r8
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fed8 	bl	80095b0 <__lshift>
 8008800:	4607      	mov	r7, r0
 8008802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008804:	b353      	cbz	r3, 800885c <_dtoa_r+0x8c4>
 8008806:	4639      	mov	r1, r7
 8008808:	9804      	ldr	r0, [sp, #16]
 800880a:	f000 ff25 	bl	8009658 <__mcmp>
 800880e:	2800      	cmp	r0, #0
 8008810:	da24      	bge.n	800885c <_dtoa_r+0x8c4>
 8008812:	2300      	movs	r3, #0
 8008814:	220a      	movs	r2, #10
 8008816:	9904      	ldr	r1, [sp, #16]
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fd14 	bl	8009246 <__multadd>
 800881e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008820:	9004      	str	r0, [sp, #16]
 8008822:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 814d 	beq.w	8008ac6 <_dtoa_r+0xb2e>
 800882c:	2300      	movs	r3, #0
 800882e:	4631      	mov	r1, r6
 8008830:	220a      	movs	r2, #10
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fd07 	bl	8009246 <__multadd>
 8008838:	9b02      	ldr	r3, [sp, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	4606      	mov	r6, r0
 800883e:	dc4f      	bgt.n	80088e0 <_dtoa_r+0x948>
 8008840:	9b06      	ldr	r3, [sp, #24]
 8008842:	2b02      	cmp	r3, #2
 8008844:	dd4c      	ble.n	80088e0 <_dtoa_r+0x948>
 8008846:	e011      	b.n	800886c <_dtoa_r+0x8d4>
 8008848:	d0c9      	beq.n	80087de <_dtoa_r+0x846>
 800884a:	9a05      	ldr	r2, [sp, #20]
 800884c:	331c      	adds	r3, #28
 800884e:	441a      	add	r2, r3
 8008850:	9205      	str	r2, [sp, #20]
 8008852:	441d      	add	r5, r3
 8008854:	4498      	add	r8, r3
 8008856:	e7c2      	b.n	80087de <_dtoa_r+0x846>
 8008858:	4603      	mov	r3, r0
 800885a:	e7f6      	b.n	800884a <_dtoa_r+0x8b2>
 800885c:	f1b9 0f00 	cmp.w	r9, #0
 8008860:	dc38      	bgt.n	80088d4 <_dtoa_r+0x93c>
 8008862:	9b06      	ldr	r3, [sp, #24]
 8008864:	2b02      	cmp	r3, #2
 8008866:	dd35      	ble.n	80088d4 <_dtoa_r+0x93c>
 8008868:	f8cd 9008 	str.w	r9, [sp, #8]
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	b963      	cbnz	r3, 800888a <_dtoa_r+0x8f2>
 8008870:	4639      	mov	r1, r7
 8008872:	2205      	movs	r2, #5
 8008874:	4620      	mov	r0, r4
 8008876:	f000 fce6 	bl	8009246 <__multadd>
 800887a:	4601      	mov	r1, r0
 800887c:	4607      	mov	r7, r0
 800887e:	9804      	ldr	r0, [sp, #16]
 8008880:	f000 feea 	bl	8009658 <__mcmp>
 8008884:	2800      	cmp	r0, #0
 8008886:	f73f adcc 	bgt.w	8008422 <_dtoa_r+0x48a>
 800888a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888c:	465d      	mov	r5, fp
 800888e:	ea6f 0a03 	mvn.w	sl, r3
 8008892:	f04f 0900 	mov.w	r9, #0
 8008896:	4639      	mov	r1, r7
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fcbd 	bl	8009218 <_Bfree>
 800889e:	2e00      	cmp	r6, #0
 80088a0:	f43f aeb7 	beq.w	8008612 <_dtoa_r+0x67a>
 80088a4:	f1b9 0f00 	cmp.w	r9, #0
 80088a8:	d005      	beq.n	80088b6 <_dtoa_r+0x91e>
 80088aa:	45b1      	cmp	r9, r6
 80088ac:	d003      	beq.n	80088b6 <_dtoa_r+0x91e>
 80088ae:	4649      	mov	r1, r9
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fcb1 	bl	8009218 <_Bfree>
 80088b6:	4631      	mov	r1, r6
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fcad 	bl	8009218 <_Bfree>
 80088be:	e6a8      	b.n	8008612 <_dtoa_r+0x67a>
 80088c0:	2700      	movs	r7, #0
 80088c2:	463e      	mov	r6, r7
 80088c4:	e7e1      	b.n	800888a <_dtoa_r+0x8f2>
 80088c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088ca:	463e      	mov	r6, r7
 80088cc:	e5a9      	b.n	8008422 <_dtoa_r+0x48a>
 80088ce:	bf00      	nop
 80088d0:	40240000 	.word	0x40240000
 80088d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80fa 	beq.w	8008ad4 <_dtoa_r+0xb3c>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	dd05      	ble.n	80088f0 <_dtoa_r+0x958>
 80088e4:	4631      	mov	r1, r6
 80088e6:	462a      	mov	r2, r5
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fe61 	bl	80095b0 <__lshift>
 80088ee:	4606      	mov	r6, r0
 80088f0:	9b07      	ldr	r3, [sp, #28]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d04c      	beq.n	8008990 <_dtoa_r+0x9f8>
 80088f6:	6871      	ldr	r1, [r6, #4]
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fc59 	bl	80091b0 <_Balloc>
 80088fe:	6932      	ldr	r2, [r6, #16]
 8008900:	3202      	adds	r2, #2
 8008902:	4605      	mov	r5, r0
 8008904:	0092      	lsls	r2, r2, #2
 8008906:	f106 010c 	add.w	r1, r6, #12
 800890a:	300c      	adds	r0, #12
 800890c:	f7fd fd90 	bl	8006430 <memcpy>
 8008910:	2201      	movs	r2, #1
 8008912:	4629      	mov	r1, r5
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fe4b 	bl	80095b0 <__lshift>
 800891a:	9b00      	ldr	r3, [sp, #0]
 800891c:	f8cd b014 	str.w	fp, [sp, #20]
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	46b1      	mov	r9, r6
 8008926:	9307      	str	r3, [sp, #28]
 8008928:	4606      	mov	r6, r0
 800892a:	4639      	mov	r1, r7
 800892c:	9804      	ldr	r0, [sp, #16]
 800892e:	f7ff faa5 	bl	8007e7c <quorem>
 8008932:	4649      	mov	r1, r9
 8008934:	4605      	mov	r5, r0
 8008936:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800893a:	9804      	ldr	r0, [sp, #16]
 800893c:	f000 fe8c 	bl	8009658 <__mcmp>
 8008940:	4632      	mov	r2, r6
 8008942:	9000      	str	r0, [sp, #0]
 8008944:	4639      	mov	r1, r7
 8008946:	4620      	mov	r0, r4
 8008948:	f000 fea0 	bl	800968c <__mdiff>
 800894c:	68c3      	ldr	r3, [r0, #12]
 800894e:	4602      	mov	r2, r0
 8008950:	bb03      	cbnz	r3, 8008994 <_dtoa_r+0x9fc>
 8008952:	4601      	mov	r1, r0
 8008954:	9008      	str	r0, [sp, #32]
 8008956:	9804      	ldr	r0, [sp, #16]
 8008958:	f000 fe7e 	bl	8009658 <__mcmp>
 800895c:	9a08      	ldr	r2, [sp, #32]
 800895e:	4603      	mov	r3, r0
 8008960:	4611      	mov	r1, r2
 8008962:	4620      	mov	r0, r4
 8008964:	9308      	str	r3, [sp, #32]
 8008966:	f000 fc57 	bl	8009218 <_Bfree>
 800896a:	9b08      	ldr	r3, [sp, #32]
 800896c:	b9a3      	cbnz	r3, 8008998 <_dtoa_r+0xa00>
 800896e:	9a06      	ldr	r2, [sp, #24]
 8008970:	b992      	cbnz	r2, 8008998 <_dtoa_r+0xa00>
 8008972:	9a07      	ldr	r2, [sp, #28]
 8008974:	b982      	cbnz	r2, 8008998 <_dtoa_r+0xa00>
 8008976:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800897a:	d029      	beq.n	80089d0 <_dtoa_r+0xa38>
 800897c:	9b00      	ldr	r3, [sp, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	dd01      	ble.n	8008986 <_dtoa_r+0x9ee>
 8008982:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008986:	9b05      	ldr	r3, [sp, #20]
 8008988:	1c5d      	adds	r5, r3, #1
 800898a:	f883 8000 	strb.w	r8, [r3]
 800898e:	e782      	b.n	8008896 <_dtoa_r+0x8fe>
 8008990:	4630      	mov	r0, r6
 8008992:	e7c2      	b.n	800891a <_dtoa_r+0x982>
 8008994:	2301      	movs	r3, #1
 8008996:	e7e3      	b.n	8008960 <_dtoa_r+0x9c8>
 8008998:	9a00      	ldr	r2, [sp, #0]
 800899a:	2a00      	cmp	r2, #0
 800899c:	db04      	blt.n	80089a8 <_dtoa_r+0xa10>
 800899e:	d125      	bne.n	80089ec <_dtoa_r+0xa54>
 80089a0:	9a06      	ldr	r2, [sp, #24]
 80089a2:	bb1a      	cbnz	r2, 80089ec <_dtoa_r+0xa54>
 80089a4:	9a07      	ldr	r2, [sp, #28]
 80089a6:	bb0a      	cbnz	r2, 80089ec <_dtoa_r+0xa54>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	ddec      	ble.n	8008986 <_dtoa_r+0x9ee>
 80089ac:	2201      	movs	r2, #1
 80089ae:	9904      	ldr	r1, [sp, #16]
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fdfd 	bl	80095b0 <__lshift>
 80089b6:	4639      	mov	r1, r7
 80089b8:	9004      	str	r0, [sp, #16]
 80089ba:	f000 fe4d 	bl	8009658 <__mcmp>
 80089be:	2800      	cmp	r0, #0
 80089c0:	dc03      	bgt.n	80089ca <_dtoa_r+0xa32>
 80089c2:	d1e0      	bne.n	8008986 <_dtoa_r+0x9ee>
 80089c4:	f018 0f01 	tst.w	r8, #1
 80089c8:	d0dd      	beq.n	8008986 <_dtoa_r+0x9ee>
 80089ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ce:	d1d8      	bne.n	8008982 <_dtoa_r+0x9ea>
 80089d0:	9b05      	ldr	r3, [sp, #20]
 80089d2:	9a05      	ldr	r2, [sp, #20]
 80089d4:	1c5d      	adds	r5, r3, #1
 80089d6:	2339      	movs	r3, #57	; 0x39
 80089d8:	7013      	strb	r3, [r2, #0]
 80089da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089de:	2b39      	cmp	r3, #57	; 0x39
 80089e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80089e4:	d04f      	beq.n	8008a86 <_dtoa_r+0xaee>
 80089e6:	3301      	adds	r3, #1
 80089e8:	7013      	strb	r3, [r2, #0]
 80089ea:	e754      	b.n	8008896 <_dtoa_r+0x8fe>
 80089ec:	9a05      	ldr	r2, [sp, #20]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f102 0501 	add.w	r5, r2, #1
 80089f4:	dd06      	ble.n	8008a04 <_dtoa_r+0xa6c>
 80089f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089fa:	d0e9      	beq.n	80089d0 <_dtoa_r+0xa38>
 80089fc:	f108 0801 	add.w	r8, r8, #1
 8008a00:	9b05      	ldr	r3, [sp, #20]
 8008a02:	e7c2      	b.n	800898a <_dtoa_r+0x9f2>
 8008a04:	9a02      	ldr	r2, [sp, #8]
 8008a06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a0a:	eba5 030b 	sub.w	r3, r5, fp
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d021      	beq.n	8008a56 <_dtoa_r+0xabe>
 8008a12:	2300      	movs	r3, #0
 8008a14:	220a      	movs	r2, #10
 8008a16:	9904      	ldr	r1, [sp, #16]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 fc14 	bl	8009246 <__multadd>
 8008a1e:	45b1      	cmp	r9, r6
 8008a20:	9004      	str	r0, [sp, #16]
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	f04f 020a 	mov.w	r2, #10
 8008a2a:	4649      	mov	r1, r9
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	d105      	bne.n	8008a3c <_dtoa_r+0xaa4>
 8008a30:	f000 fc09 	bl	8009246 <__multadd>
 8008a34:	4681      	mov	r9, r0
 8008a36:	4606      	mov	r6, r0
 8008a38:	9505      	str	r5, [sp, #20]
 8008a3a:	e776      	b.n	800892a <_dtoa_r+0x992>
 8008a3c:	f000 fc03 	bl	8009246 <__multadd>
 8008a40:	4631      	mov	r1, r6
 8008a42:	4681      	mov	r9, r0
 8008a44:	2300      	movs	r3, #0
 8008a46:	220a      	movs	r2, #10
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fbfc 	bl	8009246 <__multadd>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	e7f2      	b.n	8008a38 <_dtoa_r+0xaa0>
 8008a52:	f04f 0900 	mov.w	r9, #0
 8008a56:	2201      	movs	r2, #1
 8008a58:	9904      	ldr	r1, [sp, #16]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fda8 	bl	80095b0 <__lshift>
 8008a60:	4639      	mov	r1, r7
 8008a62:	9004      	str	r0, [sp, #16]
 8008a64:	f000 fdf8 	bl	8009658 <__mcmp>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	dcb6      	bgt.n	80089da <_dtoa_r+0xa42>
 8008a6c:	d102      	bne.n	8008a74 <_dtoa_r+0xadc>
 8008a6e:	f018 0f01 	tst.w	r8, #1
 8008a72:	d1b2      	bne.n	80089da <_dtoa_r+0xa42>
 8008a74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a78:	2b30      	cmp	r3, #48	; 0x30
 8008a7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a7e:	f47f af0a 	bne.w	8008896 <_dtoa_r+0x8fe>
 8008a82:	4615      	mov	r5, r2
 8008a84:	e7f6      	b.n	8008a74 <_dtoa_r+0xadc>
 8008a86:	4593      	cmp	fp, r2
 8008a88:	d105      	bne.n	8008a96 <_dtoa_r+0xafe>
 8008a8a:	2331      	movs	r3, #49	; 0x31
 8008a8c:	f10a 0a01 	add.w	sl, sl, #1
 8008a90:	f88b 3000 	strb.w	r3, [fp]
 8008a94:	e6ff      	b.n	8008896 <_dtoa_r+0x8fe>
 8008a96:	4615      	mov	r5, r2
 8008a98:	e79f      	b.n	80089da <_dtoa_r+0xa42>
 8008a9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008b00 <_dtoa_r+0xb68>
 8008a9e:	e007      	b.n	8008ab0 <_dtoa_r+0xb18>
 8008aa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008b04 <_dtoa_r+0xb6c>
 8008aa6:	b11b      	cbz	r3, 8008ab0 <_dtoa_r+0xb18>
 8008aa8:	f10b 0308 	add.w	r3, fp, #8
 8008aac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4658      	mov	r0, fp
 8008ab2:	b017      	add	sp, #92	; 0x5c
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab8:	9b06      	ldr	r3, [sp, #24]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	f77f ae35 	ble.w	800872a <_dtoa_r+0x792>
 8008ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac2:	9307      	str	r3, [sp, #28]
 8008ac4:	e649      	b.n	800875a <_dtoa_r+0x7c2>
 8008ac6:	9b02      	ldr	r3, [sp, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dc03      	bgt.n	8008ad4 <_dtoa_r+0xb3c>
 8008acc:	9b06      	ldr	r3, [sp, #24]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	f73f aecc 	bgt.w	800886c <_dtoa_r+0x8d4>
 8008ad4:	465d      	mov	r5, fp
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	9804      	ldr	r0, [sp, #16]
 8008ada:	f7ff f9cf 	bl	8007e7c <quorem>
 8008ade:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ae2:	f805 8b01 	strb.w	r8, [r5], #1
 8008ae6:	9a02      	ldr	r2, [sp, #8]
 8008ae8:	eba5 030b 	sub.w	r3, r5, fp
 8008aec:	429a      	cmp	r2, r3
 8008aee:	ddb0      	ble.n	8008a52 <_dtoa_r+0xaba>
 8008af0:	2300      	movs	r3, #0
 8008af2:	220a      	movs	r2, #10
 8008af4:	9904      	ldr	r1, [sp, #16]
 8008af6:	4620      	mov	r0, r4
 8008af8:	f000 fba5 	bl	8009246 <__multadd>
 8008afc:	9004      	str	r0, [sp, #16]
 8008afe:	e7ea      	b.n	8008ad6 <_dtoa_r+0xb3e>
 8008b00:	0800b58c 	.word	0x0800b58c
 8008b04:	0800b608 	.word	0x0800b608

08008b08 <rshift>:
 8008b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b0a:	6906      	ldr	r6, [r0, #16]
 8008b0c:	114b      	asrs	r3, r1, #5
 8008b0e:	429e      	cmp	r6, r3
 8008b10:	f100 0414 	add.w	r4, r0, #20
 8008b14:	dd30      	ble.n	8008b78 <rshift+0x70>
 8008b16:	f011 011f 	ands.w	r1, r1, #31
 8008b1a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008b1e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008b22:	d108      	bne.n	8008b36 <rshift+0x2e>
 8008b24:	4621      	mov	r1, r4
 8008b26:	42b2      	cmp	r2, r6
 8008b28:	460b      	mov	r3, r1
 8008b2a:	d211      	bcs.n	8008b50 <rshift+0x48>
 8008b2c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008b30:	f841 3b04 	str.w	r3, [r1], #4
 8008b34:	e7f7      	b.n	8008b26 <rshift+0x1e>
 8008b36:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008b3a:	f1c1 0c20 	rsb	ip, r1, #32
 8008b3e:	40cd      	lsrs	r5, r1
 8008b40:	3204      	adds	r2, #4
 8008b42:	4623      	mov	r3, r4
 8008b44:	42b2      	cmp	r2, r6
 8008b46:	4617      	mov	r7, r2
 8008b48:	d30c      	bcc.n	8008b64 <rshift+0x5c>
 8008b4a:	601d      	str	r5, [r3, #0]
 8008b4c:	b105      	cbz	r5, 8008b50 <rshift+0x48>
 8008b4e:	3304      	adds	r3, #4
 8008b50:	1b1a      	subs	r2, r3, r4
 8008b52:	42a3      	cmp	r3, r4
 8008b54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b58:	bf08      	it	eq
 8008b5a:	2300      	moveq	r3, #0
 8008b5c:	6102      	str	r2, [r0, #16]
 8008b5e:	bf08      	it	eq
 8008b60:	6143      	streq	r3, [r0, #20]
 8008b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b64:	683f      	ldr	r7, [r7, #0]
 8008b66:	fa07 f70c 	lsl.w	r7, r7, ip
 8008b6a:	433d      	orrs	r5, r7
 8008b6c:	f843 5b04 	str.w	r5, [r3], #4
 8008b70:	f852 5b04 	ldr.w	r5, [r2], #4
 8008b74:	40cd      	lsrs	r5, r1
 8008b76:	e7e5      	b.n	8008b44 <rshift+0x3c>
 8008b78:	4623      	mov	r3, r4
 8008b7a:	e7e9      	b.n	8008b50 <rshift+0x48>

08008b7c <__hexdig_fun>:
 8008b7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b80:	2b09      	cmp	r3, #9
 8008b82:	d802      	bhi.n	8008b8a <__hexdig_fun+0xe>
 8008b84:	3820      	subs	r0, #32
 8008b86:	b2c0      	uxtb	r0, r0
 8008b88:	4770      	bx	lr
 8008b8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b8e:	2b05      	cmp	r3, #5
 8008b90:	d801      	bhi.n	8008b96 <__hexdig_fun+0x1a>
 8008b92:	3847      	subs	r0, #71	; 0x47
 8008b94:	e7f7      	b.n	8008b86 <__hexdig_fun+0xa>
 8008b96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	d801      	bhi.n	8008ba2 <__hexdig_fun+0x26>
 8008b9e:	3827      	subs	r0, #39	; 0x27
 8008ba0:	e7f1      	b.n	8008b86 <__hexdig_fun+0xa>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	4770      	bx	lr

08008ba6 <__gethex>:
 8008ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	b08b      	sub	sp, #44	; 0x2c
 8008bac:	468a      	mov	sl, r1
 8008bae:	9002      	str	r0, [sp, #8]
 8008bb0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008bb2:	9306      	str	r3, [sp, #24]
 8008bb4:	4690      	mov	r8, r2
 8008bb6:	f000 fad0 	bl	800915a <__localeconv_l>
 8008bba:	6803      	ldr	r3, [r0, #0]
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7f7 fb0e 	bl	80001e0 <strlen>
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	9001      	str	r0, [sp, #4]
 8008bc8:	4403      	add	r3, r0
 8008bca:	f04f 0b00 	mov.w	fp, #0
 8008bce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008bd2:	9307      	str	r3, [sp, #28]
 8008bd4:	f8da 3000 	ldr.w	r3, [sl]
 8008bd8:	3302      	adds	r3, #2
 8008bda:	461f      	mov	r7, r3
 8008bdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008be0:	2830      	cmp	r0, #48	; 0x30
 8008be2:	d06c      	beq.n	8008cbe <__gethex+0x118>
 8008be4:	f7ff ffca 	bl	8008b7c <__hexdig_fun>
 8008be8:	4604      	mov	r4, r0
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d16a      	bne.n	8008cc4 <__gethex+0x11e>
 8008bee:	9a01      	ldr	r2, [sp, #4]
 8008bf0:	9903      	ldr	r1, [sp, #12]
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	f001 f8f4 	bl	8009de0 <strncmp>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d166      	bne.n	8008cca <__gethex+0x124>
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	5cf8      	ldrb	r0, [r7, r3]
 8008c00:	18fe      	adds	r6, r7, r3
 8008c02:	f7ff ffbb 	bl	8008b7c <__hexdig_fun>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d062      	beq.n	8008cd0 <__gethex+0x12a>
 8008c0a:	4633      	mov	r3, r6
 8008c0c:	7818      	ldrb	r0, [r3, #0]
 8008c0e:	2830      	cmp	r0, #48	; 0x30
 8008c10:	461f      	mov	r7, r3
 8008c12:	f103 0301 	add.w	r3, r3, #1
 8008c16:	d0f9      	beq.n	8008c0c <__gethex+0x66>
 8008c18:	f7ff ffb0 	bl	8008b7c <__hexdig_fun>
 8008c1c:	fab0 f580 	clz	r5, r0
 8008c20:	096d      	lsrs	r5, r5, #5
 8008c22:	4634      	mov	r4, r6
 8008c24:	f04f 0b01 	mov.w	fp, #1
 8008c28:	463a      	mov	r2, r7
 8008c2a:	4616      	mov	r6, r2
 8008c2c:	3201      	adds	r2, #1
 8008c2e:	7830      	ldrb	r0, [r6, #0]
 8008c30:	f7ff ffa4 	bl	8008b7c <__hexdig_fun>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d1f8      	bne.n	8008c2a <__gethex+0x84>
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	9903      	ldr	r1, [sp, #12]
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f001 f8cf 	bl	8009de0 <strncmp>
 8008c42:	b950      	cbnz	r0, 8008c5a <__gethex+0xb4>
 8008c44:	b954      	cbnz	r4, 8008c5c <__gethex+0xb6>
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	18f4      	adds	r4, r6, r3
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	3201      	adds	r2, #1
 8008c50:	7830      	ldrb	r0, [r6, #0]
 8008c52:	f7ff ff93 	bl	8008b7c <__hexdig_fun>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d1f8      	bne.n	8008c4c <__gethex+0xa6>
 8008c5a:	b10c      	cbz	r4, 8008c60 <__gethex+0xba>
 8008c5c:	1ba4      	subs	r4, r4, r6
 8008c5e:	00a4      	lsls	r4, r4, #2
 8008c60:	7833      	ldrb	r3, [r6, #0]
 8008c62:	2b50      	cmp	r3, #80	; 0x50
 8008c64:	d001      	beq.n	8008c6a <__gethex+0xc4>
 8008c66:	2b70      	cmp	r3, #112	; 0x70
 8008c68:	d140      	bne.n	8008cec <__gethex+0x146>
 8008c6a:	7873      	ldrb	r3, [r6, #1]
 8008c6c:	2b2b      	cmp	r3, #43	; 0x2b
 8008c6e:	d031      	beq.n	8008cd4 <__gethex+0x12e>
 8008c70:	2b2d      	cmp	r3, #45	; 0x2d
 8008c72:	d033      	beq.n	8008cdc <__gethex+0x136>
 8008c74:	1c71      	adds	r1, r6, #1
 8008c76:	f04f 0900 	mov.w	r9, #0
 8008c7a:	7808      	ldrb	r0, [r1, #0]
 8008c7c:	f7ff ff7e 	bl	8008b7c <__hexdig_fun>
 8008c80:	1e43      	subs	r3, r0, #1
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b18      	cmp	r3, #24
 8008c86:	d831      	bhi.n	8008cec <__gethex+0x146>
 8008c88:	f1a0 0210 	sub.w	r2, r0, #16
 8008c8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c90:	f7ff ff74 	bl	8008b7c <__hexdig_fun>
 8008c94:	1e43      	subs	r3, r0, #1
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b18      	cmp	r3, #24
 8008c9a:	d922      	bls.n	8008ce2 <__gethex+0x13c>
 8008c9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ca0:	d000      	beq.n	8008ca4 <__gethex+0xfe>
 8008ca2:	4252      	negs	r2, r2
 8008ca4:	4414      	add	r4, r2
 8008ca6:	f8ca 1000 	str.w	r1, [sl]
 8008caa:	b30d      	cbz	r5, 8008cf0 <__gethex+0x14a>
 8008cac:	f1bb 0f00 	cmp.w	fp, #0
 8008cb0:	bf0c      	ite	eq
 8008cb2:	2706      	moveq	r7, #6
 8008cb4:	2700      	movne	r7, #0
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	b00b      	add	sp, #44	; 0x2c
 8008cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbe:	f10b 0b01 	add.w	fp, fp, #1
 8008cc2:	e78a      	b.n	8008bda <__gethex+0x34>
 8008cc4:	2500      	movs	r5, #0
 8008cc6:	462c      	mov	r4, r5
 8008cc8:	e7ae      	b.n	8008c28 <__gethex+0x82>
 8008cca:	463e      	mov	r6, r7
 8008ccc:	2501      	movs	r5, #1
 8008cce:	e7c7      	b.n	8008c60 <__gethex+0xba>
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	e7fb      	b.n	8008ccc <__gethex+0x126>
 8008cd4:	f04f 0900 	mov.w	r9, #0
 8008cd8:	1cb1      	adds	r1, r6, #2
 8008cda:	e7ce      	b.n	8008c7a <__gethex+0xd4>
 8008cdc:	f04f 0901 	mov.w	r9, #1
 8008ce0:	e7fa      	b.n	8008cd8 <__gethex+0x132>
 8008ce2:	230a      	movs	r3, #10
 8008ce4:	fb03 0202 	mla	r2, r3, r2, r0
 8008ce8:	3a10      	subs	r2, #16
 8008cea:	e7cf      	b.n	8008c8c <__gethex+0xe6>
 8008cec:	4631      	mov	r1, r6
 8008cee:	e7da      	b.n	8008ca6 <__gethex+0x100>
 8008cf0:	1bf3      	subs	r3, r6, r7
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	2b07      	cmp	r3, #7
 8008cf8:	dc49      	bgt.n	8008d8e <__gethex+0x1e8>
 8008cfa:	9802      	ldr	r0, [sp, #8]
 8008cfc:	f000 fa58 	bl	80091b0 <_Balloc>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	f100 0914 	add.w	r9, r0, #20
 8008d06:	f04f 0b00 	mov.w	fp, #0
 8008d0a:	f1c3 0301 	rsb	r3, r3, #1
 8008d0e:	4605      	mov	r5, r0
 8008d10:	f8cd 9010 	str.w	r9, [sp, #16]
 8008d14:	46da      	mov	sl, fp
 8008d16:	9308      	str	r3, [sp, #32]
 8008d18:	42b7      	cmp	r7, r6
 8008d1a:	d33b      	bcc.n	8008d94 <__gethex+0x1ee>
 8008d1c:	9804      	ldr	r0, [sp, #16]
 8008d1e:	f840 ab04 	str.w	sl, [r0], #4
 8008d22:	eba0 0009 	sub.w	r0, r0, r9
 8008d26:	1080      	asrs	r0, r0, #2
 8008d28:	6128      	str	r0, [r5, #16]
 8008d2a:	0147      	lsls	r7, r0, #5
 8008d2c:	4650      	mov	r0, sl
 8008d2e:	f000 fb03 	bl	8009338 <__hi0bits>
 8008d32:	f8d8 6000 	ldr.w	r6, [r8]
 8008d36:	1a3f      	subs	r7, r7, r0
 8008d38:	42b7      	cmp	r7, r6
 8008d3a:	dd64      	ble.n	8008e06 <__gethex+0x260>
 8008d3c:	1bbf      	subs	r7, r7, r6
 8008d3e:	4639      	mov	r1, r7
 8008d40:	4628      	mov	r0, r5
 8008d42:	f000 fe13 	bl	800996c <__any_on>
 8008d46:	4682      	mov	sl, r0
 8008d48:	b178      	cbz	r0, 8008d6a <__gethex+0x1c4>
 8008d4a:	1e7b      	subs	r3, r7, #1
 8008d4c:	1159      	asrs	r1, r3, #5
 8008d4e:	f003 021f 	and.w	r2, r3, #31
 8008d52:	f04f 0a01 	mov.w	sl, #1
 8008d56:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d5a:	fa0a f202 	lsl.w	r2, sl, r2
 8008d5e:	420a      	tst	r2, r1
 8008d60:	d003      	beq.n	8008d6a <__gethex+0x1c4>
 8008d62:	4553      	cmp	r3, sl
 8008d64:	dc46      	bgt.n	8008df4 <__gethex+0x24e>
 8008d66:	f04f 0a02 	mov.w	sl, #2
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f7ff fecb 	bl	8008b08 <rshift>
 8008d72:	443c      	add	r4, r7
 8008d74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	da52      	bge.n	8008e22 <__gethex+0x27c>
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	9802      	ldr	r0, [sp, #8]
 8008d80:	f000 fa4a 	bl	8009218 <_Bfree>
 8008d84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d86:	2300      	movs	r3, #0
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	27a3      	movs	r7, #163	; 0xa3
 8008d8c:	e793      	b.n	8008cb6 <__gethex+0x110>
 8008d8e:	3101      	adds	r1, #1
 8008d90:	105b      	asrs	r3, r3, #1
 8008d92:	e7b0      	b.n	8008cf6 <__gethex+0x150>
 8008d94:	1e73      	subs	r3, r6, #1
 8008d96:	9305      	str	r3, [sp, #20]
 8008d98:	9a07      	ldr	r2, [sp, #28]
 8008d9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d018      	beq.n	8008dd4 <__gethex+0x22e>
 8008da2:	f1bb 0f20 	cmp.w	fp, #32
 8008da6:	d107      	bne.n	8008db8 <__gethex+0x212>
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	f8c3 a000 	str.w	sl, [r3]
 8008dae:	3304      	adds	r3, #4
 8008db0:	f04f 0a00 	mov.w	sl, #0
 8008db4:	9304      	str	r3, [sp, #16]
 8008db6:	46d3      	mov	fp, sl
 8008db8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008dbc:	f7ff fede 	bl	8008b7c <__hexdig_fun>
 8008dc0:	f000 000f 	and.w	r0, r0, #15
 8008dc4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008dc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008dcc:	f10b 0b04 	add.w	fp, fp, #4
 8008dd0:	9b05      	ldr	r3, [sp, #20]
 8008dd2:	e00d      	b.n	8008df0 <__gethex+0x24a>
 8008dd4:	9b05      	ldr	r3, [sp, #20]
 8008dd6:	9a08      	ldr	r2, [sp, #32]
 8008dd8:	4413      	add	r3, r2
 8008dda:	42bb      	cmp	r3, r7
 8008ddc:	d3e1      	bcc.n	8008da2 <__gethex+0x1fc>
 8008dde:	4618      	mov	r0, r3
 8008de0:	9a01      	ldr	r2, [sp, #4]
 8008de2:	9903      	ldr	r1, [sp, #12]
 8008de4:	9309      	str	r3, [sp, #36]	; 0x24
 8008de6:	f000 fffb 	bl	8009de0 <strncmp>
 8008dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d1d8      	bne.n	8008da2 <__gethex+0x1fc>
 8008df0:	461e      	mov	r6, r3
 8008df2:	e791      	b.n	8008d18 <__gethex+0x172>
 8008df4:	1eb9      	subs	r1, r7, #2
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 fdb8 	bl	800996c <__any_on>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d0b2      	beq.n	8008d66 <__gethex+0x1c0>
 8008e00:	f04f 0a03 	mov.w	sl, #3
 8008e04:	e7b1      	b.n	8008d6a <__gethex+0x1c4>
 8008e06:	da09      	bge.n	8008e1c <__gethex+0x276>
 8008e08:	1bf7      	subs	r7, r6, r7
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	463a      	mov	r2, r7
 8008e0e:	9802      	ldr	r0, [sp, #8]
 8008e10:	f000 fbce 	bl	80095b0 <__lshift>
 8008e14:	1be4      	subs	r4, r4, r7
 8008e16:	4605      	mov	r5, r0
 8008e18:	f100 0914 	add.w	r9, r0, #20
 8008e1c:	f04f 0a00 	mov.w	sl, #0
 8008e20:	e7a8      	b.n	8008d74 <__gethex+0x1ce>
 8008e22:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e26:	42a0      	cmp	r0, r4
 8008e28:	dd6a      	ble.n	8008f00 <__gethex+0x35a>
 8008e2a:	1b04      	subs	r4, r0, r4
 8008e2c:	42a6      	cmp	r6, r4
 8008e2e:	dc2e      	bgt.n	8008e8e <__gethex+0x2e8>
 8008e30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d022      	beq.n	8008e7e <__gethex+0x2d8>
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d024      	beq.n	8008e86 <__gethex+0x2e0>
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d115      	bne.n	8008e6c <__gethex+0x2c6>
 8008e40:	42a6      	cmp	r6, r4
 8008e42:	d113      	bne.n	8008e6c <__gethex+0x2c6>
 8008e44:	2e01      	cmp	r6, #1
 8008e46:	dc0b      	bgt.n	8008e60 <__gethex+0x2ba>
 8008e48:	9a06      	ldr	r2, [sp, #24]
 8008e4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	2301      	movs	r3, #1
 8008e52:	612b      	str	r3, [r5, #16]
 8008e54:	f8c9 3000 	str.w	r3, [r9]
 8008e58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e5a:	2762      	movs	r7, #98	; 0x62
 8008e5c:	601d      	str	r5, [r3, #0]
 8008e5e:	e72a      	b.n	8008cb6 <__gethex+0x110>
 8008e60:	1e71      	subs	r1, r6, #1
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 fd82 	bl	800996c <__any_on>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d1ed      	bne.n	8008e48 <__gethex+0x2a2>
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	9802      	ldr	r0, [sp, #8]
 8008e70:	f000 f9d2 	bl	8009218 <_Bfree>
 8008e74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e76:	2300      	movs	r3, #0
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	2750      	movs	r7, #80	; 0x50
 8008e7c:	e71b      	b.n	8008cb6 <__gethex+0x110>
 8008e7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0e1      	beq.n	8008e48 <__gethex+0x2a2>
 8008e84:	e7f2      	b.n	8008e6c <__gethex+0x2c6>
 8008e86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1dd      	bne.n	8008e48 <__gethex+0x2a2>
 8008e8c:	e7ee      	b.n	8008e6c <__gethex+0x2c6>
 8008e8e:	1e67      	subs	r7, r4, #1
 8008e90:	f1ba 0f00 	cmp.w	sl, #0
 8008e94:	d131      	bne.n	8008efa <__gethex+0x354>
 8008e96:	b127      	cbz	r7, 8008ea2 <__gethex+0x2fc>
 8008e98:	4639      	mov	r1, r7
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f000 fd66 	bl	800996c <__any_on>
 8008ea0:	4682      	mov	sl, r0
 8008ea2:	117a      	asrs	r2, r7, #5
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f007 071f 	and.w	r7, r7, #31
 8008eaa:	fa03 f707 	lsl.w	r7, r3, r7
 8008eae:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	421f      	tst	r7, r3
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	bf18      	it	ne
 8008eba:	f04a 0a02 	orrne.w	sl, sl, #2
 8008ebe:	1b36      	subs	r6, r6, r4
 8008ec0:	f7ff fe22 	bl	8008b08 <rshift>
 8008ec4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008ec8:	2702      	movs	r7, #2
 8008eca:	f1ba 0f00 	cmp.w	sl, #0
 8008ece:	d048      	beq.n	8008f62 <__gethex+0x3bc>
 8008ed0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d015      	beq.n	8008f04 <__gethex+0x35e>
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d017      	beq.n	8008f0c <__gethex+0x366>
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d109      	bne.n	8008ef4 <__gethex+0x34e>
 8008ee0:	f01a 0f02 	tst.w	sl, #2
 8008ee4:	d006      	beq.n	8008ef4 <__gethex+0x34e>
 8008ee6:	f8d9 3000 	ldr.w	r3, [r9]
 8008eea:	ea4a 0a03 	orr.w	sl, sl, r3
 8008eee:	f01a 0f01 	tst.w	sl, #1
 8008ef2:	d10e      	bne.n	8008f12 <__gethex+0x36c>
 8008ef4:	f047 0710 	orr.w	r7, r7, #16
 8008ef8:	e033      	b.n	8008f62 <__gethex+0x3bc>
 8008efa:	f04f 0a01 	mov.w	sl, #1
 8008efe:	e7d0      	b.n	8008ea2 <__gethex+0x2fc>
 8008f00:	2701      	movs	r7, #1
 8008f02:	e7e2      	b.n	8008eca <__gethex+0x324>
 8008f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f06:	f1c3 0301 	rsb	r3, r3, #1
 8008f0a:	9315      	str	r3, [sp, #84]	; 0x54
 8008f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0f0      	beq.n	8008ef4 <__gethex+0x34e>
 8008f12:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008f16:	f105 0314 	add.w	r3, r5, #20
 8008f1a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008f1e:	eb03 010a 	add.w	r1, r3, sl
 8008f22:	f04f 0c00 	mov.w	ip, #0
 8008f26:	4618      	mov	r0, r3
 8008f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f30:	d01c      	beq.n	8008f6c <__gethex+0x3c6>
 8008f32:	3201      	adds	r2, #1
 8008f34:	6002      	str	r2, [r0, #0]
 8008f36:	2f02      	cmp	r7, #2
 8008f38:	f105 0314 	add.w	r3, r5, #20
 8008f3c:	d138      	bne.n	8008fb0 <__gethex+0x40a>
 8008f3e:	f8d8 2000 	ldr.w	r2, [r8]
 8008f42:	3a01      	subs	r2, #1
 8008f44:	42b2      	cmp	r2, r6
 8008f46:	d10a      	bne.n	8008f5e <__gethex+0x3b8>
 8008f48:	1171      	asrs	r1, r6, #5
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f006 061f 	and.w	r6, r6, #31
 8008f50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f54:	fa02 f606 	lsl.w	r6, r2, r6
 8008f58:	421e      	tst	r6, r3
 8008f5a:	bf18      	it	ne
 8008f5c:	4617      	movne	r7, r2
 8008f5e:	f047 0720 	orr.w	r7, r7, #32
 8008f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f64:	601d      	str	r5, [r3, #0]
 8008f66:	9b06      	ldr	r3, [sp, #24]
 8008f68:	601c      	str	r4, [r3, #0]
 8008f6a:	e6a4      	b.n	8008cb6 <__gethex+0x110>
 8008f6c:	4299      	cmp	r1, r3
 8008f6e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f72:	d8d8      	bhi.n	8008f26 <__gethex+0x380>
 8008f74:	68ab      	ldr	r3, [r5, #8]
 8008f76:	4599      	cmp	r9, r3
 8008f78:	db12      	blt.n	8008fa0 <__gethex+0x3fa>
 8008f7a:	6869      	ldr	r1, [r5, #4]
 8008f7c:	9802      	ldr	r0, [sp, #8]
 8008f7e:	3101      	adds	r1, #1
 8008f80:	f000 f916 	bl	80091b0 <_Balloc>
 8008f84:	692a      	ldr	r2, [r5, #16]
 8008f86:	3202      	adds	r2, #2
 8008f88:	f105 010c 	add.w	r1, r5, #12
 8008f8c:	4683      	mov	fp, r0
 8008f8e:	0092      	lsls	r2, r2, #2
 8008f90:	300c      	adds	r0, #12
 8008f92:	f7fd fa4d 	bl	8006430 <memcpy>
 8008f96:	4629      	mov	r1, r5
 8008f98:	9802      	ldr	r0, [sp, #8]
 8008f9a:	f000 f93d 	bl	8009218 <_Bfree>
 8008f9e:	465d      	mov	r5, fp
 8008fa0:	692b      	ldr	r3, [r5, #16]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008fa8:	612a      	str	r2, [r5, #16]
 8008faa:	2201      	movs	r2, #1
 8008fac:	615a      	str	r2, [r3, #20]
 8008fae:	e7c2      	b.n	8008f36 <__gethex+0x390>
 8008fb0:	692a      	ldr	r2, [r5, #16]
 8008fb2:	454a      	cmp	r2, r9
 8008fb4:	dd0b      	ble.n	8008fce <__gethex+0x428>
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f7ff fda5 	bl	8008b08 <rshift>
 8008fbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fc2:	3401      	adds	r4, #1
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	f6ff aed9 	blt.w	8008d7c <__gethex+0x1d6>
 8008fca:	2701      	movs	r7, #1
 8008fcc:	e7c7      	b.n	8008f5e <__gethex+0x3b8>
 8008fce:	f016 061f 	ands.w	r6, r6, #31
 8008fd2:	d0fa      	beq.n	8008fca <__gethex+0x424>
 8008fd4:	449a      	add	sl, r3
 8008fd6:	f1c6 0620 	rsb	r6, r6, #32
 8008fda:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008fde:	f000 f9ab 	bl	8009338 <__hi0bits>
 8008fe2:	42b0      	cmp	r0, r6
 8008fe4:	dbe7      	blt.n	8008fb6 <__gethex+0x410>
 8008fe6:	e7f0      	b.n	8008fca <__gethex+0x424>

08008fe8 <L_shift>:
 8008fe8:	f1c2 0208 	rsb	r2, r2, #8
 8008fec:	0092      	lsls	r2, r2, #2
 8008fee:	b570      	push	{r4, r5, r6, lr}
 8008ff0:	f1c2 0620 	rsb	r6, r2, #32
 8008ff4:	6843      	ldr	r3, [r0, #4]
 8008ff6:	6804      	ldr	r4, [r0, #0]
 8008ff8:	fa03 f506 	lsl.w	r5, r3, r6
 8008ffc:	432c      	orrs	r4, r5
 8008ffe:	40d3      	lsrs	r3, r2
 8009000:	6004      	str	r4, [r0, #0]
 8009002:	f840 3f04 	str.w	r3, [r0, #4]!
 8009006:	4288      	cmp	r0, r1
 8009008:	d3f4      	bcc.n	8008ff4 <L_shift+0xc>
 800900a:	bd70      	pop	{r4, r5, r6, pc}

0800900c <__match>:
 800900c:	b530      	push	{r4, r5, lr}
 800900e:	6803      	ldr	r3, [r0, #0]
 8009010:	3301      	adds	r3, #1
 8009012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009016:	b914      	cbnz	r4, 800901e <__match+0x12>
 8009018:	6003      	str	r3, [r0, #0]
 800901a:	2001      	movs	r0, #1
 800901c:	bd30      	pop	{r4, r5, pc}
 800901e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009022:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009026:	2d19      	cmp	r5, #25
 8009028:	bf98      	it	ls
 800902a:	3220      	addls	r2, #32
 800902c:	42a2      	cmp	r2, r4
 800902e:	d0f0      	beq.n	8009012 <__match+0x6>
 8009030:	2000      	movs	r0, #0
 8009032:	e7f3      	b.n	800901c <__match+0x10>

08009034 <__hexnan>:
 8009034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	680b      	ldr	r3, [r1, #0]
 800903a:	6801      	ldr	r1, [r0, #0]
 800903c:	115f      	asrs	r7, r3, #5
 800903e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009042:	f013 031f 	ands.w	r3, r3, #31
 8009046:	b087      	sub	sp, #28
 8009048:	bf18      	it	ne
 800904a:	3704      	addne	r7, #4
 800904c:	2500      	movs	r5, #0
 800904e:	1f3e      	subs	r6, r7, #4
 8009050:	4682      	mov	sl, r0
 8009052:	4690      	mov	r8, r2
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	f847 5c04 	str.w	r5, [r7, #-4]
 800905a:	46b1      	mov	r9, r6
 800905c:	4634      	mov	r4, r6
 800905e:	9502      	str	r5, [sp, #8]
 8009060:	46ab      	mov	fp, r5
 8009062:	784a      	ldrb	r2, [r1, #1]
 8009064:	1c4b      	adds	r3, r1, #1
 8009066:	9303      	str	r3, [sp, #12]
 8009068:	b342      	cbz	r2, 80090bc <__hexnan+0x88>
 800906a:	4610      	mov	r0, r2
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	9204      	str	r2, [sp, #16]
 8009070:	f7ff fd84 	bl	8008b7c <__hexdig_fun>
 8009074:	2800      	cmp	r0, #0
 8009076:	d143      	bne.n	8009100 <__hexnan+0xcc>
 8009078:	9a04      	ldr	r2, [sp, #16]
 800907a:	9905      	ldr	r1, [sp, #20]
 800907c:	2a20      	cmp	r2, #32
 800907e:	d818      	bhi.n	80090b2 <__hexnan+0x7e>
 8009080:	9b02      	ldr	r3, [sp, #8]
 8009082:	459b      	cmp	fp, r3
 8009084:	dd13      	ble.n	80090ae <__hexnan+0x7a>
 8009086:	454c      	cmp	r4, r9
 8009088:	d206      	bcs.n	8009098 <__hexnan+0x64>
 800908a:	2d07      	cmp	r5, #7
 800908c:	dc04      	bgt.n	8009098 <__hexnan+0x64>
 800908e:	462a      	mov	r2, r5
 8009090:	4649      	mov	r1, r9
 8009092:	4620      	mov	r0, r4
 8009094:	f7ff ffa8 	bl	8008fe8 <L_shift>
 8009098:	4544      	cmp	r4, r8
 800909a:	d944      	bls.n	8009126 <__hexnan+0xf2>
 800909c:	2300      	movs	r3, #0
 800909e:	f1a4 0904 	sub.w	r9, r4, #4
 80090a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80090a6:	f8cd b008 	str.w	fp, [sp, #8]
 80090aa:	464c      	mov	r4, r9
 80090ac:	461d      	mov	r5, r3
 80090ae:	9903      	ldr	r1, [sp, #12]
 80090b0:	e7d7      	b.n	8009062 <__hexnan+0x2e>
 80090b2:	2a29      	cmp	r2, #41	; 0x29
 80090b4:	d14a      	bne.n	800914c <__hexnan+0x118>
 80090b6:	3102      	adds	r1, #2
 80090b8:	f8ca 1000 	str.w	r1, [sl]
 80090bc:	f1bb 0f00 	cmp.w	fp, #0
 80090c0:	d044      	beq.n	800914c <__hexnan+0x118>
 80090c2:	454c      	cmp	r4, r9
 80090c4:	d206      	bcs.n	80090d4 <__hexnan+0xa0>
 80090c6:	2d07      	cmp	r5, #7
 80090c8:	dc04      	bgt.n	80090d4 <__hexnan+0xa0>
 80090ca:	462a      	mov	r2, r5
 80090cc:	4649      	mov	r1, r9
 80090ce:	4620      	mov	r0, r4
 80090d0:	f7ff ff8a 	bl	8008fe8 <L_shift>
 80090d4:	4544      	cmp	r4, r8
 80090d6:	d928      	bls.n	800912a <__hexnan+0xf6>
 80090d8:	4643      	mov	r3, r8
 80090da:	f854 2b04 	ldr.w	r2, [r4], #4
 80090de:	f843 2b04 	str.w	r2, [r3], #4
 80090e2:	42a6      	cmp	r6, r4
 80090e4:	d2f9      	bcs.n	80090da <__hexnan+0xa6>
 80090e6:	2200      	movs	r2, #0
 80090e8:	f843 2b04 	str.w	r2, [r3], #4
 80090ec:	429e      	cmp	r6, r3
 80090ee:	d2fb      	bcs.n	80090e8 <__hexnan+0xb4>
 80090f0:	6833      	ldr	r3, [r6, #0]
 80090f2:	b91b      	cbnz	r3, 80090fc <__hexnan+0xc8>
 80090f4:	4546      	cmp	r6, r8
 80090f6:	d127      	bne.n	8009148 <__hexnan+0x114>
 80090f8:	2301      	movs	r3, #1
 80090fa:	6033      	str	r3, [r6, #0]
 80090fc:	2005      	movs	r0, #5
 80090fe:	e026      	b.n	800914e <__hexnan+0x11a>
 8009100:	3501      	adds	r5, #1
 8009102:	2d08      	cmp	r5, #8
 8009104:	f10b 0b01 	add.w	fp, fp, #1
 8009108:	dd06      	ble.n	8009118 <__hexnan+0xe4>
 800910a:	4544      	cmp	r4, r8
 800910c:	d9cf      	bls.n	80090ae <__hexnan+0x7a>
 800910e:	2300      	movs	r3, #0
 8009110:	f844 3c04 	str.w	r3, [r4, #-4]
 8009114:	2501      	movs	r5, #1
 8009116:	3c04      	subs	r4, #4
 8009118:	6822      	ldr	r2, [r4, #0]
 800911a:	f000 000f 	and.w	r0, r0, #15
 800911e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009122:	6020      	str	r0, [r4, #0]
 8009124:	e7c3      	b.n	80090ae <__hexnan+0x7a>
 8009126:	2508      	movs	r5, #8
 8009128:	e7c1      	b.n	80090ae <__hexnan+0x7a>
 800912a:	9b01      	ldr	r3, [sp, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0df      	beq.n	80090f0 <__hexnan+0xbc>
 8009130:	f04f 32ff 	mov.w	r2, #4294967295
 8009134:	f1c3 0320 	rsb	r3, r3, #32
 8009138:	fa22 f303 	lsr.w	r3, r2, r3
 800913c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009140:	401a      	ands	r2, r3
 8009142:	f847 2c04 	str.w	r2, [r7, #-4]
 8009146:	e7d3      	b.n	80090f0 <__hexnan+0xbc>
 8009148:	3e04      	subs	r6, #4
 800914a:	e7d1      	b.n	80090f0 <__hexnan+0xbc>
 800914c:	2004      	movs	r0, #4
 800914e:	b007      	add	sp, #28
 8009150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009154 <__locale_ctype_ptr_l>:
 8009154:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009158:	4770      	bx	lr

0800915a <__localeconv_l>:
 800915a:	30f0      	adds	r0, #240	; 0xf0
 800915c:	4770      	bx	lr
	...

08009160 <_localeconv_r>:
 8009160:	4b04      	ldr	r3, [pc, #16]	; (8009174 <_localeconv_r+0x14>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6a18      	ldr	r0, [r3, #32]
 8009166:	4b04      	ldr	r3, [pc, #16]	; (8009178 <_localeconv_r+0x18>)
 8009168:	2800      	cmp	r0, #0
 800916a:	bf08      	it	eq
 800916c:	4618      	moveq	r0, r3
 800916e:	30f0      	adds	r0, #240	; 0xf0
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20000024 	.word	0x20000024
 8009178:	20000088 	.word	0x20000088

0800917c <malloc>:
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <malloc+0xc>)
 800917e:	4601      	mov	r1, r0
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f000 bc71 	b.w	8009a68 <_malloc_r>
 8009186:	bf00      	nop
 8009188:	20000024 	.word	0x20000024

0800918c <__ascii_mbtowc>:
 800918c:	b082      	sub	sp, #8
 800918e:	b901      	cbnz	r1, 8009192 <__ascii_mbtowc+0x6>
 8009190:	a901      	add	r1, sp, #4
 8009192:	b142      	cbz	r2, 80091a6 <__ascii_mbtowc+0x1a>
 8009194:	b14b      	cbz	r3, 80091aa <__ascii_mbtowc+0x1e>
 8009196:	7813      	ldrb	r3, [r2, #0]
 8009198:	600b      	str	r3, [r1, #0]
 800919a:	7812      	ldrb	r2, [r2, #0]
 800919c:	1c10      	adds	r0, r2, #0
 800919e:	bf18      	it	ne
 80091a0:	2001      	movne	r0, #1
 80091a2:	b002      	add	sp, #8
 80091a4:	4770      	bx	lr
 80091a6:	4610      	mov	r0, r2
 80091a8:	e7fb      	b.n	80091a2 <__ascii_mbtowc+0x16>
 80091aa:	f06f 0001 	mvn.w	r0, #1
 80091ae:	e7f8      	b.n	80091a2 <__ascii_mbtowc+0x16>

080091b0 <_Balloc>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091b4:	4604      	mov	r4, r0
 80091b6:	460e      	mov	r6, r1
 80091b8:	b93d      	cbnz	r5, 80091ca <_Balloc+0x1a>
 80091ba:	2010      	movs	r0, #16
 80091bc:	f7ff ffde 	bl	800917c <malloc>
 80091c0:	6260      	str	r0, [r4, #36]	; 0x24
 80091c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091c6:	6005      	str	r5, [r0, #0]
 80091c8:	60c5      	str	r5, [r0, #12]
 80091ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80091cc:	68eb      	ldr	r3, [r5, #12]
 80091ce:	b183      	cbz	r3, 80091f2 <_Balloc+0x42>
 80091d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80091d8:	b9b8      	cbnz	r0, 800920a <_Balloc+0x5a>
 80091da:	2101      	movs	r1, #1
 80091dc:	fa01 f506 	lsl.w	r5, r1, r6
 80091e0:	1d6a      	adds	r2, r5, #5
 80091e2:	0092      	lsls	r2, r2, #2
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fbe2 	bl	80099ae <_calloc_r>
 80091ea:	b160      	cbz	r0, 8009206 <_Balloc+0x56>
 80091ec:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80091f0:	e00e      	b.n	8009210 <_Balloc+0x60>
 80091f2:	2221      	movs	r2, #33	; 0x21
 80091f4:	2104      	movs	r1, #4
 80091f6:	4620      	mov	r0, r4
 80091f8:	f000 fbd9 	bl	80099ae <_calloc_r>
 80091fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091fe:	60e8      	str	r0, [r5, #12]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e4      	bne.n	80091d0 <_Balloc+0x20>
 8009206:	2000      	movs	r0, #0
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	6802      	ldr	r2, [r0, #0]
 800920c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009210:	2300      	movs	r3, #0
 8009212:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009216:	e7f7      	b.n	8009208 <_Balloc+0x58>

08009218 <_Bfree>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800921c:	4606      	mov	r6, r0
 800921e:	460d      	mov	r5, r1
 8009220:	b93c      	cbnz	r4, 8009232 <_Bfree+0x1a>
 8009222:	2010      	movs	r0, #16
 8009224:	f7ff ffaa 	bl	800917c <malloc>
 8009228:	6270      	str	r0, [r6, #36]	; 0x24
 800922a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800922e:	6004      	str	r4, [r0, #0]
 8009230:	60c4      	str	r4, [r0, #12]
 8009232:	b13d      	cbz	r5, 8009244 <_Bfree+0x2c>
 8009234:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009236:	686a      	ldr	r2, [r5, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800923e:	6029      	str	r1, [r5, #0]
 8009240:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009244:	bd70      	pop	{r4, r5, r6, pc}

08009246 <__multadd>:
 8009246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924a:	690d      	ldr	r5, [r1, #16]
 800924c:	461f      	mov	r7, r3
 800924e:	4606      	mov	r6, r0
 8009250:	460c      	mov	r4, r1
 8009252:	f101 0c14 	add.w	ip, r1, #20
 8009256:	2300      	movs	r3, #0
 8009258:	f8dc 0000 	ldr.w	r0, [ip]
 800925c:	b281      	uxth	r1, r0
 800925e:	fb02 7101 	mla	r1, r2, r1, r7
 8009262:	0c0f      	lsrs	r7, r1, #16
 8009264:	0c00      	lsrs	r0, r0, #16
 8009266:	fb02 7000 	mla	r0, r2, r0, r7
 800926a:	b289      	uxth	r1, r1
 800926c:	3301      	adds	r3, #1
 800926e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009272:	429d      	cmp	r5, r3
 8009274:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009278:	f84c 1b04 	str.w	r1, [ip], #4
 800927c:	dcec      	bgt.n	8009258 <__multadd+0x12>
 800927e:	b1d7      	cbz	r7, 80092b6 <__multadd+0x70>
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	42ab      	cmp	r3, r5
 8009284:	dc12      	bgt.n	80092ac <__multadd+0x66>
 8009286:	6861      	ldr	r1, [r4, #4]
 8009288:	4630      	mov	r0, r6
 800928a:	3101      	adds	r1, #1
 800928c:	f7ff ff90 	bl	80091b0 <_Balloc>
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	3202      	adds	r2, #2
 8009294:	f104 010c 	add.w	r1, r4, #12
 8009298:	4680      	mov	r8, r0
 800929a:	0092      	lsls	r2, r2, #2
 800929c:	300c      	adds	r0, #12
 800929e:	f7fd f8c7 	bl	8006430 <memcpy>
 80092a2:	4621      	mov	r1, r4
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff ffb7 	bl	8009218 <_Bfree>
 80092aa:	4644      	mov	r4, r8
 80092ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092b0:	3501      	adds	r5, #1
 80092b2:	615f      	str	r7, [r3, #20]
 80092b4:	6125      	str	r5, [r4, #16]
 80092b6:	4620      	mov	r0, r4
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080092bc <__s2b>:
 80092bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c0:	460c      	mov	r4, r1
 80092c2:	4615      	mov	r5, r2
 80092c4:	461f      	mov	r7, r3
 80092c6:	2209      	movs	r2, #9
 80092c8:	3308      	adds	r3, #8
 80092ca:	4606      	mov	r6, r0
 80092cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80092d0:	2100      	movs	r1, #0
 80092d2:	2201      	movs	r2, #1
 80092d4:	429a      	cmp	r2, r3
 80092d6:	db20      	blt.n	800931a <__s2b+0x5e>
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff ff69 	bl	80091b0 <_Balloc>
 80092de:	9b08      	ldr	r3, [sp, #32]
 80092e0:	6143      	str	r3, [r0, #20]
 80092e2:	2d09      	cmp	r5, #9
 80092e4:	f04f 0301 	mov.w	r3, #1
 80092e8:	6103      	str	r3, [r0, #16]
 80092ea:	dd19      	ble.n	8009320 <__s2b+0x64>
 80092ec:	f104 0809 	add.w	r8, r4, #9
 80092f0:	46c1      	mov	r9, r8
 80092f2:	442c      	add	r4, r5
 80092f4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80092f8:	4601      	mov	r1, r0
 80092fa:	3b30      	subs	r3, #48	; 0x30
 80092fc:	220a      	movs	r2, #10
 80092fe:	4630      	mov	r0, r6
 8009300:	f7ff ffa1 	bl	8009246 <__multadd>
 8009304:	45a1      	cmp	r9, r4
 8009306:	d1f5      	bne.n	80092f4 <__s2b+0x38>
 8009308:	eb08 0405 	add.w	r4, r8, r5
 800930c:	3c08      	subs	r4, #8
 800930e:	1b2d      	subs	r5, r5, r4
 8009310:	1963      	adds	r3, r4, r5
 8009312:	42bb      	cmp	r3, r7
 8009314:	db07      	blt.n	8009326 <__s2b+0x6a>
 8009316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931a:	0052      	lsls	r2, r2, #1
 800931c:	3101      	adds	r1, #1
 800931e:	e7d9      	b.n	80092d4 <__s2b+0x18>
 8009320:	340a      	adds	r4, #10
 8009322:	2509      	movs	r5, #9
 8009324:	e7f3      	b.n	800930e <__s2b+0x52>
 8009326:	f814 3b01 	ldrb.w	r3, [r4], #1
 800932a:	4601      	mov	r1, r0
 800932c:	3b30      	subs	r3, #48	; 0x30
 800932e:	220a      	movs	r2, #10
 8009330:	4630      	mov	r0, r6
 8009332:	f7ff ff88 	bl	8009246 <__multadd>
 8009336:	e7eb      	b.n	8009310 <__s2b+0x54>

08009338 <__hi0bits>:
 8009338:	0c02      	lsrs	r2, r0, #16
 800933a:	0412      	lsls	r2, r2, #16
 800933c:	4603      	mov	r3, r0
 800933e:	b9b2      	cbnz	r2, 800936e <__hi0bits+0x36>
 8009340:	0403      	lsls	r3, r0, #16
 8009342:	2010      	movs	r0, #16
 8009344:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009348:	bf04      	itt	eq
 800934a:	021b      	lsleq	r3, r3, #8
 800934c:	3008      	addeq	r0, #8
 800934e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009352:	bf04      	itt	eq
 8009354:	011b      	lsleq	r3, r3, #4
 8009356:	3004      	addeq	r0, #4
 8009358:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800935c:	bf04      	itt	eq
 800935e:	009b      	lsleq	r3, r3, #2
 8009360:	3002      	addeq	r0, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	db06      	blt.n	8009374 <__hi0bits+0x3c>
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	d503      	bpl.n	8009372 <__hi0bits+0x3a>
 800936a:	3001      	adds	r0, #1
 800936c:	4770      	bx	lr
 800936e:	2000      	movs	r0, #0
 8009370:	e7e8      	b.n	8009344 <__hi0bits+0xc>
 8009372:	2020      	movs	r0, #32
 8009374:	4770      	bx	lr

08009376 <__lo0bits>:
 8009376:	6803      	ldr	r3, [r0, #0]
 8009378:	f013 0207 	ands.w	r2, r3, #7
 800937c:	4601      	mov	r1, r0
 800937e:	d00b      	beq.n	8009398 <__lo0bits+0x22>
 8009380:	07da      	lsls	r2, r3, #31
 8009382:	d423      	bmi.n	80093cc <__lo0bits+0x56>
 8009384:	0798      	lsls	r0, r3, #30
 8009386:	bf49      	itett	mi
 8009388:	085b      	lsrmi	r3, r3, #1
 800938a:	089b      	lsrpl	r3, r3, #2
 800938c:	2001      	movmi	r0, #1
 800938e:	600b      	strmi	r3, [r1, #0]
 8009390:	bf5c      	itt	pl
 8009392:	600b      	strpl	r3, [r1, #0]
 8009394:	2002      	movpl	r0, #2
 8009396:	4770      	bx	lr
 8009398:	b298      	uxth	r0, r3
 800939a:	b9a8      	cbnz	r0, 80093c8 <__lo0bits+0x52>
 800939c:	0c1b      	lsrs	r3, r3, #16
 800939e:	2010      	movs	r0, #16
 80093a0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093a4:	bf04      	itt	eq
 80093a6:	0a1b      	lsreq	r3, r3, #8
 80093a8:	3008      	addeq	r0, #8
 80093aa:	071a      	lsls	r2, r3, #28
 80093ac:	bf04      	itt	eq
 80093ae:	091b      	lsreq	r3, r3, #4
 80093b0:	3004      	addeq	r0, #4
 80093b2:	079a      	lsls	r2, r3, #30
 80093b4:	bf04      	itt	eq
 80093b6:	089b      	lsreq	r3, r3, #2
 80093b8:	3002      	addeq	r0, #2
 80093ba:	07da      	lsls	r2, r3, #31
 80093bc:	d402      	bmi.n	80093c4 <__lo0bits+0x4e>
 80093be:	085b      	lsrs	r3, r3, #1
 80093c0:	d006      	beq.n	80093d0 <__lo0bits+0x5a>
 80093c2:	3001      	adds	r0, #1
 80093c4:	600b      	str	r3, [r1, #0]
 80093c6:	4770      	bx	lr
 80093c8:	4610      	mov	r0, r2
 80093ca:	e7e9      	b.n	80093a0 <__lo0bits+0x2a>
 80093cc:	2000      	movs	r0, #0
 80093ce:	4770      	bx	lr
 80093d0:	2020      	movs	r0, #32
 80093d2:	4770      	bx	lr

080093d4 <__i2b>:
 80093d4:	b510      	push	{r4, lr}
 80093d6:	460c      	mov	r4, r1
 80093d8:	2101      	movs	r1, #1
 80093da:	f7ff fee9 	bl	80091b0 <_Balloc>
 80093de:	2201      	movs	r2, #1
 80093e0:	6144      	str	r4, [r0, #20]
 80093e2:	6102      	str	r2, [r0, #16]
 80093e4:	bd10      	pop	{r4, pc}

080093e6 <__multiply>:
 80093e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	4614      	mov	r4, r2
 80093ec:	690a      	ldr	r2, [r1, #16]
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	bfb8      	it	lt
 80093f4:	460b      	movlt	r3, r1
 80093f6:	4688      	mov	r8, r1
 80093f8:	bfbc      	itt	lt
 80093fa:	46a0      	movlt	r8, r4
 80093fc:	461c      	movlt	r4, r3
 80093fe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009402:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009406:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800940a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800940e:	eb07 0609 	add.w	r6, r7, r9
 8009412:	42b3      	cmp	r3, r6
 8009414:	bfb8      	it	lt
 8009416:	3101      	addlt	r1, #1
 8009418:	f7ff feca 	bl	80091b0 <_Balloc>
 800941c:	f100 0514 	add.w	r5, r0, #20
 8009420:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009424:	462b      	mov	r3, r5
 8009426:	2200      	movs	r2, #0
 8009428:	4573      	cmp	r3, lr
 800942a:	d316      	bcc.n	800945a <__multiply+0x74>
 800942c:	f104 0214 	add.w	r2, r4, #20
 8009430:	f108 0114 	add.w	r1, r8, #20
 8009434:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009438:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	9b00      	ldr	r3, [sp, #0]
 8009440:	9201      	str	r2, [sp, #4]
 8009442:	4293      	cmp	r3, r2
 8009444:	d80c      	bhi.n	8009460 <__multiply+0x7a>
 8009446:	2e00      	cmp	r6, #0
 8009448:	dd03      	ble.n	8009452 <__multiply+0x6c>
 800944a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800944e:	2b00      	cmp	r3, #0
 8009450:	d05d      	beq.n	800950e <__multiply+0x128>
 8009452:	6106      	str	r6, [r0, #16]
 8009454:	b003      	add	sp, #12
 8009456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945a:	f843 2b04 	str.w	r2, [r3], #4
 800945e:	e7e3      	b.n	8009428 <__multiply+0x42>
 8009460:	f8b2 b000 	ldrh.w	fp, [r2]
 8009464:	f1bb 0f00 	cmp.w	fp, #0
 8009468:	d023      	beq.n	80094b2 <__multiply+0xcc>
 800946a:	4689      	mov	r9, r1
 800946c:	46ac      	mov	ip, r5
 800946e:	f04f 0800 	mov.w	r8, #0
 8009472:	f859 4b04 	ldr.w	r4, [r9], #4
 8009476:	f8dc a000 	ldr.w	sl, [ip]
 800947a:	b2a3      	uxth	r3, r4
 800947c:	fa1f fa8a 	uxth.w	sl, sl
 8009480:	fb0b a303 	mla	r3, fp, r3, sl
 8009484:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009488:	f8dc 4000 	ldr.w	r4, [ip]
 800948c:	4443      	add	r3, r8
 800948e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009492:	fb0b 840a 	mla	r4, fp, sl, r8
 8009496:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800949a:	46e2      	mov	sl, ip
 800949c:	b29b      	uxth	r3, r3
 800949e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094a2:	454f      	cmp	r7, r9
 80094a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80094a8:	f84a 3b04 	str.w	r3, [sl], #4
 80094ac:	d82b      	bhi.n	8009506 <__multiply+0x120>
 80094ae:	f8cc 8004 	str.w	r8, [ip, #4]
 80094b2:	9b01      	ldr	r3, [sp, #4]
 80094b4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80094b8:	3204      	adds	r2, #4
 80094ba:	f1ba 0f00 	cmp.w	sl, #0
 80094be:	d020      	beq.n	8009502 <__multiply+0x11c>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	4689      	mov	r9, r1
 80094c4:	46a8      	mov	r8, r5
 80094c6:	f04f 0b00 	mov.w	fp, #0
 80094ca:	f8b9 c000 	ldrh.w	ip, [r9]
 80094ce:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80094d2:	fb0a 440c 	mla	r4, sl, ip, r4
 80094d6:	445c      	add	r4, fp
 80094d8:	46c4      	mov	ip, r8
 80094da:	b29b      	uxth	r3, r3
 80094dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094e0:	f84c 3b04 	str.w	r3, [ip], #4
 80094e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80094e8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80094ec:	0c1b      	lsrs	r3, r3, #16
 80094ee:	fb0a b303 	mla	r3, sl, r3, fp
 80094f2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80094f6:	454f      	cmp	r7, r9
 80094f8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80094fc:	d805      	bhi.n	800950a <__multiply+0x124>
 80094fe:	f8c8 3004 	str.w	r3, [r8, #4]
 8009502:	3504      	adds	r5, #4
 8009504:	e79b      	b.n	800943e <__multiply+0x58>
 8009506:	46d4      	mov	ip, sl
 8009508:	e7b3      	b.n	8009472 <__multiply+0x8c>
 800950a:	46e0      	mov	r8, ip
 800950c:	e7dd      	b.n	80094ca <__multiply+0xe4>
 800950e:	3e01      	subs	r6, #1
 8009510:	e799      	b.n	8009446 <__multiply+0x60>
	...

08009514 <__pow5mult>:
 8009514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009518:	4615      	mov	r5, r2
 800951a:	f012 0203 	ands.w	r2, r2, #3
 800951e:	4606      	mov	r6, r0
 8009520:	460f      	mov	r7, r1
 8009522:	d007      	beq.n	8009534 <__pow5mult+0x20>
 8009524:	3a01      	subs	r2, #1
 8009526:	4c21      	ldr	r4, [pc, #132]	; (80095ac <__pow5mult+0x98>)
 8009528:	2300      	movs	r3, #0
 800952a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800952e:	f7ff fe8a 	bl	8009246 <__multadd>
 8009532:	4607      	mov	r7, r0
 8009534:	10ad      	asrs	r5, r5, #2
 8009536:	d035      	beq.n	80095a4 <__pow5mult+0x90>
 8009538:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800953a:	b93c      	cbnz	r4, 800954c <__pow5mult+0x38>
 800953c:	2010      	movs	r0, #16
 800953e:	f7ff fe1d 	bl	800917c <malloc>
 8009542:	6270      	str	r0, [r6, #36]	; 0x24
 8009544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009548:	6004      	str	r4, [r0, #0]
 800954a:	60c4      	str	r4, [r0, #12]
 800954c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009554:	b94c      	cbnz	r4, 800956a <__pow5mult+0x56>
 8009556:	f240 2171 	movw	r1, #625	; 0x271
 800955a:	4630      	mov	r0, r6
 800955c:	f7ff ff3a 	bl	80093d4 <__i2b>
 8009560:	2300      	movs	r3, #0
 8009562:	f8c8 0008 	str.w	r0, [r8, #8]
 8009566:	4604      	mov	r4, r0
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	f04f 0800 	mov.w	r8, #0
 800956e:	07eb      	lsls	r3, r5, #31
 8009570:	d50a      	bpl.n	8009588 <__pow5mult+0x74>
 8009572:	4639      	mov	r1, r7
 8009574:	4622      	mov	r2, r4
 8009576:	4630      	mov	r0, r6
 8009578:	f7ff ff35 	bl	80093e6 <__multiply>
 800957c:	4639      	mov	r1, r7
 800957e:	4681      	mov	r9, r0
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff fe49 	bl	8009218 <_Bfree>
 8009586:	464f      	mov	r7, r9
 8009588:	106d      	asrs	r5, r5, #1
 800958a:	d00b      	beq.n	80095a4 <__pow5mult+0x90>
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	b938      	cbnz	r0, 80095a0 <__pow5mult+0x8c>
 8009590:	4622      	mov	r2, r4
 8009592:	4621      	mov	r1, r4
 8009594:	4630      	mov	r0, r6
 8009596:	f7ff ff26 	bl	80093e6 <__multiply>
 800959a:	6020      	str	r0, [r4, #0]
 800959c:	f8c0 8000 	str.w	r8, [r0]
 80095a0:	4604      	mov	r4, r0
 80095a2:	e7e4      	b.n	800956e <__pow5mult+0x5a>
 80095a4:	4638      	mov	r0, r7
 80095a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095aa:	bf00      	nop
 80095ac:	0800b710 	.word	0x0800b710

080095b0 <__lshift>:
 80095b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	460c      	mov	r4, r1
 80095b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	6849      	ldr	r1, [r1, #4]
 80095be:	eb0a 0903 	add.w	r9, sl, r3
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	4607      	mov	r7, r0
 80095c6:	4616      	mov	r6, r2
 80095c8:	f109 0501 	add.w	r5, r9, #1
 80095cc:	42ab      	cmp	r3, r5
 80095ce:	db32      	blt.n	8009636 <__lshift+0x86>
 80095d0:	4638      	mov	r0, r7
 80095d2:	f7ff fded 	bl	80091b0 <_Balloc>
 80095d6:	2300      	movs	r3, #0
 80095d8:	4680      	mov	r8, r0
 80095da:	f100 0114 	add.w	r1, r0, #20
 80095de:	461a      	mov	r2, r3
 80095e0:	4553      	cmp	r3, sl
 80095e2:	db2b      	blt.n	800963c <__lshift+0x8c>
 80095e4:	6920      	ldr	r0, [r4, #16]
 80095e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095ea:	f104 0314 	add.w	r3, r4, #20
 80095ee:	f016 021f 	ands.w	r2, r6, #31
 80095f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095fa:	d025      	beq.n	8009648 <__lshift+0x98>
 80095fc:	f1c2 0e20 	rsb	lr, r2, #32
 8009600:	2000      	movs	r0, #0
 8009602:	681e      	ldr	r6, [r3, #0]
 8009604:	468a      	mov	sl, r1
 8009606:	4096      	lsls	r6, r2
 8009608:	4330      	orrs	r0, r6
 800960a:	f84a 0b04 	str.w	r0, [sl], #4
 800960e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009612:	459c      	cmp	ip, r3
 8009614:	fa20 f00e 	lsr.w	r0, r0, lr
 8009618:	d814      	bhi.n	8009644 <__lshift+0x94>
 800961a:	6048      	str	r0, [r1, #4]
 800961c:	b108      	cbz	r0, 8009622 <__lshift+0x72>
 800961e:	f109 0502 	add.w	r5, r9, #2
 8009622:	3d01      	subs	r5, #1
 8009624:	4638      	mov	r0, r7
 8009626:	f8c8 5010 	str.w	r5, [r8, #16]
 800962a:	4621      	mov	r1, r4
 800962c:	f7ff fdf4 	bl	8009218 <_Bfree>
 8009630:	4640      	mov	r0, r8
 8009632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009636:	3101      	adds	r1, #1
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	e7c7      	b.n	80095cc <__lshift+0x1c>
 800963c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009640:	3301      	adds	r3, #1
 8009642:	e7cd      	b.n	80095e0 <__lshift+0x30>
 8009644:	4651      	mov	r1, sl
 8009646:	e7dc      	b.n	8009602 <__lshift+0x52>
 8009648:	3904      	subs	r1, #4
 800964a:	f853 2b04 	ldr.w	r2, [r3], #4
 800964e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009652:	459c      	cmp	ip, r3
 8009654:	d8f9      	bhi.n	800964a <__lshift+0x9a>
 8009656:	e7e4      	b.n	8009622 <__lshift+0x72>

08009658 <__mcmp>:
 8009658:	6903      	ldr	r3, [r0, #16]
 800965a:	690a      	ldr	r2, [r1, #16]
 800965c:	1a9b      	subs	r3, r3, r2
 800965e:	b530      	push	{r4, r5, lr}
 8009660:	d10c      	bne.n	800967c <__mcmp+0x24>
 8009662:	0092      	lsls	r2, r2, #2
 8009664:	3014      	adds	r0, #20
 8009666:	3114      	adds	r1, #20
 8009668:	1884      	adds	r4, r0, r2
 800966a:	4411      	add	r1, r2
 800966c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009674:	4295      	cmp	r5, r2
 8009676:	d003      	beq.n	8009680 <__mcmp+0x28>
 8009678:	d305      	bcc.n	8009686 <__mcmp+0x2e>
 800967a:	2301      	movs	r3, #1
 800967c:	4618      	mov	r0, r3
 800967e:	bd30      	pop	{r4, r5, pc}
 8009680:	42a0      	cmp	r0, r4
 8009682:	d3f3      	bcc.n	800966c <__mcmp+0x14>
 8009684:	e7fa      	b.n	800967c <__mcmp+0x24>
 8009686:	f04f 33ff 	mov.w	r3, #4294967295
 800968a:	e7f7      	b.n	800967c <__mcmp+0x24>

0800968c <__mdiff>:
 800968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	460d      	mov	r5, r1
 8009692:	4607      	mov	r7, r0
 8009694:	4611      	mov	r1, r2
 8009696:	4628      	mov	r0, r5
 8009698:	4614      	mov	r4, r2
 800969a:	f7ff ffdd 	bl	8009658 <__mcmp>
 800969e:	1e06      	subs	r6, r0, #0
 80096a0:	d108      	bne.n	80096b4 <__mdiff+0x28>
 80096a2:	4631      	mov	r1, r6
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7ff fd83 	bl	80091b0 <_Balloc>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80096b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b4:	bfa4      	itt	ge
 80096b6:	4623      	movge	r3, r4
 80096b8:	462c      	movge	r4, r5
 80096ba:	4638      	mov	r0, r7
 80096bc:	6861      	ldr	r1, [r4, #4]
 80096be:	bfa6      	itte	ge
 80096c0:	461d      	movge	r5, r3
 80096c2:	2600      	movge	r6, #0
 80096c4:	2601      	movlt	r6, #1
 80096c6:	f7ff fd73 	bl	80091b0 <_Balloc>
 80096ca:	692b      	ldr	r3, [r5, #16]
 80096cc:	60c6      	str	r6, [r0, #12]
 80096ce:	6926      	ldr	r6, [r4, #16]
 80096d0:	f105 0914 	add.w	r9, r5, #20
 80096d4:	f104 0214 	add.w	r2, r4, #20
 80096d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80096dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80096e0:	f100 0514 	add.w	r5, r0, #20
 80096e4:	f04f 0e00 	mov.w	lr, #0
 80096e8:	f852 ab04 	ldr.w	sl, [r2], #4
 80096ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80096f0:	fa1e f18a 	uxtah	r1, lr, sl
 80096f4:	b2a3      	uxth	r3, r4
 80096f6:	1ac9      	subs	r1, r1, r3
 80096f8:	0c23      	lsrs	r3, r4, #16
 80096fa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80096fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009702:	b289      	uxth	r1, r1
 8009704:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009708:	45c8      	cmp	r8, r9
 800970a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800970e:	4694      	mov	ip, r2
 8009710:	f845 3b04 	str.w	r3, [r5], #4
 8009714:	d8e8      	bhi.n	80096e8 <__mdiff+0x5c>
 8009716:	45bc      	cmp	ip, r7
 8009718:	d304      	bcc.n	8009724 <__mdiff+0x98>
 800971a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800971e:	b183      	cbz	r3, 8009742 <__mdiff+0xb6>
 8009720:	6106      	str	r6, [r0, #16]
 8009722:	e7c5      	b.n	80096b0 <__mdiff+0x24>
 8009724:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009728:	fa1e f381 	uxtah	r3, lr, r1
 800972c:	141a      	asrs	r2, r3, #16
 800972e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009732:	b29b      	uxth	r3, r3
 8009734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009738:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800973c:	f845 3b04 	str.w	r3, [r5], #4
 8009740:	e7e9      	b.n	8009716 <__mdiff+0x8a>
 8009742:	3e01      	subs	r6, #1
 8009744:	e7e9      	b.n	800971a <__mdiff+0x8e>
	...

08009748 <__ulp>:
 8009748:	4b12      	ldr	r3, [pc, #72]	; (8009794 <__ulp+0x4c>)
 800974a:	ee10 2a90 	vmov	r2, s1
 800974e:	401a      	ands	r2, r3
 8009750:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd04      	ble.n	8009762 <__ulp+0x1a>
 8009758:	2000      	movs	r0, #0
 800975a:	4619      	mov	r1, r3
 800975c:	ec41 0b10 	vmov	d0, r0, r1
 8009760:	4770      	bx	lr
 8009762:	425b      	negs	r3, r3
 8009764:	151b      	asrs	r3, r3, #20
 8009766:	2b13      	cmp	r3, #19
 8009768:	f04f 0000 	mov.w	r0, #0
 800976c:	f04f 0100 	mov.w	r1, #0
 8009770:	dc04      	bgt.n	800977c <__ulp+0x34>
 8009772:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009776:	fa42 f103 	asr.w	r1, r2, r3
 800977a:	e7ef      	b.n	800975c <__ulp+0x14>
 800977c:	3b14      	subs	r3, #20
 800977e:	2b1e      	cmp	r3, #30
 8009780:	f04f 0201 	mov.w	r2, #1
 8009784:	bfda      	itte	le
 8009786:	f1c3 031f 	rsble	r3, r3, #31
 800978a:	fa02 f303 	lslle.w	r3, r2, r3
 800978e:	4613      	movgt	r3, r2
 8009790:	4618      	mov	r0, r3
 8009792:	e7e3      	b.n	800975c <__ulp+0x14>
 8009794:	7ff00000 	.word	0x7ff00000

08009798 <__b2d>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	6905      	ldr	r5, [r0, #16]
 800979c:	f100 0714 	add.w	r7, r0, #20
 80097a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80097a4:	1f2e      	subs	r6, r5, #4
 80097a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80097aa:	4620      	mov	r0, r4
 80097ac:	f7ff fdc4 	bl	8009338 <__hi0bits>
 80097b0:	f1c0 0320 	rsb	r3, r0, #32
 80097b4:	280a      	cmp	r0, #10
 80097b6:	600b      	str	r3, [r1, #0]
 80097b8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009830 <__b2d+0x98>
 80097bc:	dc14      	bgt.n	80097e8 <__b2d+0x50>
 80097be:	f1c0 0e0b 	rsb	lr, r0, #11
 80097c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80097c6:	42b7      	cmp	r7, r6
 80097c8:	ea41 030c 	orr.w	r3, r1, ip
 80097cc:	bf34      	ite	cc
 80097ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097d2:	2100      	movcs	r1, #0
 80097d4:	3015      	adds	r0, #21
 80097d6:	fa04 f000 	lsl.w	r0, r4, r0
 80097da:	fa21 f10e 	lsr.w	r1, r1, lr
 80097de:	ea40 0201 	orr.w	r2, r0, r1
 80097e2:	ec43 2b10 	vmov	d0, r2, r3
 80097e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097e8:	42b7      	cmp	r7, r6
 80097ea:	bf3a      	itte	cc
 80097ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80097f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097f4:	2100      	movcs	r1, #0
 80097f6:	380b      	subs	r0, #11
 80097f8:	d015      	beq.n	8009826 <__b2d+0x8e>
 80097fa:	4084      	lsls	r4, r0
 80097fc:	f1c0 0520 	rsb	r5, r0, #32
 8009800:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009804:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009808:	42be      	cmp	r6, r7
 800980a:	fa21 fc05 	lsr.w	ip, r1, r5
 800980e:	ea44 030c 	orr.w	r3, r4, ip
 8009812:	bf8c      	ite	hi
 8009814:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009818:	2400      	movls	r4, #0
 800981a:	fa01 f000 	lsl.w	r0, r1, r0
 800981e:	40ec      	lsrs	r4, r5
 8009820:	ea40 0204 	orr.w	r2, r0, r4
 8009824:	e7dd      	b.n	80097e2 <__b2d+0x4a>
 8009826:	ea44 030c 	orr.w	r3, r4, ip
 800982a:	460a      	mov	r2, r1
 800982c:	e7d9      	b.n	80097e2 <__b2d+0x4a>
 800982e:	bf00      	nop
 8009830:	3ff00000 	.word	0x3ff00000

08009834 <__d2b>:
 8009834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009838:	460e      	mov	r6, r1
 800983a:	2101      	movs	r1, #1
 800983c:	ec59 8b10 	vmov	r8, r9, d0
 8009840:	4615      	mov	r5, r2
 8009842:	f7ff fcb5 	bl	80091b0 <_Balloc>
 8009846:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800984a:	4607      	mov	r7, r0
 800984c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009850:	bb34      	cbnz	r4, 80098a0 <__d2b+0x6c>
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	f1b8 0300 	subs.w	r3, r8, #0
 8009858:	d027      	beq.n	80098aa <__d2b+0x76>
 800985a:	a802      	add	r0, sp, #8
 800985c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009860:	f7ff fd89 	bl	8009376 <__lo0bits>
 8009864:	9900      	ldr	r1, [sp, #0]
 8009866:	b1f0      	cbz	r0, 80098a6 <__d2b+0x72>
 8009868:	9a01      	ldr	r2, [sp, #4]
 800986a:	f1c0 0320 	rsb	r3, r0, #32
 800986e:	fa02 f303 	lsl.w	r3, r2, r3
 8009872:	430b      	orrs	r3, r1
 8009874:	40c2      	lsrs	r2, r0
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	9201      	str	r2, [sp, #4]
 800987a:	9b01      	ldr	r3, [sp, #4]
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	bf14      	ite	ne
 8009882:	2102      	movne	r1, #2
 8009884:	2101      	moveq	r1, #1
 8009886:	6139      	str	r1, [r7, #16]
 8009888:	b1c4      	cbz	r4, 80098bc <__d2b+0x88>
 800988a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800988e:	4404      	add	r4, r0
 8009890:	6034      	str	r4, [r6, #0]
 8009892:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009896:	6028      	str	r0, [r5, #0]
 8009898:	4638      	mov	r0, r7
 800989a:	b003      	add	sp, #12
 800989c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098a4:	e7d5      	b.n	8009852 <__d2b+0x1e>
 80098a6:	6179      	str	r1, [r7, #20]
 80098a8:	e7e7      	b.n	800987a <__d2b+0x46>
 80098aa:	a801      	add	r0, sp, #4
 80098ac:	f7ff fd63 	bl	8009376 <__lo0bits>
 80098b0:	9b01      	ldr	r3, [sp, #4]
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	2101      	movs	r1, #1
 80098b6:	6139      	str	r1, [r7, #16]
 80098b8:	3020      	adds	r0, #32
 80098ba:	e7e5      	b.n	8009888 <__d2b+0x54>
 80098bc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80098c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098c4:	6030      	str	r0, [r6, #0]
 80098c6:	6918      	ldr	r0, [r3, #16]
 80098c8:	f7ff fd36 	bl	8009338 <__hi0bits>
 80098cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80098d0:	e7e1      	b.n	8009896 <__d2b+0x62>

080098d2 <__ratio>:
 80098d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d6:	4688      	mov	r8, r1
 80098d8:	4669      	mov	r1, sp
 80098da:	4681      	mov	r9, r0
 80098dc:	f7ff ff5c 	bl	8009798 <__b2d>
 80098e0:	a901      	add	r1, sp, #4
 80098e2:	4640      	mov	r0, r8
 80098e4:	ec57 6b10 	vmov	r6, r7, d0
 80098e8:	f7ff ff56 	bl	8009798 <__b2d>
 80098ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80098f4:	eba3 0c02 	sub.w	ip, r3, r2
 80098f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098fc:	1a9b      	subs	r3, r3, r2
 80098fe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009902:	ec5b ab10 	vmov	sl, fp, d0
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfce      	itee	gt
 800990a:	463a      	movgt	r2, r7
 800990c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009910:	465a      	movle	r2, fp
 8009912:	4659      	mov	r1, fp
 8009914:	463d      	mov	r5, r7
 8009916:	bfd4      	ite	le
 8009918:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800991c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009920:	4630      	mov	r0, r6
 8009922:	ee10 2a10 	vmov	r2, s0
 8009926:	460b      	mov	r3, r1
 8009928:	4629      	mov	r1, r5
 800992a:	f7f6 ff97 	bl	800085c <__aeabi_ddiv>
 800992e:	ec41 0b10 	vmov	d0, r0, r1
 8009932:	b003      	add	sp, #12
 8009934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009938 <__copybits>:
 8009938:	3901      	subs	r1, #1
 800993a:	b510      	push	{r4, lr}
 800993c:	1149      	asrs	r1, r1, #5
 800993e:	6914      	ldr	r4, [r2, #16]
 8009940:	3101      	adds	r1, #1
 8009942:	f102 0314 	add.w	r3, r2, #20
 8009946:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800994a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800994e:	42a3      	cmp	r3, r4
 8009950:	4602      	mov	r2, r0
 8009952:	d303      	bcc.n	800995c <__copybits+0x24>
 8009954:	2300      	movs	r3, #0
 8009956:	428a      	cmp	r2, r1
 8009958:	d305      	bcc.n	8009966 <__copybits+0x2e>
 800995a:	bd10      	pop	{r4, pc}
 800995c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009960:	f840 2b04 	str.w	r2, [r0], #4
 8009964:	e7f3      	b.n	800994e <__copybits+0x16>
 8009966:	f842 3b04 	str.w	r3, [r2], #4
 800996a:	e7f4      	b.n	8009956 <__copybits+0x1e>

0800996c <__any_on>:
 800996c:	f100 0214 	add.w	r2, r0, #20
 8009970:	6900      	ldr	r0, [r0, #16]
 8009972:	114b      	asrs	r3, r1, #5
 8009974:	4298      	cmp	r0, r3
 8009976:	b510      	push	{r4, lr}
 8009978:	db11      	blt.n	800999e <__any_on+0x32>
 800997a:	dd0a      	ble.n	8009992 <__any_on+0x26>
 800997c:	f011 011f 	ands.w	r1, r1, #31
 8009980:	d007      	beq.n	8009992 <__any_on+0x26>
 8009982:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009986:	fa24 f001 	lsr.w	r0, r4, r1
 800998a:	fa00 f101 	lsl.w	r1, r0, r1
 800998e:	428c      	cmp	r4, r1
 8009990:	d10b      	bne.n	80099aa <__any_on+0x3e>
 8009992:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009996:	4293      	cmp	r3, r2
 8009998:	d803      	bhi.n	80099a2 <__any_on+0x36>
 800999a:	2000      	movs	r0, #0
 800999c:	bd10      	pop	{r4, pc}
 800999e:	4603      	mov	r3, r0
 80099a0:	e7f7      	b.n	8009992 <__any_on+0x26>
 80099a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099a6:	2900      	cmp	r1, #0
 80099a8:	d0f5      	beq.n	8009996 <__any_on+0x2a>
 80099aa:	2001      	movs	r0, #1
 80099ac:	e7f6      	b.n	800999c <__any_on+0x30>

080099ae <_calloc_r>:
 80099ae:	b538      	push	{r3, r4, r5, lr}
 80099b0:	fb02 f401 	mul.w	r4, r2, r1
 80099b4:	4621      	mov	r1, r4
 80099b6:	f000 f857 	bl	8009a68 <_malloc_r>
 80099ba:	4605      	mov	r5, r0
 80099bc:	b118      	cbz	r0, 80099c6 <_calloc_r+0x18>
 80099be:	4622      	mov	r2, r4
 80099c0:	2100      	movs	r1, #0
 80099c2:	f7fc fd40 	bl	8006446 <memset>
 80099c6:	4628      	mov	r0, r5
 80099c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080099cc <_free_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4605      	mov	r5, r0
 80099d0:	2900      	cmp	r1, #0
 80099d2:	d045      	beq.n	8009a60 <_free_r+0x94>
 80099d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d8:	1f0c      	subs	r4, r1, #4
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bfb8      	it	lt
 80099de:	18e4      	addlt	r4, r4, r3
 80099e0:	f000 fa36 	bl	8009e50 <__malloc_lock>
 80099e4:	4a1f      	ldr	r2, [pc, #124]	; (8009a64 <_free_r+0x98>)
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	4610      	mov	r0, r2
 80099ea:	b933      	cbnz	r3, 80099fa <_free_r+0x2e>
 80099ec:	6063      	str	r3, [r4, #4]
 80099ee:	6014      	str	r4, [r2, #0]
 80099f0:	4628      	mov	r0, r5
 80099f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099f6:	f000 ba2c 	b.w	8009e52 <__malloc_unlock>
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	d90c      	bls.n	8009a18 <_free_r+0x4c>
 80099fe:	6821      	ldr	r1, [r4, #0]
 8009a00:	1862      	adds	r2, r4, r1
 8009a02:	4293      	cmp	r3, r2
 8009a04:	bf04      	itt	eq
 8009a06:	681a      	ldreq	r2, [r3, #0]
 8009a08:	685b      	ldreq	r3, [r3, #4]
 8009a0a:	6063      	str	r3, [r4, #4]
 8009a0c:	bf04      	itt	eq
 8009a0e:	1852      	addeq	r2, r2, r1
 8009a10:	6022      	streq	r2, [r4, #0]
 8009a12:	6004      	str	r4, [r0, #0]
 8009a14:	e7ec      	b.n	80099f0 <_free_r+0x24>
 8009a16:	4613      	mov	r3, r2
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	b10a      	cbz	r2, 8009a20 <_free_r+0x54>
 8009a1c:	42a2      	cmp	r2, r4
 8009a1e:	d9fa      	bls.n	8009a16 <_free_r+0x4a>
 8009a20:	6819      	ldr	r1, [r3, #0]
 8009a22:	1858      	adds	r0, r3, r1
 8009a24:	42a0      	cmp	r0, r4
 8009a26:	d10b      	bne.n	8009a40 <_free_r+0x74>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	4401      	add	r1, r0
 8009a2c:	1858      	adds	r0, r3, r1
 8009a2e:	4282      	cmp	r2, r0
 8009a30:	6019      	str	r1, [r3, #0]
 8009a32:	d1dd      	bne.n	80099f0 <_free_r+0x24>
 8009a34:	6810      	ldr	r0, [r2, #0]
 8009a36:	6852      	ldr	r2, [r2, #4]
 8009a38:	605a      	str	r2, [r3, #4]
 8009a3a:	4401      	add	r1, r0
 8009a3c:	6019      	str	r1, [r3, #0]
 8009a3e:	e7d7      	b.n	80099f0 <_free_r+0x24>
 8009a40:	d902      	bls.n	8009a48 <_free_r+0x7c>
 8009a42:	230c      	movs	r3, #12
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	e7d3      	b.n	80099f0 <_free_r+0x24>
 8009a48:	6820      	ldr	r0, [r4, #0]
 8009a4a:	1821      	adds	r1, r4, r0
 8009a4c:	428a      	cmp	r2, r1
 8009a4e:	bf04      	itt	eq
 8009a50:	6811      	ldreq	r1, [r2, #0]
 8009a52:	6852      	ldreq	r2, [r2, #4]
 8009a54:	6062      	str	r2, [r4, #4]
 8009a56:	bf04      	itt	eq
 8009a58:	1809      	addeq	r1, r1, r0
 8009a5a:	6021      	streq	r1, [r4, #0]
 8009a5c:	605c      	str	r4, [r3, #4]
 8009a5e:	e7c7      	b.n	80099f0 <_free_r+0x24>
 8009a60:	bd38      	pop	{r3, r4, r5, pc}
 8009a62:	bf00      	nop
 8009a64:	20000330 	.word	0x20000330

08009a68 <_malloc_r>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	1ccd      	adds	r5, r1, #3
 8009a6c:	f025 0503 	bic.w	r5, r5, #3
 8009a70:	3508      	adds	r5, #8
 8009a72:	2d0c      	cmp	r5, #12
 8009a74:	bf38      	it	cc
 8009a76:	250c      	movcc	r5, #12
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	db01      	blt.n	8009a82 <_malloc_r+0x1a>
 8009a7e:	42a9      	cmp	r1, r5
 8009a80:	d903      	bls.n	8009a8a <_malloc_r+0x22>
 8009a82:	230c      	movs	r3, #12
 8009a84:	6033      	str	r3, [r6, #0]
 8009a86:	2000      	movs	r0, #0
 8009a88:	bd70      	pop	{r4, r5, r6, pc}
 8009a8a:	f000 f9e1 	bl	8009e50 <__malloc_lock>
 8009a8e:	4a21      	ldr	r2, [pc, #132]	; (8009b14 <_malloc_r+0xac>)
 8009a90:	6814      	ldr	r4, [r2, #0]
 8009a92:	4621      	mov	r1, r4
 8009a94:	b991      	cbnz	r1, 8009abc <_malloc_r+0x54>
 8009a96:	4c20      	ldr	r4, [pc, #128]	; (8009b18 <_malloc_r+0xb0>)
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	b91b      	cbnz	r3, 8009aa4 <_malloc_r+0x3c>
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f000 f98f 	bl	8009dc0 <_sbrk_r>
 8009aa2:	6020      	str	r0, [r4, #0]
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 f98a 	bl	8009dc0 <_sbrk_r>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d124      	bne.n	8009afa <_malloc_r+0x92>
 8009ab0:	230c      	movs	r3, #12
 8009ab2:	6033      	str	r3, [r6, #0]
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f000 f9cc 	bl	8009e52 <__malloc_unlock>
 8009aba:	e7e4      	b.n	8009a86 <_malloc_r+0x1e>
 8009abc:	680b      	ldr	r3, [r1, #0]
 8009abe:	1b5b      	subs	r3, r3, r5
 8009ac0:	d418      	bmi.n	8009af4 <_malloc_r+0x8c>
 8009ac2:	2b0b      	cmp	r3, #11
 8009ac4:	d90f      	bls.n	8009ae6 <_malloc_r+0x7e>
 8009ac6:	600b      	str	r3, [r1, #0]
 8009ac8:	50cd      	str	r5, [r1, r3]
 8009aca:	18cc      	adds	r4, r1, r3
 8009acc:	4630      	mov	r0, r6
 8009ace:	f000 f9c0 	bl	8009e52 <__malloc_unlock>
 8009ad2:	f104 000b 	add.w	r0, r4, #11
 8009ad6:	1d23      	adds	r3, r4, #4
 8009ad8:	f020 0007 	bic.w	r0, r0, #7
 8009adc:	1ac3      	subs	r3, r0, r3
 8009ade:	d0d3      	beq.n	8009a88 <_malloc_r+0x20>
 8009ae0:	425a      	negs	r2, r3
 8009ae2:	50e2      	str	r2, [r4, r3]
 8009ae4:	e7d0      	b.n	8009a88 <_malloc_r+0x20>
 8009ae6:	428c      	cmp	r4, r1
 8009ae8:	684b      	ldr	r3, [r1, #4]
 8009aea:	bf16      	itet	ne
 8009aec:	6063      	strne	r3, [r4, #4]
 8009aee:	6013      	streq	r3, [r2, #0]
 8009af0:	460c      	movne	r4, r1
 8009af2:	e7eb      	b.n	8009acc <_malloc_r+0x64>
 8009af4:	460c      	mov	r4, r1
 8009af6:	6849      	ldr	r1, [r1, #4]
 8009af8:	e7cc      	b.n	8009a94 <_malloc_r+0x2c>
 8009afa:	1cc4      	adds	r4, r0, #3
 8009afc:	f024 0403 	bic.w	r4, r4, #3
 8009b00:	42a0      	cmp	r0, r4
 8009b02:	d005      	beq.n	8009b10 <_malloc_r+0xa8>
 8009b04:	1a21      	subs	r1, r4, r0
 8009b06:	4630      	mov	r0, r6
 8009b08:	f000 f95a 	bl	8009dc0 <_sbrk_r>
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	d0cf      	beq.n	8009ab0 <_malloc_r+0x48>
 8009b10:	6025      	str	r5, [r4, #0]
 8009b12:	e7db      	b.n	8009acc <_malloc_r+0x64>
 8009b14:	20000330 	.word	0x20000330
 8009b18:	20000334 	.word	0x20000334

08009b1c <__ssputs_r>:
 8009b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b20:	688e      	ldr	r6, [r1, #8]
 8009b22:	429e      	cmp	r6, r3
 8009b24:	4682      	mov	sl, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	4690      	mov	r8, r2
 8009b2a:	4699      	mov	r9, r3
 8009b2c:	d837      	bhi.n	8009b9e <__ssputs_r+0x82>
 8009b2e:	898a      	ldrh	r2, [r1, #12]
 8009b30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b34:	d031      	beq.n	8009b9a <__ssputs_r+0x7e>
 8009b36:	6825      	ldr	r5, [r4, #0]
 8009b38:	6909      	ldr	r1, [r1, #16]
 8009b3a:	1a6f      	subs	r7, r5, r1
 8009b3c:	6965      	ldr	r5, [r4, #20]
 8009b3e:	2302      	movs	r3, #2
 8009b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b44:	fb95 f5f3 	sdiv	r5, r5, r3
 8009b48:	f109 0301 	add.w	r3, r9, #1
 8009b4c:	443b      	add	r3, r7
 8009b4e:	429d      	cmp	r5, r3
 8009b50:	bf38      	it	cc
 8009b52:	461d      	movcc	r5, r3
 8009b54:	0553      	lsls	r3, r2, #21
 8009b56:	d530      	bpl.n	8009bba <__ssputs_r+0x9e>
 8009b58:	4629      	mov	r1, r5
 8009b5a:	f7ff ff85 	bl	8009a68 <_malloc_r>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	b950      	cbnz	r0, 8009b78 <__ssputs_r+0x5c>
 8009b62:	230c      	movs	r3, #12
 8009b64:	f8ca 3000 	str.w	r3, [sl]
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6e:	81a3      	strh	r3, [r4, #12]
 8009b70:	f04f 30ff 	mov.w	r0, #4294967295
 8009b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b78:	463a      	mov	r2, r7
 8009b7a:	6921      	ldr	r1, [r4, #16]
 8009b7c:	f7fc fc58 	bl	8006430 <memcpy>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	6126      	str	r6, [r4, #16]
 8009b8e:	6165      	str	r5, [r4, #20]
 8009b90:	443e      	add	r6, r7
 8009b92:	1bed      	subs	r5, r5, r7
 8009b94:	6026      	str	r6, [r4, #0]
 8009b96:	60a5      	str	r5, [r4, #8]
 8009b98:	464e      	mov	r6, r9
 8009b9a:	454e      	cmp	r6, r9
 8009b9c:	d900      	bls.n	8009ba0 <__ssputs_r+0x84>
 8009b9e:	464e      	mov	r6, r9
 8009ba0:	4632      	mov	r2, r6
 8009ba2:	4641      	mov	r1, r8
 8009ba4:	6820      	ldr	r0, [r4, #0]
 8009ba6:	f000 f93a 	bl	8009e1e <memmove>
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	1b9b      	subs	r3, r3, r6
 8009bae:	60a3      	str	r3, [r4, #8]
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	441e      	add	r6, r3
 8009bb4:	6026      	str	r6, [r4, #0]
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	e7dc      	b.n	8009b74 <__ssputs_r+0x58>
 8009bba:	462a      	mov	r2, r5
 8009bbc:	f000 f94a 	bl	8009e54 <_realloc_r>
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d1e2      	bne.n	8009b8c <__ssputs_r+0x70>
 8009bc6:	6921      	ldr	r1, [r4, #16]
 8009bc8:	4650      	mov	r0, sl
 8009bca:	f7ff feff 	bl	80099cc <_free_r>
 8009bce:	e7c8      	b.n	8009b62 <__ssputs_r+0x46>

08009bd0 <_svfiprintf_r>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	461d      	mov	r5, r3
 8009bd6:	898b      	ldrh	r3, [r1, #12]
 8009bd8:	061f      	lsls	r7, r3, #24
 8009bda:	b09d      	sub	sp, #116	; 0x74
 8009bdc:	4680      	mov	r8, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	4616      	mov	r6, r2
 8009be2:	d50f      	bpl.n	8009c04 <_svfiprintf_r+0x34>
 8009be4:	690b      	ldr	r3, [r1, #16]
 8009be6:	b96b      	cbnz	r3, 8009c04 <_svfiprintf_r+0x34>
 8009be8:	2140      	movs	r1, #64	; 0x40
 8009bea:	f7ff ff3d 	bl	8009a68 <_malloc_r>
 8009bee:	6020      	str	r0, [r4, #0]
 8009bf0:	6120      	str	r0, [r4, #16]
 8009bf2:	b928      	cbnz	r0, 8009c00 <_svfiprintf_r+0x30>
 8009bf4:	230c      	movs	r3, #12
 8009bf6:	f8c8 3000 	str.w	r3, [r8]
 8009bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfe:	e0c8      	b.n	8009d92 <_svfiprintf_r+0x1c2>
 8009c00:	2340      	movs	r3, #64	; 0x40
 8009c02:	6163      	str	r3, [r4, #20]
 8009c04:	2300      	movs	r3, #0
 8009c06:	9309      	str	r3, [sp, #36]	; 0x24
 8009c08:	2320      	movs	r3, #32
 8009c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c0e:	2330      	movs	r3, #48	; 0x30
 8009c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c14:	9503      	str	r5, [sp, #12]
 8009c16:	f04f 0b01 	mov.w	fp, #1
 8009c1a:	4637      	mov	r7, r6
 8009c1c:	463d      	mov	r5, r7
 8009c1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c22:	b10b      	cbz	r3, 8009c28 <_svfiprintf_r+0x58>
 8009c24:	2b25      	cmp	r3, #37	; 0x25
 8009c26:	d13e      	bne.n	8009ca6 <_svfiprintf_r+0xd6>
 8009c28:	ebb7 0a06 	subs.w	sl, r7, r6
 8009c2c:	d00b      	beq.n	8009c46 <_svfiprintf_r+0x76>
 8009c2e:	4653      	mov	r3, sl
 8009c30:	4632      	mov	r2, r6
 8009c32:	4621      	mov	r1, r4
 8009c34:	4640      	mov	r0, r8
 8009c36:	f7ff ff71 	bl	8009b1c <__ssputs_r>
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	f000 80a4 	beq.w	8009d88 <_svfiprintf_r+0x1b8>
 8009c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c42:	4453      	add	r3, sl
 8009c44:	9309      	str	r3, [sp, #36]	; 0x24
 8009c46:	783b      	ldrb	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 809d 	beq.w	8009d88 <_svfiprintf_r+0x1b8>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f04f 32ff 	mov.w	r2, #4294967295
 8009c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	9307      	str	r3, [sp, #28]
 8009c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c60:	931a      	str	r3, [sp, #104]	; 0x68
 8009c62:	462f      	mov	r7, r5
 8009c64:	2205      	movs	r2, #5
 8009c66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009c6a:	4850      	ldr	r0, [pc, #320]	; (8009dac <_svfiprintf_r+0x1dc>)
 8009c6c:	f7f6 fac0 	bl	80001f0 <memchr>
 8009c70:	9b04      	ldr	r3, [sp, #16]
 8009c72:	b9d0      	cbnz	r0, 8009caa <_svfiprintf_r+0xda>
 8009c74:	06d9      	lsls	r1, r3, #27
 8009c76:	bf44      	itt	mi
 8009c78:	2220      	movmi	r2, #32
 8009c7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c7e:	071a      	lsls	r2, r3, #28
 8009c80:	bf44      	itt	mi
 8009c82:	222b      	movmi	r2, #43	; 0x2b
 8009c84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c88:	782a      	ldrb	r2, [r5, #0]
 8009c8a:	2a2a      	cmp	r2, #42	; 0x2a
 8009c8c:	d015      	beq.n	8009cba <_svfiprintf_r+0xea>
 8009c8e:	9a07      	ldr	r2, [sp, #28]
 8009c90:	462f      	mov	r7, r5
 8009c92:	2000      	movs	r0, #0
 8009c94:	250a      	movs	r5, #10
 8009c96:	4639      	mov	r1, r7
 8009c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c9c:	3b30      	subs	r3, #48	; 0x30
 8009c9e:	2b09      	cmp	r3, #9
 8009ca0:	d94d      	bls.n	8009d3e <_svfiprintf_r+0x16e>
 8009ca2:	b1b8      	cbz	r0, 8009cd4 <_svfiprintf_r+0x104>
 8009ca4:	e00f      	b.n	8009cc6 <_svfiprintf_r+0xf6>
 8009ca6:	462f      	mov	r7, r5
 8009ca8:	e7b8      	b.n	8009c1c <_svfiprintf_r+0x4c>
 8009caa:	4a40      	ldr	r2, [pc, #256]	; (8009dac <_svfiprintf_r+0x1dc>)
 8009cac:	1a80      	subs	r0, r0, r2
 8009cae:	fa0b f000 	lsl.w	r0, fp, r0
 8009cb2:	4318      	orrs	r0, r3
 8009cb4:	9004      	str	r0, [sp, #16]
 8009cb6:	463d      	mov	r5, r7
 8009cb8:	e7d3      	b.n	8009c62 <_svfiprintf_r+0x92>
 8009cba:	9a03      	ldr	r2, [sp, #12]
 8009cbc:	1d11      	adds	r1, r2, #4
 8009cbe:	6812      	ldr	r2, [r2, #0]
 8009cc0:	9103      	str	r1, [sp, #12]
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	db01      	blt.n	8009cca <_svfiprintf_r+0xfa>
 8009cc6:	9207      	str	r2, [sp, #28]
 8009cc8:	e004      	b.n	8009cd4 <_svfiprintf_r+0x104>
 8009cca:	4252      	negs	r2, r2
 8009ccc:	f043 0302 	orr.w	r3, r3, #2
 8009cd0:	9207      	str	r2, [sp, #28]
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	783b      	ldrb	r3, [r7, #0]
 8009cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd8:	d10c      	bne.n	8009cf4 <_svfiprintf_r+0x124>
 8009cda:	787b      	ldrb	r3, [r7, #1]
 8009cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8009cde:	d133      	bne.n	8009d48 <_svfiprintf_r+0x178>
 8009ce0:	9b03      	ldr	r3, [sp, #12]
 8009ce2:	1d1a      	adds	r2, r3, #4
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	9203      	str	r2, [sp, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	bfb8      	it	lt
 8009cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cf0:	3702      	adds	r7, #2
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	4d2e      	ldr	r5, [pc, #184]	; (8009db0 <_svfiprintf_r+0x1e0>)
 8009cf6:	7839      	ldrb	r1, [r7, #0]
 8009cf8:	2203      	movs	r2, #3
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f7f6 fa78 	bl	80001f0 <memchr>
 8009d00:	b138      	cbz	r0, 8009d12 <_svfiprintf_r+0x142>
 8009d02:	2340      	movs	r3, #64	; 0x40
 8009d04:	1b40      	subs	r0, r0, r5
 8009d06:	fa03 f000 	lsl.w	r0, r3, r0
 8009d0a:	9b04      	ldr	r3, [sp, #16]
 8009d0c:	4303      	orrs	r3, r0
 8009d0e:	3701      	adds	r7, #1
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	7839      	ldrb	r1, [r7, #0]
 8009d14:	4827      	ldr	r0, [pc, #156]	; (8009db4 <_svfiprintf_r+0x1e4>)
 8009d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d1a:	2206      	movs	r2, #6
 8009d1c:	1c7e      	adds	r6, r7, #1
 8009d1e:	f7f6 fa67 	bl	80001f0 <memchr>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d038      	beq.n	8009d98 <_svfiprintf_r+0x1c8>
 8009d26:	4b24      	ldr	r3, [pc, #144]	; (8009db8 <_svfiprintf_r+0x1e8>)
 8009d28:	bb13      	cbnz	r3, 8009d70 <_svfiprintf_r+0x1a0>
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	3307      	adds	r3, #7
 8009d2e:	f023 0307 	bic.w	r3, r3, #7
 8009d32:	3308      	adds	r3, #8
 8009d34:	9303      	str	r3, [sp, #12]
 8009d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d38:	444b      	add	r3, r9
 8009d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3c:	e76d      	b.n	8009c1a <_svfiprintf_r+0x4a>
 8009d3e:	fb05 3202 	mla	r2, r5, r2, r3
 8009d42:	2001      	movs	r0, #1
 8009d44:	460f      	mov	r7, r1
 8009d46:	e7a6      	b.n	8009c96 <_svfiprintf_r+0xc6>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	3701      	adds	r7, #1
 8009d4c:	9305      	str	r3, [sp, #20]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	250a      	movs	r5, #10
 8009d52:	4638      	mov	r0, r7
 8009d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d58:	3a30      	subs	r2, #48	; 0x30
 8009d5a:	2a09      	cmp	r2, #9
 8009d5c:	d903      	bls.n	8009d66 <_svfiprintf_r+0x196>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0c8      	beq.n	8009cf4 <_svfiprintf_r+0x124>
 8009d62:	9105      	str	r1, [sp, #20]
 8009d64:	e7c6      	b.n	8009cf4 <_svfiprintf_r+0x124>
 8009d66:	fb05 2101 	mla	r1, r5, r1, r2
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	e7f0      	b.n	8009d52 <_svfiprintf_r+0x182>
 8009d70:	ab03      	add	r3, sp, #12
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	4622      	mov	r2, r4
 8009d76:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <_svfiprintf_r+0x1ec>)
 8009d78:	a904      	add	r1, sp, #16
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	f7fc fc00 	bl	8006580 <_printf_float>
 8009d80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d84:	4681      	mov	r9, r0
 8009d86:	d1d6      	bne.n	8009d36 <_svfiprintf_r+0x166>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	065b      	lsls	r3, r3, #25
 8009d8c:	f53f af35 	bmi.w	8009bfa <_svfiprintf_r+0x2a>
 8009d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d92:	b01d      	add	sp, #116	; 0x74
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d98:	ab03      	add	r3, sp, #12
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <_svfiprintf_r+0x1ec>)
 8009da0:	a904      	add	r1, sp, #16
 8009da2:	4640      	mov	r0, r8
 8009da4:	f7fc fea2 	bl	8006aec <_printf_i>
 8009da8:	e7ea      	b.n	8009d80 <_svfiprintf_r+0x1b0>
 8009daa:	bf00      	nop
 8009dac:	0800b71c 	.word	0x0800b71c
 8009db0:	0800b722 	.word	0x0800b722
 8009db4:	0800b726 	.word	0x0800b726
 8009db8:	08006581 	.word	0x08006581
 8009dbc:	08009b1d 	.word	0x08009b1d

08009dc0 <_sbrk_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4c06      	ldr	r4, [pc, #24]	; (8009ddc <_sbrk_r+0x1c>)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	f7f8 fe3e 	bl	8002a4c <_sbrk>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_sbrk_r+0x1a>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_sbrk_r+0x1a>
 8009dd8:	602b      	str	r3, [r5, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	200004fc 	.word	0x200004fc

08009de0 <strncmp>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	b16a      	cbz	r2, 8009e00 <strncmp+0x20>
 8009de4:	3901      	subs	r1, #1
 8009de6:	1884      	adds	r4, r0, r2
 8009de8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009dec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d103      	bne.n	8009dfc <strncmp+0x1c>
 8009df4:	42a0      	cmp	r0, r4
 8009df6:	d001      	beq.n	8009dfc <strncmp+0x1c>
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1f5      	bne.n	8009de8 <strncmp+0x8>
 8009dfc:	1a98      	subs	r0, r3, r2
 8009dfe:	bd10      	pop	{r4, pc}
 8009e00:	4610      	mov	r0, r2
 8009e02:	e7fc      	b.n	8009dfe <strncmp+0x1e>

08009e04 <__ascii_wctomb>:
 8009e04:	b149      	cbz	r1, 8009e1a <__ascii_wctomb+0x16>
 8009e06:	2aff      	cmp	r2, #255	; 0xff
 8009e08:	bf85      	ittet	hi
 8009e0a:	238a      	movhi	r3, #138	; 0x8a
 8009e0c:	6003      	strhi	r3, [r0, #0]
 8009e0e:	700a      	strbls	r2, [r1, #0]
 8009e10:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e14:	bf98      	it	ls
 8009e16:	2001      	movls	r0, #1
 8009e18:	4770      	bx	lr
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	4770      	bx	lr

08009e1e <memmove>:
 8009e1e:	4288      	cmp	r0, r1
 8009e20:	b510      	push	{r4, lr}
 8009e22:	eb01 0302 	add.w	r3, r1, r2
 8009e26:	d807      	bhi.n	8009e38 <memmove+0x1a>
 8009e28:	1e42      	subs	r2, r0, #1
 8009e2a:	4299      	cmp	r1, r3
 8009e2c:	d00a      	beq.n	8009e44 <memmove+0x26>
 8009e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e32:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e36:	e7f8      	b.n	8009e2a <memmove+0xc>
 8009e38:	4283      	cmp	r3, r0
 8009e3a:	d9f5      	bls.n	8009e28 <memmove+0xa>
 8009e3c:	1881      	adds	r1, r0, r2
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	42d3      	cmn	r3, r2
 8009e42:	d100      	bne.n	8009e46 <memmove+0x28>
 8009e44:	bd10      	pop	{r4, pc}
 8009e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e4e:	e7f7      	b.n	8009e40 <memmove+0x22>

08009e50 <__malloc_lock>:
 8009e50:	4770      	bx	lr

08009e52 <__malloc_unlock>:
 8009e52:	4770      	bx	lr

08009e54 <_realloc_r>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	4607      	mov	r7, r0
 8009e58:	4614      	mov	r4, r2
 8009e5a:	460e      	mov	r6, r1
 8009e5c:	b921      	cbnz	r1, 8009e68 <_realloc_r+0x14>
 8009e5e:	4611      	mov	r1, r2
 8009e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e64:	f7ff be00 	b.w	8009a68 <_malloc_r>
 8009e68:	b922      	cbnz	r2, 8009e74 <_realloc_r+0x20>
 8009e6a:	f7ff fdaf 	bl	80099cc <_free_r>
 8009e6e:	4625      	mov	r5, r4
 8009e70:	4628      	mov	r0, r5
 8009e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e74:	f000 f814 	bl	8009ea0 <_malloc_usable_size_r>
 8009e78:	42a0      	cmp	r0, r4
 8009e7a:	d20f      	bcs.n	8009e9c <_realloc_r+0x48>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7ff fdf2 	bl	8009a68 <_malloc_r>
 8009e84:	4605      	mov	r5, r0
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d0f2      	beq.n	8009e70 <_realloc_r+0x1c>
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	f7fc facf 	bl	8006430 <memcpy>
 8009e92:	4631      	mov	r1, r6
 8009e94:	4638      	mov	r0, r7
 8009e96:	f7ff fd99 	bl	80099cc <_free_r>
 8009e9a:	e7e9      	b.n	8009e70 <_realloc_r+0x1c>
 8009e9c:	4635      	mov	r5, r6
 8009e9e:	e7e7      	b.n	8009e70 <_realloc_r+0x1c>

08009ea0 <_malloc_usable_size_r>:
 8009ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea4:	1f18      	subs	r0, r3, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bfbc      	itt	lt
 8009eaa:	580b      	ldrlt	r3, [r1, r0]
 8009eac:	18c0      	addlt	r0, r0, r3
 8009eae:	4770      	bx	lr

08009eb0 <sin>:
 8009eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eb2:	ec51 0b10 	vmov	r0, r1, d0
 8009eb6:	4a20      	ldr	r2, [pc, #128]	; (8009f38 <sin+0x88>)
 8009eb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	dc07      	bgt.n	8009ed0 <sin+0x20>
 8009ec0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009f30 <sin+0x80>
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	f000 fe37 	bl	800ab38 <__kernel_sin>
 8009eca:	ec51 0b10 	vmov	r0, r1, d0
 8009ece:	e007      	b.n	8009ee0 <sin+0x30>
 8009ed0:	4a1a      	ldr	r2, [pc, #104]	; (8009f3c <sin+0x8c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	dd09      	ble.n	8009eea <sin+0x3a>
 8009ed6:	ee10 2a10 	vmov	r2, s0
 8009eda:	460b      	mov	r3, r1
 8009edc:	f7f6 f9dc 	bl	8000298 <__aeabi_dsub>
 8009ee0:	ec41 0b10 	vmov	d0, r0, r1
 8009ee4:	b005      	add	sp, #20
 8009ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009eea:	4668      	mov	r0, sp
 8009eec:	f000 f828 	bl	8009f40 <__ieee754_rem_pio2>
 8009ef0:	f000 0003 	and.w	r0, r0, #3
 8009ef4:	2801      	cmp	r0, #1
 8009ef6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009efa:	ed9d 0b00 	vldr	d0, [sp]
 8009efe:	d004      	beq.n	8009f0a <sin+0x5a>
 8009f00:	2802      	cmp	r0, #2
 8009f02:	d005      	beq.n	8009f10 <sin+0x60>
 8009f04:	b970      	cbnz	r0, 8009f24 <sin+0x74>
 8009f06:	2001      	movs	r0, #1
 8009f08:	e7dd      	b.n	8009ec6 <sin+0x16>
 8009f0a:	f000 fa0d 	bl	800a328 <__kernel_cos>
 8009f0e:	e7dc      	b.n	8009eca <sin+0x1a>
 8009f10:	2001      	movs	r0, #1
 8009f12:	f000 fe11 	bl	800ab38 <__kernel_sin>
 8009f16:	ec53 2b10 	vmov	r2, r3, d0
 8009f1a:	ee10 0a10 	vmov	r0, s0
 8009f1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f22:	e7dd      	b.n	8009ee0 <sin+0x30>
 8009f24:	f000 fa00 	bl	800a328 <__kernel_cos>
 8009f28:	e7f5      	b.n	8009f16 <sin+0x66>
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w
	...
 8009f38:	3fe921fb 	.word	0x3fe921fb
 8009f3c:	7fefffff 	.word	0x7fefffff

08009f40 <__ieee754_rem_pio2>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	ec57 6b10 	vmov	r6, r7, d0
 8009f48:	4bc3      	ldr	r3, [pc, #780]	; (800a258 <__ieee754_rem_pio2+0x318>)
 8009f4a:	b08d      	sub	sp, #52	; 0x34
 8009f4c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009f50:	4598      	cmp	r8, r3
 8009f52:	4604      	mov	r4, r0
 8009f54:	9704      	str	r7, [sp, #16]
 8009f56:	dc07      	bgt.n	8009f68 <__ieee754_rem_pio2+0x28>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	ed84 0b00 	vstr	d0, [r4]
 8009f60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009f64:	2500      	movs	r5, #0
 8009f66:	e027      	b.n	8009fb8 <__ieee754_rem_pio2+0x78>
 8009f68:	4bbc      	ldr	r3, [pc, #752]	; (800a25c <__ieee754_rem_pio2+0x31c>)
 8009f6a:	4598      	cmp	r8, r3
 8009f6c:	dc75      	bgt.n	800a05a <__ieee754_rem_pio2+0x11a>
 8009f6e:	9b04      	ldr	r3, [sp, #16]
 8009f70:	4dbb      	ldr	r5, [pc, #748]	; (800a260 <__ieee754_rem_pio2+0x320>)
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	ee10 0a10 	vmov	r0, s0
 8009f78:	a3a9      	add	r3, pc, #676	; (adr r3, 800a220 <__ieee754_rem_pio2+0x2e0>)
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	4639      	mov	r1, r7
 8009f80:	dd36      	ble.n	8009ff0 <__ieee754_rem_pio2+0xb0>
 8009f82:	f7f6 f989 	bl	8000298 <__aeabi_dsub>
 8009f86:	45a8      	cmp	r8, r5
 8009f88:	4606      	mov	r6, r0
 8009f8a:	460f      	mov	r7, r1
 8009f8c:	d018      	beq.n	8009fc0 <__ieee754_rem_pio2+0x80>
 8009f8e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a228 <__ieee754_rem_pio2+0x2e8>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f7f6 f980 	bl	8000298 <__aeabi_dsub>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	e9c4 2300 	strd	r2, r3, [r4]
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	f7f6 f978 	bl	8000298 <__aeabi_dsub>
 8009fa8:	a39f      	add	r3, pc, #636	; (adr r3, 800a228 <__ieee754_rem_pio2+0x2e8>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 f973 	bl	8000298 <__aeabi_dsub>
 8009fb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009fb6:	2501      	movs	r5, #1
 8009fb8:	4628      	mov	r0, r5
 8009fba:	b00d      	add	sp, #52	; 0x34
 8009fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc0:	a39b      	add	r3, pc, #620	; (adr r3, 800a230 <__ieee754_rem_pio2+0x2f0>)
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f7f6 f967 	bl	8000298 <__aeabi_dsub>
 8009fca:	a39b      	add	r3, pc, #620	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2f8>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	f7f6 f960 	bl	8000298 <__aeabi_dsub>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	e9c4 2300 	strd	r2, r3, [r4]
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 f958 	bl	8000298 <__aeabi_dsub>
 8009fe8:	a393      	add	r3, pc, #588	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2f8>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	e7de      	b.n	8009fae <__ieee754_rem_pio2+0x6e>
 8009ff0:	f7f6 f954 	bl	800029c <__adddf3>
 8009ff4:	45a8      	cmp	r8, r5
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	d016      	beq.n	800a02a <__ieee754_rem_pio2+0xea>
 8009ffc:	a38a      	add	r3, pc, #552	; (adr r3, 800a228 <__ieee754_rem_pio2+0x2e8>)
 8009ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a002:	f7f6 f94b 	bl	800029c <__adddf3>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	e9c4 2300 	strd	r2, r3, [r4]
 800a00e:	4630      	mov	r0, r6
 800a010:	4639      	mov	r1, r7
 800a012:	f7f6 f941 	bl	8000298 <__aeabi_dsub>
 800a016:	a384      	add	r3, pc, #528	; (adr r3, 800a228 <__ieee754_rem_pio2+0x2e8>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 f93e 	bl	800029c <__adddf3>
 800a020:	f04f 35ff 	mov.w	r5, #4294967295
 800a024:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a028:	e7c6      	b.n	8009fb8 <__ieee754_rem_pio2+0x78>
 800a02a:	a381      	add	r3, pc, #516	; (adr r3, 800a230 <__ieee754_rem_pio2+0x2f0>)
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	f7f6 f934 	bl	800029c <__adddf3>
 800a034:	a380      	add	r3, pc, #512	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2f8>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	4606      	mov	r6, r0
 800a03c:	460f      	mov	r7, r1
 800a03e:	f7f6 f92d 	bl	800029c <__adddf3>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	e9c4 2300 	strd	r2, r3, [r4]
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	f7f6 f923 	bl	8000298 <__aeabi_dsub>
 800a052:	a379      	add	r3, pc, #484	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2f8>)
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	e7e0      	b.n	800a01c <__ieee754_rem_pio2+0xdc>
 800a05a:	4b82      	ldr	r3, [pc, #520]	; (800a264 <__ieee754_rem_pio2+0x324>)
 800a05c:	4598      	cmp	r8, r3
 800a05e:	f300 80d0 	bgt.w	800a202 <__ieee754_rem_pio2+0x2c2>
 800a062:	f000 fe23 	bl	800acac <fabs>
 800a066:	ec57 6b10 	vmov	r6, r7, d0
 800a06a:	ee10 0a10 	vmov	r0, s0
 800a06e:	a374      	add	r3, pc, #464	; (adr r3, 800a240 <__ieee754_rem_pio2+0x300>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	4639      	mov	r1, r7
 800a076:	f7f6 fac7 	bl	8000608 <__aeabi_dmul>
 800a07a:	2200      	movs	r2, #0
 800a07c:	4b7a      	ldr	r3, [pc, #488]	; (800a268 <__ieee754_rem_pio2+0x328>)
 800a07e:	f7f6 f90d 	bl	800029c <__adddf3>
 800a082:	f7f6 fd71 	bl	8000b68 <__aeabi_d2iz>
 800a086:	4605      	mov	r5, r0
 800a088:	f7f6 fa54 	bl	8000534 <__aeabi_i2d>
 800a08c:	a364      	add	r3, pc, #400	; (adr r3, 800a220 <__ieee754_rem_pio2+0x2e0>)
 800a08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a096:	f7f6 fab7 	bl	8000608 <__aeabi_dmul>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 f8f9 	bl	8000298 <__aeabi_dsub>
 800a0a6:	a360      	add	r3, pc, #384	; (adr r3, 800a228 <__ieee754_rem_pio2+0x2e8>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	4682      	mov	sl, r0
 800a0ae:	468b      	mov	fp, r1
 800a0b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b4:	f7f6 faa8 	bl	8000608 <__aeabi_dmul>
 800a0b8:	2d1f      	cmp	r5, #31
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	460f      	mov	r7, r1
 800a0be:	dc0c      	bgt.n	800a0da <__ieee754_rem_pio2+0x19a>
 800a0c0:	1e6a      	subs	r2, r5, #1
 800a0c2:	4b6a      	ldr	r3, [pc, #424]	; (800a26c <__ieee754_rem_pio2+0x32c>)
 800a0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c8:	4543      	cmp	r3, r8
 800a0ca:	d006      	beq.n	800a0da <__ieee754_rem_pio2+0x19a>
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	4650      	mov	r0, sl
 800a0d2:	4659      	mov	r1, fp
 800a0d4:	f7f6 f8e0 	bl	8000298 <__aeabi_dsub>
 800a0d8:	e00e      	b.n	800a0f8 <__ieee754_rem_pio2+0x1b8>
 800a0da:	4632      	mov	r2, r6
 800a0dc:	463b      	mov	r3, r7
 800a0de:	4650      	mov	r0, sl
 800a0e0:	4659      	mov	r1, fp
 800a0e2:	f7f6 f8d9 	bl	8000298 <__aeabi_dsub>
 800a0e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	9a05      	ldr	r2, [sp, #20]
 800a0ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	2b10      	cmp	r3, #16
 800a0f6:	dc02      	bgt.n	800a0fe <__ieee754_rem_pio2+0x1be>
 800a0f8:	e9c4 0100 	strd	r0, r1, [r4]
 800a0fc:	e039      	b.n	800a172 <__ieee754_rem_pio2+0x232>
 800a0fe:	a34c      	add	r3, pc, #304	; (adr r3, 800a230 <__ieee754_rem_pio2+0x2f0>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a108:	f7f6 fa7e 	bl	8000608 <__aeabi_dmul>
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4650      	mov	r0, sl
 800a116:	4659      	mov	r1, fp
 800a118:	f7f6 f8be 	bl	8000298 <__aeabi_dsub>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4680      	mov	r8, r0
 800a122:	4689      	mov	r9, r1
 800a124:	4650      	mov	r0, sl
 800a126:	4659      	mov	r1, fp
 800a128:	f7f6 f8b6 	bl	8000298 <__aeabi_dsub>
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	f7f6 f8b2 	bl	8000298 <__aeabi_dsub>
 800a134:	a340      	add	r3, pc, #256	; (adr r3, 800a238 <__ieee754_rem_pio2+0x2f8>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	4606      	mov	r6, r0
 800a13c:	460f      	mov	r7, r1
 800a13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a142:	f7f6 fa61 	bl	8000608 <__aeabi_dmul>
 800a146:	4632      	mov	r2, r6
 800a148:	463b      	mov	r3, r7
 800a14a:	f7f6 f8a5 	bl	8000298 <__aeabi_dsub>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4606      	mov	r6, r0
 800a154:	460f      	mov	r7, r1
 800a156:	4640      	mov	r0, r8
 800a158:	4649      	mov	r1, r9
 800a15a:	f7f6 f89d 	bl	8000298 <__aeabi_dsub>
 800a15e:	9a05      	ldr	r2, [sp, #20]
 800a160:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	2b31      	cmp	r3, #49	; 0x31
 800a168:	dc20      	bgt.n	800a1ac <__ieee754_rem_pio2+0x26c>
 800a16a:	e9c4 0100 	strd	r0, r1, [r4]
 800a16e:	46c2      	mov	sl, r8
 800a170:	46cb      	mov	fp, r9
 800a172:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a176:	4650      	mov	r0, sl
 800a178:	4642      	mov	r2, r8
 800a17a:	464b      	mov	r3, r9
 800a17c:	4659      	mov	r1, fp
 800a17e:	f7f6 f88b 	bl	8000298 <__aeabi_dsub>
 800a182:	463b      	mov	r3, r7
 800a184:	4632      	mov	r2, r6
 800a186:	f7f6 f887 	bl	8000298 <__aeabi_dsub>
 800a18a:	9b04      	ldr	r3, [sp, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a192:	f6bf af11 	bge.w	8009fb8 <__ieee754_rem_pio2+0x78>
 800a196:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a19a:	6063      	str	r3, [r4, #4]
 800a19c:	f8c4 8000 	str.w	r8, [r4]
 800a1a0:	60a0      	str	r0, [r4, #8]
 800a1a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1a6:	60e3      	str	r3, [r4, #12]
 800a1a8:	426d      	negs	r5, r5
 800a1aa:	e705      	b.n	8009fb8 <__ieee754_rem_pio2+0x78>
 800a1ac:	a326      	add	r3, pc, #152	; (adr r3, 800a248 <__ieee754_rem_pio2+0x308>)
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b6:	f7f6 fa27 	bl	8000608 <__aeabi_dmul>
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	f7f6 f867 	bl	8000298 <__aeabi_dsub>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4682      	mov	sl, r0
 800a1d0:	468b      	mov	fp, r1
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	f7f6 f85f 	bl	8000298 <__aeabi_dsub>
 800a1da:	4632      	mov	r2, r6
 800a1dc:	463b      	mov	r3, r7
 800a1de:	f7f6 f85b 	bl	8000298 <__aeabi_dsub>
 800a1e2:	a31b      	add	r3, pc, #108	; (adr r3, 800a250 <__ieee754_rem_pio2+0x310>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f0:	f7f6 fa0a 	bl	8000608 <__aeabi_dmul>
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	f7f6 f84e 	bl	8000298 <__aeabi_dsub>
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	e764      	b.n	800a0cc <__ieee754_rem_pio2+0x18c>
 800a202:	4b1b      	ldr	r3, [pc, #108]	; (800a270 <__ieee754_rem_pio2+0x330>)
 800a204:	4598      	cmp	r8, r3
 800a206:	dd35      	ble.n	800a274 <__ieee754_rem_pio2+0x334>
 800a208:	ee10 2a10 	vmov	r2, s0
 800a20c:	463b      	mov	r3, r7
 800a20e:	4630      	mov	r0, r6
 800a210:	4639      	mov	r1, r7
 800a212:	f7f6 f841 	bl	8000298 <__aeabi_dsub>
 800a216:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a21a:	e9c4 0100 	strd	r0, r1, [r4]
 800a21e:	e6a1      	b.n	8009f64 <__ieee754_rem_pio2+0x24>
 800a220:	54400000 	.word	0x54400000
 800a224:	3ff921fb 	.word	0x3ff921fb
 800a228:	1a626331 	.word	0x1a626331
 800a22c:	3dd0b461 	.word	0x3dd0b461
 800a230:	1a600000 	.word	0x1a600000
 800a234:	3dd0b461 	.word	0x3dd0b461
 800a238:	2e037073 	.word	0x2e037073
 800a23c:	3ba3198a 	.word	0x3ba3198a
 800a240:	6dc9c883 	.word	0x6dc9c883
 800a244:	3fe45f30 	.word	0x3fe45f30
 800a248:	2e000000 	.word	0x2e000000
 800a24c:	3ba3198a 	.word	0x3ba3198a
 800a250:	252049c1 	.word	0x252049c1
 800a254:	397b839a 	.word	0x397b839a
 800a258:	3fe921fb 	.word	0x3fe921fb
 800a25c:	4002d97b 	.word	0x4002d97b
 800a260:	3ff921fb 	.word	0x3ff921fb
 800a264:	413921fb 	.word	0x413921fb
 800a268:	3fe00000 	.word	0x3fe00000
 800a26c:	0800b830 	.word	0x0800b830
 800a270:	7fefffff 	.word	0x7fefffff
 800a274:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a278:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a27c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a280:	4630      	mov	r0, r6
 800a282:	460f      	mov	r7, r1
 800a284:	f7f6 fc70 	bl	8000b68 <__aeabi_d2iz>
 800a288:	f7f6 f954 	bl	8000534 <__aeabi_i2d>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4630      	mov	r0, r6
 800a292:	4639      	mov	r1, r7
 800a294:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a298:	f7f5 fffe 	bl	8000298 <__aeabi_dsub>
 800a29c:	2200      	movs	r2, #0
 800a29e:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <__ieee754_rem_pio2+0x3dc>)
 800a2a0:	f7f6 f9b2 	bl	8000608 <__aeabi_dmul>
 800a2a4:	460f      	mov	r7, r1
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	f7f6 fc5e 	bl	8000b68 <__aeabi_d2iz>
 800a2ac:	f7f6 f942 	bl	8000534 <__aeabi_i2d>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2bc:	f7f5 ffec 	bl	8000298 <__aeabi_dsub>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4b16      	ldr	r3, [pc, #88]	; (800a31c <__ieee754_rem_pio2+0x3dc>)
 800a2c4:	f7f6 f9a0 	bl	8000608 <__aeabi_dmul>
 800a2c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a2cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a2d0:	f04f 0803 	mov.w	r8, #3
 800a2d4:	2600      	movs	r6, #0
 800a2d6:	2700      	movs	r7, #0
 800a2d8:	4632      	mov	r2, r6
 800a2da:	463b      	mov	r3, r7
 800a2dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a2e0:	f108 3aff 	add.w	sl, r8, #4294967295
 800a2e4:	f7f6 fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2e8:	b9b0      	cbnz	r0, 800a318 <__ieee754_rem_pio2+0x3d8>
 800a2ea:	4b0d      	ldr	r3, [pc, #52]	; (800a320 <__ieee754_rem_pio2+0x3e0>)
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4643      	mov	r3, r8
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	a806      	add	r0, sp, #24
 800a2fa:	f000 f8dd 	bl	800a4b8 <__kernel_rem_pio2>
 800a2fe:	9b04      	ldr	r3, [sp, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	4605      	mov	r5, r0
 800a304:	f6bf ae58 	bge.w	8009fb8 <__ieee754_rem_pio2+0x78>
 800a308:	6863      	ldr	r3, [r4, #4]
 800a30a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a30e:	6063      	str	r3, [r4, #4]
 800a310:	68e3      	ldr	r3, [r4, #12]
 800a312:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a316:	e746      	b.n	800a1a6 <__ieee754_rem_pio2+0x266>
 800a318:	46d0      	mov	r8, sl
 800a31a:	e7dd      	b.n	800a2d8 <__ieee754_rem_pio2+0x398>
 800a31c:	41700000 	.word	0x41700000
 800a320:	0800b8b0 	.word	0x0800b8b0
 800a324:	00000000 	.word	0x00000000

0800a328 <__kernel_cos>:
 800a328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	ec59 8b10 	vmov	r8, r9, d0
 800a330:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a334:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a338:	ed2d 8b02 	vpush	{d8}
 800a33c:	eeb0 8a41 	vmov.f32	s16, s2
 800a340:	eef0 8a61 	vmov.f32	s17, s3
 800a344:	da07      	bge.n	800a356 <__kernel_cos+0x2e>
 800a346:	ee10 0a10 	vmov	r0, s0
 800a34a:	4649      	mov	r1, r9
 800a34c:	f7f6 fc0c 	bl	8000b68 <__aeabi_d2iz>
 800a350:	2800      	cmp	r0, #0
 800a352:	f000 8089 	beq.w	800a468 <__kernel_cos+0x140>
 800a356:	4642      	mov	r2, r8
 800a358:	464b      	mov	r3, r9
 800a35a:	4640      	mov	r0, r8
 800a35c:	4649      	mov	r1, r9
 800a35e:	f7f6 f953 	bl	8000608 <__aeabi_dmul>
 800a362:	2200      	movs	r2, #0
 800a364:	4b4e      	ldr	r3, [pc, #312]	; (800a4a0 <__kernel_cos+0x178>)
 800a366:	4604      	mov	r4, r0
 800a368:	460d      	mov	r5, r1
 800a36a:	f7f6 f94d 	bl	8000608 <__aeabi_dmul>
 800a36e:	a340      	add	r3, pc, #256	; (adr r3, 800a470 <__kernel_cos+0x148>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	4682      	mov	sl, r0
 800a376:	468b      	mov	fp, r1
 800a378:	4620      	mov	r0, r4
 800a37a:	4629      	mov	r1, r5
 800a37c:	f7f6 f944 	bl	8000608 <__aeabi_dmul>
 800a380:	a33d      	add	r3, pc, #244	; (adr r3, 800a478 <__kernel_cos+0x150>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 ff89 	bl	800029c <__adddf3>
 800a38a:	4622      	mov	r2, r4
 800a38c:	462b      	mov	r3, r5
 800a38e:	f7f6 f93b 	bl	8000608 <__aeabi_dmul>
 800a392:	a33b      	add	r3, pc, #236	; (adr r3, 800a480 <__kernel_cos+0x158>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f5 ff7e 	bl	8000298 <__aeabi_dsub>
 800a39c:	4622      	mov	r2, r4
 800a39e:	462b      	mov	r3, r5
 800a3a0:	f7f6 f932 	bl	8000608 <__aeabi_dmul>
 800a3a4:	a338      	add	r3, pc, #224	; (adr r3, 800a488 <__kernel_cos+0x160>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f5 ff77 	bl	800029c <__adddf3>
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	462b      	mov	r3, r5
 800a3b2:	f7f6 f929 	bl	8000608 <__aeabi_dmul>
 800a3b6:	a336      	add	r3, pc, #216	; (adr r3, 800a490 <__kernel_cos+0x168>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f5 ff6c 	bl	8000298 <__aeabi_dsub>
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	462b      	mov	r3, r5
 800a3c4:	f7f6 f920 	bl	8000608 <__aeabi_dmul>
 800a3c8:	a333      	add	r3, pc, #204	; (adr r3, 800a498 <__kernel_cos+0x170>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f5 ff65 	bl	800029c <__adddf3>
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	462b      	mov	r3, r5
 800a3d6:	f7f6 f917 	bl	8000608 <__aeabi_dmul>
 800a3da:	4622      	mov	r2, r4
 800a3dc:	462b      	mov	r3, r5
 800a3de:	f7f6 f913 	bl	8000608 <__aeabi_dmul>
 800a3e2:	ec53 2b18 	vmov	r2, r3, d8
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	f7f6 f90b 	bl	8000608 <__aeabi_dmul>
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f7f5 ff4d 	bl	8000298 <__aeabi_dsub>
 800a3fe:	4b29      	ldr	r3, [pc, #164]	; (800a4a4 <__kernel_cos+0x17c>)
 800a400:	429e      	cmp	r6, r3
 800a402:	4680      	mov	r8, r0
 800a404:	4689      	mov	r9, r1
 800a406:	dc11      	bgt.n	800a42c <__kernel_cos+0x104>
 800a408:	4602      	mov	r2, r0
 800a40a:	460b      	mov	r3, r1
 800a40c:	4650      	mov	r0, sl
 800a40e:	4659      	mov	r1, fp
 800a410:	f7f5 ff42 	bl	8000298 <__aeabi_dsub>
 800a414:	460b      	mov	r3, r1
 800a416:	4924      	ldr	r1, [pc, #144]	; (800a4a8 <__kernel_cos+0x180>)
 800a418:	4602      	mov	r2, r0
 800a41a:	2000      	movs	r0, #0
 800a41c:	f7f5 ff3c 	bl	8000298 <__aeabi_dsub>
 800a420:	ecbd 8b02 	vpop	{d8}
 800a424:	ec41 0b10 	vmov	d0, r0, r1
 800a428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42c:	4b1f      	ldr	r3, [pc, #124]	; (800a4ac <__kernel_cos+0x184>)
 800a42e:	491e      	ldr	r1, [pc, #120]	; (800a4a8 <__kernel_cos+0x180>)
 800a430:	429e      	cmp	r6, r3
 800a432:	bfcc      	ite	gt
 800a434:	4d1e      	ldrgt	r5, [pc, #120]	; (800a4b0 <__kernel_cos+0x188>)
 800a436:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a43a:	2400      	movs	r4, #0
 800a43c:	4622      	mov	r2, r4
 800a43e:	462b      	mov	r3, r5
 800a440:	2000      	movs	r0, #0
 800a442:	f7f5 ff29 	bl	8000298 <__aeabi_dsub>
 800a446:	4622      	mov	r2, r4
 800a448:	4606      	mov	r6, r0
 800a44a:	460f      	mov	r7, r1
 800a44c:	462b      	mov	r3, r5
 800a44e:	4650      	mov	r0, sl
 800a450:	4659      	mov	r1, fp
 800a452:	f7f5 ff21 	bl	8000298 <__aeabi_dsub>
 800a456:	4642      	mov	r2, r8
 800a458:	464b      	mov	r3, r9
 800a45a:	f7f5 ff1d 	bl	8000298 <__aeabi_dsub>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4630      	mov	r0, r6
 800a464:	4639      	mov	r1, r7
 800a466:	e7d9      	b.n	800a41c <__kernel_cos+0xf4>
 800a468:	2000      	movs	r0, #0
 800a46a:	490f      	ldr	r1, [pc, #60]	; (800a4a8 <__kernel_cos+0x180>)
 800a46c:	e7d8      	b.n	800a420 <__kernel_cos+0xf8>
 800a46e:	bf00      	nop
 800a470:	be8838d4 	.word	0xbe8838d4
 800a474:	bda8fae9 	.word	0xbda8fae9
 800a478:	bdb4b1c4 	.word	0xbdb4b1c4
 800a47c:	3e21ee9e 	.word	0x3e21ee9e
 800a480:	809c52ad 	.word	0x809c52ad
 800a484:	3e927e4f 	.word	0x3e927e4f
 800a488:	19cb1590 	.word	0x19cb1590
 800a48c:	3efa01a0 	.word	0x3efa01a0
 800a490:	16c15177 	.word	0x16c15177
 800a494:	3f56c16c 	.word	0x3f56c16c
 800a498:	5555554c 	.word	0x5555554c
 800a49c:	3fa55555 	.word	0x3fa55555
 800a4a0:	3fe00000 	.word	0x3fe00000
 800a4a4:	3fd33332 	.word	0x3fd33332
 800a4a8:	3ff00000 	.word	0x3ff00000
 800a4ac:	3fe90000 	.word	0x3fe90000
 800a4b0:	3fd20000 	.word	0x3fd20000
 800a4b4:	00000000 	.word	0x00000000

0800a4b8 <__kernel_rem_pio2>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	ed2d 8b02 	vpush	{d8}
 800a4c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a4c4:	1ed4      	subs	r4, r2, #3
 800a4c6:	9308      	str	r3, [sp, #32]
 800a4c8:	9101      	str	r1, [sp, #4]
 800a4ca:	4bc5      	ldr	r3, [pc, #788]	; (800a7e0 <__kernel_rem_pio2+0x328>)
 800a4cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a4ce:	9009      	str	r0, [sp, #36]	; 0x24
 800a4d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4d4:	9304      	str	r3, [sp, #16]
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	9307      	str	r3, [sp, #28]
 800a4dc:	2318      	movs	r3, #24
 800a4de:	fb94 f4f3 	sdiv	r4, r4, r3
 800a4e2:	f06f 0317 	mvn.w	r3, #23
 800a4e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a4ea:	fb04 3303 	mla	r3, r4, r3, r3
 800a4ee:	eb03 0a02 	add.w	sl, r3, r2
 800a4f2:	9b04      	ldr	r3, [sp, #16]
 800a4f4:	9a07      	ldr	r2, [sp, #28]
 800a4f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a7d0 <__kernel_rem_pio2+0x318>
 800a4fa:	eb03 0802 	add.w	r8, r3, r2
 800a4fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a500:	1aa7      	subs	r7, r4, r2
 800a502:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a506:	ae22      	add	r6, sp, #136	; 0x88
 800a508:	2500      	movs	r5, #0
 800a50a:	4545      	cmp	r5, r8
 800a50c:	dd13      	ble.n	800a536 <__kernel_rem_pio2+0x7e>
 800a50e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a7d0 <__kernel_rem_pio2+0x318>
 800a512:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a516:	2600      	movs	r6, #0
 800a518:	9b04      	ldr	r3, [sp, #16]
 800a51a:	429e      	cmp	r6, r3
 800a51c:	dc32      	bgt.n	800a584 <__kernel_rem_pio2+0xcc>
 800a51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a520:	9302      	str	r3, [sp, #8]
 800a522:	9b08      	ldr	r3, [sp, #32]
 800a524:	199d      	adds	r5, r3, r6
 800a526:	ab22      	add	r3, sp, #136	; 0x88
 800a528:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a52c:	9306      	str	r3, [sp, #24]
 800a52e:	ec59 8b18 	vmov	r8, r9, d8
 800a532:	2700      	movs	r7, #0
 800a534:	e01f      	b.n	800a576 <__kernel_rem_pio2+0xbe>
 800a536:	42ef      	cmn	r7, r5
 800a538:	d407      	bmi.n	800a54a <__kernel_rem_pio2+0x92>
 800a53a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a53e:	f7f5 fff9 	bl	8000534 <__aeabi_i2d>
 800a542:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a546:	3501      	adds	r5, #1
 800a548:	e7df      	b.n	800a50a <__kernel_rem_pio2+0x52>
 800a54a:	ec51 0b18 	vmov	r0, r1, d8
 800a54e:	e7f8      	b.n	800a542 <__kernel_rem_pio2+0x8a>
 800a550:	9906      	ldr	r1, [sp, #24]
 800a552:	9d02      	ldr	r5, [sp, #8]
 800a554:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a558:	9106      	str	r1, [sp, #24]
 800a55a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a55e:	9502      	str	r5, [sp, #8]
 800a560:	f7f6 f852 	bl	8000608 <__aeabi_dmul>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4640      	mov	r0, r8
 800a56a:	4649      	mov	r1, r9
 800a56c:	f7f5 fe96 	bl	800029c <__adddf3>
 800a570:	3701      	adds	r7, #1
 800a572:	4680      	mov	r8, r0
 800a574:	4689      	mov	r9, r1
 800a576:	9b07      	ldr	r3, [sp, #28]
 800a578:	429f      	cmp	r7, r3
 800a57a:	dde9      	ble.n	800a550 <__kernel_rem_pio2+0x98>
 800a57c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a580:	3601      	adds	r6, #1
 800a582:	e7c9      	b.n	800a518 <__kernel_rem_pio2+0x60>
 800a584:	9b04      	ldr	r3, [sp, #16]
 800a586:	aa0e      	add	r2, sp, #56	; 0x38
 800a588:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a58c:	930c      	str	r3, [sp, #48]	; 0x30
 800a58e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a590:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a594:	9c04      	ldr	r4, [sp, #16]
 800a596:	930b      	str	r3, [sp, #44]	; 0x2c
 800a598:	ab9a      	add	r3, sp, #616	; 0x268
 800a59a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a59e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a5aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a5ae:	ab9a      	add	r3, sp, #616	; 0x268
 800a5b0:	445b      	add	r3, fp
 800a5b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	1b63      	subs	r3, r4, r5
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	dc78      	bgt.n	800a6b0 <__kernel_rem_pio2+0x1f8>
 800a5be:	4650      	mov	r0, sl
 800a5c0:	ec49 8b10 	vmov	d0, r8, r9
 800a5c4:	f000 fc00 	bl	800adc8 <scalbn>
 800a5c8:	ec57 6b10 	vmov	r6, r7, d0
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a5d2:	ee10 0a10 	vmov	r0, s0
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f7f6 f816 	bl	8000608 <__aeabi_dmul>
 800a5dc:	ec41 0b10 	vmov	d0, r0, r1
 800a5e0:	f000 fb6e 	bl	800acc0 <floor>
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	ec51 0b10 	vmov	r0, r1, d0
 800a5ea:	4b7e      	ldr	r3, [pc, #504]	; (800a7e4 <__kernel_rem_pio2+0x32c>)
 800a5ec:	f7f6 f80c 	bl	8000608 <__aeabi_dmul>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f7f5 fe4e 	bl	8000298 <__aeabi_dsub>
 800a5fc:	460f      	mov	r7, r1
 800a5fe:	4606      	mov	r6, r0
 800a600:	f7f6 fab2 	bl	8000b68 <__aeabi_d2iz>
 800a604:	9006      	str	r0, [sp, #24]
 800a606:	f7f5 ff95 	bl	8000534 <__aeabi_i2d>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4630      	mov	r0, r6
 800a610:	4639      	mov	r1, r7
 800a612:	f7f5 fe41 	bl	8000298 <__aeabi_dsub>
 800a616:	f1ba 0f00 	cmp.w	sl, #0
 800a61a:	4606      	mov	r6, r0
 800a61c:	460f      	mov	r7, r1
 800a61e:	dd6c      	ble.n	800a6fa <__kernel_rem_pio2+0x242>
 800a620:	1e62      	subs	r2, r4, #1
 800a622:	ab0e      	add	r3, sp, #56	; 0x38
 800a624:	f1ca 0118 	rsb	r1, sl, #24
 800a628:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a62c:	9d06      	ldr	r5, [sp, #24]
 800a62e:	fa40 f301 	asr.w	r3, r0, r1
 800a632:	441d      	add	r5, r3
 800a634:	408b      	lsls	r3, r1
 800a636:	1ac0      	subs	r0, r0, r3
 800a638:	ab0e      	add	r3, sp, #56	; 0x38
 800a63a:	9506      	str	r5, [sp, #24]
 800a63c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a640:	f1ca 0317 	rsb	r3, sl, #23
 800a644:	fa40 f303 	asr.w	r3, r0, r3
 800a648:	9302      	str	r3, [sp, #8]
 800a64a:	9b02      	ldr	r3, [sp, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dd62      	ble.n	800a716 <__kernel_rem_pio2+0x25e>
 800a650:	9b06      	ldr	r3, [sp, #24]
 800a652:	2200      	movs	r2, #0
 800a654:	3301      	adds	r3, #1
 800a656:	9306      	str	r3, [sp, #24]
 800a658:	4615      	mov	r5, r2
 800a65a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a65e:	4294      	cmp	r4, r2
 800a660:	f300 8095 	bgt.w	800a78e <__kernel_rem_pio2+0x2d6>
 800a664:	f1ba 0f00 	cmp.w	sl, #0
 800a668:	dd07      	ble.n	800a67a <__kernel_rem_pio2+0x1c2>
 800a66a:	f1ba 0f01 	cmp.w	sl, #1
 800a66e:	f000 80a2 	beq.w	800a7b6 <__kernel_rem_pio2+0x2fe>
 800a672:	f1ba 0f02 	cmp.w	sl, #2
 800a676:	f000 80c1 	beq.w	800a7fc <__kernel_rem_pio2+0x344>
 800a67a:	9b02      	ldr	r3, [sp, #8]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d14a      	bne.n	800a716 <__kernel_rem_pio2+0x25e>
 800a680:	4632      	mov	r2, r6
 800a682:	463b      	mov	r3, r7
 800a684:	2000      	movs	r0, #0
 800a686:	4958      	ldr	r1, [pc, #352]	; (800a7e8 <__kernel_rem_pio2+0x330>)
 800a688:	f7f5 fe06 	bl	8000298 <__aeabi_dsub>
 800a68c:	4606      	mov	r6, r0
 800a68e:	460f      	mov	r7, r1
 800a690:	2d00      	cmp	r5, #0
 800a692:	d040      	beq.n	800a716 <__kernel_rem_pio2+0x25e>
 800a694:	4650      	mov	r0, sl
 800a696:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a7d8 <__kernel_rem_pio2+0x320>
 800a69a:	f000 fb95 	bl	800adc8 <scalbn>
 800a69e:	4630      	mov	r0, r6
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	ec53 2b10 	vmov	r2, r3, d0
 800a6a6:	f7f5 fdf7 	bl	8000298 <__aeabi_dsub>
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	460f      	mov	r7, r1
 800a6ae:	e032      	b.n	800a716 <__kernel_rem_pio2+0x25e>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4b4e      	ldr	r3, [pc, #312]	; (800a7ec <__kernel_rem_pio2+0x334>)
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	4649      	mov	r1, r9
 800a6b8:	f7f5 ffa6 	bl	8000608 <__aeabi_dmul>
 800a6bc:	f7f6 fa54 	bl	8000b68 <__aeabi_d2iz>
 800a6c0:	f7f5 ff38 	bl	8000534 <__aeabi_i2d>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	4b4a      	ldr	r3, [pc, #296]	; (800a7f0 <__kernel_rem_pio2+0x338>)
 800a6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6cc:	f7f5 ff9c 	bl	8000608 <__aeabi_dmul>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	4649      	mov	r1, r9
 800a6d8:	f7f5 fdde 	bl	8000298 <__aeabi_dsub>
 800a6dc:	f7f6 fa44 	bl	8000b68 <__aeabi_d2iz>
 800a6e0:	ab0e      	add	r3, sp, #56	; 0x38
 800a6e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a6e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ee:	f7f5 fdd5 	bl	800029c <__adddf3>
 800a6f2:	3501      	adds	r5, #1
 800a6f4:	4680      	mov	r8, r0
 800a6f6:	4689      	mov	r9, r1
 800a6f8:	e75e      	b.n	800a5b8 <__kernel_rem_pio2+0x100>
 800a6fa:	d105      	bne.n	800a708 <__kernel_rem_pio2+0x250>
 800a6fc:	1e63      	subs	r3, r4, #1
 800a6fe:	aa0e      	add	r2, sp, #56	; 0x38
 800a700:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a704:	15c3      	asrs	r3, r0, #23
 800a706:	e79f      	b.n	800a648 <__kernel_rem_pio2+0x190>
 800a708:	2200      	movs	r2, #0
 800a70a:	4b3a      	ldr	r3, [pc, #232]	; (800a7f4 <__kernel_rem_pio2+0x33c>)
 800a70c:	f7f6 fa02 	bl	8000b14 <__aeabi_dcmpge>
 800a710:	2800      	cmp	r0, #0
 800a712:	d139      	bne.n	800a788 <__kernel_rem_pio2+0x2d0>
 800a714:	9002      	str	r0, [sp, #8]
 800a716:	2200      	movs	r2, #0
 800a718:	2300      	movs	r3, #0
 800a71a:	4630      	mov	r0, r6
 800a71c:	4639      	mov	r1, r7
 800a71e:	f7f6 f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 800a722:	2800      	cmp	r0, #0
 800a724:	f000 80c7 	beq.w	800a8b6 <__kernel_rem_pio2+0x3fe>
 800a728:	1e65      	subs	r5, r4, #1
 800a72a:	462b      	mov	r3, r5
 800a72c:	2200      	movs	r2, #0
 800a72e:	9904      	ldr	r1, [sp, #16]
 800a730:	428b      	cmp	r3, r1
 800a732:	da6a      	bge.n	800a80a <__kernel_rem_pio2+0x352>
 800a734:	2a00      	cmp	r2, #0
 800a736:	f000 8088 	beq.w	800a84a <__kernel_rem_pio2+0x392>
 800a73a:	ab0e      	add	r3, sp, #56	; 0x38
 800a73c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a740:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 80b4 	beq.w	800a8b2 <__kernel_rem_pio2+0x3fa>
 800a74a:	4650      	mov	r0, sl
 800a74c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a7d8 <__kernel_rem_pio2+0x320>
 800a750:	f000 fb3a 	bl	800adc8 <scalbn>
 800a754:	00ec      	lsls	r4, r5, #3
 800a756:	ab72      	add	r3, sp, #456	; 0x1c8
 800a758:	191e      	adds	r6, r3, r4
 800a75a:	ec59 8b10 	vmov	r8, r9, d0
 800a75e:	f106 0a08 	add.w	sl, r6, #8
 800a762:	462f      	mov	r7, r5
 800a764:	2f00      	cmp	r7, #0
 800a766:	f280 80df 	bge.w	800a928 <__kernel_rem_pio2+0x470>
 800a76a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a7d0 <__kernel_rem_pio2+0x318>
 800a76e:	f04f 0a00 	mov.w	sl, #0
 800a772:	eba5 030a 	sub.w	r3, r5, sl
 800a776:	2b00      	cmp	r3, #0
 800a778:	f2c0 810a 	blt.w	800a990 <__kernel_rem_pio2+0x4d8>
 800a77c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a7f8 <__kernel_rem_pio2+0x340>
 800a780:	ec59 8b18 	vmov	r8, r9, d8
 800a784:	2700      	movs	r7, #0
 800a786:	e0f5      	b.n	800a974 <__kernel_rem_pio2+0x4bc>
 800a788:	2302      	movs	r3, #2
 800a78a:	9302      	str	r3, [sp, #8]
 800a78c:	e760      	b.n	800a650 <__kernel_rem_pio2+0x198>
 800a78e:	ab0e      	add	r3, sp, #56	; 0x38
 800a790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a794:	b94d      	cbnz	r5, 800a7aa <__kernel_rem_pio2+0x2f2>
 800a796:	b12b      	cbz	r3, 800a7a4 <__kernel_rem_pio2+0x2ec>
 800a798:	a80e      	add	r0, sp, #56	; 0x38
 800a79a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a79e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	3201      	adds	r2, #1
 800a7a6:	461d      	mov	r5, r3
 800a7a8:	e759      	b.n	800a65e <__kernel_rem_pio2+0x1a6>
 800a7aa:	a80e      	add	r0, sp, #56	; 0x38
 800a7ac:	1acb      	subs	r3, r1, r3
 800a7ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a7b2:	462b      	mov	r3, r5
 800a7b4:	e7f6      	b.n	800a7a4 <__kernel_rem_pio2+0x2ec>
 800a7b6:	1e62      	subs	r2, r4, #1
 800a7b8:	ab0e      	add	r3, sp, #56	; 0x38
 800a7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a7c2:	a90e      	add	r1, sp, #56	; 0x38
 800a7c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a7c8:	e757      	b.n	800a67a <__kernel_rem_pio2+0x1c2>
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w
	...
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	0800b9f8 	.word	0x0800b9f8
 800a7e4:	40200000 	.word	0x40200000
 800a7e8:	3ff00000 	.word	0x3ff00000
 800a7ec:	3e700000 	.word	0x3e700000
 800a7f0:	41700000 	.word	0x41700000
 800a7f4:	3fe00000 	.word	0x3fe00000
 800a7f8:	0800b9b8 	.word	0x0800b9b8
 800a7fc:	1e62      	subs	r2, r4, #1
 800a7fe:	ab0e      	add	r3, sp, #56	; 0x38
 800a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a804:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a808:	e7db      	b.n	800a7c2 <__kernel_rem_pio2+0x30a>
 800a80a:	a90e      	add	r1, sp, #56	; 0x38
 800a80c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a810:	3b01      	subs	r3, #1
 800a812:	430a      	orrs	r2, r1
 800a814:	e78b      	b.n	800a72e <__kernel_rem_pio2+0x276>
 800a816:	3301      	adds	r3, #1
 800a818:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a81c:	2900      	cmp	r1, #0
 800a81e:	d0fa      	beq.n	800a816 <__kernel_rem_pio2+0x35e>
 800a820:	9a08      	ldr	r2, [sp, #32]
 800a822:	4422      	add	r2, r4
 800a824:	00d2      	lsls	r2, r2, #3
 800a826:	a922      	add	r1, sp, #136	; 0x88
 800a828:	18e3      	adds	r3, r4, r3
 800a82a:	9206      	str	r2, [sp, #24]
 800a82c:	440a      	add	r2, r1
 800a82e:	9302      	str	r3, [sp, #8]
 800a830:	f10b 0108 	add.w	r1, fp, #8
 800a834:	f102 0308 	add.w	r3, r2, #8
 800a838:	1c66      	adds	r6, r4, #1
 800a83a:	910a      	str	r1, [sp, #40]	; 0x28
 800a83c:	2500      	movs	r5, #0
 800a83e:	930d      	str	r3, [sp, #52]	; 0x34
 800a840:	9b02      	ldr	r3, [sp, #8]
 800a842:	42b3      	cmp	r3, r6
 800a844:	da04      	bge.n	800a850 <__kernel_rem_pio2+0x398>
 800a846:	461c      	mov	r4, r3
 800a848:	e6a6      	b.n	800a598 <__kernel_rem_pio2+0xe0>
 800a84a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a84c:	2301      	movs	r3, #1
 800a84e:	e7e3      	b.n	800a818 <__kernel_rem_pio2+0x360>
 800a850:	9b06      	ldr	r3, [sp, #24]
 800a852:	18ef      	adds	r7, r5, r3
 800a854:	ab22      	add	r3, sp, #136	; 0x88
 800a856:	441f      	add	r7, r3
 800a858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a85a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a85e:	f7f5 fe69 	bl	8000534 <__aeabi_i2d>
 800a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a864:	461c      	mov	r4, r3
 800a866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a868:	e9c7 0100 	strd	r0, r1, [r7]
 800a86c:	eb03 0b05 	add.w	fp, r3, r5
 800a870:	2700      	movs	r7, #0
 800a872:	f04f 0800 	mov.w	r8, #0
 800a876:	f04f 0900 	mov.w	r9, #0
 800a87a:	9b07      	ldr	r3, [sp, #28]
 800a87c:	429f      	cmp	r7, r3
 800a87e:	dd08      	ble.n	800a892 <__kernel_rem_pio2+0x3da>
 800a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a882:	aa72      	add	r2, sp, #456	; 0x1c8
 800a884:	18eb      	adds	r3, r5, r3
 800a886:	4413      	add	r3, r2
 800a888:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a88c:	3601      	adds	r6, #1
 800a88e:	3508      	adds	r5, #8
 800a890:	e7d6      	b.n	800a840 <__kernel_rem_pio2+0x388>
 800a892:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a896:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a89a:	f7f5 feb5 	bl	8000608 <__aeabi_dmul>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	f7f5 fcf9 	bl	800029c <__adddf3>
 800a8aa:	3701      	adds	r7, #1
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	4689      	mov	r9, r1
 800a8b0:	e7e3      	b.n	800a87a <__kernel_rem_pio2+0x3c2>
 800a8b2:	3d01      	subs	r5, #1
 800a8b4:	e741      	b.n	800a73a <__kernel_rem_pio2+0x282>
 800a8b6:	f1ca 0000 	rsb	r0, sl, #0
 800a8ba:	ec47 6b10 	vmov	d0, r6, r7
 800a8be:	f000 fa83 	bl	800adc8 <scalbn>
 800a8c2:	ec57 6b10 	vmov	r6, r7, d0
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4b99      	ldr	r3, [pc, #612]	; (800ab30 <__kernel_rem_pio2+0x678>)
 800a8ca:	ee10 0a10 	vmov	r0, s0
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f6 f920 	bl	8000b14 <__aeabi_dcmpge>
 800a8d4:	b1f8      	cbz	r0, 800a916 <__kernel_rem_pio2+0x45e>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4b96      	ldr	r3, [pc, #600]	; (800ab34 <__kernel_rem_pio2+0x67c>)
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f5 fe93 	bl	8000608 <__aeabi_dmul>
 800a8e2:	f7f6 f941 	bl	8000b68 <__aeabi_d2iz>
 800a8e6:	4680      	mov	r8, r0
 800a8e8:	f7f5 fe24 	bl	8000534 <__aeabi_i2d>
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	4b90      	ldr	r3, [pc, #576]	; (800ab30 <__kernel_rem_pio2+0x678>)
 800a8f0:	f7f5 fe8a 	bl	8000608 <__aeabi_dmul>
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f7f5 fccc 	bl	8000298 <__aeabi_dsub>
 800a900:	f7f6 f932 	bl	8000b68 <__aeabi_d2iz>
 800a904:	1c65      	adds	r5, r4, #1
 800a906:	ab0e      	add	r3, sp, #56	; 0x38
 800a908:	f10a 0a18 	add.w	sl, sl, #24
 800a90c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a910:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a914:	e719      	b.n	800a74a <__kernel_rem_pio2+0x292>
 800a916:	4630      	mov	r0, r6
 800a918:	4639      	mov	r1, r7
 800a91a:	f7f6 f925 	bl	8000b68 <__aeabi_d2iz>
 800a91e:	ab0e      	add	r3, sp, #56	; 0x38
 800a920:	4625      	mov	r5, r4
 800a922:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a926:	e710      	b.n	800a74a <__kernel_rem_pio2+0x292>
 800a928:	ab0e      	add	r3, sp, #56	; 0x38
 800a92a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a92e:	f7f5 fe01 	bl	8000534 <__aeabi_i2d>
 800a932:	4642      	mov	r2, r8
 800a934:	464b      	mov	r3, r9
 800a936:	f7f5 fe67 	bl	8000608 <__aeabi_dmul>
 800a93a:	2200      	movs	r2, #0
 800a93c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a940:	4b7c      	ldr	r3, [pc, #496]	; (800ab34 <__kernel_rem_pio2+0x67c>)
 800a942:	4640      	mov	r0, r8
 800a944:	4649      	mov	r1, r9
 800a946:	f7f5 fe5f 	bl	8000608 <__aeabi_dmul>
 800a94a:	3f01      	subs	r7, #1
 800a94c:	4680      	mov	r8, r0
 800a94e:	4689      	mov	r9, r1
 800a950:	e708      	b.n	800a764 <__kernel_rem_pio2+0x2ac>
 800a952:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a95e:	f7f5 fe53 	bl	8000608 <__aeabi_dmul>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4640      	mov	r0, r8
 800a968:	4649      	mov	r1, r9
 800a96a:	f7f5 fc97 	bl	800029c <__adddf3>
 800a96e:	3701      	adds	r7, #1
 800a970:	4680      	mov	r8, r0
 800a972:	4689      	mov	r9, r1
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	429f      	cmp	r7, r3
 800a978:	dc01      	bgt.n	800a97e <__kernel_rem_pio2+0x4c6>
 800a97a:	45ba      	cmp	sl, r7
 800a97c:	dae9      	bge.n	800a952 <__kernel_rem_pio2+0x49a>
 800a97e:	ab4a      	add	r3, sp, #296	; 0x128
 800a980:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a984:	e9c3 8900 	strd	r8, r9, [r3]
 800a988:	f10a 0a01 	add.w	sl, sl, #1
 800a98c:	3e08      	subs	r6, #8
 800a98e:	e6f0      	b.n	800a772 <__kernel_rem_pio2+0x2ba>
 800a990:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a992:	2b03      	cmp	r3, #3
 800a994:	d85b      	bhi.n	800aa4e <__kernel_rem_pio2+0x596>
 800a996:	e8df f003 	tbb	[pc, r3]
 800a99a:	264a      	.short	0x264a
 800a99c:	0226      	.short	0x0226
 800a99e:	ab9a      	add	r3, sp, #616	; 0x268
 800a9a0:	441c      	add	r4, r3
 800a9a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a9a6:	46a2      	mov	sl, r4
 800a9a8:	46ab      	mov	fp, r5
 800a9aa:	f1bb 0f00 	cmp.w	fp, #0
 800a9ae:	dc6c      	bgt.n	800aa8a <__kernel_rem_pio2+0x5d2>
 800a9b0:	46a2      	mov	sl, r4
 800a9b2:	46ab      	mov	fp, r5
 800a9b4:	f1bb 0f01 	cmp.w	fp, #1
 800a9b8:	f300 8086 	bgt.w	800aac8 <__kernel_rem_pio2+0x610>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	2100      	movs	r1, #0
 800a9c0:	2d01      	cmp	r5, #1
 800a9c2:	f300 80a0 	bgt.w	800ab06 <__kernel_rem_pio2+0x64e>
 800a9c6:	9b02      	ldr	r3, [sp, #8]
 800a9c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a9cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 809e 	bne.w	800ab12 <__kernel_rem_pio2+0x65a>
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	e9c3 7800 	strd	r7, r8, [r3]
 800a9dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a9e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9e4:	e033      	b.n	800aa4e <__kernel_rem_pio2+0x596>
 800a9e6:	3408      	adds	r4, #8
 800a9e8:	ab4a      	add	r3, sp, #296	; 0x128
 800a9ea:	441c      	add	r4, r3
 800a9ec:	462e      	mov	r6, r5
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	2e00      	cmp	r6, #0
 800a9f4:	da3a      	bge.n	800aa6c <__kernel_rem_pio2+0x5b4>
 800a9f6:	9b02      	ldr	r3, [sp, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d03d      	beq.n	800aa78 <__kernel_rem_pio2+0x5c0>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa02:	9c01      	ldr	r4, [sp, #4]
 800aa04:	e9c4 2300 	strd	r2, r3, [r4]
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800aa10:	f7f5 fc42 	bl	8000298 <__aeabi_dsub>
 800aa14:	ae4c      	add	r6, sp, #304	; 0x130
 800aa16:	2401      	movs	r4, #1
 800aa18:	42a5      	cmp	r5, r4
 800aa1a:	da30      	bge.n	800aa7e <__kernel_rem_pio2+0x5c6>
 800aa1c:	9b02      	ldr	r3, [sp, #8]
 800aa1e:	b113      	cbz	r3, 800aa26 <__kernel_rem_pio2+0x56e>
 800aa20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa24:	4619      	mov	r1, r3
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aa2c:	e00f      	b.n	800aa4e <__kernel_rem_pio2+0x596>
 800aa2e:	ab9a      	add	r3, sp, #616	; 0x268
 800aa30:	441c      	add	r4, r3
 800aa32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aa36:	2000      	movs	r0, #0
 800aa38:	2100      	movs	r1, #0
 800aa3a:	2d00      	cmp	r5, #0
 800aa3c:	da10      	bge.n	800aa60 <__kernel_rem_pio2+0x5a8>
 800aa3e:	9b02      	ldr	r3, [sp, #8]
 800aa40:	b113      	cbz	r3, 800aa48 <__kernel_rem_pio2+0x590>
 800aa42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa46:	4619      	mov	r1, r3
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	e9c3 0100 	strd	r0, r1, [r3]
 800aa4e:	9b06      	ldr	r3, [sp, #24]
 800aa50:	f003 0007 	and.w	r0, r3, #7
 800aa54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800aa58:	ecbd 8b02 	vpop	{d8}
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa60:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa64:	f7f5 fc1a 	bl	800029c <__adddf3>
 800aa68:	3d01      	subs	r5, #1
 800aa6a:	e7e6      	b.n	800aa3a <__kernel_rem_pio2+0x582>
 800aa6c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa70:	f7f5 fc14 	bl	800029c <__adddf3>
 800aa74:	3e01      	subs	r6, #1
 800aa76:	e7bc      	b.n	800a9f2 <__kernel_rem_pio2+0x53a>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	e7c1      	b.n	800aa02 <__kernel_rem_pio2+0x54a>
 800aa7e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800aa82:	f7f5 fc0b 	bl	800029c <__adddf3>
 800aa86:	3401      	adds	r4, #1
 800aa88:	e7c6      	b.n	800aa18 <__kernel_rem_pio2+0x560>
 800aa8a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800aa8e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800aa92:	4640      	mov	r0, r8
 800aa94:	ec53 2b17 	vmov	r2, r3, d7
 800aa98:	4649      	mov	r1, r9
 800aa9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aa9e:	f7f5 fbfd 	bl	800029c <__adddf3>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	460f      	mov	r7, r1
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4649      	mov	r1, r9
 800aaae:	f7f5 fbf3 	bl	8000298 <__aeabi_dsub>
 800aab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab6:	f7f5 fbf1 	bl	800029c <__adddf3>
 800aaba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aabe:	e9ca 0100 	strd	r0, r1, [sl]
 800aac2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800aac6:	e770      	b.n	800a9aa <__kernel_rem_pio2+0x4f2>
 800aac8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800aacc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800aad0:	4630      	mov	r0, r6
 800aad2:	ec53 2b17 	vmov	r2, r3, d7
 800aad6:	4639      	mov	r1, r7
 800aad8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aadc:	f7f5 fbde 	bl	800029c <__adddf3>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4680      	mov	r8, r0
 800aae6:	4689      	mov	r9, r1
 800aae8:	4630      	mov	r0, r6
 800aaea:	4639      	mov	r1, r7
 800aaec:	f7f5 fbd4 	bl	8000298 <__aeabi_dsub>
 800aaf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf4:	f7f5 fbd2 	bl	800029c <__adddf3>
 800aaf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aafc:	e9ca 0100 	strd	r0, r1, [sl]
 800ab00:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800ab04:	e756      	b.n	800a9b4 <__kernel_rem_pio2+0x4fc>
 800ab06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab0a:	f7f5 fbc7 	bl	800029c <__adddf3>
 800ab0e:	3d01      	subs	r5, #1
 800ab10:	e756      	b.n	800a9c0 <__kernel_rem_pio2+0x508>
 800ab12:	9b01      	ldr	r3, [sp, #4]
 800ab14:	9a01      	ldr	r2, [sp, #4]
 800ab16:	601f      	str	r7, [r3, #0]
 800ab18:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ab1c:	605c      	str	r4, [r3, #4]
 800ab1e:	609d      	str	r5, [r3, #8]
 800ab20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ab24:	60d3      	str	r3, [r2, #12]
 800ab26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab2a:	6110      	str	r0, [r2, #16]
 800ab2c:	6153      	str	r3, [r2, #20]
 800ab2e:	e78e      	b.n	800aa4e <__kernel_rem_pio2+0x596>
 800ab30:	41700000 	.word	0x41700000
 800ab34:	3e700000 	.word	0x3e700000

0800ab38 <__kernel_sin>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	ec55 4b10 	vmov	r4, r5, d0
 800ab40:	b085      	sub	sp, #20
 800ab42:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab46:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab4a:	ed8d 1b00 	vstr	d1, [sp]
 800ab4e:	9002      	str	r0, [sp, #8]
 800ab50:	da06      	bge.n	800ab60 <__kernel_sin+0x28>
 800ab52:	ee10 0a10 	vmov	r0, s0
 800ab56:	4629      	mov	r1, r5
 800ab58:	f7f6 f806 	bl	8000b68 <__aeabi_d2iz>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d051      	beq.n	800ac04 <__kernel_sin+0xcc>
 800ab60:	4622      	mov	r2, r4
 800ab62:	462b      	mov	r3, r5
 800ab64:	4620      	mov	r0, r4
 800ab66:	4629      	mov	r1, r5
 800ab68:	f7f5 fd4e 	bl	8000608 <__aeabi_dmul>
 800ab6c:	4682      	mov	sl, r0
 800ab6e:	468b      	mov	fp, r1
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	f7f5 fd46 	bl	8000608 <__aeabi_dmul>
 800ab7c:	a341      	add	r3, pc, #260	; (adr r3, 800ac84 <__kernel_sin+0x14c>)
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	4680      	mov	r8, r0
 800ab84:	4689      	mov	r9, r1
 800ab86:	4650      	mov	r0, sl
 800ab88:	4659      	mov	r1, fp
 800ab8a:	f7f5 fd3d 	bl	8000608 <__aeabi_dmul>
 800ab8e:	a33f      	add	r3, pc, #252	; (adr r3, 800ac8c <__kernel_sin+0x154>)
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	f7f5 fb80 	bl	8000298 <__aeabi_dsub>
 800ab98:	4652      	mov	r2, sl
 800ab9a:	465b      	mov	r3, fp
 800ab9c:	f7f5 fd34 	bl	8000608 <__aeabi_dmul>
 800aba0:	a33c      	add	r3, pc, #240	; (adr r3, 800ac94 <__kernel_sin+0x15c>)
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	f7f5 fb79 	bl	800029c <__adddf3>
 800abaa:	4652      	mov	r2, sl
 800abac:	465b      	mov	r3, fp
 800abae:	f7f5 fd2b 	bl	8000608 <__aeabi_dmul>
 800abb2:	a33a      	add	r3, pc, #232	; (adr r3, 800ac9c <__kernel_sin+0x164>)
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f7f5 fb6e 	bl	8000298 <__aeabi_dsub>
 800abbc:	4652      	mov	r2, sl
 800abbe:	465b      	mov	r3, fp
 800abc0:	f7f5 fd22 	bl	8000608 <__aeabi_dmul>
 800abc4:	a337      	add	r3, pc, #220	; (adr r3, 800aca4 <__kernel_sin+0x16c>)
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	f7f5 fb67 	bl	800029c <__adddf3>
 800abce:	9b02      	ldr	r3, [sp, #8]
 800abd0:	4606      	mov	r6, r0
 800abd2:	460f      	mov	r7, r1
 800abd4:	b9db      	cbnz	r3, 800ac0e <__kernel_sin+0xd6>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4650      	mov	r0, sl
 800abdc:	4659      	mov	r1, fp
 800abde:	f7f5 fd13 	bl	8000608 <__aeabi_dmul>
 800abe2:	a325      	add	r3, pc, #148	; (adr r3, 800ac78 <__kernel_sin+0x140>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	f7f5 fb56 	bl	8000298 <__aeabi_dsub>
 800abec:	4642      	mov	r2, r8
 800abee:	464b      	mov	r3, r9
 800abf0:	f7f5 fd0a 	bl	8000608 <__aeabi_dmul>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	4620      	mov	r0, r4
 800abfa:	4629      	mov	r1, r5
 800abfc:	f7f5 fb4e 	bl	800029c <__adddf3>
 800ac00:	4604      	mov	r4, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	ec45 4b10 	vmov	d0, r4, r5
 800ac08:	b005      	add	sp, #20
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	2200      	movs	r2, #0
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <__kernel_sin+0x148>)
 800ac12:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac16:	f7f5 fcf7 	bl	8000608 <__aeabi_dmul>
 800ac1a:	4632      	mov	r2, r6
 800ac1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac20:	463b      	mov	r3, r7
 800ac22:	4640      	mov	r0, r8
 800ac24:	4649      	mov	r1, r9
 800ac26:	f7f5 fcef 	bl	8000608 <__aeabi_dmul>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac32:	f7f5 fb31 	bl	8000298 <__aeabi_dsub>
 800ac36:	4652      	mov	r2, sl
 800ac38:	465b      	mov	r3, fp
 800ac3a:	f7f5 fce5 	bl	8000608 <__aeabi_dmul>
 800ac3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac42:	f7f5 fb29 	bl	8000298 <__aeabi_dsub>
 800ac46:	a30c      	add	r3, pc, #48	; (adr r3, 800ac78 <__kernel_sin+0x140>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	460f      	mov	r7, r1
 800ac50:	4640      	mov	r0, r8
 800ac52:	4649      	mov	r1, r9
 800ac54:	f7f5 fcd8 	bl	8000608 <__aeabi_dmul>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	4639      	mov	r1, r7
 800ac60:	f7f5 fb1c 	bl	800029c <__adddf3>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4620      	mov	r0, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	f7f5 fb14 	bl	8000298 <__aeabi_dsub>
 800ac70:	e7c6      	b.n	800ac00 <__kernel_sin+0xc8>
 800ac72:	bf00      	nop
 800ac74:	f3af 8000 	nop.w
 800ac78:	55555549 	.word	0x55555549
 800ac7c:	3fc55555 	.word	0x3fc55555
 800ac80:	3fe00000 	.word	0x3fe00000
 800ac84:	5acfd57c 	.word	0x5acfd57c
 800ac88:	3de5d93a 	.word	0x3de5d93a
 800ac8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac90:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac94:	57b1fe7d 	.word	0x57b1fe7d
 800ac98:	3ec71de3 	.word	0x3ec71de3
 800ac9c:	19c161d5 	.word	0x19c161d5
 800aca0:	3f2a01a0 	.word	0x3f2a01a0
 800aca4:	1110f8a6 	.word	0x1110f8a6
 800aca8:	3f811111 	.word	0x3f811111

0800acac <fabs>:
 800acac:	ec51 0b10 	vmov	r0, r1, d0
 800acb0:	ee10 2a10 	vmov	r2, s0
 800acb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acb8:	ec43 2b10 	vmov	d0, r2, r3
 800acbc:	4770      	bx	lr
	...

0800acc0 <floor>:
 800acc0:	ec51 0b10 	vmov	r0, r1, d0
 800acc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800accc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800acd0:	2e13      	cmp	r6, #19
 800acd2:	460c      	mov	r4, r1
 800acd4:	ee10 5a10 	vmov	r5, s0
 800acd8:	4680      	mov	r8, r0
 800acda:	dc34      	bgt.n	800ad46 <floor+0x86>
 800acdc:	2e00      	cmp	r6, #0
 800acde:	da16      	bge.n	800ad0e <floor+0x4e>
 800ace0:	a335      	add	r3, pc, #212	; (adr r3, 800adb8 <floor+0xf8>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f7f5 fad9 	bl	800029c <__adddf3>
 800acea:	2200      	movs	r2, #0
 800acec:	2300      	movs	r3, #0
 800acee:	f7f5 ff1b 	bl	8000b28 <__aeabi_dcmpgt>
 800acf2:	b148      	cbz	r0, 800ad08 <floor+0x48>
 800acf4:	2c00      	cmp	r4, #0
 800acf6:	da59      	bge.n	800adac <floor+0xec>
 800acf8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800acfc:	4a30      	ldr	r2, [pc, #192]	; (800adc0 <floor+0x100>)
 800acfe:	432b      	orrs	r3, r5
 800ad00:	2500      	movs	r5, #0
 800ad02:	42ab      	cmp	r3, r5
 800ad04:	bf18      	it	ne
 800ad06:	4614      	movne	r4, r2
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	e025      	b.n	800ad5a <floor+0x9a>
 800ad0e:	4f2d      	ldr	r7, [pc, #180]	; (800adc4 <floor+0x104>)
 800ad10:	4137      	asrs	r7, r6
 800ad12:	ea01 0307 	and.w	r3, r1, r7
 800ad16:	4303      	orrs	r3, r0
 800ad18:	d01f      	beq.n	800ad5a <floor+0x9a>
 800ad1a:	a327      	add	r3, pc, #156	; (adr r3, 800adb8 <floor+0xf8>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f7f5 fabc 	bl	800029c <__adddf3>
 800ad24:	2200      	movs	r2, #0
 800ad26:	2300      	movs	r3, #0
 800ad28:	f7f5 fefe 	bl	8000b28 <__aeabi_dcmpgt>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d0eb      	beq.n	800ad08 <floor+0x48>
 800ad30:	2c00      	cmp	r4, #0
 800ad32:	bfbe      	ittt	lt
 800ad34:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ad38:	fa43 f606 	asrlt.w	r6, r3, r6
 800ad3c:	19a4      	addlt	r4, r4, r6
 800ad3e:	ea24 0407 	bic.w	r4, r4, r7
 800ad42:	2500      	movs	r5, #0
 800ad44:	e7e0      	b.n	800ad08 <floor+0x48>
 800ad46:	2e33      	cmp	r6, #51	; 0x33
 800ad48:	dd0b      	ble.n	800ad62 <floor+0xa2>
 800ad4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad4e:	d104      	bne.n	800ad5a <floor+0x9a>
 800ad50:	ee10 2a10 	vmov	r2, s0
 800ad54:	460b      	mov	r3, r1
 800ad56:	f7f5 faa1 	bl	800029c <__adddf3>
 800ad5a:	ec41 0b10 	vmov	d0, r0, r1
 800ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad62:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ad66:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6a:	fa23 f707 	lsr.w	r7, r3, r7
 800ad6e:	4207      	tst	r7, r0
 800ad70:	d0f3      	beq.n	800ad5a <floor+0x9a>
 800ad72:	a311      	add	r3, pc, #68	; (adr r3, 800adb8 <floor+0xf8>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f7f5 fa90 	bl	800029c <__adddf3>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f7f5 fed2 	bl	8000b28 <__aeabi_dcmpgt>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d0bf      	beq.n	800ad08 <floor+0x48>
 800ad88:	2c00      	cmp	r4, #0
 800ad8a:	da02      	bge.n	800ad92 <floor+0xd2>
 800ad8c:	2e14      	cmp	r6, #20
 800ad8e:	d103      	bne.n	800ad98 <floor+0xd8>
 800ad90:	3401      	adds	r4, #1
 800ad92:	ea25 0507 	bic.w	r5, r5, r7
 800ad96:	e7b7      	b.n	800ad08 <floor+0x48>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ad9e:	fa03 f606 	lsl.w	r6, r3, r6
 800ada2:	4435      	add	r5, r6
 800ada4:	4545      	cmp	r5, r8
 800ada6:	bf38      	it	cc
 800ada8:	18e4      	addcc	r4, r4, r3
 800adaa:	e7f2      	b.n	800ad92 <floor+0xd2>
 800adac:	2500      	movs	r5, #0
 800adae:	462c      	mov	r4, r5
 800adb0:	e7aa      	b.n	800ad08 <floor+0x48>
 800adb2:	bf00      	nop
 800adb4:	f3af 8000 	nop.w
 800adb8:	8800759c 	.word	0x8800759c
 800adbc:	7e37e43c 	.word	0x7e37e43c
 800adc0:	bff00000 	.word	0xbff00000
 800adc4:	000fffff 	.word	0x000fffff

0800adc8 <scalbn>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	ec55 4b10 	vmov	r4, r5, d0
 800adce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800add2:	4606      	mov	r6, r0
 800add4:	462b      	mov	r3, r5
 800add6:	b9aa      	cbnz	r2, 800ae04 <scalbn+0x3c>
 800add8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800addc:	4323      	orrs	r3, r4
 800adde:	d03b      	beq.n	800ae58 <scalbn+0x90>
 800ade0:	4b31      	ldr	r3, [pc, #196]	; (800aea8 <scalbn+0xe0>)
 800ade2:	4629      	mov	r1, r5
 800ade4:	2200      	movs	r2, #0
 800ade6:	ee10 0a10 	vmov	r0, s0
 800adea:	f7f5 fc0d 	bl	8000608 <__aeabi_dmul>
 800adee:	4b2f      	ldr	r3, [pc, #188]	; (800aeac <scalbn+0xe4>)
 800adf0:	429e      	cmp	r6, r3
 800adf2:	4604      	mov	r4, r0
 800adf4:	460d      	mov	r5, r1
 800adf6:	da12      	bge.n	800ae1e <scalbn+0x56>
 800adf8:	a327      	add	r3, pc, #156	; (adr r3, 800ae98 <scalbn+0xd0>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f7f5 fc03 	bl	8000608 <__aeabi_dmul>
 800ae02:	e009      	b.n	800ae18 <scalbn+0x50>
 800ae04:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ae08:	428a      	cmp	r2, r1
 800ae0a:	d10c      	bne.n	800ae26 <scalbn+0x5e>
 800ae0c:	ee10 2a10 	vmov	r2, s0
 800ae10:	4620      	mov	r0, r4
 800ae12:	4629      	mov	r1, r5
 800ae14:	f7f5 fa42 	bl	800029c <__adddf3>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	e01c      	b.n	800ae58 <scalbn+0x90>
 800ae1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae22:	460b      	mov	r3, r1
 800ae24:	3a36      	subs	r2, #54	; 0x36
 800ae26:	4432      	add	r2, r6
 800ae28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ae2c:	428a      	cmp	r2, r1
 800ae2e:	dd0b      	ble.n	800ae48 <scalbn+0x80>
 800ae30:	ec45 4b11 	vmov	d1, r4, r5
 800ae34:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800aea0 <scalbn+0xd8>
 800ae38:	f000 f83c 	bl	800aeb4 <copysign>
 800ae3c:	a318      	add	r3, pc, #96	; (adr r3, 800aea0 <scalbn+0xd8>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	ec51 0b10 	vmov	r0, r1, d0
 800ae46:	e7da      	b.n	800adfe <scalbn+0x36>
 800ae48:	2a00      	cmp	r2, #0
 800ae4a:	dd08      	ble.n	800ae5e <scalbn+0x96>
 800ae4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae58:	ec45 4b10 	vmov	d0, r4, r5
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}
 800ae5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae62:	da0d      	bge.n	800ae80 <scalbn+0xb8>
 800ae64:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae68:	429e      	cmp	r6, r3
 800ae6a:	ec45 4b11 	vmov	d1, r4, r5
 800ae6e:	dce1      	bgt.n	800ae34 <scalbn+0x6c>
 800ae70:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ae98 <scalbn+0xd0>
 800ae74:	f000 f81e 	bl	800aeb4 <copysign>
 800ae78:	a307      	add	r3, pc, #28	; (adr r3, 800ae98 <scalbn+0xd0>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	e7e0      	b.n	800ae42 <scalbn+0x7a>
 800ae80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae84:	3236      	adds	r2, #54	; 0x36
 800ae86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae8e:	4620      	mov	r0, r4
 800ae90:	4629      	mov	r1, r5
 800ae92:	2200      	movs	r2, #0
 800ae94:	4b06      	ldr	r3, [pc, #24]	; (800aeb0 <scalbn+0xe8>)
 800ae96:	e7b2      	b.n	800adfe <scalbn+0x36>
 800ae98:	c2f8f359 	.word	0xc2f8f359
 800ae9c:	01a56e1f 	.word	0x01a56e1f
 800aea0:	8800759c 	.word	0x8800759c
 800aea4:	7e37e43c 	.word	0x7e37e43c
 800aea8:	43500000 	.word	0x43500000
 800aeac:	ffff3cb0 	.word	0xffff3cb0
 800aeb0:	3c900000 	.word	0x3c900000

0800aeb4 <copysign>:
 800aeb4:	ec51 0b10 	vmov	r0, r1, d0
 800aeb8:	ee11 0a90 	vmov	r0, s3
 800aebc:	ee10 2a10 	vmov	r2, s0
 800aec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800aec8:	ea41 0300 	orr.w	r3, r1, r0
 800aecc:	ec43 2b10 	vmov	d0, r2, r3
 800aed0:	4770      	bx	lr
	...

0800aed4 <_init>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	bf00      	nop
 800aed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeda:	bc08      	pop	{r3}
 800aedc:	469e      	mov	lr, r3
 800aede:	4770      	bx	lr

0800aee0 <_fini>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	bf00      	nop
 800aee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee6:	bc08      	pop	{r3}
 800aee8:	469e      	mov	lr, r3
 800aeea:	4770      	bx	lr
